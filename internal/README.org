* package internal

#+BEGIN_SRC sh :results raw
fst=../vendor/github.com/influxdata/telegraf/internal
snd=.

(diff --unified --ignore-all-space --recursive \
 "$fst"/../agent \
 "$snd"/agent;
 diff --unified --ignore-all-space --recursive \
 "$fst" \
 "$snd") |
awk '{ if ($1 == "---" || $1 == "+++") { $_ = $1 FS $2; }; print }'
#+END_SRC

#+BEGIN_SRC diff
#+RESULTS:
Only in ../vendor/github.com/influxdata/telegraf/internal/../agent: accumulator_test.go
diff --unified --ignore-all-space --recursive ../vendor/github.com/influxdata/telegraf/internal/../agent/agent.go ./agent/agent.go
--- ../vendor/github.com/influxdata/telegraf/internal/../agent/agent.go
+++ ./agent/agent.go
@@ -9,10 +9,11 @@
 	"time"
 
 	"github.com/influxdata/telegraf"
-	"github.com/influxdata/telegraf/internal"
-	"github.com/influxdata/telegraf/internal/config"
-	"github.com/influxdata/telegraf/internal/models"
 	"github.com/influxdata/telegraf/selfstat"
+
+	"github.com/ostrost/ostent/internal"
+	"github.com/ostrost/ostent/internal/config"
+	"github.com/ostrost/ostent/internal/models"
 )
 
 // Agent runs telegraf and collects data based on the given config
@@ -45,6 +46,8 @@
 // Connect connects to all configured outputs
 func (a *Agent) Connect() error {
 	for _, o := range a.Config.Outputs {
+		o.Quiet = a.Config.Agent.Quiet
+
 		switch ot := o.Output.(type) {
 		case telegraf.ServiceOutput:
 			if err := ot.Start(); err != nil {
Only in ../vendor/github.com/influxdata/telegraf/internal/../agent: agent_test.go
Only in .: README.org
Only in .: agent
Only in ../vendor/github.com/influxdata/telegraf/internal/buffer: buffer_test.go
Only in ../vendor/github.com/influxdata/telegraf/internal/config: aws
diff --unified --ignore-all-space --recursive ../vendor/github.com/influxdata/telegraf/internal/config/config.go ./config/config.go
--- ../vendor/github.com/influxdata/telegraf/internal/config/config.go
+++ ./config/config.go
@@ -16,8 +16,6 @@
 	"time"
 
 	"github.com/influxdata/telegraf"
-	"github.com/influxdata/telegraf/internal"
-	"github.com/influxdata/telegraf/internal/models"
 	"github.com/influxdata/telegraf/plugins/aggregators"
 	"github.com/influxdata/telegraf/plugins/inputs"
 	"github.com/influxdata/telegraf/plugins/outputs"
@@ -25,11 +23,17 @@
 	"github.com/influxdata/telegraf/plugins/processors"
 	"github.com/influxdata/telegraf/plugins/serializers"
 
-	"github.com/influxdata/config"
 	"github.com/influxdata/toml"
 	"github.com/influxdata/toml/ast"
+
+	"github.com/ostrost/ostent/internal"
+	"github.com/ostrost/ostent/internal/models"
 )
 
+var config = struct {
+	UnmarshalTable func(*ast.Table, interface{}) error
+}{UnmarshalTable: toml.UnmarshalTable}
+
 var (
 	// Default input plugins
 	inputDefaults = []string{"cpu", "mem", "swap", "system", "kernel",
@@ -78,6 +82,11 @@
 }
 
 type AgentConfig struct {
+	// Bind is server bind address
+	Bind string
+	// BindPort is server bind port
+	BindPort int
+
 	// Interval at which to gather information
 	Interval internal.Duration
 
@@ -559,6 +568,12 @@
 		return fmt.Errorf("Error parsing %s, %s", path, err)
 	}
 
+	return c.LoadTable(path, tbl)
+}
+
+func (c *Config) LoadTable(path string, tbl *ast.Table) error {
+	var err error
+
 	// Parse tags tables first:
 	for _, tableName := range []string{"tags", "global_tags"} {
 		if val, ok := tbl.Fields[tableName]; ok {
@@ -690,6 +705,10 @@
 	if err != nil {
 		return nil, err
 	}
+	return ParseContents(contents)
+}
+
+func ParseContents(contents []byte) (*ast.Table, error) {
 	// ugh windows why
 	contents = trimBOM(contents)
 
@@ -768,6 +787,9 @@
 		if err != nil {
 			return err
 		}
+		if serializer == nil {
+			return fmt.Errorf("Serializer is nil")
+		}
 		t.SetSerializer(serializer)
 	}
 
Only in ../vendor/github.com/influxdata/telegraf/internal/config: config_test.go
Only in ../vendor/github.com/influxdata/telegraf/internal/config: testdata
Only in ../vendor/github.com/influxdata/telegraf/internal: errchan
Only in ../vendor/github.com/influxdata/telegraf/internal: globpath
diff --unified --ignore-all-space --recursive ../vendor/github.com/influxdata/telegraf/internal/internal.go ./internal.go
--- ../vendor/github.com/influxdata/telegraf/internal/internal.go
+++ ./internal.go
@@ -32,6 +32,11 @@
 	Duration time.Duration
 }
 
+// MarshalTOML is for toml.Marshaler interface.
+func (d Duration) MarshalTOML() ([]byte, error) {
+	return []byte(fmt.Sprintf("%q", d.Duration)), nil
+}
+
 // UnmarshalTOML parses the duration from the TOML config file
 func (d *Duration) UnmarshalTOML(b []byte) error {
 	var err error
Only in ../vendor/github.com/influxdata/telegraf/internal: internal_test.go
Only in ../vendor/github.com/influxdata/telegraf/internal: limiter
Only in ../vendor/github.com/influxdata/telegraf/internal/models: filter_test.go
Only in ../vendor/github.com/influxdata/telegraf/internal/models: running_aggregator_test.go
Only in ../vendor/github.com/influxdata/telegraf/internal/models: running_input_test.go
diff --unified --ignore-all-space --recursive ../vendor/github.com/influxdata/telegraf/internal/models/running_output.go ./models/running_output.go
--- ../vendor/github.com/influxdata/telegraf/internal/models/running_output.go
+++ ./models/running_output.go
@@ -5,9 +5,10 @@
 	"time"
 
 	"github.com/influxdata/telegraf"
-	"github.com/influxdata/telegraf/internal/buffer"
 	"github.com/influxdata/telegraf/metric"
 	"github.com/influxdata/telegraf/selfstat"
+
+	"github.com/ostrost/ostent/internal/buffer"
 )
 
 const (
@@ -23,6 +24,7 @@
 	Name              string
 	Output            telegraf.Output
 	Config            *OutputConfig
+	Quiet             bool
 	MetricBufferLimit int
 	MetricBatchSize   int
 
@@ -119,8 +121,10 @@
 // Write writes all cached points to this output.
 func (ro *RunningOutput) Write() error {
 	nFails, nMetrics := ro.failMetrics.Len(), ro.metrics.Len()
+	if !ro.Quiet {
 	log.Printf("D! Output [%s] buffer fullness: %d / %d metrics. ",
 		ro.Name, nFails+nMetrics, ro.MetricBufferLimit)
+	}
 	ro.BufferSize.Incr(int64(nFails + nMetrics))
 	var err error
 	if !ro.failMetrics.IsEmpty() {
@@ -170,8 +174,10 @@
 	err := ro.Output.Write(metrics)
 	elapsed := time.Since(start)
 	if err == nil {
+		if !ro.Quiet {
 		log.Printf("D! Output [%s] wrote batch of %d metrics in %s\n",
 			ro.Name, nMetrics, elapsed)
+		}
 		ro.MetricsWritten.Incr(int64(nMetrics))
 		ro.BufferSize.Incr(-int64(nMetrics))
 		ro.WriteTime.Incr(elapsed.Nanoseconds())
Only in ../vendor/github.com/influxdata/telegraf/internal/models: running_output_test.go
Only in ../vendor/github.com/influxdata/telegraf/internal/models: running_processor_test.go
Only in .: plugins
#+END_SRC
