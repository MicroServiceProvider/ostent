// Generated by CoffeeScript 1.9.2
(function() {
  require.config({
    shim: {
      bscollapse: {
        deps: ['jquery']
      }
    },
    baseUrl: '/js/src',
    urlArgs: "bust=" + (new Date()).getTime(),
    paths: {
      domReady: 'vendor/requirejs-domready/2.0.1/domReady',
      jquery: 'vendor/jquery/2.1.4/jquery.min',
      bscollapse: 'vendor/bootstrap/3.3.5-collapse/bootstrap.min',
      react: 'vendor/react/0.13.3/react.min',
      jsdefines: 'lib/jsdefines'
    }
  });

  require(['jquery', 'react', 'jsdefines', 'domReady', 'bscollapse'], function($, React, jsdefines) {
    var HandlerMixin, neweventsource, newwebsocket, update, updates;
    updates = void 0;
    neweventsource = function(onmessage) {
      var conn, init, sendSearch;
      conn = null;
      sendSearch = function(search) {
        console.log('SEARCH', search);
        conn.close();
        return window.setTimeout(init, 1000);
      };
      init = function() {
        var again, statesel;
        conn = new EventSource('/index.sse' + location.search);
        conn.onopen = function() {
          $(window).bind('popstate', (function() {
            sendSearch(location.search);
          }));
        };
        statesel = 'table thead tr .header a.state';
        again = function(e) {
          $(statesel).unbind('click');
          if (!e.wasClean) {
            window.setTimeout(init, 5000);
          }
        };
        conn.onclose = function() {
          return console.log('sse closed (should recover)');
        };
        conn.onerror = function() {
          return console.log('sse errord (should recover)');
        };
        conn.onmessage = onmessage;
        $(statesel).click(function() {
          history.pushState({
            path: this.path
          }, '', this.href);
          sendSearch(this.search);
          return false;
        });
      };
      init();
      return {
        sendSearch: sendSearch,
        close: function() {
          return conn.close();
        }
      };
    };
    newwebsocket = function(onmessage) {
      var conn, init, sendSearch;
      conn = null;
      sendSearch = function(search) {
        console.log('Search', search);
        if ((conn == null) || conn.readyState === conn.CLOSING || conn.readyState === conn.CLOSED) {
          init();
        }
        if ((conn == null) || conn.readyState !== conn.OPEN) {
          console.log('Not connected, cannot send search', search);
          return;
        }
        return conn.send(JSON.stringify({
          Search: search
        }));
      };
      init = function() {
        var again, hostport, statesel;
        hostport = window.location.hostname + (location.port ? ':' + location.port : '');
        conn = new WebSocket('ws://' + hostport + '/index.ws');
        conn.onopen = function() {
          sendSearch(location.search);
          $(window).bind('popstate', (function() {
            sendSearch(location.search);
          }));
        };
        statesel = 'table thead tr .header a.state';
        again = function(e) {
          $(statesel).unbind('click');
          if (!e.wasClean) {
            window.setTimeout(init, 5000);
          }
        };
        conn.onclose = again;
        conn.onerror = again;
        conn.onmessage = onmessage;
        $(statesel).click(function() {
          history.pushState({
            path: this.path
          }, '', this.href);
          sendSearch(this.search);
          return false;
        });
      };
      init();
      return {
        sendSearch: sendSearch,
        close: function() {
          return conn.close();
        }
      };
    };
    HandlerMixin = {
      handleChange: function(e) {
        return this.handle(e, false, '?' + e.target.name + '=' + e.target.value + '&' + location.search.substr(1));
      },
      handleClick: function(e) {
        var href;
        href = e.target.getAttribute('href');
        if (href == null) {
          href = $(e.target).parent().get(0).getAttribute('href');
        }
        return this.handle(e, true, href);
      },
      handle: function(e, ps, href) {
        if (ps) {
          history.pushState({}, '', href);
        }
        updates.sendSearch(href);
        e.stopPropagation();
        e.preventDefault();
        return void 0;
      }
    };
    this.IFClass = React.createClass({
      mixins: [HandlerMixin],
      getInitialState: function() {
        return {
          Params: Data.Params,
          IF: Data.IF
        };
      },
      render: function() {
        var $if, Data;
        Data = this.state;
        return jsdefines.panelif.bind(this)(Data, (function() {
          var i, len, ref, ref1, ref2, results;
          ref2 = (ref = Data != null ? (ref1 = Data.IF) != null ? ref1.List : void 0 : void 0) != null ? ref : [];
          results = [];
          for (i = 0, len = ref2.length; i < len; i++) {
            $if = ref2[i];
            results.push(jsdefines.if_rows(Data, $if));
          }
          return results;
        })());
      }
    });
    this.DFClass = React.createClass({
      mixins: [HandlerMixin],
      getInitialState: function() {
        return {
          Params: Data.Params,
          DFbytes: Data.DFbytes,
          DFinodes: Data.DFinodes
        };
      },
      render: function() {
        var $disk, Data;
        Data = this.state;
        return jsdefines.paneldf.bind(this)(Data, (function() {
          var i, len, ref, ref1, ref2, results;
          ref2 = (ref = Data != null ? (ref1 = Data.DFinodes) != null ? ref1.List : void 0 : void 0) != null ? ref : [];
          results = [];
          for (i = 0, len = ref2.length; i < len; i++) {
            $disk = ref2[i];
            results.push(jsdefines.dfinodes_rows(Data, $disk));
          }
          return results;
        })(), (function() {
          var i, len, ref, ref1, ref2, results;
          ref2 = (ref = Data != null ? (ref1 = Data.DFbytes) != null ? ref1.List : void 0 : void 0) != null ? ref : [];
          results = [];
          for (i = 0, len = ref2.length; i < len; i++) {
            $disk = ref2[i];
            results.push(jsdefines.dfbytes_rows(Data, $disk));
          }
          return results;
        })());
      }
    });
    this.MEMClass = React.createClass({
      mixins: [HandlerMixin],
      getInitialState: function() {
        return {
          Params: Data.Params,
          MEM: Data.MEM
        };
      },
      render: function() {
        var $mem, Data;
        Data = this.state;
        return jsdefines.panelmem.bind(this)(Data, (function() {
          var i, len, ref, ref1, ref2, results;
          ref2 = (ref = Data != null ? (ref1 = Data.MEM) != null ? ref1.List : void 0 : void 0) != null ? ref : [];
          results = [];
          for (i = 0, len = ref2.length; i < len; i++) {
            $mem = ref2[i];
            results.push(jsdefines.mem_rows(Data, $mem));
          }
          return results;
        })());
      }
    });
    this.CPUClass = React.createClass({
      mixins: [HandlerMixin],
      getInitialState: function() {
        return {
          Params: Data.Params,
          CPU: Data.CPU
        };
      },
      render: function() {
        var $core, Data;
        Data = this.state;
        return jsdefines.panelcpu.bind(this)(Data, (function() {
          var i, len, ref, ref1, ref2, results;
          ref2 = (ref = Data != null ? (ref1 = Data.CPU) != null ? ref1.List : void 0 : void 0) != null ? ref : [];
          results = [];
          for (i = 0, len = ref2.length; i < len; i++) {
            $core = ref2[i];
            results.push(jsdefines.cpu_rows(Data, $core));
          }
          return results;
        })());
      }
    });
    this.PSClass = React.createClass({
      mixins: [HandlerMixin],
      getInitialState: function() {
        return {
          Params: Data.Params,
          PS: Data.PS
        };
      },
      render: function() {
        var $proc, Data;
        Data = this.state;
        return jsdefines.panelps.bind(this)(Data, (function() {
          var i, len, ref, ref1, ref2, results;
          ref2 = (ref = Data != null ? (ref1 = Data.PS) != null ? ref1.List : void 0 : void 0) != null ? ref : [];
          results = [];
          for (i = 0, len = ref2.length; i < len; i++) {
            $proc = ref2[i];
            results.push(jsdefines.ps_rows(Data, $proc));
          }
          return results;
        })());
      }
    });
    this.VGClass = React.createClass({
      mixins: [HandlerMixin],
      getInitialState: function() {
        return {
          Params: Data.Params,
          VagrantMachines: Data.VagrantMachines,
          VagrantError: Data.VagrantError,
          VagrantErrord: Data.VagrantErrord
        };
      },
      render: function() {
        var $mach, Data, rows;
        Data = this.state;
        if (((Data != null ? Data.VagrantErrord : void 0) != null) && Data.VagrantErrord) {
          rows = [jsdefines.vagrant_error.bind(this)(Data)];
        } else {
          rows = (function() {
            var i, len, ref, ref1, ref2, results;
            ref2 = (ref = Data != null ? (ref1 = Data.VagrantMachines) != null ? ref1.List : void 0 : void 0) != null ? ref : [];
            results = [];
            for (i = 0, len = ref2.length; i < len; i++) {
              $mach = ref2[i];
              results.push(jsdefines.vagrant_rows.bind(this)(Data, $mach));
            }
            return results;
          }).call(this);
        }
        return jsdefines.panelvg.bind(this)(Data, rows);
      }
    });
    this.TextClass = function(reduce) {
      return React.createClass({
        Reduce: function(data) {
          var v;
          v = reduce(data);
          if (v != null) {
            return {
              Text: v
            };
          }
        },
        getInitialState: function() {
          return this.Reduce(Data);
        },
        render: function() {
          return React.DOM.span(null, this.state.Text);
        }
      });
    };
    this.setState = function(obj, data) {
      var key;
      if (data != null) {
        for (key in data) {
          if (data[key] == null) {
            delete data[key];
          }
        }
        return obj.setState(data);
      }
    };
    update = function() {
      var CPU, DF, HN, IF, IP, LA, MEM, PS, UP, VG, onmessage, render;
      render = function(id, cl) {
        return React.render(React.createElement(cl), document.getElementById(id));
      };
      if ((typeof data !== "undefined" && data !== null ? data.IP : void 0) != null) {
        IP = render('ip', TextClass(function(data) {
          return data != null ? data.IP : void 0;
        }));
      }
      HN = render('hn', TextClass(function(data) {
        return data != null ? data.HN : void 0;
      }));
      UP = render('up', TextClass(function(data) {
        return data != null ? data.UP : void 0;
      }));
      LA = render('la', TextClass(function(data) {
        return data != null ? data.LA : void 0;
      }));
      MEM = render('mem', MEMClass);
      PS = render('ps', PSClass);
      DF = render('df', DFClass);
      CPU = render('cpu', CPUClass);
      IF = render('if', IFClass);
      VG = render('vg', VGClass);
      onmessage = function(event) {
        var data;
        data = JSON.parse(event.data);
        if (data == null) {
          return;
        }
        if ((data.Reload != null) && data.Reload) {
          window.setTimeout((function() {
            return location.reload(true);
          }), 5000);
          window.setTimeout(updates.close, 2000);
          console.log('in 5s: location.reload(true)');
          console.log('in 2s: updates.close()');
          return;
        }
        if (data.Error != null) {
          console.log('Error', data.Error);
          return;
        }
        if (IP != null) {
          setState(IP, IP.Reduce(data));
        }
        setState(HN, HN.Reduce(data));
        setState(UP, UP.Reduce(data));
        setState(LA, LA.Reduce(data));
        setState(PS, {
          Params: data.Params,
          PS: data.PS
        });
        setState(MEM, {
          Params: data.Params,
          MEM: data.MEM
        });
        setState(CPU, {
          Params: data.Params,
          CPU: data.CPU
        });
        setState(IF, {
          Params: data.Params,
          IF: data.IF
        });
        setState(DF, {
          Params: data.Params,
          DFbytes: data.DFbytes,
          DFinodes: data.DFinodes
        });
        setState(VG, {
          Params: data.Params,
          VagrantMachines: data.VagrantMachines,
          VagrantError: data.VagrantError,
          VagrantErrord: data.VagrantErrord
        });
        if (data.Location != null) {
          history.pushState({}, '', data.Location);
        }
      };
      updates = newwebsocket(onmessage);
    };
    return require(['domReady', 'jquery'], function(domReady, $) {
      return domReady(function() {
        var param;
        if (!((function() {
          var i, len, ref, results;
          ref = location.search.substr(1).split('&');
          results = [];
          for (i = 0, len = ref.length; i < len; i++) {
            param = ref[i];
            if (param.split('=')[0] === 'still') {
              results.push(42);
            }
          }
          return results;
        })()).length) {
          return update();
        }
      });
    });
  });

}).call(this);
