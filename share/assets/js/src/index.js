// Generated by CoffeeScript 1.9.2
(function() {
  require.config({
    shim: {
      bscollapse: {
        deps: ['jquery']
      },
      reactDOM: {
        deps: ['react']
      }
    },
    urlArgs: "bust=" + (new Date()).getTime(),
    paths: {
      domReady: 'vendor/requirejs-domready/2.0.1/domReady',
      jquery: 'vendor/jquery/2.1.4/jquery.min',
      bscollapse: 'vendor/bootstrap/3.3.5-collapse/bootstrap.min',
      react: 'vendor/react/0.14.0/react-with-addons.min',
      reactDOM: 'vendor/react/0.14.0/react-dom.min',
      jsdefines: 'lib/jsdefines'
    }
  });

  require(['jquery', 'react', 'reactDOM', 'jsdefines', 'domReady', 'bscollapse'], function($, React, ReactDOM, jsdefines) {
    var neweventsource, newwebsocket, update;
    neweventsource = function(onmessage) {
      var conn, init, sendSearch;
      conn = null;
      sendSearch = function(search) {
        console.log('SEARCH', search);
        conn.close();
        return window.setTimeout(init, 1000);
      };
      init = function() {
        var again;
        conn = new EventSource('/index.sse' + location.search);
        conn.onopen = function() {
          $(window).bind('popstate', (function() {
            sendSearch(location.search);
          }));
        };
        again = function(e) {
          if (!e.wasClean) {
            window.setTimeout(init, 5000);
          }
        };
        conn.onclose = function() {
          return console.log('sse closed (should recover)');
        };
        conn.onerror = function() {
          return console.log('sse errord (should recover)');
        };
        conn.onmessage = onmessage;
      };
      init();
      return {
        sendSearch: sendSearch,
        close: function() {
          return conn.close();
        }
      };
    };
    newwebsocket = function(onmessage) {
      var conn, init, sendSearch;
      conn = null;
      sendSearch = function(search) {
        console.log('Search', search);
        if ((conn == null) || conn.readyState === conn.CLOSING || conn.readyState === conn.CLOSED) {
          init();
        }
        if ((conn == null) || conn.readyState !== conn.OPEN) {
          console.log('Not connected, cannot send search', search);
          return;
        }
        return conn.send(JSON.stringify({
          Search: search
        }));
      };
      init = function() {
        var again, hostport;
        hostport = window.location.hostname + (location.port ? ':' + location.port : '');
        conn = new WebSocket('ws://' + hostport + '/index.ws');
        conn.onopen = function() {
          sendSearch(location.search);
          $(window).bind('popstate', (function() {
            sendSearch(location.search);
          }));
        };
        again = function(e) {
          if (!e.wasClean) {
            window.setTimeout(init, 5000);
          }
        };
        conn.onclose = again;
        conn.onerror = again;
        conn.onmessage = onmessage;
      };
      init();
      return {
        sendSearch: sendSearch,
        close: function() {
          return conn.close();
        }
      };
    };
    this.TextClass = function(reduce) {
      return React.createClass({
        Reduce: function(data) {
          var v;
          v = reduce(data);
          if (v != null) {
            return {
              Text: v
            };
          }
        },
        getInitialState: function() {
          return this.Reduce(Data);
        },
        render: function() {
          return React.DOM.span(null, this.state.Text);
        }
      });
    };
    this.setState = function(obj, data) {
      var key;
      if (data != null) {
        for (key in data) {
          if (data[key] == null) {
            delete data[key];
          }
        }
        return obj.setState(data);
      }
    };
    update = function() {
      var CPU, DF, HN, IF, LA, MEM, PS, UP, onmessage, render;
      render = function(id, cl) {
        return ReactDOM.render(React.createElement(cl), document.getElementById(id));
      };
      HN = render('hn', TextClass(function(data) {
        return data != null ? data.HN : void 0;
      }));
      UP = render('up', TextClass(function(data) {
        return data != null ? data.UP : void 0;
      }));
      LA = render('la', TextClass(function(data) {
        return data != null ? data.LA : void 0;
      }));
      MEM = render('mem', jsdefines.define_panelmem);
      PS = render('ps', jsdefines.define_panelps);
      DF = render('df', jsdefines.define_paneldf);
      CPU = render('cpu', jsdefines.define_panelcpu);
      IF = render('if', jsdefines.define_panelif);
      onmessage = function(event) {
        var data;
        data = JSON.parse(event.data);
        if (data == null) {
          return;
        }
        if ((data.Reload != null) && data.Reload) {
          window.setTimeout((function() {
            return location.reload(true);
          }), 5000);
          window.setTimeout(window.updates.close, 2000);
          console.log('in 5s: location.reload(true)');
          console.log('in 2s: window.updates.close()');
          return;
        }
        if (data.Error != null) {
          console.log('Error', data.Error);
          return;
        }
        setState(HN, HN.Reduce(data));
        setState(UP, UP.Reduce(data));
        setState(LA, LA.Reduce(data));
        setState(PS, PS.Reduce(data));
        setState(MEM, MEM.Reduce(data));
        setState(CPU, CPU.Reduce(data));
        setState(IF, IF.Reduce(data));
        setState(DF, DF.Reduce(data));
        if (data.Location != null) {
          history.pushState({}, '', data.Location);
        }
      };
      window.updates = newwebsocket(onmessage);
    };
    return require(['domReady', 'jquery'], function(domReady, $) {
      return domReady(function() {
        var param;
        if (!((function() {
          var i, len, ref, results;
          ref = location.search.substr(1).split('&');
          results = [];
          for (i = 0, len = ref.length; i < len; i++) {
            param = ref[i];
            if (param.split('=')[0] === 'still') {
              results.push(42);
            }
          }
          return results;
        })()).length) {
          return update();
        }
      });
    });
  });

}).call(this);
