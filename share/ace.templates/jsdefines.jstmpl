let $          = require('jquery'),
    React      = require('react'),
    ReactPRM   = require('react-prm'),
    SparkLines = require('react-sparklines');
let ReactPureRenderMixin = ReactPRM,
    Sparklines      = SparkLines.Sparklines,
    SparklinesLine  = SparkLines.SparklinesLine,
    SparklinesSpots = SparkLines.SparklinesSpots;

var sparklines = React.createClass({
  getInitialState: function() {return {data:[]};},
  render: function() {
    // margin={0}
    // ref={this.props.ref}
    return <Sparklines
               data={this.state.data}
               limit={20}
               height={24}
               width={240}
      >
        <SparklinesLine />
        <SparklinesSpots spotColors={ {'-1': 'green', '1': 'red'} } />
      </Sparklines>;
  }
});

function sl(i) { return React.createElement(sparklines, {ref: i}); }

let jsdefines = {};
jsdefines.StateHandlingMixin = { // requires .Reduce method
  getInitialState: function() {
    return this.StateFrom(Data); // global Data
  },
  NewState: function(data) {
    let state = this.StateFrom(data);
    if (state != null) {
      this.setState(state);
    }
    if (this.props.SparkSubkey == null || this.List == null) {
      return;
    }
    var rkeys = Object.keys(this.refs);
    if (rkeys.length == 0) {
      return;
    }
    var list = this.List(state);
    rkeys.forEach(function(rk) {
      var ref = this.refs[rk];
      if (ref == undefined) {
        return;
      }
      var newValue = +list[+rk][this.props.SparkSubkey];
      var rstate = {};
      if (ref.state != null) {
        rstate.data = ref.state.data.slice(); // NB
      }
      if (rstate.data == null) {
        rstate.data = [];
      }
      rstate.data.push(newValue);
      rstate.data = rstate.data.slice(-60); // last 60 values
      this.refs[rk].setState(rstate);
    }, this);
  },
  StateFrom: function(data) {
    let state = this.Reduce(data);
    if (state != null) {
      for (let key in state) {
        if (state[key] == null) {
          delete state[key];
        }
      }
    }
    return state;
  }
};
jsdefines.HandlerMixin = {
  handleClick: function(e) {
    let href = e.target.getAttribute('href');
    if (href == null) {
      href = $(e.target).parent().get(0).getAttribute('href');
    }
    history.pushState({}, '', href);
    window.updates.sendSearch(href);
    e.stopPropagation();
    e.preventDefault();
    return void 0;
  }
};

// transformed from define_* templates:
{{range $d := .Defines}}{{$q := printf "%q" $d.Iterable}}
jsdefines.{{$d.ShortName}} = React.createClass({
  mixins: [ReactPureRenderMixin, jsdefines.StateHandlingMixin, jsdefines.HandlerMixin],
  {{if .NeedList}}{{/*
*/}}List: function(data) {
    let list;
    if (data == null || data[{{$q}}] == null || (list = data[{{$q}}].List) == null) {
      return [];
    }
    return list;
  },
  {{end}}{{/*
*/}}Reduce: function(data) {
    return {
      {{if .UsesParams}}params: data.params,
      {{end}}{{/*
*/}}{{$d.Iterable}}: data.{{$d.Iterable}}
    };
  },
  render: function() {
    let Data = this.state; // shadow global Data
    return {{$d.JSX}};
  }
});
{{end}}

module.exports = jsdefines;

// Local variables:
// js-indent-level: 2
// js2-basic-offset: 2
// End:
