[[define "startpanel"]]
[[$N := (index . 0)]]
[[$D := (index . 1)]]
[[$t := (index . 2)]]
  | <div><div {{ClassPositive [[$N]] "hide-showhide" "show-showhide"}}>
  div.grid-block.align-justify
    h1.h3.margin-bottom-0
      | <a {{class}}="inherit-color" {{HrefT $p [[$N]]}}
      |   >[[$t]]<span {{class}}="showhide-hide">...</span></a>
    div.showhide-show.hx-bottom.align-self-flex-end.expand
      ul.menu.float-right
        li
          div.input-group.margin-bottom-0
            div.input-group-label.small.text-nowrap delay: {{[[$D]]}}
            div.input-group-button
              {{template "defines::alink_badgeleft"  LessD $p [[$D]] "button small text-nowrap"}}
            div.input-group-button
              {{template "defines::alink_badgeright" MoreD $p [[$D]] "button small text-nowrap"}}
        li
          div.input-group.margin-bottom-0
            div.input-group-label.small.text-nowrap rows: {{[[$N]].Absolute}}
            div.input-group-button
              {{template "defines::alink_badgeleft"  LessN $p [[$N]] "button small success text-nowrap"}}
            div.input-group-button
              {{template "defines::alink_badgeright" MoreN $p [[$N]] "button small success text-nowrap"}}
  | </div>
[[end]]

= content alink_badgeleft
  | <a href={{.Href}} {{class}}={{.Class}} onClick={this.handleClick}
  |   >{{.Badge}} {{.Text}}</a>
= content alink_badgeright
  | <a href={{.Href}} {{class}}={{.Class}} onClick={this.handleClick}
  |   >{{.Text}} {{.Badge}}</a>

= content avlink
  | <a href={{.LinkHref}} {{class}}={{.LinkClass}} onClick={this.handleClick}
  |   >{{.LinkText}}<span {{class}}={{.CaretClass}}></span></a>

= content define_hostname
  | <a href="/" {{class}}="inherit-color"
  |   {{TitlePrefixed "hostname " .Data.hostname}}>{{.Data.hostname}}</a>

{{define "defines::define_loadavg"}}<span>{{.Data.loadavg}}</span>{{end}}
{{define "defines::define_uptime"}}<span>{{.Data.uptime}}</span>{{end}}

= content define_panelmem
  {{$p := .Data.params}}
  [[template "startpanel" Chain `$p.Memn` `$p.Memd` "Memory"]]
  | <div {{ClassNonZero $p.Memn "stripe" "hide"}}>
  div.grid-block.thead
    span.col.small-1
    div.grid-block.wrap.noscroll
      span.col.small-1.text-right  Total
      span.col.small-1.text-right  Used
      span.col.small-1.text-right  Free
      span.col.small-1.text-right  Use%
      span.col
  {{if .Data.memory}}
    {{range $mem := .Data.memory.List}}
      {{jsx  `{this.List(Data).map(function($mem, i) { return`}}
      div.grid-block
        / first col could be .shrink but it would skew the grid
        span.col.small-1 {{$mem.Kind}}
        | <div {{Key "mem-rowby-kind" $mem.Kind}} {{class}}="grid-block wrap noscroll">
        span.col.small-1.text-right  {{$mem.Total}}
        span.col.small-1.text-right  {{$mem.Used}}
        span.col.small-1.text-right  {{$mem.Free}}
        span.small-1.text-right
          | <span {{class}}="col display-block bg-usepct" data-usepct={{$mem.UsePct}}> {{$mem.UsePct}}%</span>
        span.col.sparkline.expand
          {{jsx `{jsdefines.Sparkline({ref: i, col: 'UsePct', height: 35})}`}}
        | </div>
      {{jsx `})}`}}
    {{end}}
  {{end}}
  | </div></div>

= content define_paneldf
  {{$p := .Data.params}}
  [[template "startpanel" Chain `$p.Dfn` `$p.Dfd` "Disk usage"]]
  | <div {{ClassNonZero $p.Dfn "stripe" "hide"}}>
  div.grid-block.thead
    span.col.small-1.............. {{template "defines::avlink" Vlink $p $p.Dfk 1 "Device" }}{{/* FS     */}}
    div.grid-block.wrap.noscroll
      span.col.small-1...........  {{template "defines::avlink" Vlink $p $p.Dfk 2 "Mounted"}}{{/* MP     */}}
      span.col.small-1.text-right  {{template "defines::avlink" Vlink $p $p.Dfk 6 "Total"  }}{{/* TOTAL  */}}
      span.col.small-1.text-right  {{template "defines::avlink" Vlink $p $p.Dfk 5 "Used"   }}{{/* USED   */}}
      span.col.small-1.text-right  {{template "defines::avlink" Vlink $p $p.Dfk 3 "Avail"  }}{{/* AVAIL  */}}
      span.col.small-1.text-right  {{template "defines::avlink" Vlink $p $p.Dfk 4 "Use%"   }}{{/* USEPCT */}}
      span.col
  {{if .Data.diskUsage}}
    {{range $df := .Data.diskUsage.List}}
      {{jsx `{this.List(Data).map(function($df, i) { return`}}
      div.grid-block
        / first col could be .shrink but it would skew the grid
        span.col.small-1.text-overflow {{$df.DevName}}
        | <div {{Key "df-rowby-dirname" $df.DirName}} {{class}}="grid-block wrap noscroll">
        span.col.small-1.text-overflow  {{$df.DirName}}
        span.col.small-1.text-nowrap.text-right
          span.mutext title="Inodes total"  {{$df.Inodes}}
          |  {{$df.Total}}
        span.col.small-1.text-nowrap.text-right
          span.mutext title="Inodes used"  {{$df.Iused}}
          |  {{$df.Used}}
        span.col.small-1.text-nowrap.text-right
          span.mutext title="Inodes free"  {{$df.Ifree}}
          |  {{$df.Avail}}
        span.small-1.text-right.text-nowrap
          | <span {{class}}="col display-block bg-usepct" data-usepct={{$df.UsePct}}>
          span.mutext title="Inodes use%"  {{$df.IusePct}}%
          |  {{$df.UsePct}}%</span>
        span.col.sparkline.expand
          {{jsx `{jsdefines.Sparkline({ref: i, col: 'UsePct', height: 35})}`}}
        | </div>
      {{jsx `})}`}}
    {{end}}
  {{end}}
  | </div></div>

= content define_panelcpu
  {{$p := .Data.params}}
  [[template "startpanel" Chain `$p.CPUn` `$p.CPUd` "CPU"]]
  | <div {{ClassNonZero $p.CPUn "stripe" "hide"}}>
  div.grid-block.thead
    span.col.small-1
    div.grid-block.wrap.noscroll
      span.col.small-1.text-right  User%
      span.col.small-1.text-right  Sys%
      span.col.small-1.text-right  Wait%
      span.col.small-1.text-right  Idle%
      span.col.small-1.text-right
  {{if .Data.cpu}}
    {{range $cpu := .Data.cpu.List}}
      {{jsx  `{this.List(Data).map(function($cpu, i) { return`}}
      div.grid-block
        / first col could be .shrink but it would skew the grid
        span.col.small-1.text-right.text-nowrap {{$cpu.N}}
        | <div {{Key "cpu-rowby-N" $cpu.N}} {{class}}="grid-block wrap noscroll">
        span.small-1.text-right
          | <span {{class}}="col display-block bg-usepct"
            data-usepct={{$cpu.UserPct}}> {{$cpu.UserPct}}%</span>
        span.small-1.text-right
          | <span {{class}}="col display-block bg-usepct"
            data-usepct={{$cpu.SysPct}}> {{$cpu.SysPct}}%</span>
        span.small-1.text-right
          | <span {{class}}="col display-block bg-usepct"
            data-usepct={{$cpu.WaitPct}}> {{$cpu.WaitPct}}%</span>
        span.small-1.text-right
          | <span {{class}}="col display-block bg-usepct-inverse"
            data-usepct={{$cpu.IdlePct}}> {{$cpu.IdlePct}}%</span>
        span.col.sparkline.expand
          {{jsx `{jsdefines.Sparkline({ref: i, col: 'IdlePct', height: 35, defaultSpots: true})}`}}
        | </div>
      {{jsx `})}`}}
    {{end}}
  {{end}}
  | </div></div>

= content define_panelif
  {{$p := .Data.params}}
  [[template "startpanel" Chain `$p.Ifn` `$p.Ifd` "Interfaces"]]
  | <div {{ClassNonZero $p.Ifn "stripe" "hide"}}>
  div.grid-block.thead
    span.col.small-1 Interface
    div.grid-block.wrap.noscroll
      span.col.small-1.text-right  IP
      span.col.small-2.text-right.text-nowrap title="Bits In/Out per second"
        |  IO 
        i b
        | ps
      span.col.small-2.text-right.text-nowrap title="Packets In/Out per second"  Packets IO ps
      span.col.small-2.text-right.text-nowrap title="Drops,Errors In/Out per second"  Loss IO ps

  {{if .Data.ifaddrs}}
    {{range $if := .Data.ifaddrs.List}}
      {{jsx `{this.List(Data).map(function($if) { return`}}
      div.grid-block
        / first col could be .shrink but it would skew the grid
        span.col.small-1.text-overflow {{$if.Name}}
        | <div {{Key "if-rowby-name" $if.Name}} {{class}}="grid-block wrap noscroll">
        span.col.small-1.text-right.text-overflow {{$if.IP}}
        span.col.small-2.text-right.text-nowrap
          |  
          span.mutext
            span title="Total BYTES In modulo 4G" {{$if.BytesIn}}
            | /
            span title="Total BYTES Out modulo 4G" {{$if.BytesOut}}
          |  
          span title="BITS In per second" {{$if.DeltaBitsIn}}
          | /
          span title="BITS Out per second" {{$if.DeltaBitsOut}}
        span.col.small-2.text-right.text-nowrap
          |  
          span.mutext
            span title="Total packets In modulo 4G" {{$if.PacketsIn}}
            | /
            span title="Total packets Out modulo 4G" {{$if.PacketsOut}}
          |  
          span title="Packets In per second" {{$if.DeltaPacketsIn}}
          | /
          span title="Packets Out per second" {{$if.DeltaPacketsOut}}
        span.col.small-2.text-right.text-nowrap
          |  
          span.mutext title="Total drops,errors modulo 4G"
            span title="Total drops In modulo 4G" {{$if.DropsIn}}
            | <span {{ClassNonNil $if.DropsOut "" "hide"}}>/</span>
            | <span {{ClassNonNil $if.DropsOut "" "hide"}} title="Total drops Out modulo 4G">{{$if.DropsOut}}</span>
            | ,
            span title="Total errors In modulo 4G" {{$if.ErrorsIn}}
            | /
            span title="Total errors Out modulo 4G" {{$if.ErrorsOut}}
          |  
          | <span {{ClassAllZero $if.DeltaDropsIn $if.DeltaDropsOut $if.DeltaErrorsIn $if.DeltaErrorsOut "mutext"}}>
          span title="Drops In per second" {{$if.DeltaDropsIn}}
          | <span {{ClassNonNil $if.DeltaDropsOut "" "hide"}}>/</span>
          | <span {{ClassNonNil $if.DeltaDropsOut "" "hide"}} title="Drops Out per second">{{$if.DeltaDropsOut}}</span>
          | ,
          span title="Errors In per second" {{$if.DeltaErrorsIn}}
          | /
          span title="Errors Out per second" {{$if.DeltaErrorsOut}}
          | </span>
        | </div>
      {{jsx `})}`}}
    {{end}}
  {{end}}
  | </div></div>

= content define_panelps
  {{$p := .Data.params}}
  [[template "startpanel" Chain `$p.Psn` `$p.Psd` "Processes"]]
  | <div {{ClassNonZero $p.Psn "stripe" "hide"}}>
  div.grid-block.thead
    span.col.small-1.text-right.... {{template "defines::avlink" Vlink $p $p.Psk 1 "PID"    }}
    div.grid-block.wrap.noscroll.text-nowrap
      span.col.small-1.text-right.  {{template "defines::avlink" Vlink $p $p.Psk 2 "UID"    }}
      span.col.small-1............  {{template "defines::avlink" Vlink $p $p.Psk 3 "USER"   }}
      span.col.small-1.text-right.  {{template "defines::avlink" Vlink $p $p.Psk 4 "PR"     }}{{/* PRI  */}}
      span.col.small-1.text-right.  {{template "defines::avlink" Vlink $p $p.Psk 5 "NI"     }}{{/* NICE */}}
      span.col.small-1.text-right.  {{template "defines::avlink" Vlink $p $p.Psk 6 "VIRT"   }}
      span.col.small-1.text-right.  {{template "defines::avlink" Vlink $p $p.Psk 7 "RES"    }}
      span.col.small-1.text-center  {{template "defines::avlink" Vlink $p $p.Psk 8 "TIME"   }}
      span.col.small-1............  {{template "defines::avlink" Vlink $p $p.Psk 9 "COMMAND"}}{{/* NAME */}}
  {{if .Data.procs}}
    {{range $ps := .Data.procs.List}}
      {{jsx `{this.List(Data).map(function($ps) { return`}}
      div.grid-block
        / first col could be .shrink but it would skew the grid
        span.col.small-1.text-right {{$ps.PID}}
        | <div {{Key "ps-rowby-pid" $ps.PID}} {{class}}="grid-block wrap noscroll">
        span.col.small-1.text-right.  {{$ps.UID}}
        span.col.small-1............  {{$ps.User}}
        span.col.small-1.text-right.  {{$ps.Priority}}
        span.col.small-1.text-right.  {{$ps.Nice}}
        span.col.small-1.text-right.  {{$ps.Size}}
        span.col.small-1.text-right.  {{$ps.Resident}}
        span.col.small-1.text-center  {{$ps.Time}}
        span.col.expand.............  {{$ps.Name}}
        | </div>
      {{jsx `})}`}}
    {{end}}
  {{end}}
  | </div></div>
