// Code generated by go-bindata.
// sources:
// index.html
// DO NOT EDIT!

// +build bin

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x1d\x6b\x73\xdb\xb8\xf1\x7b\x7e\x05\x8e\x73\xe9\x87\x9b\x90\x8c\x1f\xb9\xa6\x39\xc9\x1d\xc7\x76\x53\xcd\xd9\x8e\x26\xb6\xd3\x5e\x6f\x6e\x3a\x10\x09\x59\x88\x29\x92\x05\x40\xd9\xaa\x46\xff\xfd\x16\x00\x9f\x22\x65\x51\x6f\xc5\x76\x66\x1c\x93\x20\xf6\xbd\x58\xec\x2e\x68\x69\x34\x72\x49\x97\xfa\x04\x19\xfa\xf7\x7f\xa3\x50\xd0\x3e\x31\xc6\xe3\x06\x0f\xb1\x7f\x34\x1a\x59\xa7\x58\x60\x4b\x0f\xc3\xa8\x1d\x0f\x13\xdf\x1d\x8f\x4b\xd0\xbd\x80\x0b\x1f\x6b\x78\x8c\x7a\x8c\x74\x9b\x86\x6d\xa0\xd1\xe8\x9a\x0a\x8f\xb4\xe1\x9e\x3e\x10\x17\x19\xc9\x3c\x64\x20\x8d\x3f\x19\x18\x8f\x53\x92\xd9\x50\xc3\xc6\x53\x29\x7a\xd8\x90\xa3\x3f\x86\xe8\x43\x33\xc6\x15\x62\x86\xfb\x7c\x3c\x7e\xd5\x70\xe9\x00\x39\x1e\xe6\xbc\x69\xdc\x32\xea\x9a\x1d\x2f\x70\xee\x80\x2d\x53\x04\xa1\x71\xf4\x0a\xa1\xfc\x0c\x27\xf0\x4c\x8f\x21\x0f\xb3\x5b\x62\xee\x21\x41\x1e\x84\xc9\xe8\x6d\x4f\x18\x47\x6a\xda\x68\x74\x22\x27\xb6\x03\x4e\x05\x1d\x10\xf4\x63\x68\x9d\x63\x1f\x64\xa1\x2e\x31\x79\x2f\xb8\x97\x17\x06\x32\xe4\x65\x76\x0f\x02\x01\x1d\xa0\xd4\xdb\x4b\x08\xf5\x0e\x35\xf2\x60\x40\x58\xd7\x0b\xee\x0d\x3d\x03\xe6\x60\x20\xf2\x4f\x50\xd2\x35\x20\x8f\xf1\x8f\xc7\x48\x48\xdd\x35\x8d\xf3\x00\xbb\x08\x0f\x6e\x91\x4b\x79\xe8\xe1\x21\x0a\xc0\x26\x81\xcf\x33\x70\x69\x1a\xc0\xa0\xc8\x8c\xc7\x4d\x23\x61\xc2\x94\xff\x21\xb8\x14\x04\xa6\x38\xc4\x0c\x19\x41\x40\x19\x0b\xd3\x23\x5d\x90\xcf\xb2\x2c\x14\x5b\x36\xa1\x22\x75\xae\x19\xb7\x7b\x7b\x47\x0d\x1b\x34\xa0\x14\x96\x5e\x4c\xd5\xdc\xde\x6a\xf4\x55\x69\xbb\x4c\xd6\xc8\x4b\x9e\xf6\x89\x1f\xa1\x54\x54\x79\x91\xce\x82\x79\x1e\xcd\x6e\x8a\x58\xa9\x1f\x46\xc2\xbc\x65\x41\x14\x1a\xf9\x39\x53\x67\x99\x1e\xee\x10\x0f\xf1\x3e\xf6\x3c\x6d\x41\x3f\xb8\x67\x18\xa0\x5d\x02\xf6\x48\x55\x33\x1b\x51\x27\x12\x22\xf0\x41\x4f\x38\x79\xaa\x47\x62\xdc\x9c\x38\x81\xef\x62\x36\x94\xa6\xc6\x1d\x8f\xb8\xc6\x91\x74\x71\xd0\x9f\xab\x57\xc3\x02\xb4\x46\xa3\x7b\x2a\x7a\xe8\x9c\x70\x7e\x9a\xba\x17\x2c\xc5\x02\xe5\xbc\x54\xb0\x80\x50\xe1\x1f\x70\x1b\xf8\x27\x1e\x75\xee\x9a\x23\xd1\xa3\xdc\xea\x61\xdf\xf5\x88\x1a\x19\xeb\xc5\x0e\x6b\x57\xfa\x2f\x38\x6d\xe6\x86\x30\x76\xa2\x2f\x27\xf0\x21\x24\xd7\xfa\x47\xec\xde\x12\x05\x60\x5d\x03\xf5\xc2\x6a\x2f\x0a\xb8\xb0\xcc\x17\x01\x23\x3b\x25\xb3\x16\x14\x65\xd2\xd7\x96\x79\x62\xa0\x61\xe7\xfd\x7b\x33\xce\xce\x82\x7b\xbe\x11\x5f\xf7\xad\xe3\x0e\x0f\xbc\x48\x90\x55\x38\xfd\x65\x16\x53\x27\x1c\x80\x47\x8e\x03\x13\x9e\xb0\xf3\xef\xa4\xec\x6b\x59\x04\x0d\x3b\xf2\x92\x7d\x4b\x4e\xca\xef\x44\x97\x81\xff\x1f\xc2\x82\x54\x11\x86\xde\x8b\x66\x6c\x39\x08\x76\x69\x41\x1d\x0c\xba\x12\x8c\x86\x24\xdb\x82\xaa\xa7\x8b\x1e\xc1\xe0\xc3\x7a\x33\x8e\x1f\x93\x07\xb8\x71\x11\xec\x93\x5a\xed\x26\xec\x91\x6d\xc2\x68\xe0\xc6\xbb\xee\x8c\xd9\x85\x64\x04\x7d\xc5\x5e\x44\x1e\x07\x04\xfa\xf1\xf3\xbc\xaa\x46\x23\xda\x8d\x73\x24\xd8\xfc\x5d\xd8\xe5\x53\x4d\x8f\x46\x0c\xfb\xb7\xb0\x49\x7b\x38\x4b\xa4\xe2\x49\xd6\x39\xe5\xd2\x35\xb5\x2a\x7f\x25\x43\x64\x78\xd8\x84\x30\xd0\x19\x9a\xa1\x92\xc2\x90\x70\x96\x96\xa8\xe0\x02\x85\xad\x7b\xa6\x4a\x5e\x55\xb9\x76\x26\x3a\xba\xa7\xae\xe8\x99\x07\x8c\xf4\x55\x8c\xc8\x91\xec\xc7\xd6\x5e\x40\x9b\x1a\x91\xd2\x69\x9a\xde\x4e\x41\x00\x49\xce\x84\x62\x8b\xee\x9a\xbf\x4b\x18\xca\xfe\xcf\xb2\xa7\x02\x6c\x29\xa3\xed\x83\x78\xdb\x4b\x69\x2f\x48\x7f\xbd\x39\xad\x24\x90\x25\xb5\x70\x17\xe8\xd8\xbf\xbe\x94\x56\xd3\x58\x4b\x42\x3b\x97\xb6\x5e\x32\xda\xf2\x2e\x0f\x0a\x5c\x69\x4a\x2b\xf1\x6d\x3f\xbf\xdb\x70\x4e\xbb\x1b\x42\xbf\x24\xb5\xb5\xdc\x7d\x3d\x59\xad\x0e\x44\xbb\x92\xda\x6d\x38\xad\xdd\x2d\xe1\xb7\x99\xd7\x6a\x4d\x6c\x37\xb1\x4d\xb6\xdb\xf9\x53\xb1\xeb\x40\x60\x6f\x11\xc0\x1b\x4e\x16\xca\xa4\xff\xc1\xc8\x8c\x44\x7a\x2a\xbd\xd7\x4b\x26\xe0\x7d\xa5\xa5\x72\xfe\x0d\xe3\x59\xda\xa7\x27\x55\xe4\xdf\xf0\x20\x4e\xc0\xef\xa8\x2f\xd3\x6f\x18\xb0\x7e\xa5\xfe\x32\xd9\x37\x04\xa8\x0c\xcb\x82\x99\xb4\x44\xa0\xac\xb8\x14\x06\x69\xce\xa5\x10\x48\xbb\x4e\x20\xc8\x69\xe5\x51\x24\xa8\x73\x6b\x46\x9c\x84\x8e\x30\x90\x0b\x36\x88\x6f\x9a\x19\x6b\x6d\x07\x8c\x91\xe7\x55\x0d\xcc\xf0\x87\xcd\x94\x0e\x6e\x77\x8b\x95\xc3\x69\x77\xbd\x85\x03\xe0\xcf\xea\x86\x53\xca\xef\x50\xc4\x31\x2c\x99\xb5\xd6\x0e\x19\x9d\xb5\xd4\x0f\xf3\xe8\xec\xa5\x7c\x28\xe7\x53\xa7\xdd\x95\x56\x0f\x80\x6e\xfb\x79\xf4\x86\x8b\x87\x9d\x90\xf9\xa5\x76\xa8\xe3\xeb\xeb\x29\x1d\x54\x0c\xda\x95\xe4\x79\xc3\x95\xc3\x4e\xc9\xbe\xcd\xc2\x41\x29\x62\xad\x75\xc3\x68\x64\xff\x84\xc2\xe0\x8e\xa0\x30\x62\xb4\x3b\x74\x38\xff\x50\x00\x71\x59\x10\xca\xc5\x58\xd8\x48\x31\x23\x90\x88\xd9\xb1\xab\xa3\x9f\xec\xf8\xc5\x84\x59\x09\x61\xb2\x36\x63\x9b\x7f\xf5\xa8\x7f\x97\xda\xfc\x0e\xed\x21\xe3\x94\x0c\xa8\x43\x8a\xb6\xad\x67\xd7\x73\xc0\x55\x65\x5b\x39\x5e\x65\xdf\xa3\xf8\x59\xec\xd0\x13\x69\x89\x74\x0a\x29\x65\x0c\x99\x25\x89\xa9\xed\xe7\x49\x84\x67\xc8\xbd\x8f\x8c\x8b\x20\xf2\x05\x04\x95\x27\x29\x78\x21\x51\x9d\xa2\x83\x9f\x91\xa1\x4a\x94\xe7\xab\x81\x77\xc8\x90\x25\xd6\xf3\x55\xc0\x01\x32\x8e\x07\x98\x3e\x63\x17\x38\x54\x2e\xf0\xfa\xfb\x57\xc0\xcc\x46\x0b\x64\x51\x77\x37\xb2\x80\x2b\xf7\x5a\xdc\x6e\x56\x27\xa7\xd3\x2a\xba\x2d\x6e\x37\x6e\xb6\xb8\x94\xa9\xb7\xdb\x24\xa8\x75\x4a\xd9\xa5\x7a\x3d\x6d\xc1\x8e\xcb\x64\xdd\x0b\x49\x9e\xc4\x4a\x06\x97\xb8\x3f\xf3\x28\x72\x1a\x12\x14\x63\x49\x78\x5b\x04\x4b\xbe\x1b\x72\xcb\xf0\x70\x42\x12\x5d\x29\xe7\x3a\x2e\x40\xaf\xaa\xe7\x13\x57\xea\x2d\x3f\x70\x09\xe4\x53\x2a\xe4\x26\xf3\xf5\x60\x06\xb0\x19\x2e\x2b\xfa\x4a\x45\x26\x23\x19\x15\x53\x1e\xa3\xc2\xf4\xcd\xb0\xa8\xc2\xd2\xa3\x3c\x76\x19\x21\x19\x8f\xdd\x42\xa7\x6b\xce\x86\xd7\x34\x3e\x1f\xe9\x81\x69\x2d\xea\x16\x58\x1d\x7d\x57\xf4\xc6\x4a\x2a\x7f\x5d\x50\x79\x11\x62\x07\x9a\x6a\x4e\x18\x6d\xb1\xab\x76\xd2\xbe\x59\x6f\x5b\x4d\x12\xc8\xfa\x6a\x70\xb7\xde\x86\x1a\x10\x58\x4b\x27\x6d\x2e\x3d\xbd\xb4\xd2\xca\xed\x05\x50\xe0\x4a\x7b\x69\x12\xdf\xf6\x1b\x4b\x1b\x6e\xa6\xed\x86\xd0\x2f\xdd\xb4\x5a\xee\xbe\x9e\x76\x9a\x0e\x44\xbb\xd2\x53\xda\x70\x3f\x6d\xb7\x84\xdf\x66\x43\x4d\x6b\x62\xbb\x27\xf1\x27\x60\x99\x05\x8f\xb7\xd9\x8c\xf3\xcc\x6a\xc0\xab\x21\x5f\x08\xee\x5f\x98\x8a\x85\x00\x5b\xe0\x24\xcb\x9e\xc4\x43\x7e\x57\x2e\x0d\x61\x30\xcb\xf6\xe0\xa6\xa2\x2a\x84\xd1\xb8\x2c\xf4\x0d\x05\x60\x5d\x2e\x59\x0b\x66\xcd\xbb\x04\xdd\xb2\x47\xd8\x89\x07\x4f\x64\xf1\x12\xbb\x34\x72\x76\x94\x5d\x18\x49\x34\x3a\x2d\xef\x5b\x01\x75\xf0\x94\x22\xf1\x64\x60\x03\xb4\xa5\xb7\x15\x89\xa7\x23\x2b\xa2\x6e\x52\x1f\x96\x34\x27\x8f\x71\x21\x5d\xb7\xc8\x45\x3a\xb2\x13\xef\x12\xd0\x6d\xbe\x4b\xd0\x5a\xf3\xbb\x04\xad\xfc\xbb\x04\x2d\x5f\xc0\x7c\xa8\x5b\xf8\x7a\x4b\x9f\x8c\xce\x5a\x2a\xa0\x79\x74\xf6\x52\x00\x95\x33\xc2\xd6\x6a\xdf\x25\x68\xed\xc2\xb9\xfa\x86\xcb\x9f\x9d\x90\xf9\xa5\xfa\xa9\xe3\xeb\xeb\x29\x7e\x5a\xbb\x74\x9e\xbe\xe1\xda\x67\xa7\x64\xdf\x66\xe9\xd3\x5a\xfb\xbb\x04\x33\x2b\x9f\x74\xab\x5d\xa8\xa8\x68\x57\xf5\xab\x4f\x59\x10\xf2\x37\x67\x8c\x05\x8c\xa3\x96\x6f\x7f\x8e\x04\x0a\x09\x8b\xd7\x98\x31\x15\xf9\x7e\x3e\x43\x2c\xac\x75\x74\x1e\x80\x73\xb4\x3e\xa3\x90\x57\x11\x6c\x63\xe7\x8e\x88\x55\xd1\x4a\xb1\x4d\x23\xf7\x91\xae\x8c\x16\xd0\x68\xd0\xa3\x4e\xc3\xa6\x47\x13\xb4\xe6\xaf\xce\x68\x17\xbb\x2e\xe3\xe5\x0a\x8d\xe6\x0e\xef\xe2\x49\x15\x45\x1a\x4d\x8e\xee\xe2\x73\x3b\xda\xb5\x56\x7d\x68\x97\xa2\x5c\xf2\x88\x28\x41\xd6\x6a\xd7\x44\x35\xdd\x02\x7f\xf1\x3b\x3c\xfc\xa5\x60\x5e\x75\x42\x87\x5c\xe5\xc4\x44\x3b\x71\x3f\x70\x23\x2f\x40\x87\x9f\x8c\x6c\xa5\x65\x87\x54\x65\x38\xf0\x8e\x1c\x4c\xcc\xad\x5a\x16\x2d\xbf\x54\xaa\x26\x41\xe1\x92\x7a\x28\x9d\x27\x7d\x2b\x1f\x19\xec\x62\xb9\xa5\x16\xfe\x1c\xf0\x55\x3c\xca\x29\xd5\x4c\xc2\x93\x94\xcb\x1c\xc1\x37\x15\xe2\x92\x64\x95\x97\x51\xe9\x00\x90\x13\xd8\x9e\x0e\x5f\xc9\x8b\x46\x90\x67\x26\xfe\xa5\x8d\xf6\xaa\x52\x11\xc7\x9e\xa7\xa3\xab\x14\x86\x78\x02\xc7\x6a\x9f\x18\x90\x04\xd3\x91\x84\xd3\xc9\x11\xa5\x44\x65\xe9\xf4\x0c\x2f\x1f\xe2\xa4\xd4\xb9\xf5\x9f\x68\x30\x47\x74\xb6\xad\x0b\x0c\x3d\x6a\xf0\xb9\x51\x14\x79\x9d\x08\x56\x25\x66\x2b\x6d\x5e\xb4\x78\x1a\xd1\xa7\x21\x9a\x61\xf1\xb3\xcc\xd6\x8f\x22\xa8\xb0\xf8\x0a\x57\xf9\xac\x05\x1c\xa6\x9b\x49\xd9\x23\xe3\xad\x61\x86\x4f\x27\x18\x2a\x9d\x3a\x46\x31\xd5\xab\xa7\x6c\x6c\xd3\x34\x36\x8b\xa3\x76\x8e\x97\xc7\x51\x54\x69\x7d\x03\xea\xfe\xf8\xdb\xf5\xd9\x55\xa5\xb2\x3f\x0e\x05\x99\xa5\x6a\x0d\x5d\xa9\x68\x05\x5e\x4f\xcd\x1f\x5b\xd7\x57\x8f\xe8\x58\xee\xf7\x53\xf9\x50\xb0\x8f\x68\x57\x02\xd7\x57\xed\x66\x1a\x56\x21\xdf\x62\xc3\xaa\xcd\xd7\xdb\xb0\x02\xfc\x59\xec\x6b\xb3\x40\xd6\x15\xeb\xee\x57\xa5\x64\xd6\xd2\xae\x9a\x47\x63\x2f\xed\xaa\x72\x09\xdf\xe6\x2b\x6d\x57\x01\xba\xed\xb7\x6e\x36\xdc\xae\xda\x09\x99\x5f\xda\x55\x75\x7c\x7d\x3d\xed\x2a\x15\x83\x76\xa5\x65\xb3\xe1\x76\xd5\x4e\xc9\xbe\xcd\x76\x95\x52\xc4\x93\xfb\xd3\x97\x59\x2f\x81\xb7\xb9\xfa\x2b\x98\x76\xeb\xf4\xfb\x7f\x07\x7c\x51\xf9\xf7\x91\x71\xf3\x54\xe5\x9f\x2a\xf4\x01\x08\x7d\x75\xf6\xe5\x69\x4a\x5d\xc7\xea\x87\xe0\xf5\xcf\x58\xfc\x77\xc8\xb8\x6c\x3d\x5f\xf1\x7f\x46\xc6\xd7\xd6\x97\xeb\xe7\xab\x80\xbf\x22\xe3\xcb\xd9\xd5\x53\x96\xdf\x21\xf2\xf4\x67\xaa\x02\xde\x23\xe3\xba\x75\x71\xf6\x34\x35\x30\x55\xea\xbf\x21\xe3\xe4\xf3\xc5\xc5\xf1\xe5\x77\xb5\xdf\x4d\x39\x14\x0a\x59\xe0\x54\x1c\x09\x85\x3c\xd7\xfa\x91\x53\x2a\x0e\x84\x42\x9e\x7c\x72\x25\x95\x9f\x9b\x13\x72\x0b\x52\xa0\x25\x8f\x83\xb2\xe3\x9b\x04\xdd\x82\x9f\x5d\x03\xe0\x37\xf5\xc1\x33\x18\x4e\xd8\x32\x34\xdb\x8c\x06\x8c\x8a\xe1\x32\x38\x2e\xa9\x33\xe7\x11\x58\x11\xfe\x8a\xfe\x7f\x29\xf8\x2f\x84\x43\xfe\xee\x8b\xf9\x70\x24\xa1\x22\x46\x72\x4d\x67\x9f\xe3\x65\x12\x17\x0e\xfd\x56\xd5\xd6\x6c\xfc\x70\xfa\xf9\xe4\xfa\xb7\xf6\x19\xea\x89\x3e\x94\x2f\x0d\xfd\x4b\xb6\x0d\xa1\x96\x88\x8b\x93\x3e\x11\x50\x41\xf7\x30\xe3\x44\x34\x8d\x48\x74\xcd\xf7\x71\x29\xd2\x50\x2d\x42\xb9\xfc\x26\x3e\x43\x1f\xc1\x15\x08\xdb\xb0\xf5\x84\x1c\x9e\x9e\x10\xa1\x49\xfe\x17\xd1\x41\xd3\xf8\xb7\x79\x73\x6c\x9e\x04\xfd\x10\x0b\x0a\xf5\xb7\x01\x02\xfb\x12\xac\x69\xb4\xce\x9a\x04\x2a\x33\x23\x0f\x29\x31\x37\x8d\x01\x25\xf7\x61\xc0\x44\x6e\xb2\xfa\xa0\xd6\xa6\xab\xfe\xc2\xde\x54\x37\x6f\x10\xf5\xa9\xa0\xd8\x33\x39\x94\x4f\xa4\xb9\x67\xbd\x85\xc5\xf5\x83\x69\xfe\x0e\x8b\xba\x75\xf6\x47\x8c\x56\x05\x2d\x46\x3c\xd5\xb0\x64\xc2\x89\x04\xa2\x80\xd5\x48\xbe\x4a\xa0\x8b\x07\xf2\xde\x82\xff\x24\xf8\xef\xa0\x32\xda\xfd\xc3\x34\x4b\xe0\x1a\x8a\x83\x53\x81\xf1\x0e\xf6\x1f\x0e\xf6\x53\x1c\xa0\x9b\xcf\x4a\x17\x5f\x09\xe3\x34\xf0\xc7\xe3\x04\x2d\x4f\x2e\xcc\x83\x7d\x2b\xf4\x6f\x0d\x24\x86\x21\x48\x78\x89\x2f\x8d\x12\x05\x1c\x86\x1e\x31\x45\x10\x39\x3d\xb3\x40\x6d\x6f\xff\xed\x03\xfc\xcc\x45\x0f\xe6\x2b\x82\x73\x50\x39\x3c\x7c\x80\x9f\xf9\xa8\x1c\x1e\xce\x4b\xe5\xdd\xfe\x03\xfc\xcc\x47\xe5\xdd\xfe\xbc\x54\xde\x83\xc6\xde\xcf\xa9\xb1\xf7\x53\x34\xc6\xc5\xd0\x23\xbc\x47\x64\xf1\xac\xcd\x27\x57\xba\x0d\x35\xf7\x63\xf8\xe1\xb1\x4d\x7d\x97\x3c\x58\x72\xa2\x5e\x9c\xc9\x82\x6b\x74\x02\x77\x58\x6e\x0b\x88\x20\x34\x3b\x98\x55\xf6\x00\xe2\x67\x71\x4f\x3d\xeb\x4e\x14\x3b\xd5\x85\xee\xdb\x44\xc3\x4e\x2e\xf8\x7d\xa4\x84\x81\xc9\x98\xdd\x52\xdf\xec\x04\x42\x04\xfd\x0f\xe8\xad\x91\x1d\x20\x24\x5b\x94\x7a\xc3\x58\x9f\x84\x34\x4b\xdf\xc6\x91\x4c\x8f\x42\x98\x46\xb8\xdc\xaa\x04\xe9\x87\x1e\xdc\x94\xbf\xba\x03\x59\x69\x54\x43\x0d\x15\x2d\x55\x38\xa1\xb2\xe5\xd1\x51\x8f\xd4\x18\xe8\x67\xbf\xd8\x88\x99\xe8\x38\xc2\x6d\x21\x84\xaa\xd8\x19\x85\x85\xe8\x5a\xc5\x75\xfc\x0d\x24\x39\x30\x14\xf3\x3d\x71\x6e\x51\x29\x46\x02\x6d\xe5\x42\x73\xa1\x2f\x9a\x36\x85\x26\x7a\x47\x55\xe6\x8b\xb7\x98\xda\xf6\x83\x64\xaa\x60\x31\x65\x2a\xed\x74\x32\xca\xf2\x0f\xb6\x7d\x7f\x7f\x6f\x81\xa6\x19\xfc\x58\x4e\xd0\xb7\x75\x58\xb6\xc1\x75\x09\xe6\x84\xdb\x52\x18\x2e\xfe\xee\xf4\xc3\x66\xd9\x4d\x8d\xc9\xb6\x69\xda\x30\xed\x05\x9e\x3a\x3f\x4a\xa2\x3c\xae\x27\x76\xfe\x52\xca\x5f\x65\x0f\x0f\x97\xfd\x07\x55\x68\x5e\xce\xd3\x6a\x9f\x8d\x53\x7e\xc6\x75\x1d\xa7\x54\xf3\x6a\xe2\x74\xbb\xf5\xf8\x94\xf3\xea\xe2\x94\x7f\xfb\x5b\x87\x4f\x35\xaf\x26\x4e\x5a\x93\x4f\x3a\x07\x9f\x21\xaf\x87\x53\xce\x9b\xc4\xc9\x1d\x46\x43\x91\x8f\x95\xdf\xf0\x00\xeb\x51\xe3\x68\x80\x19\x92\xa9\x04\x6a\xa2\x38\xa9\x18\x8f\x7f\x81\x95\xa5\x1e\xd7\xc1\x30\x99\xa7\x20\xce\x9c\xea\x18\xfc\x8d\xdb\x3a\xc7\xbf\x3e\xfe\xf4\xe9\xec\xb4\x43\x61\xb0\x4f\x7d\xbb\x13\xc9\x8a\xc4\x82\x4b\xeb\x1b\x87\x34\xc9\xe3\x90\xcf\x00\x96\xe4\x81\x1a\x94\xb9\x93\x3a\x64\x4e\x19\x6b\xd8\x3a\x6e\x43\xa0\x92\x29\xd4\x9f\x01\x00\x00\xff\xff\x6f\xfa\x77\xef\xea\x68\x00\x00"

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 26858, mode: os.FileMode(420), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

