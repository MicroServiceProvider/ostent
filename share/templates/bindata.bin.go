// Code generated by go-bindata.
// sources:
// index.html
// DO NOT EDIT!

// +build bin

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xe4\x5c\x5b\x73\xdb\x36\x16\x7e\xcf\xaf\x40\xb9\xe9\x3e\x74\x4a\xb1\x76\x9c\x6e\x36\xb5\xb2\xe3\x44\x6e\xcb\x69\xec\x68\x7c\xc9\x6e\xa7\xd3\xe9\x40\x24\x24\xa1\xa6\x48\x16\x80\xe4\xb8\x1a\xfd\xf7\x3d\xb8\x90\x04\x49\x51\x12\x6d\x3a\xd6\x4c\x1e\x6c\x93\x00\xce\xfd\x00\x1f\x70\x48\xfa\xf8\xab\xc1\x87\x77\x57\xbf\x0e\x4f\xd1\x54\xcc\xa2\x67\x6f\x8e\xd5\x1f\x84\xe0\x82\xe0\x10\x2e\xe4\xe5\x8c\x08\x8c\x82\x29\x66\x9c\x88\xbe\x33\x17\x63\xf7\x95\x63\xba\x04\x15\x11\x51\xd7\x70\xb7\x5c\xf6\x06\x58\xe0\xde\xcf\xe7\xab\x15\x4a\xb8\x20\xb1\x38\xf6\x8a\x11\x86\xd1\x54\x88\xd4\x25\x7f\xcd\xe9\xa2\xef\xfc\xcf\xbd\x3e\x71\xdf\x25\xb3\x14\x0b\x3a\x8a\x88\x83\x82\x24\x96\x64\x7d\xc7\x3f\xed\x93\x70\x42\x1c\x9b\x32\xc6\x33\xd2\x77\x16\x94\xdc\xa6\x09\x13\xd6\xe0\x5b\x1a\x8a\x69\x3f\x24\x0b\x1a\x10\x57\xdd\x7c\x8b\x68\x4c\x05\xc5\x91\xcb\x03\x1c\x91\xfe\x81\x61\xb4\x5c\xfe\x7c\x75\xf6\x1e\x39\xc7\x5f\x39\xab\x95\xeb\xfe\x46\xc7\xc8\x3f\xfd\xfd\xcd\x71\x44\xe3\x1b\xc4\x48\xd4\x77\xf8\x14\x78\x07\x73\x81\x28\xb0\x77\xd0\x94\x91\x71\xdf\xf1\xc6\x78\x21\xef\x7b\xf0\x6b\x1d\xa7\xdf\x48\x1c\xd2\xf1\xef\xae\x6b\x73\xd2\x0c\x38\xfd\x9b\xf0\xbe\xf3\xe2\xf0\xd3\x8b\xc3\x2a\x3b\x9e\x5d\xb8\x2f\x0e\x7b\x69\x3c\x71\x90\xb8\x4b\xc1\x44\x3a\xc3\x13\xe2\xc9\x06\x63\x7e\xc1\x14\xa7\x69\x44\x5c\x91\xcc\x83\xa9\x5b\x12\x70\x70\xf8\xdd\x27\xf8\x69\x16\x01\x9d\xbd\x96\x2c\x8f\x8e\x3e\xc1\xcf\x06\x96\x47\x47\x6d\x59\xbe\x3c\xfc\x04\x3f\x1b\x58\xbe\x3c\x6c\xcb\xf2\x15\x18\xfe\x6a\x93\xe1\xaf\x1a\x0c\xe7\xe2\x2e\x22\x7c\x4a\x88\xc8\x1c\x2f\xc8\x27\xe1\x05\x9c\xe7\xcc\xe0\xda\xa3\x71\x48\x3e\xf5\x64\xab\xe1\xc0\x03\x46\x53\x61\x93\xfc\x89\x17\x58\xb7\x3a\xd5\x89\x82\x38\x0b\x80\xd1\x9f\xdc\x63\x32\xe9\x19\x81\xab\xc3\xde\x41\xef\xe0\x55\xd6\xd0\x9b\xd1\xb8\xf7\x27\xc8\x0c\x61\xf2\xb8\x33\x4c\x63\x3d\x7e\xb9\x84\xec\xec\x5d\x9d\xfc\xf4\xd3\xe9\x60\x44\xe3\xd5\x0a\xc6\x19\x65\x34\xc5\x72\x49\x22\x4e\x56\x2b\x90\xe0\xcd\x68\x74\x63\x3a\x55\x47\x1c\xae\x56\x4e\x36\x31\x8f\x3d\xad\x9c\xd1\xdf\x33\x73\xfb\xcd\xf1\x28\x09\xef\x4c\x63\x8c\x17\x28\x88\x30\x07\x8f\xc2\xe5\x08\x33\xa4\xff\xb8\x21\x19\xe3\x79\x24\xb2\x5b\x2e\x60\xae\x06\x10\x88\xd4\x41\x2c\x81\xa9\x25\x87\xd3\x09\x34\x42\x4c\x72\x81\x21\xcd\xb9\xc9\x59\x0a\x36\x11\xe6\x8e\xa3\x39\x0d\xb3\x31\x95\x51\x86\xbb\xd4\x8c\x30\x98\xd9\x91\x3b\x0b\xdd\x03\x94\xe2\x30\xa4\xf1\xc4\x8d\xc8\x18\x96\x91\x2c\x04\x19\xfd\x68\x2e\x44\x12\x57\x58\x88\x64\x32\x89\x88\x64\x11\xe1\x94\x93\x30\x8b\xad\x1e\x6c\xbc\xac\x07\x49\xe5\xf4\xa8\xac\x19\xb3\x89\x0c\xdd\x3f\x0c\xaf\xbc\xdb\x12\xab\x32\x20\xc5\xb9\x58\xce\xdc\x24\x8e\xee\xca\x43\x60\xd0\x95\xd6\xa3\xf0\x0e\x44\x01\xc8\x36\x70\x52\xd9\x0a\x62\x6b\xac\xf6\x86\xd2\xd3\x4e\x2c\x05\x01\x23\x1a\xf6\x9d\x29\x78\xb6\x1c\x87\x11\xc3\x71\x08\x6d\x34\x3d\x28\xe6\x3b\x04\x43\xe2\x01\x8c\x07\x7c\x90\xeb\x39\xb2\x41\xa3\xe2\x66\xbb\xeb\xd8\xc3\x25\xa9\x1e\xe4\x4e\x25\x93\xa4\x1a\xd5\xb8\x15\x49\xa8\x1b\xd0\x86\xc0\xbe\x39\x9e\x47\x96\x0d\xd9\x50\xf8\x53\x0d\x7f\x44\xb3\x71\x38\x10\x74\x41\xea\xce\xc3\xc6\x60\x09\x76\xfc\xb5\xe7\xdd\xde\xde\xf6\xc0\x62\x06\x3f\xbd\x20\x99\x79\x1a\x1d\x61\x05\x88\x08\xe6\x84\x7b\x11\x16\x84\x8b\xff\x04\xb3\xb4\x9f\x59\xfd\xf1\xf4\xe2\xd2\xff\x50\xf3\x8a\xe2\x9f\x81\x2b\xae\x47\x2d\xa2\x8d\xca\x66\x13\x04\x56\x2c\x64\x5d\xc3\x92\xc3\x26\x34\x96\xd3\x0b\x8d\x29\xe3\x42\xb5\xd6\x6d\x0a\x92\x90\x54\x58\xc9\x26\x58\x4f\x6b\x0e\x50\x2a\xe6\xa1\x1d\xf8\x97\x57\x17\xfe\x5b\x19\x44\x49\xd0\xb1\xce\x0f\x55\x74\x9e\xfe\x33\x1e\xf1\xf4\x07\x3d\x2d\x64\x12\xcd\xd3\xfa\x30\x2b\x1d\xaf\x87\xd2\x92\xda\xec\x30\xb6\xec\xa1\x85\x11\xae\x5a\x18\xe1\x8d\x16\xbe\x3f\xe9\xc0\x42\x6f\x1e\x6d\x9a\xb1\xd6\x2d\xdc\x80\x11\x06\x87\xb6\x23\x47\x69\x0c\x4b\x6e\xab\x88\x22\x0d\x9c\x91\x99\x3d\xf7\x25\x98\x1c\x65\xa8\x92\x8c\xc7\x80\xcf\xee\x41\x69\xee\x2f\x97\x82\xcc\x52\x39\x0d\x91\x03\x88\x07\x52\xf9\xeb\xd7\xfa\xe2\x0f\xf0\x03\x89\x14\xc7\x9e\xf4\xcb\xfa\x95\x27\x1c\x57\x05\x7e\xdf\x4e\x80\x64\xb0\x86\x7f\xc9\x4f\xdb\x0d\x0f\xd2\x79\xc7\x86\x2b\x8e\x1b\x0c\xa7\x0f\x35\x9c\x76\x62\x78\xca\xab\x6a\x1c\x7c\xf7\x30\xc3\x25\xc7\x87\xeb\xb5\x98\x74\xad\x97\xe4\xb8\x4d\xaf\xfc\x66\xcb\x6e\x35\x23\x58\xc0\x7e\x4f\x4e\x7d\xd4\xcf\x56\xed\xd5\xea\x87\xea\xb6\xd1\xec\x16\xe5\x06\x52\x1d\x16\x97\x4b\xef\x9b\x67\xdf\x78\xab\xd5\x72\xa9\xf5\xb3\x14\xc6\x72\x9b\xfd\xc7\x08\xc3\x19\x4e\xee\xdd\xe0\x8c\x94\x61\x22\xf0\xff\x19\xfe\xc2\x11\x71\xb9\x54\x8e\x59\xad\x64\xdb\x3b\x7d\x89\x92\xf8\x5d\x44\x83\x9b\xfe\x52\x4c\x29\xef\x4d\x61\x0f\x11\x11\xd5\xb2\x42\xe8\x99\x5e\xa3\xde\x4a\xae\x8a\xbe\x77\x05\xf6\xe8\xcd\xc1\x1b\xb3\xe9\xdd\x51\x29\x46\x27\xd3\x6e\xb5\xd2\xaa\xa0\x42\xbf\x5d\xb5\x32\xb1\x85\x79\x06\x29\xc4\x1d\x39\xe6\x96\x8a\x29\x92\x77\x90\x1e\x32\xd6\xc0\x54\xfe\xd2\xdb\xfd\xe5\x12\x76\x56\x13\x82\x9e\xd3\x6f\xd1\x73\xa0\x42\xaf\xfb\x48\xaf\xdb\xef\x86\xd7\xbd\xf7\x94\x4b\x8f\x08\x06\x9a\x9c\x08\xc1\x7e\x21\x77\x48\xae\x0a\x2e\xb0\x1b\xdd\xb9\xe7\x8e\xa2\xe9\xc1\xbe\x42\x85\x52\x84\x59\x76\x2a\xd0\x51\x6e\x41\xea\x32\x4e\x6e\x19\x4e\xf3\xd3\x6e\x46\x05\x27\xfa\x30\xa3\x2c\x5c\x65\x53\x8f\x26\xee\x9c\x93\x34\x50\xd9\xa5\xb6\xd5\xfa\xb6\x6f\x98\x5c\x73\xc2\x86\x81\x50\x0a\x14\xac\xf3\xd6\xaf\x1f\x2e\xe1\xf2\x8e\xd7\x05\x64\x8d\x1d\xf0\xff\x2f\xa6\xa2\x2e\x20\x6f\x6d\x23\xc1\xa5\xf1\x82\x30\xbd\x11\x5d\x23\xc9\x87\x3c\xab\x4b\xca\x5b\x0b\x49\x9e\x60\x56\xb2\x95\xff\x6c\x4d\xbd\x70\xdc\x32\xf3\xc2\x71\x91\x74\x83\x1f\xd7\xe7\x5c\x38\x36\x29\x17\x52\x26\x77\xfa\x8e\x24\xeb\x0d\x28\x3b\x87\x1b\x9d\x7d\x08\xad\xf3\x90\x4e\xbc\xfc\xe4\xa0\x0f\x0c\x60\xb9\xa4\x26\x8b\x9c\x5a\xbb\xc3\x6e\xcc\x9c\xd1\x9e\xad\xa5\x54\xc1\x36\x6b\xb4\xa3\xb9\xcb\x5c\x29\x9d\xaf\x66\x73\xb5\x99\xce\x8e\x3d\x7e\x0c\x9b\x27\xd8\x66\x33\x92\x6f\xd4\x8c\x38\x5f\xb6\x95\xb6\x5d\x6f\x90\xee\x39\x59\x60\x1a\xb5\x9a\x78\x25\xa5\x2a\x59\x05\x0c\x61\xaa\x59\x39\xb5\x83\xba\x40\xfd\x75\x55\xdd\x39\xcf\x53\xb0\xa6\xf1\x35\xaf\xa6\x67\x77\xae\x9b\xcb\x23\x7d\x5d\x97\x70\xad\xeb\xae\x4d\x47\xe7\x5a\x88\x44\xe0\xa8\xaa\x86\xea\x5a\xab\xc7\x95\x1c\x6e\x29\xf2\xa0\xd9\x4a\xdb\xce\x56\x6a\xcd\x56\xbf\x61\xb6\xd2\x6c\xb6\x9a\xa9\x4a\xc7\xbd\x62\x9e\xb6\x99\x4e\x36\xa1\x76\x4d\xde\xb2\x31\x0e\x8e\x3d\xde\x1f\x76\x1b\x35\xe5\x7f\xf4\xf6\xd7\xab\xd3\x4b\x34\x4b\xc2\x79\x94\xa0\xa3\x9f\xec\xf0\x81\xcc\xb7\x77\x70\x04\xf7\xe3\xd5\xca\xb3\xee\x3f\xcc\x45\x25\xa0\x5a\x8c\xe1\xfb\xd6\xbf\xba\x44\x29\x61\x88\x13\x38\xac\x84\x15\x8e\x03\x12\x09\xfc\x96\x0a\x9b\x6b\xde\x56\xe3\xdc\xbd\xbd\x29\x0e\x6e\x88\xe0\x8d\x16\x0f\x75\xbf\xa5\x9d\x69\xa9\x5b\x6d\x29\x5f\xa7\xb2\x9b\x0d\x69\xd7\xa6\x84\x2c\x49\xb9\x47\x18\x4b\x58\xb3\x3d\x03\x39\xc8\xd6\x4b\xde\x2b\x85\x4c\xc3\xa9\xa2\xb7\x46\xe8\x86\xa6\x20\x2f\x97\x6a\xfb\x77\xa6\x14\x42\xb9\xa5\xb9\x98\x35\xd1\xce\xfb\x4a\x91\xad\x73\x3b\xac\xb0\x03\x15\x36\x08\xf0\xb6\x70\xab\x33\x6b\x56\xae\x9e\x77\x1b\xb5\xcb\x5c\xb6\x49\xc4\xee\xea\x15\x01\x58\xa3\x5e\xd1\xd9\x56\xbd\x92\xf7\xea\x32\xda\xea\xd7\xe4\xbf\x86\x6c\xe9\x66\x55\x9f\x91\xd9\x3d\xb6\xff\x40\x55\xac\xed\x67\xa7\x67\xeb\x17\x77\x18\x65\x56\xf7\x1b\x0a\xab\x94\x22\xeb\xfd\x42\xa5\x66\x66\x9a\xe6\x8b\x6f\xd1\xb3\xe3\x6a\x2d\x09\x7e\x34\x5b\x97\xdd\xf7\xd5\x95\x4d\x89\x64\x52\xde\x95\x54\x1a\x37\xef\x24\x9c\x2a\x4d\x3b\xf5\x3b\x45\xe7\xbc\x66\x22\x07\x3d\x4f\x8b\xe8\x0c\x31\xc3\x33\xb9\x3d\x90\x95\x01\x93\x7f\xc3\x84\x53\x59\x40\x46\xcf\x53\x79\x78\x8b\x91\xe3\x20\x47\x71\x40\xea\x77\xf6\xf0\xc5\x31\x81\xb2\xca\x0d\xd3\xa3\xd2\xc3\x11\x37\xa2\x37\xc4\xd5\x44\xf2\x21\x0a\x2d\x1e\x78\x61\x90\x26\xcf\xb6\x57\x20\x25\x13\x54\xe4\x37\xdc\x65\x75\xe4\xbc\x6c\xa0\x2a\xe1\xcd\x3a\x66\xc5\x73\x77\x4a\xc3\x90\xc4\xa0\x72\x04\x59\xe7\x4e\x58\x32\x4f\x9d\x7c\x5b\x59\x54\x38\x8b\x5e\x97\x0a\x48\x58\x7b\xff\x20\xa6\x45\x59\xaf\x28\xbf\x2b\x0a\x1a\x97\xeb\x99\x92\x65\xa9\xa2\xb8\xe6\x01\xc5\xa8\x5a\x98\x84\x89\x8b\xef\x8e\xbd\x72\x7b\xb6\xc0\x1b\x69\xaa\x20\x50\x2b\xb2\xca\xe8\x49\x83\xc3\xb5\xb5\xd0\xfa\xf3\x11\x60\x6a\x85\x67\x24\x62\xe3\x90\x67\x15\xae\x6b\xaa\x3b\xd5\x62\x09\x7a\x4f\x38\x1f\x14\xe1\x0a\x91\xe4\x87\x24\xcf\x22\x21\xb6\x71\xd2\x89\x8e\xce\x12\x46\xb6\xb1\x2a\x97\x92\xaa\xe5\xdc\x7b\xf9\xfd\x02\x56\xaf\x07\xb9\x3d\xee\x9d\x8c\x78\x12\xc1\x02\xfd\x44\xfe\x3f\xb7\xa6\xcb\x03\xfd\xbf\x8d\xd5\x36\xff\x17\xa5\xf4\xa2\x27\x6b\x85\x05\x0e\x8f\x22\x92\xcd\xd6\xf3\x24\xfe\x9b\xb0\xa4\x90\xa6\x7b\xd5\x6f\x77\x9a\x2c\x08\x73\xea\x13\x38\x9f\xb3\x22\x7f\xeb\x43\xdd\x31\x4b\x07\x31\x2d\x2b\x68\xdd\xcb\xce\xa6\x35\xd6\x8c\x90\xd5\x9d\xb6\x34\x97\x77\xbc\x2d\x89\x2c\xc1\xb4\xa5\x91\xc5\x94\x0a\x8d\x97\x5b\xae\x0c\x2d\xde\x84\x11\xf9\x03\xf3\xa6\x54\xaa\x14\xf3\x74\xa1\x56\x58\xcf\xd9\x3d\x15\x8a\x67\xf9\x6a\xdb\xa2\x42\x98\x3d\x26\x68\x8b\x2c\x83\xf1\xe7\x01\x16\x90\x53\xe0\xca\x80\xf2\x1b\x38\xac\xe3\x09\xd9\x1d\x5e\x94\xa2\x5f\x10\xba\x0c\xc6\x4f\x0d\x2e\xa0\x41\x47\xd8\xd2\xc0\x69\xef\xa0\x05\x72\x6c\x5f\x90\x45\xa5\x7b\x27\xc0\xd2\xc0\xe9\x71\x70\x45\x09\x7b\x10\xac\x94\x56\x64\xbb\x12\x90\x85\x89\xc9\xc5\xcd\x5e\xb0\x1b\xbc\x22\xa6\x0b\xe9\x17\x07\x7d\x54\x6f\x75\x65\xce\xb8\x41\x07\xc8\x19\xa8\xd7\x01\x41\xad\xd6\xc4\x87\xc8\x39\x4b\xe6\xb1\x90\xef\x0e\xb5\xa7\x7e\x81\x1c\x55\xb1\x85\x63\x16\x6b\x4b\x7b\x84\x9c\x6b\x59\x6b\xbd\x07\xe9\x4b\x45\x1a\xde\x87\xf4\x7b\xa4\xab\x2c\x9a\xb6\x03\xf4\x33\xcf\x13\xba\x07\x3f\xda\x1e\xfc\xfc\xcf\x04\x7e\xbe\x0d\x7e\x3e\x24\x0f\x1b\xe3\x80\xf0\xdd\xc1\xcf\xff\xc2\xc0\xcf\x7f\x72\xf0\xf3\x3b\x03\xbf\x06\x4e\x7b\x07\x7e\xfe\xfe\x80\x9f\xdf\x19\xf8\x35\x70\x7a\x1c\xf0\xf3\x1f\x0c\x7e\x8d\x67\xaa\x7c\xd1\x68\x7d\x82\x19\xee\x40\x51\x5a\x1a\xcc\xfb\x27\x2f\xf2\x2a\xbb\x7c\x22\x81\xfc\xd8\x93\x95\xd4\xfa\xf3\x0c\x2d\xe5\x03\x3a\xae\xbc\xe3\x35\x3a\xf6\x4a\x19\x9c\xee\x72\x60\xdb\xac\x88\x79\x8c\xb0\x45\x97\x7c\xd4\x07\xef\xe1\x22\x55\x41\xdb\xd3\xc5\xdd\x2d\x72\xdf\x27\x7c\xad\xd0\x87\x43\x26\x7d\x2c\xc8\x94\xef\xad\xb5\xc5\xcc\x33\x32\xfb\x3c\xa0\x29\x05\x15\xa8\x09\x77\x09\xbb\xdb\x1d\x31\xb5\x9a\x5f\x10\x64\x82\xc1\x4f\x8d\x99\x52\x85\x8e\x40\xb3\x89\xd5\xde\xa1\xa6\xcc\xb3\x7d\x81\x4d\x9d\xf3\x9d\xe0\x66\x13\xab\xc7\x01\x4e\x2d\x6d\x3f\xaa\x91\xf2\x79\xd5\x3d\x2a\x98\x5f\xdf\x83\x26\x6c\x4b\xa3\x4e\x62\x9d\xc3\x4b\xf6\x74\xb1\x7b\x7c\x49\x79\x6b\x78\x19\xf2\xcf\x83\x2e\x20\xa7\x00\x97\x21\x4b\xe0\x38\xc6\xdb\x9c\xc8\x94\x9e\x5f\x10\xbc\x0c\xf9\x53\xa3\x0b\x68\xd0\x11\xb8\x34\x70\xda\x3b\x6c\x81\x1c\xdb\x17\x68\x51\xe9\xde\x09\xb2\x34\x70\x7a\x1c\x60\x51\xc2\x9e\xa0\x1c\xf9\x3c\x28\x5a\x03\x22\xcf\x6e\xad\x4a\x85\x43\xae\xaa\x94\x43\x7f\xd0\xb6\x64\x27\x29\x0f\x91\x73\x7d\x3f\xca\x17\x40\x79\x79\x7a\xd1\xb6\xb2\x29\x49\x8f\x40\xdd\x8b\xfb\xc8\x7c\x89\x9c\x73\xff\x3e\x84\xdf\x23\xe7\xa3\x7f\x71\x75\x1f\xd2\x7f\x21\xe7\xe2\xf4\xf2\x3e\x94\xaf\x90\x73\xe5\x9f\x9d\xca\x17\xe5\xdb\x92\xfe\x1b\x39\xef\x3e\x9c\x9d\x9d\x9c\x0f\xb4\x7f\x3b\x40\xee\x94\x3f\x12\x70\x2f\x26\xad\x81\xfb\xe3\xe4\xf3\x00\x37\xc8\x29\x80\xfb\x23\x9e\x30\x5c\x7c\xec\xb8\x1d\xb6\x95\x96\x5f\x10\x6c\x7f\x9c\x3c\x35\x6c\x83\x06\x1d\xc1\x76\x03\xa7\xbd\x83\x6d\xc8\xb1\x7d\x81\x6d\x95\xee\x9d\xc0\x76\x03\xa7\xc7\x81\x6d\x25\xec\x91\x0a\xa9\x83\xda\xa1\xcb\xee\x96\x2f\xa3\x6f\x1c\x00\x47\x85\x05\x0d\xd7\xbc\xb0\x62\x0f\xba\x14\xe0\xda\x8d\x23\x06\x94\x91\x40\xa8\x8a\x56\xc7\xa7\xb9\xc5\x84\xdf\x52\x11\x4c\x3b\x46\x05\xde\xf2\x05\xd4\x94\x5b\xd0\x71\xb9\xfe\xd5\xd3\x94\x9b\x37\x4f\x53\x2a\x9f\x4d\xa6\xbc\x07\x3b\x9e\x0d\xdf\x9e\x19\x48\x90\x2f\x9c\x67\x63\x77\x79\x93\xd3\x8c\xbf\xae\x8c\x7f\x66\x5c\xa9\xfa\x38\x61\xad\x98\x0d\x19\x4d\x18\x15\x77\xad\x88\xce\x69\xb0\xe3\x97\x0e\x86\xe0\x92\xfe\xdd\x8e\xe0\x82\x70\x48\xce\x78\xc3\x6b\xf6\x66\x37\x6a\x1b\x7f\x45\x2b\x1f\x60\xd8\x9d\x95\xaf\x33\x1e\xf4\xfa\xeb\x62\xa2\x5e\xd2\x77\x74\x22\xdc\x90\x3b\xf9\x05\xac\x6e\xca\x54\x5d\x2e\x61\x8a\xcb\xc5\x51\xbe\x1d\xfc\x32\x57\xd3\xfc\xd7\x03\x8d\xf6\xaa\x1a\xdf\xa8\xd3\x0e\x5a\xe4\xa9\x6c\x72\x75\x31\xb1\x5e\x94\x36\x42\xce\x70\x30\x95\x64\xeb\x33\x77\xa1\x07\x99\xf4\x9d\xcf\x55\xfe\x02\x9b\xde\xf5\xb5\x95\xc1\xb9\x1f\x8b\x9e\x75\x5e\x96\xbd\xb5\x8f\x60\x4a\xbd\xd9\xa2\xd3\x3c\x42\xad\x38\xcd\xdd\xc6\xa8\x31\x8d\xe4\x06\x4f\x4c\xb7\x45\x74\x07\x27\x9a\x55\x66\x87\x15\x81\x8e\x11\xf9\x0b\xd5\x43\x18\x22\xc1\xe6\xa4\x01\x8d\x2a\x29\x83\x4a\x1c\x37\x8d\xcf\x77\xc4\xad\xb3\x34\xdb\xb9\xcb\x68\x4f\xed\xb7\xd4\xcd\x3f\x9e\x01\xb3\x4e\x22\x3a\x89\xcd\x77\xbf\x3a\x67\x8b\x4f\x84\xdf\x03\xed\xba\xcf\x84\x65\xfb\x8e\x9f\x0a\xeb\x5c\x97\x04\xe6\xdb\x65\xf3\x3d\x82\xfd\xd1\x31\x66\x44\x18\x76\x05\x52\xd8\x1f\x1c\x60\x13\xd6\x69\x1e\xd6\xff\x07\x00\x00\xff\xff\x08\x61\x81\xbf\xc9\x4b\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 19401, mode: os.FileMode(384), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

