// Code generated by go-bindata.
// sources:
// index.html
// DO NOT EDIT!

// +build bin

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5d\x6d\x73\xdb\x36\xf2\x7f\xef\x4f\x81\x72\xda\x7f\xd3\x4e\x48\xc5\x8e\xdd\x7f\xce\xb5\x7c\xe3\xd8\x6e\xab\x69\xec\x68\x62\xbb\x77\xbd\x4e\xa7\x81\x48\xc8\x42\x4c\x91\x3c\x02\x94\xed\x6a\xf4\xdd\x6f\x01\x82\x0f\xe2\x83\x44\x4a\x94\xc4\x17\x7e\xe1\x58\x24\x81\xdd\xc5\x62\xb1\xd8\xdf\xcf\xa0\x72\xf2\xd5\xc5\xc7\xf3\xdb\xdf\xfb\x97\x68\xc4\xc7\xf6\xde\xe9\x74\xfa\xf5\x04\x1d\x77\x91\xf1\x91\x71\xe2\xf0\xdf\x88\xcf\xa8\xeb\xcc\x66\x27\xf2\x31\x42\xa7\x27\x23\x82\x2d\xf8\x20\x3e\x8e\x09\xc7\xc8\x1c\x61\x9f\x11\xde\xd5\x02\x3e\xd4\xdf\x69\xea\x11\xa7\xdc\x26\xf2\x33\x5c\x4d\xa7\xc6\x05\xe6\xd8\x18\xb9\x8c\x3b\x78\x4c\x66\x33\xe4\x4a\xf1\x27\x9d\xa4\x9d\x12\x37\xe2\xdc\xd3\xc9\x7f\x03\x3a\xe9\x6a\xff\xd6\xef\xce\xf4\x73\x77\xec\x61\x4e\x07\x36\xd1\x90\xe9\x3a\xa2\x5b\x57\xeb\x5d\x76\x89\x75\x4f\xb4\x74\x4f\x21\xb9\xab\x4d\x28\x79\xf4\x5c\x9f\xa7\x1a\x3f\x52\x8b\x8f\xba\x16\x99\x50\x93\xe8\xf2\xe2\x35\xa2\x0e\xe5\x14\xdb\x3a\x33\xb1\x4d\xba\xfb\xc6\x1b\x25\x6a\x3a\xfd\xe5\xf6\xea\x03\xd2\x4e\xbe\xd2\x66\x33\x5d\xff\x83\x0e\x51\xef\xf2\xcf\xd3\x13\x9b\x3a\x0f\xc8\x27\x76\x57\x63\x23\x90\x6e\x06\x1c\x51\x50\xa0\xa1\x91\x4f\x86\x5d\xad\x33\xc4\x13\x71\x6d\xc0\x3f\x45\x92\xfe\x20\x8e\x45\x87\x7f\xea\x7a\x5a\x52\x28\x80\xd1\xbf\x09\xeb\x6a\x6f\x0f\x9e\xde\x1e\xc4\xe2\xc4\x34\xcc\x66\x91\x54\x16\x7d\xd0\xdf\x1e\x18\x9e\x73\xaf\x21\xfe\xec\xc1\x58\xe9\x18\xdf\x93\x8e\xb8\xa1\xfc\x90\xc8\xc6\x9e\x67\x13\x9d\xbb\x81\x39\xd2\xe7\xf4\xec\x1f\xbc\x79\x82\x9f\xa5\x9a\xa0\x8d\x51\x53\xf2\xe1\xe1\x13\xfc\x2c\x97\x7c\x78\x58\x57\xf2\xd1\xc1\x13\xfc\x2c\x97\x7c\x74\x50\x57\xf2\x3b\xf0\xc6\xbb\x0a\xde\x78\x57\xe2\x0d\xc6\x9f\x6d\xc2\x46\x84\xf0\x68\x52\x38\x79\xe2\x1d\x93\xb1\xac\x4c\xb8\xd5\xa1\x8e\x45\x9e\x0c\xf1\x50\x09\xea\xa8\xd5\x74\x7a\x32\x70\xad\x67\x75\xd3\xa2\x13\x64\xda\x98\x81\x7d\xdc\xf5\xf4\x01\xf6\xb5\x68\x25\x15\x3c\xd3\x6d\x32\xe4\x51\x03\xd1\x24\xb0\xa3\x16\x63\xe2\x04\xc9\x93\xd0\xf0\xd4\xa5\x5c\xcd\x07\x51\xe3\x11\xcc\x9c\x1c\x0d\xf4\xc3\xfe\x3d\x75\xf4\x81\xcb\xb9\x3b\x3e\x46\x6f\xb4\xb9\x4e\xa2\x1b\xf3\xb0\x13\x75\x0c\x3c\x0b\x73\x02\xe3\x85\x5f\x58\xb7\xc8\x90\x3a\x20\x23\xfc\xfd\x57\xb4\xe4\xb3\x22\xe4\x02\xe1\x64\xec\xd9\xd0\x17\xa9\xd6\xec\xf8\x38\xdb\x0d\x19\x90\x7b\x3a\x42\x5d\xd6\x06\x74\xc2\xc6\xd8\xb6\x8b\xe4\x1a\x17\x94\x71\x9f\x0e\x64\xd7\x82\x46\xc2\xef\x07\x19\x47\x74\xe6\x5c\x53\xe0\xa9\xf4\x90\x4d\xd7\xce\xf9\x24\xf0\x0a\xec\xcc\x75\x43\xca\x5b\xe8\x71\x44\xe1\x97\x87\x21\x25\x79\x3e\x29\x76\x5e\xe0\x71\x9a\x77\xdd\x42\xc7\xa9\x2e\x25\x6e\xcb\x0f\xb3\x13\xd8\xa9\xd0\xe9\x40\x78\x2d\x0a\x35\x9f\xde\x8f\x56\x8f\x35\x1c\xb5\x1d\x04\x10\x58\x0e\x62\x04\x96\x96\x85\xfd\x67\x34\x72\x6d\xdb\x7d\xcc\xc4\x9f\x08\x3c\xb5\x86\xc4\xa6\xc0\x8e\x3b\x9d\xc7\xc7\x47\x03\x22\xc3\x87\x1f\xc3\x74\xc7\x9d\x70\x17\xe9\xc0\x4a\x24\x98\x11\xd6\x11\x3e\x61\xfc\x9f\xe6\xd8\xeb\x86\xab\x2e\xe7\xbb\x68\xdf\xc1\xab\xfb\x25\xbe\x98\x73\xd1\xbd\x4f\x2d\x7d\x60\xbb\xe6\x43\xb2\x58\x0b\x56\x09\x22\x4f\x70\xd3\x2a\x9e\x6f\xdb\xc5\x16\x9e\xdc\xa7\x1c\xbc\x68\xaa\xa3\xd6\xb9\xb9\x2e\x33\x71\xe1\x42\x85\xee\xc4\x1e\x93\xb1\xb6\x57\x41\x75\xdc\x38\xd4\xbd\xa2\x36\x6b\x58\x5d\x19\xb4\x5d\x4b\x97\xe9\x05\xd5\x95\x89\xc6\x6b\x69\xa3\x35\x46\x46\xd7\x1c\x99\xc7\xaa\xeb\x82\xb6\x59\x5d\xcc\xf4\xa9\xc7\xd3\x7b\xd7\x17\x3c\xc1\xe1\xdd\x58\xf0\x04\xfb\x48\x54\x70\xa8\x8b\x54\x2d\x37\x9b\xfd\x08\x31\x27\x5b\x55\x11\x94\xad\x12\x11\xf3\xcd\x64\x6b\xfc\xc2\xe0\x13\x54\x5a\xc6\xed\xd9\xcf\x3f\x5f\x5e\x0c\x28\x14\x9c\x63\xea\x74\x06\x81\x63\xd9\xc4\x80\x8f\xc6\x17\x36\x9d\x12\x9b\x41\xe9\x08\x3d\xa3\x07\xf2\xa6\x63\x25\xcb\xfc\x34\x63\x53\x47\xed\xaa\x22\xe1\xab\xf2\xb6\xf3\xfd\xde\xf7\x9d\xd9\x6c\x3a\x0d\xfd\x92\x72\x14\x16\xbb\xfa\x5f\x03\x0c\x75\xa5\xdc\x52\xc1\x4f\x38\xcc\x3f\x30\xe6\x5f\xe0\x37\x94\xad\xd3\xa9\x9c\x97\xd9\x4c\xdc\x3b\x0f\x3f\x22\xd7\x39\xb7\xa9\xf9\xd0\x9d\xf2\x11\x65\xc6\x08\x0b\xdb\xe4\x9d\x19\x42\x7b\xe1\x86\xf4\x5e\x48\x95\xfd\x8d\x5b\x70\x8d\x98\x02\x2c\xac\x91\xd6\x57\x34\x2a\x4c\xbe\x4d\x5a\x15\x9a\x82\x12\xfb\x2a\x5b\x35\x11\x66\xcd\xdb\xf2\x01\xee\x14\xd9\x23\xee\xd7\xb0\x49\x34\x57\x2e\x92\xe9\x73\x7e\x6c\xd8\x27\x5c\x09\x8b\xa6\x58\x25\xbe\xd3\xaa\xb6\x67\x2b\x8c\x64\x10\x5a\x47\x4b\xa9\xd3\xa8\x33\x02\x9f\x73\x1d\x76\x6d\xd7\xd7\x10\x3c\xba\x15\x60\xa5\x0f\x4d\xe9\x13\xb1\x90\x16\x89\x40\xb0\xa8\x32\xf8\x66\xaf\x10\xf5\xd4\x34\x31\x4a\xf0\xd0\x31\x95\x11\xc0\x1c\x9d\x0f\x50\xb2\xdf\xa0\x09\xf1\x39\x05\x1c\xa3\xed\x95\xee\x49\xe8\xd1\xc7\x1e\x72\x5c\x58\x1d\xb0\xd5\x46\xd5\x67\x7a\x7f\x92\x75\x92\xbe\x8f\x84\x78\xdb\x47\x62\x01\x87\xdb\x7d\xf8\xd1\x71\x85\x84\xe2\xad\x6d\x08\x86\xf2\x6c\x19\x6a\xe3\xff\x73\x06\xcc\xfb\x71\x7e\x67\xda\x1f\xa7\xae\x2b\x1a\xa0\x65\x61\xa4\xf2\x8b\x61\xe3\xfd\xb9\x9d\x6f\x6e\xec\x6a\x9f\x4d\xfa\x7e\x61\x4f\xe8\x33\xfc\xab\xbc\x6c\xdc\x78\xd8\x7f\x80\x30\x26\xaf\xa6\x30\xa3\xc7\xe8\x5b\x10\xf7\xed\x6b\x34\x22\x42\xe7\x31\x3a\x78\x33\xfb\x6e\xf6\x79\x3e\x57\xaa\x8f\xcd\xfb\x38\x36\xf3\xa8\x59\xff\x1c\x35\xeb\x9f\xa3\x9d\xfb\x67\xbf\x61\x07\xed\x37\xec\xa1\xfd\xca\x2e\x92\x1f\x6a\x24\x83\xb8\x30\x11\x8d\xbe\xf6\x24\x47\x23\x07\x03\x46\xe0\x31\x53\x39\x22\x95\xbe\x52\x8e\x1f\xf9\x80\x7d\xbd\x5c\x7a\x50\x8e\xb2\xa1\xda\x26\xe0\xb7\xac\xc3\x4e\x95\x44\x99\x6f\xfb\x2e\xa3\x9c\x4e\x08\xfa\xda\x33\xce\xfb\x77\x0e\x64\x3f\x6a\x11\x9d\x8d\xdc\x47\xf1\x41\x43\x82\x17\x79\x4c\xae\x55\x7e\x96\x10\x73\x3f\x81\x98\xa1\x12\x17\x32\xd6\x50\x14\xfc\xa9\x12\x1b\x2f\x48\xbd\xd3\xa9\xd8\x58\x6e\x41\x77\xa4\x1e\xf6\x12\xc9\x1c\x75\x35\xb8\x42\x16\x65\x50\xf5\x3c\x23\x17\xc0\x0f\xa0\xf6\x79\x18\x92\xd9\x45\xb4\xc8\x44\x5d\xfc\x93\x81\x61\xa8\x28\x95\x49\x31\x86\x61\xa0\x1c\xa0\x3a\x05\xe5\x69\x28\x21\xca\x8c\xfd\xa2\x22\xbc\x68\x61\xcc\x7b\x7f\xbf\x59\x9f\x2f\x04\x26\x79\xe0\x86\x62\xa7\x88\x0f\x4b\x60\x5c\x4a\x36\x75\xbc\x80\xeb\xf7\xbe\x1b\x78\x79\x8e\xa0\xb8\x9d\x6e\xe3\x01\xb1\x91\x5c\xac\x45\x5b\x4b\x4a\x82\x45\x60\x52\xd3\xd8\x6b\xa9\xec\x10\x58\x16\x88\xca\x63\x4f\xa9\x3f\x41\xa0\x10\x42\x78\x60\x13\x2b\xdf\x57\x2e\xfd\x70\x06\xac\x70\x0b\xcf\x4b\x6f\xc4\xc6\xc2\xea\x3d\x5b\x94\xa2\x0f\x84\xb1\x8b\x64\x25\x40\x19\x32\x37\xa2\xb4\x47\xd3\x99\x67\x93\x86\x85\x39\x03\x5d\xb9\x3e\x59\xd3\xb2\xdc\xcd\x0a\xbc\xcc\xd6\xc2\xd1\x77\x1f\x59\x9b\xa2\xd1\x31\xce\x06\xcc\xb5\x03\x4e\x5a\x12\x96\xd7\xa9\x04\x9d\x99\x7c\x16\x98\x26\xb4\xd8\x75\x78\x36\x64\x61\x85\x30\xad\xce\x1f\xa9\x64\x7f\xed\x3a\xff\x21\xbe\x9b\x58\x27\x18\x4c\x4f\x24\xf9\x4a\xb9\x1d\x71\xc1\x24\xa7\x33\x7c\x96\x78\x54\xe5\xd1\x5c\x72\x3f\x07\x9f\x64\x76\xb5\x1a\xc5\xdb\x12\x4d\x05\x15\x98\xea\x81\xee\x18\xf1\xf3\xbb\xe9\x0a\x82\x6e\x9e\x59\x23\x72\xfe\x85\x29\x6f\x44\x50\x0f\x10\xed\x72\x41\x5a\x36\x7a\x72\x1d\xe6\x42\x6c\x3e\x80\x42\xaa\x44\xd6\x7e\x50\x0f\x8a\x72\xd0\xc7\xce\x3d\x54\x09\x70\x95\x94\x85\x70\x01\x58\x9a\x71\xf1\x3c\x2c\x5c\x25\xe6\x16\xb7\x5e\x89\x06\xdf\x19\x63\xec\xbd\x1a\x06\x8e\x29\x6a\xa6\x57\xa2\xf3\x6b\x44\xbf\x43\x53\x04\x10\x3b\xf0\x9d\xcf\xf3\xa8\xb3\xb8\x8a\x58\xe8\x9f\x7c\x22\x15\xa9\x4b\xd8\x75\x9d\x23\xa7\xa3\xa5\xf0\x2b\x79\x46\x1a\x34\xd1\x21\xd9\x0e\x9e\xf5\x6b\x0d\x45\x1d\x4a\x4a\xdb\x8a\x61\xb9\x74\xe2\x72\x65\xa2\x18\x8e\xaa\x2b\x95\xaa\xc1\xbd\x1e\x30\xe2\x99\xd0\x55\x92\x71\xe1\x45\x57\x8d\x49\x84\x74\xdf\xe4\xf1\x3a\x4d\x42\x22\xdb\xe0\x9b\x62\x62\x7e\x61\xcc\x6c\xde\x7e\x58\x49\x0b\xcd\x8f\x9e\xb7\xd3\x7a\xb1\x7e\x17\x9a\x1f\x37\xd8\xb9\xfd\x3a\x75\x00\xfe\x30\x52\x38\x0e\x91\x3e\x16\x8e\x23\x6e\xb0\xca\x38\x14\xe4\x98\x07\xb6\xaa\xe1\x72\x78\x4b\x5f\x0b\x68\x0d\x30\x57\xd9\x00\x48\x17\x9a\xe2\xc0\xe6\x37\x9e\xcb\xd9\x31\xe2\x7e\x40\x22\xc4\x5b\x2f\xa1\x49\xd5\x61\xd7\x18\x11\xcb\x5f\xcd\x41\x67\x6b\xd8\x02\xe4\x7c\x31\xdc\x25\x70\x06\xed\x09\x6e\xbe\xa0\xec\x01\x05\x0c\xc3\xc6\xb1\x33\xf8\x9c\xd8\xb0\x25\x14\x5d\xcf\xff\x2f\x20\x3a\xd3\x61\x7d\xd8\x72\x31\x6c\x1b\x86\x06\x8b\xda\x09\xa1\x57\x33\xec\x05\x41\x57\x0f\xc5\xd6\x02\x68\x99\xa6\xda\x8c\x9f\xd7\x33\x70\xc3\xf0\x59\x1a\xb7\x0d\xf4\x5c\xec\xb8\xf0\x4f\xa3\xe8\x37\x79\x46\x2c\x72\xd7\x03\xda\x47\xda\x85\x3c\x81\xa8\x95\x80\x9f\x26\x20\x77\x16\x8d\xd6\xb2\xf0\x00\x69\x57\x6e\xe0\x70\x58\x34\x85\x15\x5c\x7d\x30\x5c\x4b\xfd\x0f\x48\xbb\x75\x39\xb6\x77\xa2\xfc\x08\x69\x80\xcf\x76\x33\xf0\xb7\x48\x3b\x9b\x60\xba\x9b\x81\x1f\xca\x81\x7f\x53\x49\x77\x53\xac\x05\xe4\xe6\x87\x3b\x51\xf5\xa5\xb8\x0b\x6b\x98\xd4\xe5\xf1\xf3\x5a\x04\x86\x35\x6c\x98\xbf\xc8\x17\xdb\xe1\xd6\x61\x0d\x0d\x58\xc9\xd7\xea\x2f\xfa\xe5\x34\x86\x35\x54\x2c\x86\x45\xfd\xf0\x2c\xa3\xec\x4a\xfd\xb0\xeb\x7a\x84\x46\x25\x6b\x15\x6e\x4c\x6b\xad\x1b\x61\x61\x2a\x5f\x86\x7c\xa3\x2a\x38\x10\xed\xb4\x08\x62\xf4\x1c\xd7\x22\xb0\x25\xc8\x55\x5d\x04\x68\xc1\xb0\xb0\x4d\xf1\x61\x45\xd5\x44\x66\x85\x9d\x58\x1e\xb0\x7c\x01\x11\x1b\x2e\x1e\x2e\xb4\xfb\xae\xb8\xc1\xe6\xcd\x1e\xfa\x24\x7f\x68\x34\x32\x5b\x3c\x5c\x68\xb6\xcc\x45\x4b\xed\xce\xa7\xa1\xf2\xda\xaf\x1e\xbd\x83\x32\xb4\x48\xe8\xc9\x42\x52\xa4\xda\x14\x7e\x53\x50\xf3\xa4\x26\xb1\x94\x4d\x99\x9b\xc9\x5d\x73\x2e\xa1\x09\xdf\xb6\x96\x5e\xa1\x6d\xa0\x57\x7a\x3b\xa5\x57\x7a\x69\x7a\xa5\x07\x75\x94\x3f\xc4\x50\x13\xef\x8e\x5e\x49\x6c\xd8\x12\xbd\x52\xcf\xff\x2f\xf4\x4a\xa6\xc3\xfa\x98\xb6\xd7\x3a\x7a\xa5\xd7\x56\x7a\x65\x35\xc3\x5e\xe8\x95\xea\xa1\xd8\x5a\x7a\xa5\xd7\x76\x7a\x65\x3d\x03\x37\x4c\xaf\xf4\xb6\x45\xaf\xc4\xdb\xd7\x2e\x4e\x28\xf4\xfa\x95\x0b\xf7\x83\xb2\x22\x38\xfe\x53\x8b\xef\x7a\xec\xf5\xa5\xef\xbb\x3e\x43\x3d\xa7\xf3\x31\xe0\xc8\x23\xbe\x5a\x4e\x59\xcd\x1f\x5c\x98\xe7\xde\x47\xe4\x55\x3f\xd9\xb0\xd4\x82\x3e\x36\x1f\x08\xaf\xa0\x3c\x6e\xd8\xac\xfe\xf7\xb4\x8a\x72\x50\x7a\x42\xb3\xe1\x3c\x38\xe9\x64\x12\x6a\x15\xc3\x9a\xa2\x2a\xe8\x10\x5b\x96\xcf\x52\x44\x05\x4d\x11\x15\xea\x69\x2d\x9a\x82\x6e\x8b\xa6\xa0\x43\x63\x39\x47\x41\x23\x8e\x42\x11\x14\x71\xa7\x86\xd9\x89\x54\x68\x94\x10\x15\xa1\xc5\xbd\x7e\x0d\xc4\x5c\x1a\x76\x99\xb8\x5a\x04\x13\x25\xb9\x80\x2c\xb9\x42\x49\xb8\x42\xc7\xae\x15\xd8\x2e\x3a\xfc\x39\xbf\x45\x4b\x41\xf9\x9e\x10\xda\xe5\xbd\xe2\xb1\xc9\x34\xd0\x73\xca\xde\x67\x8d\xa0\x40\x94\x6f\xaf\xa9\x8d\xe2\x6e\x62\xe1\x68\xb9\x74\x9b\xea\xdd\x59\x5f\x68\xd1\xc0\x44\x93\x8a\x23\x83\xa6\x65\x43\x7b\x5d\xe0\x38\x12\xa5\xc3\x0a\xf2\xc3\xd4\x59\xee\xba\x4e\xb9\xfc\x6a\x03\x08\x15\x2c\x18\x41\x21\x5f\x32\xe7\xdc\x33\xdb\x0e\x77\x48\xe1\x0f\x62\x73\xac\xa6\x3b\x73\x43\xd8\x13\xdf\x89\xc6\x95\xbd\x23\x27\x46\x05\x6a\x19\xeb\x91\xde\x5b\x84\x17\xcb\xd2\x6a\x7a\x9a\x52\x66\xd5\x8e\xc2\xb9\x11\x34\x1a\x8a\x65\x92\xe7\x87\xb8\x68\xeb\x28\x1c\x63\xe5\x78\x8c\x37\xe6\xca\xf2\xeb\xc5\xe3\x65\x12\x89\xf5\x14\xd4\x8c\xc7\xad\xe4\xcd\x0a\x29\xd1\x8b\x8b\x8d\x0a\x2b\x4f\x15\x1c\xf5\xd6\x76\xa4\xa1\xda\xe2\x56\x2a\x56\x5b\xdd\xb9\x02\x6a\xc1\x1c\xa6\x67\x70\xf1\xb8\x32\xa3\xea\xa7\xc6\x53\x4b\x7c\xd9\x98\x5a\x13\x0b\xef\x7f\xbf\xbd\xbc\xa9\x16\x09\xef\x9f\x39\xa9\x19\x07\xa1\xf4\x6a\x51\x20\xc5\xaf\x15\x03\xef\x7b\xb7\x37\xd5\x03\x40\x94\xbc\xd5\x66\x5f\xca\xad\x3e\xf5\x42\xf0\x1a\xf3\xde\x04\x19\x1d\xda\xa1\x1c\x7a\x1d\x8c\xdb\x4b\x4b\x8b\xef\x28\xd8\x3d\x2f\x7d\x45\xc6\xbb\x24\xa6\x85\xfa\x64\x3b\x85\x2b\x37\x64\x70\x76\xc3\x4a\x87\xfa\xb7\xc4\x48\xd7\xf4\xfc\x0b\x25\x9d\xe9\xb0\x3e\x0f\x08\x33\xd0\x36\x4e\x5a\x98\xd4\x4e\x52\x7a\x45\xcb\x5e\x58\xe9\x1a\xd1\xd8\x5a\x5a\x3a\xcc\x55\x6d\xe6\xa5\xd7\xb4\x70\xc3\xc4\x74\x68\xdd\x36\x98\xe9\x68\x0b\xdb\x3e\x2d\x2d\xeb\xde\x46\x4e\x89\x89\xd3\x29\x8d\x08\xfa\xc9\x27\x15\xde\x78\xab\x66\x51\xfe\x80\xc5\xc6\x98\xdd\xb1\x9c\xc3\x14\xb1\x0b\x37\x92\x1a\x31\x7c\x5a\x8b\xd8\x85\x2e\x8d\x31\xbb\x59\x2e\x17\x64\x1b\xbf\x52\x27\x7f\x9c\x68\x8e\xcc\x85\x56\x8a\xcd\x7d\xa0\xe2\x2b\xc6\x52\xdd\x36\x41\xe7\x16\x9c\x34\x13\x0a\x57\x3c\xae\xb5\x48\xe4\x6a\x27\xa9\x16\x49\xfc\xa9\xf8\x14\xd4\x26\x5f\x5b\xcb\x9e\x6b\x52\x03\x2b\x7d\xdb\x2b\xfd\xfc\xe5\xe0\x51\x29\xc2\xf3\x58\x0b\x00\x5e\x9f\xed\x12\xdf\x81\xf6\x04\xde\xf5\x7d\x57\x6c\xc8\xbb\x3c\x77\x14\x9b\xb0\x25\x90\x57\xcf\xfb\x2f\x18\x2f\xd3\x61\xfd\xaa\xba\xcf\xda\x06\xf1\xc0\xa2\x76\x22\xbc\xd5\x0c\x7b\x01\x78\xd5\x43\xb1\xb5\xf8\x4e\xa6\xa9\x36\xc3\xbb\xf5\x0c\xdc\x30\xba\x93\xc6\x6d\x08\xdc\x95\x54\x78\xd5\x5f\xf0\xea\x33\xf9\x82\x57\xbf\x77\xb1\xe2\xdb\x5d\xa5\xdf\x98\xb1\xc9\xf7\x7f\x84\xd5\x07\x48\xbb\x2b\xb2\xba\x22\x38\xa9\xad\xef\x2d\xe8\xbb\xb9\xfc\xb4\xf5\x77\x9d\x84\xee\x43\x98\xa1\xdd\x68\x3e\x42\xda\x75\x6f\x27\x9a\x7f\x40\xda\x6f\xbd\x4f\xb7\x3b\xd1\xfd\xff\x48\xfb\x74\x79\xb3\x82\x6a\x93\x88\xa3\x7f\x6b\xe9\x7e\x87\xb4\xdb\xde\xd5\xe5\xf6\x02\xfb\x1f\x48\x3b\xff\x78\x75\x75\x76\x5d\xb2\x98\xaa\xb1\x12\x1e\x94\xce\xe9\xd3\x66\x1e\x4b\xc1\x1a\xf1\xac\x16\x25\xe1\xb1\x26\x0f\x9a\x15\xe5\x47\x50\x61\x40\xd6\x5b\xcc\x4b\x78\x4c\xd1\x12\x1e\x15\xac\x44\xd4\x65\x4b\x9c\x04\xa8\xbb\x2b\xb0\xb0\x56\x1c\x48\x21\x8c\xf8\xcd\x91\x10\xc2\x09\x3e\x75\x01\xd3\x3d\x37\x2a\xf4\x9a\x9a\x2b\xbc\xe5\xb7\x40\xe0\x0d\xfd\xbb\x59\x81\x9f\x08\x83\xcd\xdb\x29\xfa\x03\xf6\x8a\x69\x41\x48\xbd\xa5\x15\xdf\x6e\x2c\xe4\x43\x22\xe7\x95\xbd\x22\xb9\x43\x92\x43\xfd\x87\x0e\xea\xeb\xb0\xf7\x50\xf2\x2d\xb6\xe1\x93\xd8\xde\x48\xe6\xff\x02\x00\x00\xff\xff\x14\x60\x0d\x45\xd2\x67\x00\x00"

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 26578, mode: os.FileMode(420), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

