// Code generated by go-bindata.
// sources:
// index.html
// DO NOT EDIT!

// +build bin

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5c\x6d\x73\xdb\x36\x12\xfe\x9e\x5f\x81\xf2\xda\x9b\xb6\x53\x52\x89\x63\xf7\x72\xa9\xe4\x1b\x27\x72\x5b\x4d\x63\x5b\x93\xc8\xbd\xeb\x75\x3a\x2d\x44\x42\x12\x62\x8a\xe4\x01\xa0\x6c\x57\xc3\xff\x7e\x0b\x10\x7c\xa7\x2c\x91\x62\x15\xcf\x24\x1f\x1c\x49\x00\xf6\x05\x8b\xc5\xee\x83\x05\x99\xfe\x67\xc3\xab\xd7\x93\x5f\xc6\xe7\x68\x21\x96\xee\x93\xd3\xf5\xfa\xf3\x15\x7a\x39\x40\xd6\x15\x17\xc4\x13\x3f\x13\xc6\xa9\xef\x45\x51\x5f\x75\x23\x74\xda\x5f\x10\xec\xc0\x17\xf9\x75\x49\x04\x46\xf6\x02\x33\x4e\xc4\xc0\x08\xc5\xcc\x7c\x61\xe8\x2e\x41\x85\x4b\xd4\x77\xf8\xb5\x5e\x5b\x43\x2c\xb0\xb5\xf0\xb9\xf0\xf0\x92\x44\x11\xf2\x15\xfb\x7e\x2f\x1b\xa7\xd9\x2d\x84\x08\x4c\xf2\xbf\x90\xae\x06\xc6\x7f\xcc\xeb\x33\xf3\xb5\xbf\x0c\xb0\xa0\x53\x97\x18\xc8\xf6\x3d\x49\x36\x30\x46\xe7\x03\xe2\xcc\x89\x91\xa7\x94\x9c\x07\xc6\x8a\x92\xdb\xc0\x67\x22\x37\xf8\x96\x3a\x62\x31\x70\xc8\x8a\xda\xc4\x54\x3f\xbe\x41\xd4\xa3\x82\x62\xd7\xe4\x36\x76\xc9\xe0\x99\xf5\x54\xb3\x5a\xaf\x7f\x9c\x5c\xbc\x41\x46\xff\x33\x23\x8a\x4c\xf3\x57\x3a\x43\xa3\xf3\xdf\x4e\xfb\x2e\xf5\x6e\x10\x23\xee\xc0\xe0\x0b\xe0\x6e\x87\x02\x51\x10\x60\xa0\x05\x23\xb3\x81\xd1\x9b\xe1\x95\xfc\x6d\xc1\x3f\x75\x9c\x7e\x25\x9e\x43\x67\xbf\x99\x66\x9e\x53\xcc\x80\xd3\x3f\x09\x1f\x18\xcf\x8f\xee\x9e\x1f\xa5\xec\xe4\x32\x44\x51\xc2\x95\x27\x5f\xcc\xe7\x47\x56\xe0\xcd\x0d\x24\xee\x03\x98\x2b\x5d\xe2\x39\xe9\xc9\x06\x6d\x87\x8c\x37\x0e\x02\x97\x98\xc2\x0f\xed\x85\x59\x90\xf3\xec\xe8\xe9\x1d\xfc\x6d\x95\x04\x63\xac\x86\x9c\x8f\x8f\xef\xe0\x6f\x3b\xe7\xe3\xe3\xa6\x9c\x4f\x8e\xee\xe0\x6f\x3b\xe7\x93\xa3\xa6\x9c\x5f\x80\x35\x5e\xec\x60\x8d\x17\x1b\xac\xc1\xc5\xbd\x4b\xf8\x82\x10\x91\x2c\x8a\x20\x77\xa2\x67\x73\x5e\xe6\x09\x4d\x3d\xea\x39\xe4\xce\x92\x9d\x9a\x51\x4f\xef\xa6\xd3\xfe\xd4\x77\xee\x75\xa3\x43\x57\xc8\x76\x31\x07\xfd\x84\x1f\x98\x53\xcc\x8c\x64\x27\xe5\xfb\x98\x7f\x8b\x5c\xcc\xe6\x04\xd6\x2a\x19\x50\x1a\xa2\xbb\x51\x18\x38\x58\x10\x50\x09\x3e\xb0\xe9\x90\x19\xf5\x40\xd3\xf8\xf3\xf7\x64\x57\x66\x3c\x94\xf7\x0a\xb2\x0c\x5c\xa0\x42\x7a\x1c\x7f\xf9\xb2\x4c\x80\x2c\x08\x0c\x3d\x90\xf7\xa0\xf4\xa7\x05\xc6\xfd\xd0\x4d\xfa\x97\xc4\x0b\xf3\x7d\xb1\x65\xf3\xbd\xa6\x34\x66\x71\x88\x1c\x64\xfb\x0e\x29\x35\x42\xb3\xcf\x91\x0c\x34\x94\x0b\x46\xa7\x52\xb1\x9a\x61\x60\x71\x97\x76\x27\x32\x0c\xfe\xee\x4d\x79\xf0\x5d\x9f\x07\xd8\x4b\xb8\x3c\x68\xec\x30\x10\xb4\x68\xea\x9d\x4c\xae\xc9\x62\x83\x4b\x61\x55\x5d\x0e\x31\x5f\x17\x37\x9d\xaf\xeb\x63\x07\xaf\xe6\x8d\x27\x9c\xd0\x75\x32\xe3\x5e\xe8\x16\x5c\x70\xab\xcb\x3e\xe4\xb1\x68\x06\xba\x09\x93\xd1\xf9\x42\x54\xbd\xb7\xa2\x0d\x4e\x68\xa7\xa1\x10\xbe\x87\x38\x81\x78\xe2\x60\x76\x8f\x16\xbe\xeb\xfa\xb7\x49\x98\x90\x79\x8f\xbf\xec\xf5\x6e\x6f\x6f\x2d\xd8\x5f\x0c\xfe\x2c\xdb\x5f\xf6\xe2\x44\xd9\x83\x60\x43\x30\x27\xbc\x27\xcd\xc5\xc5\xbf\xec\x65\x30\x88\x03\x4b\xd5\xb4\xa7\x49\x72\xc5\xfb\xdb\x26\xf7\x33\xf7\x63\x6b\x1c\x2a\x0c\xb0\x7d\x37\x5c\x7a\xa8\x1a\x0e\x24\xda\x08\x14\xda\x50\xf0\x20\xc0\x0c\x2f\x39\xac\x77\x89\x79\x80\x1d\x87\x7a\x73\x53\x06\xc3\xa7\x27\xdf\x16\x17\xa7\x26\xda\x2d\x98\x39\xf5\x99\x43\x98\xa4\x28\x2f\x51\x61\x7e\x09\x03\xea\xc8\xb5\x5d\x1a\xf5\x1a\x6f\x89\x9f\xe0\x9b\xc4\x95\xd4\x45\x49\x0f\x79\x77\x4a\x52\x8d\xa0\x0f\xfb\xe7\xe1\xcc\xe1\xcc\xf6\xb0\x06\x10\x37\x34\x86\x14\xf7\x68\x6d\x61\x07\xe1\x1e\xc6\x90\xd4\x0d\xad\xa1\x04\x3e\x5a\x73\xd0\x7d\x5c\x83\x36\x76\x0d\xfa\x98\x5d\x23\xe0\x7b\xd8\x22\xe0\x4d\x6d\x21\xc5\xed\x62\x8b\x42\xd8\xae\x4c\xb6\x00\x17\x4b\xd9\x6d\x45\x98\xa0\x70\x28\x42\xd3\xb9\x99\xe6\xaa\xa2\xf1\x2a\x39\x04\xeb\x1c\xf6\xb7\x4a\x14\x84\xde\x0b\xb2\xf4\xd9\x7d\x39\x19\x95\x53\xd1\x43\x5c\xcb\xd1\x04\x3a\x01\xe5\xdd\xa0\x90\xc3\xf1\x67\x1f\xc6\x95\x9d\x09\xbd\xaf\xc7\xd7\xfb\xb0\x2c\xbb\x37\x74\x8e\xe0\x18\xca\x66\xd8\x26\x7c\x1f\xc6\x65\x5f\x81\xce\x31\xf3\x81\x29\xdf\x85\x6f\x3e\xcb\x6f\x4e\xea\xdc\x66\x34\x10\xf9\x73\xcc\x7b\xbc\xc2\x71\x6b\x9a\xd9\x57\x98\x21\x99\xae\xd1\x00\xe9\x73\x7d\x14\x7d\x07\x10\x4d\x8d\xda\x85\x51\xb9\x62\x80\x38\xb3\xb3\x63\xd2\x7b\x0e\xdf\xe0\xd4\x6d\x4d\xce\x7e\xf8\xe1\x7c\x38\xa5\x5e\x14\x2d\xa9\xd7\x9b\x86\x9e\xe3\x12\x0b\xbe\x5a\xef\xf9\x7a\x4d\x5c\x4e\xa2\x08\x28\x93\x0e\xd5\xe8\x39\x19\x1e\x3a\x2d\xe9\xd4\xd3\x27\x2c\x79\xe8\xd2\xa5\x8e\xde\xd7\x4f\xbe\xee\x45\xd1\x7a\x1d\x6f\xb1\xdc\x9e\xc3\xf2\x84\xf7\xfb\x14\x3b\x73\xc0\x5d\x33\x01\x27\xf8\x64\x25\x60\xce\x3f\xc2\x67\x14\xc1\xec\xd5\xbe\x89\x22\xd9\xf6\x3a\xfe\x8a\x7c\xef\xb5\x4b\xed\x9b\xc1\x5a\x2c\x28\xb7\x16\x58\xea\xa6\x5a\x22\x84\x9e\xc4\xa5\x90\x57\x92\xab\xa2\xb7\x26\x60\x1a\xb9\x9b\xb1\xd4\x46\x69\xbf\xa3\x52\x31\xfa\xec\x52\xab\x58\x15\x94\xe9\xb7\xab\x56\xe5\x43\xa1\x52\x6a\xbd\x9e\xc8\xc2\xce\x18\x74\xa2\x77\xc4\x41\x46\xd2\x8d\x0c\x54\xa9\x05\xe9\x73\xb2\x11\x97\x97\x8e\x73\x53\x30\x6c\x97\x06\xcf\x8e\xd0\x12\xc2\x16\xf5\x20\x3e\x03\x84\x5e\x9a\x59\xad\xa6\xcc\x0a\x96\xf6\x38\x5e\xe2\x46\xba\x27\x87\x0d\x60\xa0\x4f\x1a\x29\x6f\xdd\x95\x1e\x42\x1a\x70\x4d\x33\xb9\x1c\xb4\x09\xe7\x3e\x49\x02\xf4\x7a\xad\x16\x6b\xec\x73\x2a\xe8\x8a\xa0\xcf\x03\x0b\x42\x91\x87\x0c\x81\xa7\x1c\xc9\x7f\x74\x7a\x42\x53\xcc\x4c\x97\xc8\x02\x43\xa5\x0f\x44\xc5\xd9\x46\xb6\xd5\x54\x13\xe4\x48\x55\x71\x43\xf1\xd1\x0f\x4f\x4d\x9d\x26\xb3\x5d\x23\x17\x4f\xfa\xd2\x04\x54\x48\xb4\x88\xa2\x5c\xf4\x58\x9c\xa4\x09\xa3\x6e\x59\xf4\x30\x15\x47\x17\x27\xf9\xa8\x83\xeb\x62\x4e\x96\x7e\xe2\x73\x95\xdc\x6e\x72\x8a\x28\x5f\x1d\xd8\x72\x68\x2d\x4c\x92\x7a\x41\x28\xcc\x39\xf3\xc3\xa0\xde\x6f\x12\x9a\xfc\x19\x36\x47\x64\xba\x78\x4a\xdc\x52\x62\x76\x88\x8b\xef\x2b\xe7\xd0\x2d\x3c\x50\xfc\x6f\x6d\x16\xd5\x87\x1f\x69\x5d\xa7\xe6\x84\x5b\x8f\x04\xca\x51\x09\xbd\x01\x37\x18\x66\xeb\x04\xfb\x6c\xc3\x29\x13\x49\x83\x99\x9e\x7f\xcb\x70\x80\xf2\x8a\xc6\xe3\x95\x8b\x3e\x2c\x30\x8e\x38\xe8\xc2\x67\xa4\x23\x89\x15\xcc\x92\xe6\xac\x0f\xbe\xdc\x80\x1f\xf9\x5f\xb4\xda\x9e\x75\x36\xe5\x80\x14\x05\xd9\x6f\xd9\x2f\x73\xdb\xf3\x30\xcb\xde\x91\xc4\x87\x96\x3d\x81\x29\x69\x84\x38\xed\x43\x8c\x82\x70\xa5\xa3\xe3\xa5\xef\xfd\x97\x30\x3f\xd3\x62\xe1\x03\x5e\x45\x90\xe7\x41\xb8\x79\x57\x71\x00\x18\x40\x1d\x99\x92\x34\x57\x91\x5e\x5e\xa8\x5f\x2c\xa7\x86\x58\x14\x01\x53\xee\xb7\xec\x4c\x43\xa8\x9c\x5e\xa5\xf6\x73\x7a\xcd\x09\xfb\xa2\x29\xd1\xbb\x7b\xde\x98\xe6\xdf\x98\x8a\xc6\x44\x23\x48\xf7\x65\xa2\x5e\x3a\x7b\x35\xd9\xec\x52\x47\xa4\x95\x68\xe5\x8f\x12\x8a\xa9\xac\x05\x99\x4c\xba\x0b\xc3\xde\x1c\xb2\x13\xfc\xca\x12\x1a\xfc\xb0\xde\x50\x2e\x64\xff\x7b\x7e\x87\xfe\x88\x71\x86\x6c\xfa\x52\x0e\xf8\xca\x5a\xe2\xe0\xcb\x59\xe8\xd9\x82\xfa\xde\x97\x92\xf8\x2b\xb4\x46\x8c\x88\x90\x79\x7f\x80\x4b\x08\x06\x2b\xfc\x13\xb9\x47\xf2\xa8\x6d\xc2\xee\x9b\xde\x9b\x97\x86\x92\x62\x5d\x16\x92\x8f\x70\xaa\x73\xcd\xfb\x5c\xa9\x88\x9d\x70\x80\x29\x3a\x45\x2e\x39\x90\x91\xe3\x04\x87\x9e\x90\x93\xc0\x56\xf6\x53\x99\x34\xfe\x39\xd0\xac\xe4\x3a\x8f\x6d\x91\x53\x29\x13\x93\xf6\x7d\xd1\x95\x34\x70\x90\x4d\xc2\x92\xae\xce\x64\x49\xc7\xda\x24\x2c\xed\x6b\x2e\xcd\xa4\x1e\xec\x50\x4e\x36\x48\x95\x9e\xb9\x49\x6a\xda\x57\x96\x9a\x73\x5d\xed\x6f\xd1\x57\xd1\x1f\xd2\xf9\x34\x34\x53\x1f\x30\x2c\x77\xa7\xd2\x53\x71\xe4\x49\x1a\x5a\x9a\xe2\x38\x38\x83\xb6\x85\x71\xc3\xd9\x23\x40\x71\xa0\x44\x0b\x10\x97\x3f\x66\x7f\xc2\x72\xdb\xb2\xfb\x70\xd6\x11\x94\x03\x46\x87\x45\x72\xfb\x09\xfc\x08\x81\x1c\x6c\xa7\x8e\x71\x9c\x8a\x12\x87\x84\x71\xfb\x09\xec\x08\xc5\x29\x25\xf6\x04\x71\x05\x40\x50\x46\x01\x72\xb9\x98\x8c\xd9\x79\x6c\xb4\xc1\x5e\x62\xb1\x92\x16\x33\xd0\xcf\xea\x7e\x3f\x31\xd3\x0d\x7a\x86\x8c\xa1\x7a\x7a\x04\x74\x69\x4c\x7c\x84\x8c\x0b\x3f\xf4\x04\x71\xda\x50\x3f\x47\xc6\xd9\x0a\x53\x17\xc0\x10\x6b\x4a\x7b\x8c\x0c\xc0\x24\x5f\xb4\x21\x3d\x51\xa4\x4e\x1b\xd2\x6f\x91\x31\xf1\x05\xd6\x1a\x37\xc7\x99\x0e\xe4\x9c\x6b\x99\x72\x72\x68\xd3\x99\x65\x69\x37\xed\x6f\x04\x39\x9d\xd9\x26\xc4\xe9\xcc\x34\xe0\x74\x28\x8b\x9f\x6a\x80\xc1\xd6\x90\xb2\x4b\x55\x52\xca\x3c\x09\xa1\x3a\xbc\x53\x0f\x3b\x25\x07\xb2\xba\xd4\x45\xa9\x3c\x7a\x69\xca\x25\xd1\xa3\x8a\xbc\x76\xc7\xc1\x85\x78\xb7\x0c\x55\x10\x46\x0a\x41\x0c\x8c\x91\xe7\x3b\x84\xa3\x19\x23\xa4\x1a\xe8\x40\x81\x91\xec\xa9\x0b\x71\x28\xee\x57\xde\xd9\x02\x60\x17\x94\x2d\x43\x43\xe0\x0b\xee\x57\x01\x86\x3b\xcc\x23\x94\x0e\x5f\x3b\x8f\x90\xa7\x68\x72\xc3\x54\xae\x79\x3d\xde\xec\xda\xd6\xa1\xdc\x59\x9b\x74\xac\x85\x10\x99\x82\xce\x5f\xee\x09\x42\x6d\xde\x5a\xf5\xd4\x80\x07\xf4\x53\xfb\xbe\xa2\xe0\x87\x80\xeb\xb4\x3d\x5c\x1f\x3d\x06\xb8\x3e\x6a\x05\xd7\xf3\x37\x4d\x9f\xe0\xfa\x36\x0c\x37\xea\x0a\xae\x8f\x0e\x0d\xd7\xf7\x13\xf8\x11\xc2\xf5\x51\xe7\x70\x7d\x74\x68\xb8\xbe\x9f\xc0\x8e\xe0\xfa\xa8\x03\xb8\xbe\xb1\xe6\x9a\x46\xaf\xc6\xe5\xcd\xf1\x0e\x14\x05\x1b\xd9\xbe\x6b\x2e\x1d\xf3\x79\x9a\xfb\x5e\x51\xc1\xd1\xc8\xeb\x5d\x85\x02\x05\x72\x76\xca\xc2\x45\x29\x57\xa8\x5f\xba\x9d\x9f\xf6\x7b\x85\x6b\xf6\x80\xef\xad\xc8\x18\xdb\x37\x64\xab\x2e\xe9\xa8\x2b\xd4\x81\xcc\x21\xf3\x03\xfe\xcd\x39\x63\x3e\xdb\x26\xf8\x8d\xcf\xeb\xa5\x36\x86\xf9\x74\x06\x39\x90\xf1\x1c\xc8\xa7\x39\x90\xaf\x7b\x1b\x41\x7c\xba\x11\xe2\xd3\x04\xe2\x6b\x7c\x4f\x67\x56\x19\xdc\xef\x0e\xca\x53\xe2\x1d\x70\x58\x0d\xed\x68\xdc\x3d\x82\x2b\x7a\x65\x3c\x42\xaf\xad\x82\x64\xe8\xd5\x2f\x93\xf3\x77\xb0\xb4\x68\xe9\x3b\xa1\xeb\xa3\xe3\x1f\x2a\x0f\x93\xc4\xda\xbd\xba\x17\x84\x8f\xbc\xda\x67\x6e\x4f\x7b\x1b\x39\x4b\x8f\xd9\x89\x35\x0c\xac\xe7\x5d\x83\x29\x0b\xd2\x5e\x8d\x26\x6a\x02\xf5\x7e\x99\x0a\x19\x12\x57\x60\xb9\x99\x6b\xe7\x50\x9a\x81\xe2\xb9\xd9\xd9\xab\x4c\xeb\xb5\x3f\x3d\xf8\x72\x06\x69\x90\xd8\x6a\x75\x1d\x29\x9a\x2c\x69\xc2\x7d\x97\x45\xd5\xec\x5b\x2f\x6b\x16\xee\x76\x5a\x84\x87\x66\x53\x9a\xcb\x38\x37\x8b\x06\xac\x0f\xb4\xc4\x45\x8b\x3b\x2a\x00\x93\x38\x00\x6f\x30\x79\x9d\x1f\x28\xba\x5d\xbc\x40\x45\xf8\x4d\x3e\x10\x33\xce\x92\xfd\x25\x75\x51\x4a\x24\xcd\x67\x94\x72\x7a\xc1\xe6\x7b\x32\xac\x9b\xd0\x2e\x8e\x97\xf0\xaa\x9f\xd2\x37\x35\xc6\x22\x49\x7e\xdb\xca\x3b\xce\x84\x4d\xb6\x8c\xe6\xbd\x8b\xe2\x31\xf3\xe6\x1b\x46\x9b\xf3\xcc\x75\x63\x30\x96\xf8\xad\x5e\xda\x52\x83\xd4\x24\x6d\x49\xe6\x53\x6e\x51\x4b\xa1\x1d\xb2\xb4\xb4\x45\x6f\x1b\x26\x7e\xb6\x69\x23\x15\xb7\x52\x3b\x6f\x2b\xe8\xde\x99\xcb\x6d\xe2\x5a\x9c\xda\x43\x41\xa2\x66\x6e\x3b\xfa\x5d\x8a\xa8\x76\xe4\xdd\xc4\xef\xce\x33\x8f\x6b\xc2\xbc\x81\xdf\x3d\x82\x2a\x8e\x7c\x9c\xb8\x6d\x19\xe7\x82\x2c\x1f\x41\x1d\x47\x6a\xd1\xa2\x90\x93\x3c\x33\xfd\xa9\x88\xb3\xed\x64\x0f\x96\xea\xa8\x8a\x23\x39\x1d\xb6\x8c\xb3\xa7\xc4\x8f\xb0\x8e\x23\xb7\x53\xc7\x85\x9c\x38\x4e\x1c\xb2\x92\xb3\xa7\xc4\x8e\x4a\x39\xb1\x16\x8f\xe5\xf9\xb9\xef\x19\x69\x5c\xf6\x91\x77\x9b\x2d\x68\x9c\xa6\x34\x0a\xe2\xed\x5b\xee\x58\xaa\x88\x9e\xab\x76\x40\x43\x96\xd4\xe2\xde\x46\xd5\x0e\x20\xd9\x54\xee\x80\x2e\x5d\xef\xb8\xa1\x9e\xbc\xc3\x85\x06\xeb\x27\x2a\x33\x6f\xe1\x0c\x53\x2a\x4e\x64\xa3\x5a\x54\x36\x24\xf1\xf7\xfa\xa6\xb0\xe9\x03\x69\xe5\xdb\x3f\xc9\xab\xee\xfa\xaf\xd4\xb5\xcb\x35\x5d\x9d\x9a\x3b\xdf\xa2\xd5\x11\x3f\x9e\x2b\xae\x80\xb7\xc6\x46\x63\xfe\x08\xa0\x11\x28\xd1\x02\x19\xe5\xde\x79\xfa\x04\x8e\xb6\xa5\xcb\x31\xef\x08\x1b\x01\xa3\xc3\x42\xa3\xfd\x04\x7e\x84\xc8\x08\x76\x53\xc7\xc0\x48\x05\x89\x43\xe2\xa2\xfd\x04\x76\x04\x8b\x94\x12\x1f\xe4\x81\xb4\xcf\xed\xac\xd5\x26\xf2\x2e\xac\xd1\xc3\x62\x63\xae\x9e\x53\x1b\x8f\x86\x4d\x1f\xda\x92\x94\x47\xc8\xb8\x6e\x47\xf9\x1c\x28\xdf\x9d\xbf\x6d\xfa\x6c\x9b\x24\x3d\x06\x75\xdf\xb6\x91\x79\x82\x8c\xcb\x51\x1b\xc2\x6f\x91\xf1\xf3\xe8\xed\xa4\x0d\xe9\x3f\x90\xf1\xf6\xfc\x5d\x1b\xca\x17\xc8\x98\x8c\x2e\xce\xe5\xeb\x0c\x4d\x49\xff\x89\x8c\xd7\x57\x17\x17\x67\x97\xc3\xd8\xbe\xcd\x71\x67\x00\xf9\x32\x7f\xc9\x16\xf0\x1c\x5c\x90\x7d\x8d\x40\x67\xc0\x37\x61\xce\x80\x6b\xc8\x19\x50\x89\x38\x03\x6e\x81\x27\x6e\x7d\x73\xa3\x10\x47\xe5\x43\x44\x09\x5d\x53\x74\xa6\x69\xaf\x6b\x69\x4b\x30\x4e\x8e\xe3\x84\xb5\x16\x32\x66\xd4\x67\x54\xdc\xb7\x66\x70\x49\xed\x16\xd7\x87\x9a\xf8\x1d\xfd\xb3\x3d\xf1\x5b\xc2\x21\x72\x79\x62\x1b\x03\x1d\x7f\xaa\x86\x9b\xd0\xda\x9b\xcf\xea\xc0\xda\x2b\xd2\x03\xc3\x64\xfd\x9f\x26\xd5\xbc\xd5\x1b\xf7\x34\x7a\xa9\x37\xd9\xa3\xd2\xeb\x17\xf9\x23\x8d\xdc\x84\x44\xee\x03\xeb\xcc\xa5\x73\x4f\xbf\x72\x1d\xbf\xcc\x9c\xbd\x9d\xfd\x06\x68\xeb\xde\xd0\x96\xed\x3b\xbe\xa5\x1d\xeb\x2f\x09\xf4\x6b\xe3\xba\xe6\x9d\x7f\xdf\x1b\xc3\xde\xd4\xec\xb2\x38\x91\x62\x01\x0d\x93\xe3\xd3\x79\x32\xe9\xff\x07\x00\x00\xff\xff\xb9\x76\xec\x1c\x02\x50\x00\x00"

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 20482, mode: os.FileMode(420), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

