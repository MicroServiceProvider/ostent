// Code generated by go-bindata.
// sources:
// index.html
// DO NOT EDIT!

// +build bin

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xe4\x1c\xfb\x73\x9b\xc8\xf9\xf7\xfc\x15\x7b\x4c\xaf\x73\x77\x3d\xc0\x76\x9c\x36\x93\x93\xd4\x49\x6c\x35\x65\x6a\x3b\x9a\xd8\x4e\x7b\xe3\xd1\x64\x56\x62\x25\x6d\x82\x80\xdb\x5d\xfc\xe8\x5f\xdf\x6f\x59\x1e\x8b\x84\x24\x84\x80\xb8\x93\xcc\x44\x16\xb0\xdf\xfb\xdb\xef\x05\xe2\xee\xce\x25\x33\xea\x13\x64\xa8\xbf\x9f\xa3\x50\xd0\x25\x31\xc6\xe3\x1e\x0f\xb1\x3f\xb8\xbb\xb3\xce\xb1\xc0\x16\x7f\xe2\x82\x2c\x3f\x07\xf0\xe9\x0b\x4b\x2d\xfa\x3c\x0b\xd8\x12\x0b\x58\x6a\x27\x6b\x89\xef\x8e\xc7\x6b\x28\x17\x00\xe5\x63\x85\x14\xa3\x05\x23\xb3\xbe\x61\x1b\x48\x50\xe1\x91\xbe\x91\x5e\x45\xe5\xa4\xd2\xcb\x9f\xf9\x22\x60\x40\xcb\xd8\xc0\xd2\xea\xba\x9e\x8d\x37\x32\xe4\x61\x60\xe5\x45\xcf\xa5\xf7\x68\xea\x61\xce\xfb\x06\x0b\x1e\x10\x79\x04\x21\x5c\xe2\x02\x87\xe6\x24\x10\x22\x58\x1a\x83\x17\x08\xe9\xcb\xa6\x81\x17\x2d\x7d\xc4\x97\xd8\xf3\xcc\x63\x24\xc8\xa3\x30\x19\x9d\x2f\x84\x31\xd0\x97\xdd\xdd\xd1\x19\x52\x4c\x86\x98\xe1\x25\xb7\x2e\xb0\x6f\x5d\x91\x39\x16\xf4\x9e\x8c\xc7\xc0\xe2\x83\x29\x3f\x16\xd4\x25\xc0\xa4\xc7\xe1\xa4\xfc\xae\x9f\x94\x9c\xc7\x0c\x00\x0b\x8b\xe3\x14\xf5\xe2\x95\xa2\x1a\xdc\x13\x36\xf3\x82\x07\x20\x8c\x53\x4d\x5e\x04\xd8\x45\xf8\x7e\x8e\x5c\xca\x43\x0f\x3f\xa1\x00\xcc\x14\xf8\xdc\x50\x3a\x4f\xf5\x96\xb0\x74\xe3\x51\xff\x6b\xcc\xd9\x78\x3c\x88\x8d\x9d\xd2\x48\x99\x30\xe5\x07\x82\xaf\x82\xc0\xe5\x29\x31\x43\x46\x10\x10\xc5\xc2\xf4\xc8\x0c\x64\xb6\x2c\x0b\x25\xb6\x4f\x69\x4b\xb5\x2b\x9e\xed\xc5\xf1\xa0\x67\x83\x56\x62\x25\x66\x5f\xd6\xb5\xe9\x61\x36\x27\xe6\xf1\x71\xcb\x3a\x8c\x3c\xdd\xd8\x4b\xe2\x47\x28\x13\x54\x7e\x49\xd6\xc1\x4a\x8f\xa6\x5f\x8b\xfc\x52\x3f\x8c\x84\x39\x67\x41\x14\x1a\xf9\x8a\x8d\x6b\x4c\x0f\x4f\x88\xa7\xcc\xe5\x07\x0f\x0c\x03\x14\x90\xe6\x99\x2e\x76\xc1\x4f\x22\x70\x42\x3f\xb6\x70\x72\x55\x9d\x51\xfe\x87\x38\x99\x06\xbe\x8b\xd9\x93\xb4\x37\x9e\x78\xc4\xcd\xf7\x86\xa6\xb2\xb7\x13\x0e\x7a\x16\x44\x6d\x89\xbd\x89\x6b\x4b\x61\x31\x2e\x75\xa5\xab\xcc\x95\xac\x0b\xc2\xb9\xf5\x4f\x58\x03\x1b\x0c\x15\xff\x25\x44\x34\x7d\xa0\xa2\x3c\xd1\x74\x0a\xd0\x68\x07\xf2\xe1\xa3\x60\xf8\x4c\xe2\x02\xdb\xae\xd0\x18\x98\xbb\xa0\x6f\x80\xba\xd2\x84\xae\x83\x96\x95\x72\x19\x30\xd2\x9a\x52\x62\xe4\x5b\x95\xb2\x03\x56\xa9\x04\xfd\x65\xbb\x52\x0a\x87\x3d\x3b\xdd\x23\x3d\x3b\xf2\xd6\xf7\x2d\xf9\x63\x7d\xeb\xa6\x7e\x88\x8e\xd4\x3e\x5d\xd9\x9e\x1a\x0a\x2e\x18\x0d\x49\xbe\x1f\x57\xe2\xb4\x58\x10\x0c\xae\x5e\x08\x59\x2a\x76\x23\x88\x28\x69\x70\x36\x06\x23\xc2\x68\xe0\x26\xf1\x69\xc7\xea\x42\x28\x47\x9f\xb0\x17\x91\xed\x80\x40\x3f\xb9\x1e\xeb\x45\x8b\x56\x1e\x96\x19\x87\x61\x7f\x4e\xd0\x9f\x3c\x8c\xde\xf4\xb3\x0b\xd6\x05\xe5\xd2\xfb\x8a\x02\x55\x10\xa5\x34\x1c\xe5\x2c\xa3\x07\xea\x8a\x85\xf9\x92\x91\xa5\x0c\x01\x40\xd5\x52\xc2\x8f\xc7\x4b\xc5\x5f\x1d\x2d\x28\x44\xb1\x2e\xb2\x14\xbf\x01\x81\xe9\xb1\x35\x85\x24\xa9\x37\xfe\xf3\x22\xf7\x20\xfd\x33\x4f\x0c\x2b\x40\x2b\xf9\x7a\x09\x72\x75\x9c\xb0\x2f\xc9\xb2\x83\x8c\x0d\x54\x02\x15\xbf\x2b\xe7\x6b\xc9\x58\x13\x09\x5b\x91\x6e\x31\x5d\x1f\xaa\xc1\xef\x31\x5f\xc7\x3a\xeb\x2e\x61\xc7\xe4\x5a\xcb\xd8\x39\xf6\x5a\x29\x3b\x07\xef\x3c\x67\xc7\xa4\x5b\x4b\xda\x39\xf6\x1a\x59\x3b\x07\xee\x20\x6d\x17\xdc\xb1\xb3\xbc\x9d\x46\xa6\xfd\x33\xd6\x4d\x20\xb0\x57\x07\xf0\x96\x93\x5a\x85\xc2\x3f\x18\xd9\x51\x27\x6c\xa4\xf7\x63\xdd\xfa\x02\x92\xa1\x56\x60\xc0\x51\x5e\x61\xc0\x41\xed\x12\x03\xb2\xbd\x04\xff\x17\x95\xc6\xad\x59\x2e\x48\x04\xb1\x0d\x0e\xc2\x20\x8d\x71\x10\x02\x69\x95\x1a\x08\xd0\x64\x6e\x46\x9c\x84\x53\x61\x20\x17\xd4\x99\x1c\xf4\x73\xb6\x46\x53\x50\xad\xce\x67\x7c\x62\x87\x25\x5b\xae\x8d\xdc\x59\xd7\xa5\xd1\xf9\xac\x83\xca\xe8\x9c\xf2\xaf\x28\xe2\x18\x7c\x7c\x9f\xea\x08\x78\x6b\xa2\x38\xca\xa9\xb7\x58\x20\x1d\xa8\xc7\xef\xb1\x3e\x92\x2a\xeb\xae\x3c\x92\xd4\x5a\xab\x8e\x32\xe4\xb5\x8a\xa3\x0c\xba\xf3\xda\x48\x52\x6e\xad\x34\xca\x90\xd7\xa8\x8c\x32\xd8\x0e\x0a\x23\xdd\x0f\x9b\xaa\x8b\xee\xee\xec\x5f\x50\x18\x7c\x25\x28\x8c\x18\x9d\x3d\x4d\x39\x7f\x53\x58\xeb\xb2\x20\x94\x3b\xb5\x10\x72\x30\x23\x90\xae\xec\x64\x1f\xa0\x5f\xec\x64\x70\xbf\x2b\xe3\xa5\x1b\xf8\xee\xee\x81\x8a\x05\x82\xac\x4f\x1e\x8b\x32\x7e\x4a\xd5\xfa\x55\x4a\xf8\xa2\xd4\x3f\x2e\x60\x89\xf2\x83\x84\x5e\x72\x2e\xb1\x5c\xc1\x70\x83\x73\x72\x4f\xa7\x44\xe7\x0e\x56\x9f\x49\x01\x92\xe5\x79\x96\xcc\x46\xf7\xfb\x24\xf1\xbd\x44\x3a\x6e\x44\xa4\xcb\x20\xf2\x05\x94\x8e\x2d\xcb\x54\x48\xce\x95\xc4\x7b\xd5\x88\x78\xaa\x9e\x7e\x76\xc2\x9d\x36\x22\x5c\x5c\xf3\x3f\x3b\xd9\x4e\x1a\x91\xed\xed\x3d\xa6\xcf\xd0\x70\x2f\x9b\x32\xdc\x8f\x4d\xca\xb6\xb9\xd5\x72\x67\x5a\xa7\xe5\xce\xf2\x46\xcb\x9d\xd5\xec\xb3\x56\x0b\x5e\x68\x25\x00\x17\x44\xc6\x2b\xbc\xdc\xb3\x67\xc9\x91\xa0\x04\x0b\x65\xf5\xb1\xe8\x7d\xd0\x9c\xe1\xa7\x15\x49\x54\x9d\xac\xf5\x59\x40\xaf\xac\xd3\x4b\xaa\x77\xc7\x0f\x5c\xc2\x91\x90\x2b\xb2\xf5\xea\x64\x0e\xd0\x0d\x97\x25\xdd\x64\x91\x49\xe8\xf2\xdc\x9c\xc7\xa8\xb0\xbc\x1b\x16\xe3\xdd\xba\x95\xc7\x19\x74\xb4\x39\x8f\xb3\x42\x7f\xdb\x00\x8f\x5b\x3a\x5f\xa5\x41\xd5\xf8\x56\xd1\x75\x49\x47\xbc\xa6\xee\x1f\x0b\xea\x2e\x42\x7c\xcb\x56\x7a\x1a\x46\x5d\xf7\xd2\x67\xa3\xdb\x0e\x9a\x69\xa0\xb2\x57\x17\x2d\xb9\x6a\xa2\x8d\x06\x3c\x2d\xf6\xcf\x87\xea\xee\x7b\x6c\xa0\x63\x9d\x75\xd7\x41\xc7\xe4\x5a\x6b\xa1\x73\xec\xb5\x7a\xe8\x1c\xbc\xf3\x26\x3a\x26\xdd\x5a\x17\x9d\x63\xaf\xd1\x46\xe7\xc0\x1d\xf4\xd1\x05\x77\xec\xec\x06\xc3\x19\x48\x57\x73\x6a\xcf\x76\x0c\x7b\xcb\x01\xaf\x9f\x78\x2d\xb8\x7f\x63\x2a\x6a\x01\x3a\xae\x57\xff\x06\x03\xa4\x41\xad\xec\x85\xa3\xbc\xee\x85\x83\x83\x0a\xdf\xbc\x45\x97\x78\xad\xab\xc3\xa6\xf4\xa9\x0f\xae\x94\x2c\x12\xb3\x34\x55\x3e\xad\x2f\x9c\x49\xf5\x92\x3a\x51\xc3\x94\xc1\xd6\x45\xc2\xe9\x89\x96\xe9\x4a\x5f\x29\x12\xce\xce\x34\x40\xd9\xa4\x3e\xd4\x15\x9c\x6c\xe3\x40\x3a\x5d\x91\x83\xec\xcc\xb7\xbd\x45\x42\x3b\xbf\x45\xe2\x74\x71\x8b\xc4\xf1\x05\x9c\x84\x12\x8c\xef\x55\xdc\x39\xcd\xdc\x22\xc9\xa9\xb7\x58\xe2\x1d\xa8\xc7\xef\xb1\xc2\x73\x3a\xbd\x45\xe2\xb4\x79\x8b\xc4\x39\xe8\x16\x89\xf3\xcd\x6e\x91\x38\x6d\xde\x22\x71\x0e\xb8\x45\xe2\x74\x78\x8b\xc4\x69\xe1\x16\xc9\xce\xca\x2e\x0b\x4a\xb5\x8a\xa6\x51\xd9\xd8\xe2\x9c\x05\x21\xff\x75\xc8\x58\xc0\x38\x72\x7c\xfb\x43\x24\x50\x48\x58\xb2\x15\x8d\x8d\xc8\x4f\xf4\x3c\x5a\x08\x08\xe8\x22\x00\xeb\x3a\x1f\x50\xc8\xcb\x08\x8e\xf0\xf4\x2b\x11\x4d\xd1\xca\xb0\x6d\x22\xf7\x8e\x36\x46\x0b\x68\xf4\xe8\x60\xd2\xb3\xe9\x60\x85\xd6\x1e\xd5\xa7\x4f\x20\x85\x69\xf5\x27\xd5\xc6\xae\xf1\xb5\xe6\x26\xaf\x74\x66\x35\x32\x30\x4d\x91\x39\xa3\x8a\xa8\x36\xeb\xf0\xcf\xfe\x84\x87\xbf\x15\x0c\x14\x8f\x59\x91\x1b\xbb\x21\x51\x6e\xb8\x0c\xdc\xc8\x0b\xd0\xe9\xfb\xcc\x4c\xfa\xa4\x71\x1d\x0e\xec\xab\xc1\x24\xdc\xc6\x8e\xed\xf8\x19\xcb\xf6\x46\x68\xe9\x1a\xe5\xe0\x70\x25\x83\xff\xb5\x04\x9e\xa4\xdb\x66\x1d\x5e\xed\xa8\x1d\xf4\x13\xf8\x52\x06\x14\x02\x9d\x83\xe4\x8f\xae\x43\x3d\x42\x49\x1b\xfc\x04\x61\x2a\xe6\x9e\x78\x02\x27\x1a\x40\xc6\x91\xf1\x73\xc9\x15\x49\x75\xfd\x52\xca\xf7\xc6\x4b\x29\xd8\x78\x2c\x8d\x92\x85\xbc\xf5\xa0\x22\xd5\xa2\xed\xb8\x54\xaf\x1a\x67\x1b\x74\x73\x9e\x59\x65\x1b\xf8\x66\xdb\x64\xc1\x6c\x13\xfc\x0e\xdb\x0c\x73\xab\x6c\x45\x50\x62\x9b\x06\xb7\xc7\x2e\xcf\x0f\xb3\x38\xba\xee\x3b\x49\x54\xdc\xe1\x7d\x29\x86\x52\xf7\x4b\x50\xec\xf0\xbf\xb5\x98\xbe\x49\x63\xbb\x38\x1a\x69\xbc\x6c\x47\x51\xa6\xf5\x0e\xd4\xfd\xee\xf7\x9b\xe1\x75\xa9\xb2\xdf\x3d\x41\x3b\xb1\x43\xd5\x0a\xba\x54\xd1\x31\x78\x35\x35\xbf\x73\x6e\xae\xb7\xe8\x58\xa6\xba\x8d\x7c\xc4\xb0\x5b\xb4\x2b\x81\xab\xab\xb6\xe5\x8e\x36\xe4\x5d\x77\xb4\x23\xde\x41\x47\x3b\x62\x81\xac\x7c\xf7\x6c\x68\x81\xb5\x26\x1a\xda\x8c\x78\x8b\xfd\xec\x81\x5a\xfc\x1e\xfb\x59\xa9\xb2\xee\xfa\x59\x49\xad\xb5\x7e\x36\x43\x5e\xab\x9f\xcd\xa0\x3b\xef\x67\x25\xe5\xd6\xfa\xd9\x0c\x79\x8d\x7e\x36\x83\xed\xa0\x9f\xd5\xfd\xf0\xff\xf9\x91\xbf\xfd\x9e\xda\x19\xf1\xa6\x9e\xfe\x1b\x39\xe7\xcf\xeb\x81\x24\x29\x5a\x33\x4f\x01\xde\xb6\x2f\x5a\x45\x79\x9a\x79\x7a\xec\xf6\x7a\xf8\xf1\xf9\xd9\xaa\x99\x87\xc7\x46\xcf\x50\xb2\x66\x9e\x67\xbc\x72\x9e\x9f\x64\xcd\x3c\x86\xfa\xc9\xf9\x78\xf3\xfc\x64\xfb\x6b\x23\xb2\x7d\x1c\x5e\x77\x23\xda\x94\xc8\xd9\x68\x45\xd9\xfe\xd6\xcc\xe3\xc3\xce\xe5\xf0\x99\x04\xc6\xd7\x8d\x08\x74\xf6\xe1\xf2\xf2\xed\x55\xcd\x60\xbf\x3a\xe8\x0c\xa1\xdf\xe0\xda\xa0\x33\xe4\xf9\xa0\x33\xbe\x76\xd0\xa0\x33\x1f\x4c\x86\xa0\x01\xe7\xbc\xf6\x0f\xea\x00\xfc\xb6\x3a\x78\x0e\xc3\x09\x3b\x84\xe6\x88\xd1\x80\x51\xf1\x74\x08\x8e\x2b\x3a\xad\xf3\x3b\xc0\x0c\xfe\x9a\xfe\xf7\x20\xf8\x8f\x84\x43\x91\xe8\x8b\xfd\x70\xa4\x1b\x35\x41\x72\x43\x77\x4f\xa8\x73\x89\x0b\xe3\xec\x83\xe7\x0e\xbd\x1f\xce\x3f\x9c\xdd\xfc\x3e\x1a\xa2\x85\x58\x7a\x70\x51\xfd\x91\xfd\x3c\xd4\xaf\x49\xd5\xbb\x24\x02\x9a\xbb\x05\x66\x9c\x88\xbe\x11\x89\x99\xf9\x3a\x2d\x88\xe3\xb6\xbe\xe2\xfb\x9a\x90\x3a\xdf\xb3\x15\x90\x86\x7b\x21\x44\x68\x92\x3f\x22\x7a\xdf\x37\xfe\x63\xde\xbe\x35\xcf\x82\x65\x08\x2d\x34\xb4\x8b\x06\x48\xef\x4b\xb0\xbe\xe1\x0c\xfb\xc4\x9d\xa7\x25\xb7\x82\x94\xf8\xfb\xc6\x3d\x25\x0f\x21\xd0\xd0\x16\xc7\xef\xcb\xe8\xbb\xf1\x0f\x52\xcc\xf8\xe0\x57\x08\x20\x54\x50\xec\x99\x7c\x8a\x3d\xd2\x3f\xb6\x8e\x60\xa7\xfd\x60\x9a\x72\xc3\x3a\xc3\x71\x82\x56\x46\x14\xc4\x88\x17\x8f\x18\x98\x98\x46\x02\x51\xc0\x6a\xa4\x6f\xb5\x9a\xe1\x7b\x79\x6c\xc1\x87\x04\x97\x6a\xa4\xb3\xb1\x69\xae\x81\x2b\x28\x0e\x1e\x06\x96\x7c\x79\xf2\xf8\xf2\x24\xc3\x01\xfa\xfa\x10\xeb\xe2\x13\x61\x9c\x06\xfe\x78\x9c\xa2\xe5\xe9\x17\xf3\xe5\x89\x15\xfa\x73\x03\x89\xa7\x10\x24\xbc\xc2\x57\xc6\x1a\x05\x1c\x86\x1e\x31\x45\x10\x4d\x17\x66\x81\xda\xf1\xc9\xd1\x23\xfc\xdf\x8b\x1e\xac\x8f\x09\xee\x41\xe5\xf4\xf4\x11\xfe\xef\x47\xe5\xf4\x74\x5f\x2a\xaf\x4e\x1e\xe1\xff\x7e\x54\x5e\x9d\xec\x4b\xe5\x35\x68\xec\xf5\x9e\x1a\x7b\xbd\x41\x63\x5c\x3c\x79\x84\x2f\x88\x6c\xe2\x94\xf9\xe4\xb6\xb7\xa1\xf7\xdb\x86\x1f\x2e\xdb\x71\x8a\xb3\xe4\x42\xb5\x61\xd3\x4d\xd8\x9b\x04\xee\xd3\x7a\x0f\x2a\x02\xe8\xf6\x31\x2b\x6d\x42\x93\x6b\x66\xbc\xd9\xf4\xf7\xcb\x2c\x4e\xb4\x41\xdd\x12\xb3\x39\xf5\x93\x59\xa2\x79\x94\xa6\x9e\xf8\xd9\x1f\x35\x89\xec\xaf\xbd\xe3\x2d\x05\x8f\x42\x58\x46\xb8\x4c\x41\xb0\xeb\x43\x0f\x0e\xd6\x5f\x08\x87\xac\x2c\x5a\x65\x49\xd9\x90\xfb\x9d\xbf\xb1\xed\x87\x87\x07\x0b\x16\x32\xf8\x6f\x4d\x83\xa5\xad\x02\x84\x0d\x4a\x24\x98\x13\x6e\x4b\x94\x5c\xfc\x7d\xba\x0c\xfb\xeb\x0a\x33\x06\x69\x3c\x91\x03\xa3\xc5\x49\xde\xf6\xe7\x69\x58\x81\xdc\x86\x73\x86\x5d\x92\xe5\xfa\x32\x35\xa9\x61\x61\xd3\x1c\x66\xe7\x32\x16\xf2\xf1\x96\x1e\xaf\x15\x4f\xe5\x03\xbd\x94\xc3\x24\xf3\xe8\x45\xce\x2e\x53\xca\xa4\x13\x07\x67\x2a\xa7\x15\x13\x08\xc1\x51\x88\x36\x5b\x38\x79\x31\xe0\x8a\x7d\x57\x86\xab\xa5\xe6\x4e\x21\x2d\x7d\x78\x1e\x53\xd7\x2d\xb3\x36\x9f\xc9\x0e\x34\x9b\xf9\x04\xfd\xe4\x11\x1f\x59\xc3\x47\x19\xd2\xa9\x3f\xff\x39\x9b\x4f\x54\x1c\x87\xaf\x2e\x5d\x19\xe1\x26\xc9\x38\x98\xcd\x20\x9f\x6d\x7c\xf7\xd2\xca\x7c\xa7\x8c\x7c\xa5\x67\x16\x4e\x8c\x41\x26\x09\x12\x41\xc9\x0d\x97\x09\x86\xac\x96\x0f\x4a\xa5\x82\x8b\x0a\xd8\xf3\x97\x20\x60\xfa\xa1\xef\x86\x01\x95\x7b\xa3\x50\x27\x24\x75\x28\x80\x04\x71\x25\xaa\x51\xd8\x2c\x66\x05\x01\xa1\x34\x91\x38\xf7\xba\xd7\x7e\x94\x83\xa5\xdc\x96\xd7\x35\x95\x9d\x47\x2b\x7f\xa4\x04\x65\x1e\xee\xe1\xf5\xe8\x85\x4a\xfc\x59\xae\x53\xce\x9c\x53\xd9\x84\x53\xbe\xba\xaa\x4a\x48\x8c\xd7\x55\xc4\xe9\xce\xaa\xf1\x29\xd7\x55\xc5\x29\x7f\xfb\x52\x85\xcf\x78\x5d\x45\x9c\xb4\x22\x9f\x74\x0f\x3e\x43\x5e\x0d\xa7\x5c\xb7\x8a\x93\x4f\x61\xd3\x0a\x3d\xe9\x7e\xc1\xf7\x58\x9d\x35\x06\xf7\x98\x21\x59\xa7\xa2\x7e\x3a\xa9\x1e\x8f\x7f\x03\x97\x8b\x2f\x57\xc1\xb0\x5a\x04\x23\xce\xa6\xe5\xc9\xfc\x0b\xb7\x55\x06\xba\x79\xfb\xfe\xfd\xf0\x7c\x42\xe1\xe4\x92\xfa\xf6\x24\xf2\x5d\x8f\x58\xf0\xd5\xfa\xc2\xd3\x1b\x42\x80\x25\xbd\x10\x9f\x4c\x1e\x27\xd0\x18\xeb\xd9\xaa\x00\x80\x68\x2a\xeb\xf3\xff\x05\x00\x00\xff\xff\xab\x0d\x05\x97\xd3\x55\x00\x00"

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 21971, mode: os.FileMode(420), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

