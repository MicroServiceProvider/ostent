// Code generated by go-bindata.
// sources:
// index.html
// DO NOT EDIT!

// +build bin

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xe4\x5c\x6d\x73\xdb\x36\xf2\x7f\x9f\x4f\x81\xf2\x9f\xfe\x5f\x74\x4a\xb1\x76\x9c\x5e\x2e\xb5\x7c\xe3\x44\x6e\xcb\x69\xec\x68\xfc\x90\xbb\x4e\xa7\xd3\x81\x48\x48\x42\x4d\x91\x2c\x01\xc9\x56\x35\xfa\xee\xb7\x0b\x80\x8f\x12\x25\xd3\x94\x63\xdd\xe4\x45\x2c\x12\xc0\xfe\xb0\x0b\x2c\x7e\x8b\x27\xe6\xf8\xab\xde\xc7\xf7\xd7\xbf\xf6\xcf\xc8\x58\x4e\x82\x17\x27\xc7\xea\x87\x10\x78\x60\xd4\x87\x07\x7c\x9c\x30\x49\x89\x37\xa6\x89\x60\xb2\x6b\x4d\xe5\xd0\x7e\x63\x99\x2c\xc9\x65\xc0\xd4\x33\xbc\x2d\x16\x9d\x1e\x95\xb4\xf3\xf3\xc5\x72\x49\x22\x21\x59\x28\x8f\x9d\xbc\x84\x01\x1a\x4b\x19\xdb\xec\xaf\x29\x9f\x75\xad\xff\xd8\x37\xa7\xf6\xfb\x68\x12\x53\xc9\x07\x01\xb3\x88\x17\x85\x28\xd6\xb5\xdc\xb3\x2e\xf3\x47\xcc\x2a\x4a\x86\x74\xc2\xba\xd6\x8c\xb3\xbb\x38\x4a\x64\xa1\xf0\x1d\xf7\xe5\xb8\xeb\xb3\x19\xf7\x98\xad\x5e\xbe\x25\x3c\xe4\x92\xd3\xc0\x16\x1e\x0d\x58\xf7\xc0\x00\x2d\x16\x3f\x5f\x9f\x7f\x20\xd6\xf1\x57\xd6\x72\x69\xdb\xbf\xf1\x21\x71\xcf\x7e\x3f\x39\x0e\x78\x78\x4b\x12\x16\x74\x2d\x31\x06\x6c\x6f\x2a\x09\x07\x78\x8b\x8c\x13\x36\xec\x5a\xce\x90\xce\xf0\xbd\x03\x7f\xd6\x21\xfd\xc6\x42\x9f\x0f\x7f\xb7\xed\x22\x92\x06\x10\xfc\x6f\x26\xba\xd6\xab\xc3\xfb\x57\x87\x55\x38\x91\x3e\xd8\xaf\x0e\x3b\x71\x38\xb2\x88\x9c\xc7\x60\x22\x9f\xd0\x11\x73\x30\xc1\x98\x9f\x83\xd2\x38\x0e\x98\x2d\xa3\xa9\x37\xb6\x4b\x15\x1c\x1c\x7e\x77\x0f\xff\xea\xab\x80\xcc\x4e\x43\xc8\xa3\xa3\x7b\xf8\xb7\x01\xf2\xe8\xa8\x29\xe4\xeb\xc3\x7b\xf8\xb7\x01\xf2\xf5\x61\x53\xc8\x37\x60\xf8\x9b\x4d\x86\xbf\xa9\x31\x5c\xc8\x79\xc0\xc4\x98\x31\x99\x36\xbc\x64\xf7\xd2\xf1\x84\xc8\xc0\xe0\xd9\xe1\xa1\xcf\xee\x3b\x98\x6a\x10\x84\x97\xf0\x58\x16\x45\xfe\xa4\x33\xaa\x53\xad\xea\x40\x21\x22\xf1\x00\xe8\x4f\xe1\x24\xe8\xf4\x09\x83\xa7\xc3\xce\x41\xe7\xe0\x4d\x9a\xd0\x99\xf0\xb0\xf3\x27\xd4\xe9\xc3\xe0\xb1\x27\x94\x87\xba\xfc\x62\x01\xde\xd9\xb9\x3e\xfd\xe9\xa7\xb3\xde\x80\x87\xcb\x25\x94\x33\xca\x68\x89\xc5\x82\x05\x82\x2d\x97\x50\x83\x33\xe1\xc1\xad\xc9\x54\x19\xa1\xbf\x5c\x5a\xe9\xc0\x3c\x76\xb4\x72\x46\x7f\xc7\x8c\xed\x93\xe3\x41\xe4\xcf\x4d\x62\x48\x67\xc4\x0b\xa8\x80\x16\x85\xc7\x01\x4d\x88\xfe\xb1\x7d\x36\xa4\xd3\x40\xa6\xaf\x42\xc2\x58\xf5\xa0\x23\x62\x8b\x24\x11\x0c\x2d\x2c\xce\x47\x90\x08\x7d\x92\x55\xe8\xf3\x0c\x0d\x47\x29\xd8\xc4\x12\x7b\x18\x4c\xb9\x9f\x96\xa9\x94\x32\xe8\xa8\x19\x4b\x60\x64\x07\xf6\xc4\xb7\x0f\x48\x4c\x7d\x9f\x87\x23\x3b\x60\x43\xa0\x91\xb4\x0b\x52\xf9\xc1\x54\xca\x28\xac\x40\xc8\x68\x34\x0a\x18\x42\x04\x34\x16\xcc\x4f\xfb\x56\x17\x36\xad\xac\x0b\xa1\x72\xba\x54\x9a\x4c\x93\x11\x76\xdd\xff\x19\xac\x2c\xbb\x50\xad\xf2\x80\x98\x66\xd5\x8a\xc4\x8e\xc2\x60\x5e\x2e\x02\x85\xae\xb5\x1e\x79\xeb\x40\x2f\x80\xd8\x06\x24\xe5\xad\x50\xed\x0a\xd4\xde\x48\x3a\xba\x11\x4b\x9d\x40\x09\xf7\xbb\xd6\x18\x5a\xb6\xdc\x0f\x83\x84\x86\x3e\xa4\xf1\xf8\x20\x1f\xef\xd0\x19\x18\x0f\xa0\x3c\xc4\x07\xe4\x73\x52\x0c\x1a\x95\x66\x2e\x66\x1d\x3b\xb4\x54\xab\x03\xbe\x53\xf1\x24\x54\xa3\xda\x6f\xb9\x13\xea\x04\xb2\xa1\x63\x4f\x8e\xa7\x41\xc1\x86\xb4\x28\xfc\x54\xbb\x3f\xe0\x69\x39\xea\x49\x3e\x63\xab\x8d\x47\x8d\xc1\x18\xec\xc4\x5b\xc7\xb9\xbb\xbb\xeb\x80\xc5\x09\xfc\xeb\x78\xd1\xc4\xd1\xd1\x11\x18\x20\x60\x54\x30\xe1\x04\x54\x32\x21\xff\xe5\x4d\xe2\x6e\x6a\xf5\xa7\xb3\xcb\x2b\xf7\xe3\x4a\xab\x28\xfc\x34\xb8\xd2\xd5\x5e\x0b\x78\xad\xb2\xe9\x00\x01\xc6\x22\x85\x67\xa0\x9c\x64\xc4\x43\x1c\x5e\x64\xc8\x13\x21\x55\xea\xaa\x4d\x5e\xe4\xb3\x0a\x14\x26\x01\x9f\xae\x34\x80\x52\x31\xeb\xda\x9e\x7b\x75\x7d\xe9\xbe\xc3\x4e\x44\x81\x1d\xeb\xdc\x56\x51\x1e\xff\x7f\x38\x10\xf1\x0f\x7a\x58\xa0\x13\xf1\x78\xb5\x58\xc1\x1d\xdd\x3e\x5a\xb2\x32\x3a\x8c\x2d\x7b\x68\xe1\x74\xc5\xc2\xe9\x66\x0b\x6f\xfe\xd7\x2c\x0c\x68\xd5\xc2\x80\x6e\xb4\xf0\xc3\xe9\x0e\x2c\x74\xa6\xc1\x26\x4e\x2a\xbc\xc2\x0b\x18\x61\x22\xed\xf6\xd8\x58\x2a\x93\x44\x77\xd5\x98\x89\x06\x4e\xd8\xa4\xc8\x6e\x18\x2e\x8f\xd2\xb8\x19\x0d\x87\x30\x03\xb1\x0f\x4a\xec\xb6\x58\x48\x36\x89\x91\x68\x88\x05\x31\x1d\x6a\x15\x6f\xdf\xea\x87\x3f\xa0\x1d\x58\xa0\x10\x3b\xd8\x2e\xeb\xb9\xd5\x1f\x56\x2b\x7c\xdd\xae\x42\x04\x5c\x53\x5f\xa9\xdd\xb6\x37\x84\x17\x4f\x77\xdc\x10\x0a\x71\x43\x43\xf0\x5d\x37\x04\xdf\x49\x43\xc4\xa2\xaa\xd6\xc1\x77\xed\xf4\x42\xc4\xf6\x7a\xcd\x46\xbb\xd6\x0b\x11\xb7\xe9\x95\xbd\x6c\x99\xaf\xa7\x02\x33\x98\xf1\x22\x35\x90\x6e\x1a\xb7\x96\xcb\x1f\xaa\x13\x67\x33\x5f\xc6\x29\xb4\x5a\x2e\x2f\x16\xce\x37\x2f\xbe\x71\x96\xcb\xc5\x42\xeb\x57\x50\x98\xe2\x42\xe3\x8f\x01\x85\x55\x2c\xce\x5e\x61\x95\x08\xb3\x82\x28\x7c\x1f\x70\xef\xb6\xbb\x90\x63\x2e\x3a\x63\x98\x21\x05\x4c\xa5\x2c\xf5\x84\x01\xaa\xfe\x19\x7e\x61\xfd\xbc\x58\xa8\x36\x5b\x2e\x31\xed\xbd\x7e\x7c\xa1\x19\xec\x1d\x62\xaa\x22\x9d\x6b\xb0\x46\x4f\x8e\x4e\xcc\xa4\xff\x81\x2a\x25\x7c\x34\xde\xa5\x4e\x5a\x11\x92\x6b\xf7\x50\x9d\x4c\xbf\xc2\x98\x03\xf7\x11\x16\x96\xb9\xe3\x72\x4c\xf0\x0d\x5c\x03\xfb\x19\x40\xf1\x8f\x5e\xec\x2c\x16\x30\xaf\x1c\x31\xf2\x92\x7f\x4b\x5e\x82\x14\x79\xdb\x25\x9a\xd3\xdf\xf7\x6f\x3a\x1f\xb8\xc0\xf6\x90\x09\x68\x72\x2a\x65\xf2\x0b\x9b\x13\x64\x08\x1b\xe0\x06\x73\xfb\xc2\x52\x32\x9d\x0b\xad\xf7\xb1\xf4\x53\xcf\x54\x01\x49\x35\x0a\x51\x8f\x61\x74\x97\xd0\x38\x5b\xeb\xa7\x52\xc7\x8e\xf4\x53\xc9\xbc\x35\x8a\xd2\x83\x91\x3d\x15\x2c\xf6\xa4\x59\x52\xe8\x97\xae\x81\xb8\x11\x2c\xe9\x7b\x52\x55\x9f\x03\x67\xa9\x5f\xb7\xc5\xbf\x9a\x8b\x55\xf8\x34\xb1\x35\xfa\xbf\x29\x97\xab\xf0\x59\x6a\x13\x7c\x9b\x87\x33\x96\x64\x0b\xaf\x72\x3d\x2e\x78\xe0\x6a\x3d\x59\x6a\x5e\x8f\x23\x93\x82\x93\x95\x7f\x1e\xe2\x72\x92\xe2\xae\x13\x16\x7a\x19\xe7\x8e\xd4\xa7\x09\x9d\x08\x74\x23\xcc\x06\x4b\x94\xab\x5f\x44\xe1\xdf\x2c\x89\xc8\xcb\x18\x3d\x2d\x24\x96\xce\x55\x7f\xed\x71\x04\xd6\x58\x24\x5b\x67\xd8\x63\xee\xfb\x2c\xb4\x52\x3f\x2b\xec\xa6\x81\xca\x29\x47\xc9\x71\x91\xbd\xb2\x37\xcc\x58\xf5\xcb\x02\xb5\xa2\xbf\x34\x29\x0f\x0e\xd0\xa4\x38\x76\x68\x93\xf2\xd8\x31\xa5\xf2\x8e\xb1\x51\x19\x95\xee\x35\xc8\x7c\xb3\x61\x13\xc1\xa7\x44\xa0\x09\x5e\xe6\x8c\xab\x1a\xba\x09\xa5\xf8\xc3\x86\x8c\xe2\x0f\x73\x1f\xe8\xfd\xb8\x9e\x4b\xfc\xa1\xa1\x12\x9f\x27\xb8\x7e\xb5\x50\xac\xd3\xe3\xc9\x05\xbc\xe8\xde\x26\x64\x9d\xff\x6b\x42\xc9\xd6\xc3\x7a\x19\x0c\x7e\x87\xd2\x6c\x96\x49\x6b\x77\x2f\x26\xa6\xce\xde\x1c\xb6\xa0\x54\x0e\x9b\x26\x16\xc7\xea\x43\x38\xb0\xb4\x6b\xa0\xb2\x47\x09\x9d\x07\x58\x1a\x3d\xdf\x2c\xeb\xdd\x10\xa6\xce\xb0\x8c\x4c\x58\x36\x4d\x37\x15\xbb\x98\x56\x9a\x74\x9f\x10\x9d\x73\x3a\xa3\x3c\x78\x08\xb5\x16\x0d\xae\x27\x2a\x40\x84\xf1\x51\xa0\x8f\x46\x9a\x03\xce\xd7\x55\xcd\xa7\x22\xe3\x9d\x15\xe5\x6f\x44\x95\x93\x9e\xa2\x3d\xa7\xb8\x8f\xb5\xaa\x95\xbf\xb6\x3d\x6f\x4c\xc6\x13\xea\x23\x23\x49\x83\xaa\x42\x2a\x6b\xad\x46\xd7\x58\xbc\xa0\x52\x2b\xda\xf6\x87\x8f\x64\xed\xde\xb0\x0d\x69\x97\x9a\xa6\xd8\x72\x75\x7c\x26\xc7\x33\x9c\x6e\x59\xe4\x93\xda\x71\x06\x55\x95\x0e\xb7\xe4\x80\x58\x3d\x75\x54\x01\x55\x2b\x2b\x9a\x08\x1f\x12\xeb\x3c\x9a\x86\x12\xf7\x35\x9b\x4b\xbf\x22\x96\x1a\x6d\x20\x5b\x60\xf2\xa6\x28\x47\xc4\xba\xc1\x61\xd2\x0a\xe4\xb5\x02\xf1\xdb\x81\x7c\x4f\x2c\xe5\x5b\x55\x94\x56\x11\xc8\xc4\x8d\xf6\x01\x88\x37\x0d\x40\xbc\x10\x80\xdc\x9a\x00\xc4\xd3\x00\x64\xa2\x0f\x1f\x76\xf2\xd0\xd3\x24\x42\x14\x05\xf5\x20\xce\x52\x9e\x86\x3b\x54\x4f\x91\x77\xbf\x5e\x9f\x5d\x91\x49\xe4\x4f\x83\x88\x1c\xfd\x54\x24\x11\xa8\xff\xdd\x5c\x32\xe1\x86\xcb\xa5\x53\x78\xff\x38\x95\xab\xb4\xc2\x31\x44\x06\x92\xbe\xe3\xb2\x28\x90\xa5\x19\xa1\xa7\x33\x24\xa6\xde\x2d\x93\xa2\xd6\x94\xbe\xce\x2f\xe8\x66\x52\x36\x9a\xb3\x2a\x55\x4c\x7e\x72\xa3\x58\x92\x44\x49\xbd\x4d\x67\x2a\xbb\xa0\x9c\x4e\xd8\x68\xd1\x8a\x4c\x21\xb5\x6c\x4f\xab\xb0\xc0\x1f\x1b\x16\xdc\x56\x61\x61\xed\x5c\xde\x05\x7e\x4e\x86\xd4\x63\x5b\x67\xd1\xe9\x3e\xc8\xab\xac\x1f\xd0\x77\x49\xcc\x12\x22\x98\x17\x85\xc5\xe3\x32\x95\xe3\x86\x0e\x34\xda\x23\x70\x8d\x07\xad\x87\x4e\x33\x1f\x8d\xae\xbb\x73\x3d\xb8\xc9\x5b\x83\xdd\x86\xa5\xf9\xae\x58\x7a\xc2\x26\x8f\xd8\x79\x00\xa9\xdc\xc7\xce\xcf\xce\xd7\x93\x35\x94\x32\x6c\x7d\xcb\xa1\x4d\x94\x58\xe7\x17\x8e\x9a\x99\x11\x9c\x91\x6f\x9e\xb3\x71\x7c\x5b\x25\x81\x1f\xcd\x9c\xfa\xf1\xcb\x7a\x44\x29\x4f\x97\x2b\x89\x9b\x27\xb6\x56\x55\xa6\x99\xfe\x3b\x9d\x18\x02\xe0\x23\x29\xe0\x9c\x4d\x9e\x75\x3d\x8f\xdd\xd8\x70\xfd\xff\x75\xc3\xf2\x7e\x93\xf2\xaa\x5b\x76\x36\x52\xd3\x01\xd6\x7e\xa8\x66\xbb\xf3\xb5\x3d\x8c\x7b\xce\xa6\x7f\xfb\x91\xe0\x78\x38\x9b\x6f\xd8\x40\x7f\x2a\x04\xa2\xfe\xa6\x17\x1b\xd2\x3e\x2d\x6c\x64\x8f\x8f\x4a\x17\x0f\xec\x80\xdf\x32\x5b\x0b\xa1\xf1\x3c\xbf\x4c\x42\xa1\x36\xdc\x1c\xbd\x36\x93\x52\xac\xc8\x0c\x24\xc8\x86\xb7\xf4\x8c\x36\xdb\x90\x56\xa7\xcc\xf5\x3a\x56\x1d\x8e\x58\x01\x10\x0b\x44\xec\x68\x1a\x5b\xd9\x8a\x36\x3f\x5b\xcb\x73\x6d\x0e\x5d\x50\x5a\x23\xcb\x71\x7e\xa0\x94\x1f\x6d\x2b\x09\x1e\x96\x4f\xd2\x10\x32\x7b\x49\xe7\x0c\x85\x04\x4c\x1a\x94\xde\x21\x05\x02\x39\x9d\x1f\x3b\xe5\xf4\x13\x52\x9a\x6f\xa8\xcd\xe6\x95\xe3\x3d\xec\x3d\x34\xd8\x5f\x7b\x0a\xb7\x7a\xf7\x00\x40\x0b\xdd\x33\x90\xa1\x69\x90\x17\x15\xd4\x35\x4e\x58\xdd\x86\x27\x1f\x98\x10\xbd\xbc\xbb\x7c\x82\x78\x04\x31\x73\x87\xd8\x86\xa4\x07\x0c\x39\x8f\x12\xb6\x0d\xaa\x7c\x48\x41\x2a\x07\x89\x8f\x6a\xf7\x4b\x18\x4d\xad\x9a\x3d\xec\x9c\x0e\x44\x14\x4c\x25\x7b\xa6\xf6\xbf\x28\x0c\x97\x96\xed\xbf\x0d\x6a\x5b\xfb\xe7\x87\xb8\x79\x4e\x9a\xba\x6d\xa3\x52\x87\x9b\xfc\x28\xaa\x29\x95\xf9\xc3\xc6\x4c\xa6\x36\x31\x3e\x03\x91\x41\x3d\x39\x8f\xf5\xb8\xb8\x25\x53\x41\x47\xec\xe1\x74\xa6\x14\xfd\x82\xd8\xac\x37\x7c\x6e\x32\x03\x0d\x76\xc4\x65\x35\x48\x7b\x47\x65\xe0\x63\xfb\xc2\x64\xca\xdd\x77\x42\x64\x35\x48\x4f\xc6\x63\xe9\x7e\xea\xe3\x69\x8c\x37\xa7\x31\xf7\x33\xd1\x98\x5b\xa4\xb1\x6c\x59\x2e\x1e\x4e\x63\xee\x17\x46\x63\xee\xb3\xd3\x98\xbb\x33\x1a\xab\x41\xda\x3b\x1a\x73\xf7\x87\xc6\xdc\x9d\xd1\x58\x0d\xd2\x93\xd1\x18\x6f\x4d\x63\x78\xff\xad\x29\x8f\xe9\x9d\x83\xcf\x40\x64\x58\x51\xce\x64\xf0\x16\x25\xf3\x87\xb3\x98\x56\xf3\x0b\xa2\x31\x30\xf8\xb9\x79\x0c\x55\xd8\x11\x91\xd5\x41\xed\x1d\x93\xa1\x9f\xed\x0b\x95\x69\x9f\xdf\x09\x97\xd5\x41\x3d\x19\x99\x65\x5b\x99\x8f\x67\xb3\x58\x34\x26\xb3\xbe\xf8\x3c\x5c\x06\xf5\xe4\x54\xd6\x4f\x22\x98\x90\x89\x26\x73\x32\xa5\xe7\x17\x44\x66\x7d\xf1\xdc\x5c\x06\x1a\xec\x88\xca\x6a\x90\xf6\x8e\xc9\xc0\xc7\xf6\x85\xc8\x94\xbb\xef\x84\xc7\x6a\x90\x9e\x8c\xc6\x62\xd1\x96\xc5\x66\xa3\xc6\x2c\xf6\x69\xf4\x79\x58\x0c\xea\xc9\x59\xec\x13\x1d\x25\x34\xff\x22\x6b\x3b\x87\x29\x2d\xbf\x20\x0e\xfb\x34\x7a\x6e\x0e\x03\x0d\x76\xc4\x61\x35\x48\x7b\xc7\x61\xe0\x63\xfb\xc2\x61\xca\xdd\x77\xc2\x61\x35\x48\x4f\xc6\x61\xb3\x51\x1b\x0e\x13\x0d\xaf\x16\xc4\xa2\x40\x74\x57\xeb\x2f\x15\xc4\xc2\xdc\x29\x88\x39\x5e\x29\x88\x45\xa7\xef\xf6\x36\x7c\xd0\x60\x08\x0c\xef\xe4\xa4\x65\x1f\x72\x44\x6f\xca\xdf\x54\xca\xbf\xc8\xfc\x4b\xa8\xef\x16\x1a\x81\xf5\x13\x1e\x25\x5c\xce\x1b\x09\x5d\x70\x6f\xdb\x9d\xb4\xb2\xc0\x15\xff\xbb\x99\xc0\x25\x13\x1c\xf8\x77\xc3\xdd\x2a\x8f\xe1\xde\xa1\x55\x34\xfe\x9a\x57\xae\xca\x15\x33\x2b\xf7\xe8\x5a\xdd\x6b\x48\xa3\x68\xe3\x6b\x0d\x2a\xdc\x3f\xf3\x85\xd7\xbe\x50\x17\x5e\xc1\xeb\x1e\x7f\xd3\x13\x31\x0e\x89\x75\xd3\x16\xe3\x15\x60\x5c\x9d\x5d\x36\xbd\x38\x8b\xa2\x47\x60\xc2\x65\xbb\xda\x5f\x13\xeb\xc2\x6d\x07\xf1\x3d\xb1\x3e\xb9\x97\xd7\xed\x40\xfe\x41\xac\xcb\xb3\xab\x76\x18\x6f\x88\x75\xed\x9e\x9f\xa5\x20\x66\x74\x34\x45\xf9\x27\xb1\xde\x7f\x3c\x3f\x3f\xbd\xe8\xe9\x2e\x69\x75\xcb\xc4\x50\x6d\xfb\x4b\x26\xb3\x91\xba\x04\x69\x69\xde\xbd\x65\x73\xfc\x82\x51\x27\xa5\xcc\xb0\x58\xc0\x08\xc2\xc8\x89\xd7\xac\x5e\x67\xac\x60\xbe\xdb\xd7\x53\x41\x75\xeb\xad\x96\x02\x1e\xa0\x45\x16\x39\x4c\x68\x98\x8d\x0a\x37\xce\x4c\x25\xe7\xd4\x1b\xa3\xd8\xfa\x40\x31\xd3\x85\x4c\xb4\x98\x4e\x55\xb8\x00\x98\xce\xcd\x4d\x21\x60\x64\xb4\x95\xe7\xac\x23\x35\xcc\x5d\xb9\x1d\x5c\xca\x85\x95\xfc\x0c\x68\x34\xa9\x2f\x71\x25\xa9\xdc\x00\x60\x8c\x1a\xf2\x00\x67\xff\x72\xbc\x8d\x40\x1f\xd0\x88\x02\xc2\xae\x37\x7e\x48\x00\xe6\x43\xc2\xfe\x22\xab\x5d\xe8\x13\x99\x4c\x59\x8d\x6b\x57\x5c\x86\x94\x10\x37\x95\xcf\x7c\xf5\xb1\x41\x21\x9d\x96\x34\x0e\x0a\x6a\xfe\xb4\xe3\xeb\xae\xbd\xca\xe5\xb2\x3c\x0b\x3d\xa6\x36\x33\x75\x98\xda\x02\xca\x5f\x6a\x73\x7b\x3c\x61\x9e\x54\xfb\xe0\x3b\xba\xa9\x96\xf9\x4b\x0b\x16\x49\xd9\x0e\xbb\x60\x5c\xbc\x8e\x69\xfe\x6b\x1b\x70\xbb\xd3\x80\x8f\x42\xf3\xf9\xac\xe6\x14\x9a\x7d\x69\xfb\x01\x64\xd7\x7d\x6d\x8b\xe9\xf9\x17\xb7\x9a\x6e\x30\xcd\x7c\x00\xac\x56\x04\xe5\xcf\x73\x69\xc2\x64\x51\xa2\x3c\xdd\x3f\xd1\x4b\x55\x7d\x4d\x31\xb5\xeb\xbf\x01\x00\x00\xff\xff\xff\xa3\xcb\x20\x0e\x4c\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 19470, mode: os.FileMode(384), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

