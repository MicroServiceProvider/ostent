// Code generated by go-bindata.
// sources:
// index.html
// DO NOT EDIT!

// +build bin

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5d\x7b\x73\x9b\xca\x15\xff\x3f\x9f\x62\x2f\xd3\x74\xee\xbd\x0d\x60\x3b\x4e\x9b\xc9\x95\xd4\x49\x2c\x35\x65\x6a\x3b\x9a\xd8\x4e\x7b\xc7\xa3\xc9\xac\xc4\x4a\xda\x04\x01\x97\x5d\xfc\xe8\xa7\xef\x59\x1e\xcb\x22\x21\x09\x10\x10\x77\x92\xcc\xd8\x96\x60\xcf\x7b\x1f\xe7\xfc\x0e\x52\x6e\x6f\x6d\x32\xa7\x2e\x41\x5a\xfc\xf7\x73\xe8\x73\xba\x22\xda\x64\xd2\x63\x3e\x76\x07\xb7\xb7\xc6\x10\x73\x6c\xb0\x47\xc6\xc9\xea\xb3\x07\xbf\x5d\x6e\xc4\x83\x3e\xcf\xbd\x60\x85\x39\x0c\x35\x93\xb1\xc4\xb5\x27\x93\x0d\x96\x4b\xa0\x72\x71\xcc\x14\xa3\x65\x40\xe6\x7d\xcd\xd4\x10\xa7\xdc\x21\x7d\x2d\xbd\x8b\x52\x51\xe9\x85\xc9\x44\x1b\x6c\x5e\xeb\x99\x78\xab\x20\x07\x83\x88\x67\x3d\x9b\xde\xa1\x99\x83\x19\xeb\x6b\x81\x77\x8f\xc8\x03\x28\x67\x13\x1b\x24\xeb\x53\x8f\x73\x6f\xa5\x0d\x9e\x21\xa4\x0e\x9b\x79\x4e\xb8\x72\x11\x5b\x61\xc7\xd1\x8f\x11\x27\x0f\x5c\x0f\xe8\x62\xc9\xb5\x81\x3a\xec\xf6\x96\xce\x51\xac\x90\x8f\x03\xbc\x62\xc6\x39\x76\x8d\x4b\xb2\xc0\x9c\xde\x81\x6e\x6c\xe9\xdd\xeb\xe2\xd7\x92\xda\x04\x94\x74\x18\x5c\x14\xaf\xd5\x8b\x42\xf3\x48\x01\x50\x61\x79\x9c\xb2\x5e\xbe\x8a\xa5\x7a\x77\x24\x98\x3b\xde\x3d\x08\xc6\xa9\x87\xce\x3d\x6c\x23\x7c\xb7\x40\x36\x65\xbe\x83\x1f\x91\x07\xee\xf7\x5c\xa6\xc5\xbe\x4c\x7d\x94\xa8\x74\xed\x50\xf7\x6b\xa4\xd9\x64\x32\x88\x82\x98\xca\x48\x95\xd0\xc5\x2f\x04\x2f\x39\x81\xdb\x33\xa2\xfb\x01\x41\x20\x14\x73\xdd\x21\x73\xb0\xd9\x30\x0c\x94\xc4\x34\x95\x2d\xdc\x1e\xeb\x6c\x2e\x8f\x07\x3d\x13\xbc\x12\x39\x51\xbe\xd8\xf4\xa6\x83\x83\x05\xd1\x8f\x8f\x5b\xf6\x61\xe8\xa8\xc1\x5e\x11\x37\x44\xd2\x50\xf1\x22\x19\x07\x23\x1d\x9a\xbe\xcc\xeb\x4b\x5d\x3f\xe4\xfa\x22\xf0\x42\x5f\xcb\x46\x6c\x1d\xa3\x3b\x78\x4a\x9c\x38\x5c\xae\x77\x1f\x60\xa0\xb2\x09\xc4\x45\x3a\x63\x1f\x83\x69\x08\xb3\xd0\x8d\x42\x9c\xdc\x8d\xaf\xc4\x13\x10\x31\x32\xf3\x5c\x1b\x07\x8f\x22\xe0\x78\xea\x10\x3b\x5b\x08\xd2\x67\x76\xbc\x14\x2a\xcb\x54\x86\xc2\x60\x5c\x38\x85\x86\xe9\x14\xb2\x8d\x73\xc2\x98\xf1\x4f\x18\x03\x0b\x0b\xe5\xff\x25\x42\x14\x3f\xa0\x9c\x19\x7b\x98\x8e\x1e\x78\x80\xcf\x04\x0f\x88\xe5\x1a\xef\x81\xbe\x8f\xfa\x1a\xa4\xc6\x1e\x50\x6d\x6f\xd9\x19\x17\x5e\x40\x1a\x77\x46\xc4\x74\xa7\x33\xf6\xd0\xc6\xae\x40\x7f\xd9\xed\x8c\xdc\xdb\x9e\x99\xad\x85\x36\x97\x05\xac\x48\xd6\xe9\xaa\x70\x8d\xb7\x53\x06\xdb\x0f\x27\x2d\x2e\x8f\x4b\xb9\xc3\x1e\xb2\x3c\x58\x38\x9b\x01\xf5\xfa\xcc\x58\x67\x5e\x6d\x99\xac\x53\x77\xb7\x4c\x14\xc9\x07\x2c\x93\xfd\x4e\xa9\xbc\x5c\xd6\x69\x0f\x5a\x2e\x3d\x33\x74\x36\x8f\x33\xf2\xc7\xe6\x89\x96\xce\x43\x74\x14\x1f\x5f\x6b\xa7\x96\xc2\x82\xf1\x80\xfa\x24\x3b\xa6\xd6\xd2\x17\xbe\x24\x18\xa6\x7a\xee\x24\x8f\x53\x1a\x04\x07\x6d\x9a\xb3\x68\x83\x31\x09\xa8\x67\x27\xc7\xf6\x9e\xd1\xb9\x0c\x07\x7d\xc2\x4e\x48\x76\x13\x82\xfc\xe4\x7e\xe4\x17\xe5\x10\x77\xb0\x48\xc4\x02\xec\x2e\x08\xfa\x93\x83\xd1\x9b\xbe\xbc\x61\x9c\x53\x26\x66\x5f\xde\xa0\x12\xa6\x14\x6e\x47\x99\xca\xe8\x9e\xda\x7c\xa9\xbf\x0c\xc8\x4a\x6c\x01\x20\xd5\x88\x8d\x9f\x4c\x56\xb1\x7e\x75\xbc\x10\x33\x8a\x7c\x21\x33\xda\x2d\x0c\x74\x27\xd8\x70\x48\x92\x91\x46\x7f\x9e\x65\x33\x48\xfd\x9d\xe5\x4b\x6b\x44\x6b\x69\xec\x0a\xec\xea\x38\x8f\xbd\x20\xab\x0e\x12\x59\x90\xe2\xc5\xfb\x77\xe9\x34\x56\x28\xd6\x44\x1e\x1b\x8b\x6e\x31\x8b\x3d\xd4\x83\xdf\x65\x1a\x0b\x4e\xeb\x20\x8f\x15\x52\x9a\x4f\x64\x33\xae\xb5\x32\xd9\x8c\xbc\xf3\x54\x36\x12\xdd\x78\x2e\x9b\x71\xad\x91\xcc\x66\xc4\x3f\xb2\xd9\xdc\x8e\xd2\x5d\x3a\x1b\x89\x6b\x2d\x9f\xcd\xb8\xd7\x4a\x68\x33\xf2\xce\x33\xda\x48\x74\x6b\x29\x6d\xc6\xbd\x46\x4e\x9b\x11\x77\x90\xd4\xe6\xa6\x63\x67\x59\x6d\x7a\x6e\x57\xcf\xe7\xae\x3d\x8e\x9d\x3a\x84\x37\x8c\xd4\x4a\xa3\xff\x11\x90\x3d\x59\xf4\x56\x79\xcf\xeb\x66\xdf\x90\x2a\x2a\xe9\x37\xbc\xcb\xf2\x6f\x78\x53\x3b\x01\x87\x5c\x58\x90\xff\x8b\xba\xf6\xbe\x5c\x78\x6b\x32\x2d\x18\x44\x31\x38\x88\x83\x08\xc6\x41\x0c\x44\x54\x6a\x30\x40\xd3\x85\x1e\x32\xe2\xcf\xb8\x86\x6c\x70\x67\xf2\xa6\x9f\xa9\x35\x9e\x81\x6b\x55\x3d\xa3\x0b\x7b\x22\xd9\x72\xe5\x60\xcf\xbb\x2e\x1c\x86\xf3\x0e\xea\x86\x21\x65\x5f\x51\xc8\x30\xcc\xf1\x2a\xb5\x03\xe8\xd6\x44\xe9\x90\x49\x6f\xb1\x7c\x38\xd0\x8f\xdf\x65\xf5\x30\x9c\x77\x50\x3c\x80\x90\xe6\x6b\x07\xc9\xb4\x56\xe9\x20\xa9\x3b\xaf\x1c\x84\xe4\xc6\x0b\x07\xc9\xb4\x46\xdd\x20\x69\x7f\x94\x0d\xea\x4e\xd2\x5d\xd5\x20\xa4\xb5\x56\x34\x48\xe6\xb5\x6a\x06\x49\xdd\x79\xc9\x20\x24\xb7\x56\x31\x48\xe6\x35\x0a\x06\x49\xdb\x41\xbd\xa0\xce\xc3\xa6\xca\x85\xdb\x5b\xf3\x57\xe4\x7b\x5f\x09\xf2\xc3\x80\xce\x1f\x67\x8c\xbd\xc9\x8d\xb5\x03\xcf\x17\x2b\x35\x77\x12\xe3\x80\x40\x16\x67\x26\xeb\x00\xfd\x6a\x26\x0f\x37\xec\x4b\x04\xd3\x05\x7c\x7b\x7b\x4f\xf9\x12\x41\x32\x4c\x1e\xf2\x36\x7e\x4a\xdd\xfa\x55\x58\xf8\xac\x70\x7e\x9c\xc3\x90\x78\x1e\x24\xf2\x92\x6b\x49\xe4\x72\x81\x1b\x0c\xc9\x1d\x9d\x11\x55\x3b\x18\x7d\x26\x0c\x48\x86\x67\xc9\xa3\x7c\x0c\xa2\x4a\x6e\x5b\xc9\xa4\xe3\x46\x4c\xba\xf0\x42\x97\x43\x45\xd5\xb2\x4d\xb9\x9c\xb5\x94\x79\xaf\x1a\x31\x2f\x2e\x33\x9f\x9c\x71\xa7\x8d\x18\x17\x95\xc2\x4f\xce\xb6\x93\x46\x6c\x7b\x7b\x87\xe9\x13\x0c\xdc\xcb\xa6\x02\xf7\xbc\x49\xdb\xb6\x23\x10\xf6\x5c\x01\x20\xec\x79\x86\x3f\xd8\xf3\x9a\xf0\xc3\x7a\x1d\x08\x15\x36\xf0\x82\x9d\xf1\x32\x79\x00\xac\x7c\x10\x32\x26\x28\xe1\x42\x83\xfa\x5c\x54\x78\x60\x11\xe0\xc7\x35\x4b\xe2\xf2\x51\x81\x1f\x40\x5e\x11\x00\x92\x14\xb5\x96\xeb\xd9\x84\x21\x2e\x46\xc8\xf1\xf1\xc5\x8c\xa0\x1b\x2d\x0b\x40\x96\xbc\x92\x21\x13\x89\x66\xaa\x63\x98\x1b\xde\x8d\x8a\xd1\x6a\xdd\xa9\xe3\x3c\x20\x24\xd3\x71\x9e\x83\x7d\x1a\xd0\x71\x07\x20\x14\x7b\x30\xc6\x83\xca\xf8\xba\x00\x28\xda\x70\xf7\xf3\x9c\xbb\xf3\x14\xdf\x12\x61\x9a\xf9\x61\xd7\x10\xd3\xd9\xf8\xa6\x03\x8c\x09\xa4\x54\x02\x97\x84\x56\x4d\xa0\x4b\xc0\xa7\x45\x58\xe9\x50\xdf\x7d\x97\xb8\x12\x38\xad\x03\x60\x49\x48\x69\x1e\x59\xca\xb8\xd6\x82\x96\x32\xf2\xce\xb1\xa5\x48\x74\xe3\xe0\x52\xc6\xb5\x06\xba\x94\x11\xff\x80\x97\x72\x3b\x4a\x77\xf8\x52\x24\xae\x35\x80\x29\xe3\x5e\x0b\x61\xca\xc8\x3b\x87\x98\x22\xd1\xad\x61\x4c\x19\xf7\x1a\x20\x53\x46\xdc\x01\xca\x94\x9b\x8e\x9d\x75\xa5\xcf\xc0\xba\x9a\xad\xde\x60\x4f\x87\xb0\x98\xf0\xea\x91\xd5\xa2\xfb\x37\xa6\xbc\x16\xa1\x65\x3b\xf5\xbb\xd2\x90\x24\x2a\x45\x21\xbc\xcb\xaa\x42\x78\x73\x50\x59\x98\x01\x58\x82\xaf\x71\x79\x58\x6b\x37\x9d\x83\x6b\x09\xbd\xe0\x2c\x42\x95\xb5\x78\x73\x57\x52\xbf\xa4\x93\xa8\x61\xc9\x10\xeb\xbc\xe0\xf4\x42\xcb\x72\xc5\x5c\xc9\x0b\x96\x57\x1a\x90\xac\x53\x17\xb2\x6e\x46\x76\x69\x20\x26\x5d\x5e\x03\x79\xe5\xdb\xf6\xd5\x69\xe7\x7d\x75\xab\x8b\xbe\xba\xe5\x72\xb8\x08\x05\x0a\xab\x54\xfa\x58\xcd\xf4\xd5\x33\xe9\x2d\x16\x40\x07\xfa\xf1\xbb\xac\x7f\xac\x2e\xfa\xea\x56\x1b\x7d\x75\xeb\xa0\xbe\xba\xf5\xcd\xfa\xea\x56\x1b\x7d\x75\xeb\x80\xbe\xba\xf5\xa3\xaf\xbe\xb9\x2a\xba\xac\x7b\xac\x36\xfb\xea\xd6\x41\x7d\x75\xeb\x9b\xf5\xd5\xad\x36\xfb\xea\xd6\x01\x7d\x75\xab\xc3\xbe\xba\xd5\x42\x5f\x7d\x6f\xc1\x23\xcf\xea\x5a\xb5\xc4\xb8\x08\xeb\x1e\x06\x9e\xcf\x5e\x8c\x82\xc0\x0b\x18\xb2\x5c\xf3\x43\xc8\x91\x4f\x82\x64\x29\x6a\x5b\x99\x9f\xa8\xe9\x65\x6e\x43\x40\xe7\x1e\x44\xd7\xfa\x80\x7c\x56\x24\x70\x8c\x67\x5f\x09\x6f\x4a\x96\xe4\xb6\x4d\xdc\x3b\xda\x98\x2c\x90\xd1\xa3\x83\x69\xcf\xa4\x83\x35\x59\x15\x8a\x32\x97\x40\x66\xa7\x94\x65\x54\xe9\xd5\x45\xf7\x9a\x6b\xd7\xd1\xb9\xd1\x48\x97\x2d\x65\x66\x8d\x4b\xb2\xda\xee\xc3\x3f\xbb\x53\xe6\xff\x96\x0b\x50\xd4\x9b\x43\x76\x34\x0d\x49\x3c\x0d\x57\x9e\x1d\x3a\x1e\x3a\x7d\x2f\xc3\xa4\xb6\xa7\x36\xe9\x20\xbe\x0a\x4d\xa2\x6d\x34\xb1\x2d\x57\xaa\x6c\x6e\xa5\x16\x53\xa3\x98\x1c\xee\x48\xfa\x17\x05\xf4\x24\x5d\x36\x9b\xf4\xf1\x8a\xda\x23\x3f\xa1\x2f\x54\x20\x66\xa0\x6a\x90\xfc\x51\x7d\xa8\xee\x50\x22\x06\x3f\xc3\x36\x15\x69\x4f\x1c\x8e\x13\x0f\x20\xed\x48\xfb\xa5\xe0\x8e\x90\xba\x79\x2b\xd5\x7b\xeb\xad\x94\x6c\x32\x11\x41\x91\x5b\xde\xe6\xa6\x22\xdc\xa2\xac\xb8\xd4\xaf\x8a\x66\x5b\x7c\x33\x94\x51\xd9\x45\xbe\x3d\x36\x72\x33\xdb\x46\xbf\x27\x36\xa3\x2c\x2a\x3b\x19\x14\xc4\xa6\xc1\xe5\xb1\x6f\xe6\xfb\x72\x1f\xdd\x9c\x3b\xc9\xae\xb8\x67\xf6\xa5\x1c\x0a\xa7\x5f\xc2\x62\xcf\xfc\xdb\xd8\xd3\xb7\x79\x6c\x9f\x46\x63\x45\x97\xdd\x2c\x8a\xbc\xde\x81\xbb\xdf\xfd\x7e\x3d\xba\x2a\x74\xf6\xbb\x47\xa8\xb2\xf7\xb8\x3a\xa6\x2e\x74\x74\x44\x5e\xce\xcd\xef\xac\xeb\xab\x1d\x3e\x16\x47\xdd\x56\x3d\x22\xda\x1d\xde\x15\xc4\xe5\x5d\xdb\x32\xd0\xe3\xb3\xae\x81\x9e\x31\xeb\x00\xe8\x19\x07\x9e\xc8\x7c\x2b\xe2\x3c\xa0\x5a\x13\x38\x8f\x14\xde\x22\xcc\x73\xa0\x17\xbf\x4b\x98\x67\xcc\x3a\x80\x79\x40\x48\xf3\x30\x8f\x64\x5a\x0b\xe6\x91\xd4\x9d\xc3\x3c\x42\x72\xe3\x30\x8f\x64\x5a\x03\xe6\x91\xb4\x3f\x60\x1e\x75\x27\xe9\x0e\xe6\x11\xd2\x5a\x83\x79\x24\xf3\x5a\x30\x8f\xa4\xee\x1c\xe6\x11\x92\x5b\x83\x79\x24\xf3\x1a\x30\x8f\xa4\xed\x00\xe6\x51\xe7\xe1\xff\xf3\xc7\x27\xaa\x3d\x01\x3d\x66\x4d\x7d\x92\x62\x6c\x0d\x9f\xd6\xc3\xdd\xc2\xb4\x66\x3e\x51\x71\xd3\xbe\x69\x25\xed\x69\xe6\x49\xfc\x9b\xab\xd1\xc7\xa7\x17\xab\x66\x1e\xc4\x1f\x3f\x41\xcb\x9a\xf9\x6c\xc8\xa5\xf5\xf4\x2c\x6b\xe6\x23\x3d\x9f\xac\x8f\xd7\x4f\xcf\xb6\xbf\x36\x62\xdb\xc7\xd1\x55\x37\xa6\xcd\x88\x68\x19\x94\xb4\xed\x6f\xcd\x7c\x14\xcb\xba\x18\x3d\x91\x8d\xf1\x75\x23\x06\x9d\x7d\xb8\xb8\x78\x7b\x59\x73\xb3\x5f\xc7\xff\x7d\x28\xc3\x99\x82\xff\xfb\x2c\xc3\xff\xa3\x7b\x07\xe1\xff\x19\x5e\xef\x83\x07\xac\x61\xed\xef\xec\x00\xf2\x9b\xf2\xe4\x19\x0d\x23\xc1\x21\x32\xc7\x01\xf5\x02\xca\x1f\x0f\xe1\x71\x49\x67\x75\xbe\x6a\x44\xd2\x5f\xd1\xff\x1e\x44\xff\x91\x30\x48\x12\x5d\x5e\x8d\x47\xba\x50\x13\x26\xd7\x74\x7f\xe3\x26\xb3\x38\xd7\xe5\x39\x18\x8e\xeb\xfd\x34\xfc\x70\x76\xfd\xfb\x78\x84\x96\x7c\xe5\xc0\xcd\xf8\x8f\x80\xb9\x20\x7f\x4d\xb2\xde\x15\xe1\x50\xdc\x2d\x71\xc0\x08\xef\x6b\x21\x9f\xeb\xaf\xd3\x84\x38\x42\xbb\x0a\xbe\x33\x1c\xc5\x5f\x5b\xde\x33\xe3\x01\x0a\x9f\x25\xe7\xbe\x4e\xfe\x08\xe9\x5d\x5f\xfb\x8f\x7e\xf3\x56\x3f\xf3\x56\x3e\xe6\x14\x4a\x43\x0d\x2c\x75\x05\x59\x5f\xb3\x46\x7d\x62\x2f\xd2\xf4\x3a\xa6\x14\x9c\xfb\xda\x1d\x25\xf7\xbe\x17\x70\x65\x70\xf4\xe5\x94\x7d\x3b\xfa\x20\xaf\x1e\xbd\x79\x01\x9b\x05\xe5\x14\x3b\x3a\x9b\x61\x87\xf4\x8f\x8d\x23\x58\x55\x3f\xe9\xba\x58\x9c\xd6\x68\x92\xb0\x15\xbb\x07\x0a\x88\x13\xa1\x6c\x01\x9f\x85\x1c\x51\xe0\xaa\xa5\xdf\x98\x3e\xc7\x77\xe2\xbd\x01\xbf\x04\xb9\x70\x19\x9d\x4f\x74\x7d\x83\x3c\xa6\x62\x30\x9b\x20\x6a\x2f\x4f\x1e\x5e\x9e\x48\x1e\xe0\x9b\x0f\x91\x2f\x3e\x91\x80\x51\xcf\x9d\x4c\x52\xb6\x2c\x7d\xa1\xbf\x3c\x31\x7c\x77\xa1\x21\xfe\xe8\x83\x85\x97\xf8\x52\xdb\x90\x80\x7d\xdf\x21\x3a\xf7\xc2\xd9\x52\xcf\x49\x3b\x3e\x39\x7a\x80\x9f\x4a\xf2\x60\x7c\x24\xb0\x82\x94\xd3\xd3\x07\xf8\xa9\x26\xe5\xf4\xb4\xaa\x94\x57\x27\x0f\xf0\x53\x4d\xca\xab\x93\xaa\x52\x5e\x83\xc7\x5e\x57\xf4\xd8\xeb\x2d\x1e\x63\xfc\xd1\x21\x6c\x49\x44\xc1\x16\x87\x4f\x2c\x71\x13\xea\xbc\x5d\xfc\xe1\xb6\x19\x1d\x67\x86\x18\x18\x2f\xce\x74\xc1\xf5\xa6\x9e\xfd\xb8\x59\x6f\x72\x0f\x2a\x7b\x1c\x14\x16\x9c\xc9\x3d\x3d\x5a\x6c\xea\x97\xb9\x2e\x4f\x14\xac\x7a\x85\x83\x05\x75\x13\x38\x5d\x3f\x4a\x8f\x99\xe8\xa9\xd0\x18\x8c\xef\x6f\xfc\xff\x01\x29\x79\xe8\xc3\x30\xc2\xc4\x71\xc3\xc9\xca\x77\xe0\xcd\xe6\x7f\x36\x80\x0c\xb9\x33\xc9\x03\x58\x13\xeb\x9d\xbd\x31\xcd\xfb\xfb\x7b\x03\x06\x06\xf0\x63\xcc\xbc\x95\x19\x6f\x10\x26\x38\x91\x60\x46\x98\x29\x58\x32\xfe\xf7\xd9\xca\xef\x6f\x3a\x4c\x1b\xa4\xfb\x89\x00\x87\x96\x27\x59\x89\x9f\x1d\xb9\x31\xc9\x8d\xbf\x08\xb0\x4d\xe4\xb9\x5e\xe4\xa6\x18\x2f\x6f\x5a\x43\x79\x4d\xaa\x90\x41\x59\xea\xde\x1c\xeb\x54\x0c\xde\xa5\x1a\x26\xa7\x8c\x9a\xd0\xec\x0b\xa5\x38\x60\xa2\x8d\x98\x0a\x64\x62\x0a\x5b\x70\xe8\xa3\xed\x11\x4e\xfe\xd3\x89\xb5\xf8\xae\xf5\x17\x0a\xc3\x9d\x52\x1a\x6a\xff\x28\x92\xae\x46\x66\x03\x8b\x91\x6f\x94\x98\xb9\x04\xfd\xec\x10\x17\x19\xa3\x07\xb1\xa5\x53\x77\xf1\x8b\xc4\x22\x4a\x76\x84\xd6\x87\xae\x75\x31\x92\x83\xd7\x9b\xcf\xe1\xec\xda\xfa\x45\xc7\x6b\x58\x4e\x91\xf8\x52\x8f\xed\x9c\x68\x03\x69\x09\xe2\x5e\x41\xcf\x71\x8a\xe1\x54\xcb\x40\x51\xe1\xe0\xbc\x03\x2a\x7e\x82\x16\x42\x3f\x72\x6d\xdf\xa3\x62\x6d\xe4\x72\x82\x24\xe7\x04\x12\x2f\xca\x3a\x15\x09\xdb\xcd\x2c\x61\x20\xa4\x21\x82\x67\xa5\xc7\x4d\x8e\x32\xb2\x54\xdb\xe2\x1c\xa6\xf4\xe4\x51\x52\x1d\x61\x41\xd1\x0c\x77\xf0\xe6\xee\x85\x0a\xe6\xb3\x18\x17\x4f\xe6\x4c\xca\x36\x9e\xe2\x7b\xa2\xcb\x6c\x89\xd1\xb8\x92\x3c\xed\x79\x39\x3d\xc5\xb8\xb2\x3c\xc5\x67\x86\xcb\xe8\x19\x8d\x2b\xc9\x93\x96\xd4\x93\x56\xd0\xd3\x67\xe5\x78\x8a\x71\xeb\x3c\xd9\x0c\x16\x2d\x57\x0f\xdd\x2f\xf8\x0e\xc7\x57\xb5\xc1\x1d\x0e\x90\xc8\x49\x51\x3f\x45\xa5\x27\x93\xdf\x60\xca\x45\xb7\xcb\x70\x58\x4f\x78\x11\x0b\x66\xc5\x87\xf9\x17\x66\xc6\x27\xd0\xf5\xdb\xf7\xef\x47\xc3\x29\x85\x8b\x2b\xea\x9a\xd3\xd0\xb5\x1d\x62\xc0\x4b\xe3\x0b\x4b\x7b\xa2\xc0\x25\xbd\x11\x5d\x4c\x9e\xa8\x51\x14\xeb\x99\x71\x02\x00\xbb\xa9\xc8\xc5\xff\x17\x00\x00\xff\xff\xa2\xa2\x4c\x9f\x2f\x68\x00\x00"

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 26671, mode: os.FileMode(420), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

