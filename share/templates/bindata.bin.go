// Code generated by go-bindata.
// sources:
// index.html
// DO NOT EDIT!

// +build bin

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5d\x7d\x73\xdb\xb6\x19\xff\x3f\x9f\x02\xe5\xad\xbb\xb6\x2b\x49\xdb\x71\xb6\x5c\x2b\x69\x97\x58\x5a\xc7\x9b\xed\xe8\x62\x3b\x5b\xaf\xd7\xdb\x41\x22\x24\xa1\xa1\x48\x16\x00\xfd\x32\x9d\xbe\xfb\x1e\xf0\x05\x24\x45\xea\x85\x14\xc9\xc6\x97\xe4\xce\x8e\x04\xe2\x79\xc7\xcb\xf3\xfc\x00\xc9\xab\x95\x4d\x66\xd4\x25\x48\x8b\xfe\xff\x6f\xe0\x0b\xba\x24\xda\x7a\xdd\xe3\x3e\x76\x07\xab\x95\x31\xc4\x02\x1b\x51\x33\xb4\x9a\x71\x33\x71\xed\xf5\xba\x40\xbd\xf0\xb8\x70\x71\x44\x8f\xd1\x82\x91\x59\x5f\x33\x35\x24\xa8\x70\x48\x5f\x4b\x9e\xa2\x84\x6b\xd2\xb0\x5e\x6b\x83\x62\x5b\xcf\xc4\x5b\x05\x39\x18\x44\xbc\xe8\xd9\xf4\x1e\x4d\x1d\xcc\x79\x5f\x63\xde\x03\x22\x8f\xa0\x9c\x4d\x6c\x90\xac\x4f\x3c\x21\xbc\xa5\x36\x78\x81\x50\xb6\xdb\xd4\x73\x82\xa5\x8b\xf8\x12\x3b\x8e\x7e\x8a\x04\x79\x14\x3a\xa3\xf3\x85\xd0\x06\xd9\x6e\xab\x15\x9d\xa1\x48\x21\x1f\x33\xbc\xe4\xc6\x25\x76\x8d\x6b\x32\xc7\x82\xde\x83\x6e\x7c\xe1\x3d\xe8\xf2\xd7\x82\xda\x04\x94\x74\x38\x34\xca\xd7\xd9\x46\xa9\x79\xa8\x00\xa8\xb0\x38\x4d\x58\x2f\x5e\x45\x52\xbd\x7b\xc2\x66\x8e\xf7\x00\x82\x71\xe2\xa1\x4b\x0f\xdb\x08\xdf\xcf\x91\x4d\xb9\xef\xe0\x27\xe4\x81\xdf\x3d\x97\x6b\x91\x2f\x13\x1f\xc5\x2a\xdd\x3a\xd4\xfd\x18\x6a\xb6\x5e\x0f\xc2\x78\x25\x32\x12\x25\x74\xf9\x0b\xc1\x4b\x41\xe0\xf1\x94\xe8\x3e\x23\x08\x84\x62\xa1\x3b\x64\x06\x36\x1b\x86\x81\xe2\x98\x26\xb2\xa5\xdb\x23\x9d\xcd\xc5\xe9\xa0\x67\x82\x57\x42\x27\xaa\x17\x45\x6f\x3a\x98\xcd\x89\x7e\x7a\xda\xb2\x0f\x03\x27\x1b\xec\x25\x71\x03\xa4\x0c\x95\x2f\xe2\x7e\xd0\xd3\xa1\xc9\xcb\xbc\xbe\xd4\xf5\x03\xa1\xcf\x99\x17\xf8\x5a\xda\x63\x6b\x1f\xdd\xc1\x13\xe2\x44\xe1\x72\xbd\x07\x86\x81\xca\x26\x10\x17\xe5\x8c\x7d\x0c\x26\x01\x8c\x42\x37\x0c\x71\xfc\x34\x6a\x89\x06\x20\xe2\x64\xea\xb9\x36\x66\x4f\x32\xe0\x78\xe2\x10\x3b\x9d\x08\xca\x67\x76\x34\x15\x2a\xcb\xcc\x74\x85\xce\xb8\x74\x08\x0d\x93\x21\x64\x1b\x97\x84\x73\xe3\x9f\xd0\x07\x26\x16\xca\xff\x8b\x85\x64\xfc\x80\x72\x66\xec\x61\x3a\x7a\x14\x0c\x5f\x48\x1e\x10\xcb\x0d\xde\x03\x7d\x1f\xf5\x2d\x48\x8d\x3c\x90\xb5\xbd\x65\x67\x5c\x79\x8c\x34\xee\x8c\x90\xe9\x4e\x67\xec\xa1\x8d\x5c\x81\xfe\xb2\xdb\x19\xb9\xb7\x3d\x33\x9d\x0b\x6d\x4e\x0b\x98\x91\xbc\xd3\x59\xe1\x1a\x6f\x26\x1c\x96\x1f\x41\x5a\x9c\x1e\xd7\x6a\x85\x3d\x66\x7a\xf0\x60\x3a\x05\xea\xcd\x91\xb1\xc9\xbc\xda\x34\xd9\xa4\xee\x6e\x9a\x64\x24\x1f\x31\x4d\xf6\x3b\xa5\xf2\x74\xd9\xa4\x3d\x6a\xba\xf4\xcc\xc0\x29\x6e\x67\xe4\xf7\xe2\x8e\x96\x8c\x43\x74\x12\x6d\x5f\x1b\xbb\x56\x86\x05\x17\x8c\xfa\x24\xdd\xa6\x36\xd2\x17\xb1\x20\x18\x86\x7a\x6e\x27\x8f\x52\x1a\x04\x1b\x6d\x92\xb3\x68\x83\x31\x61\xd4\xb3\xe3\x6d\x7b\x4f\xef\x5c\x86\x83\x3e\x60\x27\x20\xbb\x09\x41\x7e\xfc\x3c\xeb\x97\xcc\x5e\xee\x60\x15\xec\xd5\x8a\x61\x77\x4e\xd0\x9f\x1c\x8c\x7e\xe8\xab\xe7\xc6\x25\xe5\x72\x2c\xe6\xcd\x3b\xc0\xb0\xd2\xc5\x29\x35\x00\x3d\x50\x5b\x2c\xf4\x97\x8c\x2c\xe5\x82\x00\x52\x8d\xc8\x15\xeb\xf5\x32\xd2\xb6\x8e\x4f\x22\x46\xa1\x67\x54\x7e\xbb\x85\x81\xee\xb0\x0d\xf7\xc4\xb1\x56\xfe\x48\xdf\x25\x0a\xa5\xbf\xd3\x24\x2a\x47\x5b\xc8\x6d\x97\x60\x5e\xc7\xc9\xed\x15\x59\x76\x90\xdd\x82\x14\x2f\x5a\xd4\x0f\xce\x6d\xa5\x62\x4d\x24\xb7\x91\xe8\x16\x53\xdb\x63\x3d\xf8\x59\xe6\xb6\xe0\xb4\x0e\x92\x5b\x29\xa5\xf9\xec\x36\xe5\x5a\x2b\xbd\x4d\xc9\x3b\xcf\x6f\x43\xd1\x8d\x27\xb8\x29\xd7\x1a\x19\x6e\x4a\xfc\x25\xc5\xcd\xad\x28\xdd\xe5\xb8\xa1\xb8\xd6\x92\xdc\x94\x7b\xad\x2c\x37\x25\xef\x3c\xcd\x0d\x45\xb7\x96\xe7\xa6\xdc\x6b\x24\xba\x29\x71\x07\x99\x6e\x6e\x38\x76\x96\xea\x26\xfb\x76\xf5\xb4\xee\xd6\x13\xd8\xa9\x43\x78\xc7\x49\xad\xdc\xfa\x1f\x8c\xec\x49\xad\xb7\xca\xfb\xfa\xc8\x94\x1c\x32\xc6\x62\x4e\x0e\x8d\x69\x52\x0e\x6f\x6a\x67\xe5\x90\x20\x4b\xf2\x7f\x51\xd7\xde\x97\x20\x6f\xcd\xb0\x25\x83\x30\x22\x47\x71\x90\xa1\x39\x8a\x81\x8c\x51\x0d\x06\x68\x32\xd7\x03\x4e\xfc\xa9\xd0\x90\x0d\xee\x8c\xdf\xf4\x53\xb5\xc6\x53\x70\x6d\x56\xcf\xb0\x61\x4f\x5c\xbb\x29\x27\xec\x59\xd7\xd5\xc4\x70\xd6\x41\x31\x31\xa4\xfc\x23\x0a\x38\x86\xa1\x5e\xa5\xa0\x00\xdd\x9a\xa8\x27\x52\xe9\x2d\xd6\x14\x47\xfa\xf1\xb3\x2c\x29\x86\xb3\x0e\x2a\x0a\x10\xd2\x7c\x41\xa1\x98\xd6\xaa\x27\x14\x75\xe7\xe5\x84\x94\xdc\x78\x35\xa1\x98\xd6\x28\x26\x14\xed\x97\x5a\x22\xbb\x92\x74\x57\x4a\x48\x69\xad\x55\x12\x8a\x79\xad\x42\x42\x51\x77\x5e\x47\x48\xc9\xad\x95\x11\x8a\x79\x8d\x2a\x42\xd1\x76\x50\x44\x64\xc7\x61\x53\x35\xc4\x6a\x65\x7e\x87\x7c\xef\x23\x41\x7e\xc0\xe8\xec\x69\xca\xf9\x0f\xb9\xbe\x36\xf3\x7c\x39\x53\x73\x3b\x31\x66\x04\x92\x39\x33\x9e\x07\xe8\x3b\x33\xbe\xf1\xb0\x2f\x1f\x4c\x26\x70\xc6\x41\xab\xd5\x03\x15\x0b\x04\xe9\x31\x79\xcc\x9b\xfb\x21\xf1\xf0\x47\x69\xec\x8b\xd2\xa1\x72\x09\x5d\xa2\x21\x11\x8b\x8e\xdb\xe2\x20\xe6\x62\x38\x18\x92\x7b\x3a\x25\x59\x45\xa1\xf7\x85\xb4\x25\xee\x9e\xa6\x93\x38\xaf\x22\xa9\x9a\xbc\xd7\x35\xf4\xb4\x11\x43\xaf\xbc\xc0\x15\x50\x87\x75\x67\x69\x2e\xbf\xad\x6a\xf4\xab\x46\x8c\x8e\x4a\xd6\x67\x62\xf2\x79\x23\x26\x87\xc5\xf6\x33\xb1\xf8\xac\x11\x8b\xdf\xdc\x63\xfa\x6c\x82\xfc\xb2\xa9\x20\x7f\xdd\x92\xc5\x7b\xa1\x11\x7b\x56\x44\x46\xec\x59\x0a\x8c\xd8\xb3\x9a\xb8\xc8\x66\x65\x0a\xa5\x3f\xf0\x82\x05\xfa\x1a\x2f\x2b\x62\x0c\x29\x13\x14\x73\xa1\xac\x3e\x97\x2c\x6e\x31\x67\xf8\x69\xc3\x92\xa8\xa0\xcd\xe0\x22\x20\xaf\x0c\x99\x89\xcb\x6c\xcb\xf5\x6c\xc2\x91\x90\x3d\x54\xff\xa8\x31\x25\xe8\x46\xcb\x12\xf4\x27\xaf\x64\xc0\x65\xea\x9b\xe8\x18\xe4\xba\x77\xa3\x62\x38\xb9\x77\xea\x38\x63\x84\xa4\x3a\xce\x72\x78\x54\x03\x3a\xee\x40\xaa\x22\x0f\x46\x40\xd5\x21\xbe\x2e\x41\xb0\x0a\xee\xfe\x3a\xe7\xee\x3c\xc5\x27\x00\x7d\x4d\xfd\xa0\x6b\xec\xeb\x62\x7c\xd7\x01\xf8\x05\x52\x2a\xa1\x5e\x52\xab\x26\x60\x2f\xe0\xd3\x22\xde\x75\xac\xef\x3e\x4b\xc0\x0b\x9c\xd6\x01\xe2\x25\xa5\x34\x0f\x79\xa5\x5c\x6b\x61\x5e\x29\x79\xe7\xa0\x57\x28\xba\x71\xd4\x2b\xe5\x5a\x03\xf6\x4a\x89\xbf\xe0\x5e\xb9\x15\xa5\x3b\xe0\x2b\x14\xd7\x1a\xf2\x95\x72\xaf\x05\x7d\xa5\xe4\x9d\x63\x5f\xa1\xe8\xd6\xc0\xaf\x94\x7b\x0d\xf4\x2b\x25\xee\x00\xfe\xca\x0d\xc7\xce\xce\xd0\x2f\xc0\xba\x9a\x07\xd3\x6c\xcf\x09\x66\x39\xe1\xcd\x13\xaf\x45\xf7\x6f\x4c\x45\x2d\x42\xcb\x76\x8e\x3e\x43\x87\x5c\xb1\x58\x29\x42\x63\x5a\x2a\xc2\x9b\xa3\x6a\xc5\x64\x0d\x84\x84\x59\xb2\xba\x3e\xee\x20\x3a\x19\x91\x1b\x59\xbe\xe4\x2c\x03\x97\x1e\x48\xe7\x5a\x12\x2f\x25\x43\xaa\x61\xc9\x10\xf9\xbc\xe0\xa4\xa1\x65\xb9\x72\xe4\xe4\x05\xab\x96\x06\x24\xeb\xd4\x85\x1c\x9c\x93\x5d\x1a\xc8\x21\x98\xd7\x40\xb5\x7c\x12\xb7\x00\x68\xe7\xb7\x00\xac\x2e\x6e\x01\x58\xae\x80\x46\xa8\x5a\x78\xa5\x7a\xc8\x6a\xe6\x16\x40\x2a\xbd\xc5\xaa\xe8\x48\x3f\x7e\x96\x45\x91\xd5\xc5\x2d\x00\xab\x8d\x5b\x00\xd6\x51\xb7\x00\xac\x3f\xec\x16\x80\xd5\xc6\x2d\x00\xeb\x88\x5b\x00\xd6\x97\x5b\x00\xc5\x59\xd1\x65\x31\x64\xb5\x79\x0b\xc0\x3a\xea\x16\x80\xf5\x87\xdd\x02\xb0\xda\xbc\x05\x60\x1d\x71\x0b\xc0\xea\xf0\x16\x80\xd5\xc2\x2d\x80\xbd\x55\x90\xda\xab\x6b\x15\x18\xe3\x32\x1c\x7c\xc8\x3c\x9f\x7f\x3f\x62\xcc\x63\x1c\x59\xae\xf9\x2e\x10\xc8\x27\x2c\x9e\x8a\xda\x56\xe6\x67\xd9\x2c\x33\xb7\x20\xa0\x4b\x0f\xa2\x6b\xbd\x43\x3e\x2f\x13\x38\xc6\xd3\x8f\x44\x34\x25\x4b\x71\xdb\x26\xee\x2d\x6d\x4c\x16\xc8\xe8\xd1\xc1\xa4\x67\xd2\xc1\x86\xac\xea\x95\x9a\x4b\x20\xc1\x2b\xd6\x6a\x34\x73\xaa\x17\x76\x69\xee\x60\x8f\xce\x8c\x46\xce\xe3\x12\x66\xd6\xf8\x40\x56\xdb\x3d\xfa\x67\x77\xc2\xfd\x1f\x73\xe1\x0a\x4f\xf1\x90\x1d\x0e\x4a\x12\x0d\xca\xa5\x67\x07\x8e\x87\xce\x7f\x52\x41\xcb\x1e\x64\x15\xe9\x20\xda\x19\x9a\x58\xdb\x70\x98\x5b\xae\x52\xd9\xdc\x4a\x2d\x07\x4a\x39\x39\x3c\x51\xf4\xdf\x97\xd0\x93\x64\x12\x15\xe9\xa3\xf9\xb5\x47\x7e\x4c\x5f\xaa\x40\xc4\x20\xab\x41\xfc\x5f\xd6\x87\xd9\xf5\x4a\xc6\xe0\x1b\x58\xb4\x42\xed\x89\x23\x70\xec\x01\xa4\x9d\x68\xdf\x96\x3c\x91\x52\x8b\x8f\x12\xbd\xb7\x3e\x4a\xc8\xd6\x6b\x19\x14\xb5\x00\x16\x97\x18\xe9\x96\xcc\xfc\x4b\xfc\x9a\xd1\x6c\x8b\x6f\x86\x2a\x2a\xbb\xc8\xb7\xc7\x46\x2d\x6d\xdb\xe8\xf7\xc4\x66\x94\x46\x65\x27\x83\x92\xd8\x34\x38\x3d\xf6\x8d\x7c\x5f\xad\xaa\xc5\xb1\x13\xaf\x91\x7b\x46\x5f\xc2\xa1\x74\xf8\xc5\x2c\xf6\x8c\xbf\xc2\x0a\xbf\xcd\x63\xfb\x34\x1a\x67\x74\xd9\xcd\xa2\xcc\xeb\x1d\xb8\xfb\xed\xcf\xb7\xa3\x9b\x52\x67\xbf\x7d\x82\x9a\x7b\x8f\xab\x23\xea\x52\x47\x87\xe4\x87\xb9\xf9\xad\x75\x7b\xb3\xc3\xc7\x72\xe3\xdb\xaa\x47\x48\xbb\xc3\xbb\x92\xf8\x70\xd7\x76\x83\xfe\xf8\xbc\x6b\xf4\x67\xcc\x3b\x40\x7f\xc6\xcc\x93\xe9\x70\x45\xf0\x07\x54\x6b\x02\xfc\x51\xc2\x5b\xc4\x7e\x8e\xf4\xe2\x67\x89\xfd\x8c\x79\x07\xd8\x0f\x08\x69\x1e\xfb\x51\x4c\x6b\x61\x3f\x8a\xba\x73\xec\x47\x4a\x6e\x1c\xfb\x51\x4c\x6b\x60\x3f\x8a\xf6\x0b\xf6\x93\x5d\x49\xba\xc3\x7e\xa4\xb4\xd6\xb0\x1f\xc5\xbc\x16\xf6\xa3\xa8\x3b\xc7\x7e\xa4\xe4\xd6\xb0\x1f\xc5\xbc\x06\xf6\xa3\x68\x3b\xc0\x7e\xb2\xe3\xf0\x39\x7f\x02\xa4\xf6\xb5\xea\x31\x6f\xea\xc3\x20\x63\x6b\xf8\x1c\xee\x91\x4b\x83\x9b\xf9\x50\xc8\x5d\xa7\x06\x57\xb7\xb2\x99\x0f\x08\xdc\xdd\x8c\xde\x3f\x97\xb8\x36\xf3\xf9\x80\xf1\xb3\xb1\xb7\x99\x0f\xbd\x5c\x5b\xcf\xc5\xde\x66\x3e\xd7\xf4\xc1\x7a\x7f\xfb\x5c\x2c\xfe\x6b\x23\x16\xbf\x1f\xdd\x74\x6e\xf0\x94\xc8\x13\x8e\xea\x16\xff\xad\x99\xcf\xae\x59\x57\xa3\x4f\x7a\x71\x7e\xdd\x88\x99\x17\xef\xae\xae\xde\x5c\x1f\xbf\x0d\x6d\x39\xda\xf0\x99\x37\xe5\xc5\xa3\x0d\x9f\xa7\x47\x1b\x61\x97\xa3\x8e\x36\xd2\xa3\x08\x1f\x5c\x63\x0d\x6b\x7f\xa3\x0a\x90\xdf\x1d\x4e\x9e\xd2\x70\xc2\x8e\x91\x39\x66\xd4\x63\x54\x3c\x1d\xc3\xe3\x9a\x4e\xeb\x7c\x11\x8c\xa2\xbf\xa1\xff\x3b\x8a\xfe\x3d\xe1\x90\xf8\xba\xa2\x1a\x8f\x64\x8a\xc7\x4c\x6e\xe9\xfe\x33\xa9\xd4\xe2\xdc\x01\x56\x53\x48\x63\xef\xab\xe1\xbb\x8b\xdb\x9f\xc7\x23\xb4\x10\x4b\x07\x1e\x46\xff\x49\x04\x0f\x52\xf3\x38\xa1\x5f\x12\x01\x75\xeb\x02\x33\x4e\x44\x5f\x0b\xc4\x4c\x7f\x9d\xe4\xfa\x21\x90\x57\xf2\xdd\xef\x08\x5e\x81\xb1\x3d\x33\xea\x90\xe1\xb3\x10\xc2\xd7\xc9\xef\x01\xbd\xef\x6b\xff\xd1\xef\xde\xe8\x17\xde\xd2\xc7\x82\x42\xd5\xab\x81\xc1\xae\x24\xeb\x6b\xd6\xa8\x4f\xec\x79\x52\x39\x44\x94\x92\x73\x5f\xbb\xa7\xe4\xc1\xf7\x98\xc8\x74\x0e\xbf\x56\xb4\x6f\x87\x9f\xad\xd6\xc3\x37\xdf\xc3\x62\x42\x05\xc5\x8e\xce\xa7\xd8\x21\xfd\x53\xe3\x04\x26\xd7\x57\xba\xfe\x0b\x4c\x55\x6b\xf4\x6b\xcc\x56\xae\x2e\x88\x11\x27\x04\x10\x99\x98\x06\x02\x51\xe0\xaa\x25\xdf\x7c\x3f\xc3\xf7\xf2\xbd\x01\xbf\x24\xf9\x2f\xe0\x32\x3a\xfb\x55\xd7\x0b\xe4\x11\x15\x87\x41\x05\xc1\x7b\x79\xf6\xf8\xf2\x4c\xf1\x00\xdf\xbc\x0b\x7d\xf1\x81\x30\x4e\x3d\x77\xbd\x4e\xd8\xf2\xe4\x85\xfe\xf2\xcc\xf0\xdd\xb9\x86\xc4\x93\x0f\x16\x5e\xe3\x6b\xad\x20\x01\xfb\xbe\x43\x74\xe1\x05\xd3\x85\x9e\x93\x76\x7a\x76\xf2\x08\x3f\x95\xe4\x41\xff\x50\x60\x05\x29\xe7\xe7\x8f\xf0\x53\x4d\xca\xf9\x79\x55\x29\xaf\xce\x1e\xe1\xa7\x9a\x94\x57\x67\x55\xa5\xbc\x06\x8f\xbd\xae\xe8\xb1\xd7\x5b\x3c\xc6\xc5\x93\x43\xf8\x82\xc8\x5a\x34\x0a\x9f\x9c\xe9\x26\x94\xb0\xbb\xf8\xc3\x63\x33\xdc\xee\x0c\xd9\x31\x9a\x9c\xc9\x84\xeb\x4d\x3c\xfb\xa9\x58\x4a\x0b\xcf\xd7\x27\x98\x95\xd6\xd2\xf1\x33\x3d\x9c\x6c\xd9\xaf\xe1\x5d\x9c\x65\x60\xf8\x25\x66\x73\xea\xc6\x27\x05\xfa\x49\xb2\xdb\x84\x97\x61\xa3\x73\x86\x7e\xe1\xef\x40\x24\xe4\x81\x0f\xdd\x08\x97\xbb\x8e\x20\x4b\xdf\x81\x37\xc5\x3f\x1a\x81\x0c\xb5\x40\xa9\x0d\x5a\x93\xf3\x9d\xff\x60\x9a\x0f\x0f\x0f\x06\x74\x64\xf0\x63\x4c\xbd\xa5\x19\x2d\x10\x26\x38\x91\x60\x4e\xb8\x29\x59\x72\xf1\xf7\xe9\xd2\xef\x17\x1d\xa6\x0d\x92\xf5\x44\xe2\x5e\x8b\xb3\x14\xbd\x88\xd6\x32\xb9\x01\x47\x24\x77\xfe\x9c\x61\x9b\xa8\x55\xb1\xcc\x4d\xd1\x51\x40\xd3\x1a\xaa\x36\xa5\x42\x8a\xd2\xe5\x57\xea\x32\x9d\x36\xd3\xdd\xbd\xa1\x93\xfb\x4a\xb8\xf0\x52\x09\xb2\x4c\x60\xc9\x0d\x7c\xb4\x3d\xa2\xf1\xdf\x05\xd9\x88\xe7\xc6\x51\x49\x69\x78\x13\x4a\x23\x7b\x22\x16\x4a\x2f\x46\xe2\xc5\x46\x50\x5c\x82\xbe\x71\x88\x8b\x8c\xd1\xa3\x5c\xb3\xa9\x3b\xff\x56\x81\x27\x07\x9e\x66\x6d\x76\xdd\x38\x81\x89\x37\x58\x6f\x36\x83\xcd\x69\xeb\x77\x50\x6f\xe0\x50\x65\xe2\x0f\xba\x87\x74\xa6\x0d\x94\x25\x48\x78\x25\xc7\xa6\x13\x0c\xdb\x56\x0a\xe8\x4a\x8f\xe6\x1d\x50\xf1\xe3\xc2\x10\xeb\x91\x6b\xfb\x1e\x95\x83\x3f\xb7\xf7\xc7\xb9\x25\x90\x78\x61\x76\x99\x91\xb0\xdd\xcc\x03\x0c\x84\x74\x43\xf2\xac\x74\x63\xe6\x24\x25\x4b\xb4\xdd\x99\xab\x14\x40\xc8\xc2\xe0\xc9\xe4\x32\xd2\x82\xb2\x21\xed\xe0\xe2\xf2\x84\x4a\x06\xb0\xec\x17\x8d\xde\x54\xca\x36\x9e\xf2\xbb\xbb\x0f\x59\xf3\xc2\x7e\x07\xf2\xb4\x67\x87\xe9\x29\xfb\x1d\xca\x53\x7e\x32\xfa\x10\x3d\xc3\x7e\x07\xf2\xa4\x07\xea\x49\x2b\xe8\xe9\xf3\xc3\x78\xca\x7e\x9b\x3c\xf9\x14\x26\xad\xc8\xee\xaa\xbf\xe1\x7b\x1c\xb5\x6a\x83\x7b\xcc\x90\x4c\x3a\x51\x3f\x41\xd4\xd7\xeb\x1f\x61\xc8\x85\x8f\x0f\xe1\xb0\x99\xd1\x22\xce\xa6\xe5\xbb\xf5\x6f\xdc\x8c\xb6\x98\xdb\x37\x3f\xfd\x34\x1a\x4e\x28\x34\x2e\xa9\x6b\x4e\x02\xd7\x76\x88\x01\x2f\x8d\xdf\x78\x72\x9e\x0b\x5c\x92\x07\x61\x63\x7c\x29\x28\xa3\x58\xcf\x8c\x76\x78\x58\x3e\x65\xb2\xfd\xff\x00\x00\x00\xff\xff\x46\xed\xc1\x99\xc3\x69\x00\x00"

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 27075, mode: os.FileMode(420), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

