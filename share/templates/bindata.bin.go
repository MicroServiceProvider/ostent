// Code generated by go-bindata.
// sources:
// index.html
// DO NOT EDIT!

// +build bin

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x3d\x7b\x6f\xe3\x36\xf2\xff\xef\xa7\x60\x85\x5f\x7f\x68\x7b\x95\xb4\xc9\xa6\x77\x8b\xd6\xf6\x61\x37\xf1\xf5\x84\xdb\x64\x8d\x4d\xb2\x77\x45\x51\x1c\x68\x8b\xb6\xd9\xc8\x92\x2a\x52\x79\x9c\xe1\xef\x7e\x43\x49\xd4\xdb\x96\x25\x4b\xf2\xe6\x90\x05\xe2\xb5\x49\xce\x93\x33\xe4\xcc\x90\xb2\xd7\x6b\x93\xcc\xa9\x4d\x90\x12\xfe\xff\x6f\xdf\xe5\x74\x45\x94\xcd\x66\xc0\x5c\x6c\x8f\xd6\x6b\xed\x02\x73\xac\x85\xcd\xd0\xaa\x47\xcd\xc4\x36\x37\x9b\x02\xf4\xd2\x61\xdc\xc6\x21\x3c\x46\x4b\x8f\xcc\x87\x8a\xae\x20\x4e\xb9\x45\x86\x8a\xec\x45\x12\xab\x6c\xd8\x6c\x94\x51\xb1\x6d\xa0\xe3\xad\x84\x2c\x0c\x24\x5e\x0d\x4c\x7a\x8f\x66\x16\x66\x6c\xa8\x2c\x3c\x6a\xaa\x53\xcb\x99\xdd\x01\x5d\x95\x3b\xae\x32\x7a\x85\x50\x7a\xc4\xcc\xb1\x54\xcb\x43\x16\xf6\x16\x44\x3d\x41\x9c\x3c\x72\xd5\xa3\x8b\x25\x57\x46\xe9\x61\xeb\x35\x9d\xa3\x90\x17\x17\x7b\x78\xc5\xb4\x0f\xd8\xd6\xae\xc8\x02\x73\x7a\x0f\x6c\xb1\xa5\xf3\xa0\x8a\x97\x25\x35\x09\xf0\x67\x31\x68\x14\xef\xd3\x8d\x82\xe9\x80\x01\x60\x61\x79\x22\x51\x2f\xcf\x42\xaa\xce\x3d\xf1\xe6\x96\xf3\x00\x84\xb1\x54\xce\x07\x07\x9b\x08\xdf\x2f\x90\x49\x99\x6b\xe1\x27\xe4\x80\xca\x1d\x9b\x29\xa1\x1a\xa5\x7a\x22\x96\x6e\x2c\x6a\xdf\x05\x9c\x6d\x36\xa3\x60\xaa\x24\x0d\xc9\x84\x2a\x5e\x10\xbc\xe5\x04\xba\x67\x44\x75\x3d\x82\x80\x28\xe6\xaa\x45\xe6\x20\xb3\xa6\x69\x28\x9a\x4e\x49\x5b\x68\x3c\xe4\x59\x5f\x9e\x8c\x06\x3a\x68\x25\x50\x62\xfc\x66\xab\x36\x4f\x3a\xd6\x61\xe9\x44\x47\x9d\xd0\xed\x5b\xb2\x77\x45\x6c\x1f\xc5\x3a\x10\x6f\xe2\x51\x30\xce\xa2\xc9\x87\x2c\x56\x6a\xbb\x3e\x57\x17\x9e\xe3\xbb\x4a\x7a\xcc\xd6\x51\xaa\x85\xa7\xc4\x42\x6c\x85\x2d\x2b\x9c\x55\xdb\x79\xf0\x30\x40\x9b\x04\xa6\x2f\xd6\x59\x35\xa2\xa9\xcf\xb9\x63\x07\xb6\x10\xf5\x86\x2d\x11\x6e\x46\x66\x8e\x6d\x62\xef\x49\x58\x06\x9e\x5a\xc4\x4c\x9c\x25\x56\xae\x19\xba\x4b\x03\xaa\x99\xc1\x30\x1c\x97\xda\xdb\x85\xb4\x37\x53\xfb\x40\x18\xd3\xfe\x0e\x63\xc0\x01\x51\xfe\x5f\x44\x28\xa5\x0f\x94\x11\xa6\x02\xed\xf8\x91\x7b\xf8\x5c\xe0\x80\xa9\x2f\x60\x1f\xa9\x55\xf0\x37\x40\x37\xd4\x44\x56\x07\x3d\xa8\xe5\xd2\xf1\x48\x07\x6a\x09\xd0\x56\xa8\xa5\x02\x3a\x54\x0a\xfa\x53\xb5\x5a\x72\x0d\x03\x3d\xed\x2f\xfd\x38\x8f\xe7\x3c\xb0\x9e\x7d\xc7\xd6\xde\x4d\x99\x63\xf9\x9c\x74\xec\x44\x57\xf1\xa2\x7d\x98\x13\x31\x7f\x36\x03\xf8\xbc\xd5\xe4\xd1\xd7\x75\xa6\x3c\x7c\xdf\xce\x94\xa2\x7f\x90\x33\x55\xab\xa7\x81\x53\xe5\xa1\x5b\x71\xaa\x81\xee\x5b\x72\xc3\x15\x83\x0a\x5b\x28\xf9\xa3\xb8\x8b\x4a\x63\x45\xaf\xc3\x2d\x73\x9f\x9d\x12\x41\xc0\xc1\xe9\x0c\x83\x72\xb8\x47\x5d\x92\xec\x9c\xe5\xc3\xf9\x92\x60\x70\x95\x4c\x60\x41\x1e\xe1\x83\x89\x60\xdf\x0f\xf5\xac\xc2\x9e\x3f\x21\x1e\x75\xcc\x28\x8a\xa8\x18\x9d\x09\xb8\xd0\x67\x6c\xf9\x64\x37\x20\xd0\x8f\xfa\xd3\x1a\x4c\x85\x16\x10\xcc\x98\x10\xb5\xc4\x36\xb2\x5e\x7b\xd8\x5e\x10\xf4\x7f\x16\x46\x3f\x0e\xb3\x83\xb4\x0f\x94\x09\x6b\xde\x12\x48\x54\x4a\xfa\xaa\xcc\xd6\x13\x89\xd0\x03\x35\xf9\x52\x7d\xe3\x91\x95\x58\x61\x80\x03\x2d\xd4\xcd\x66\xb3\x8a\xe6\xb6\x81\x92\x42\x44\x81\xaa\xe2\xd0\x7b\x0b\x02\x88\xc5\x72\xfa\x8a\xec\x22\xd6\x4d\xf2\x49\x32\x94\xbc\x26\x41\x5e\x06\xb6\x10\x76\xaf\x40\xbc\xfe\xe2\xee\x4b\xb2\xea\x21\xf0\x06\x2a\x4e\xb8\x41\xec\x1d\x76\x0b\xc6\xda\x88\xbb\x43\xd2\x1d\x46\xdd\x87\x6a\xf0\x25\xec\xde\x15\x3a\x80\x76\x7b\x8a\xbb\x05\xa5\x2e\x02\xef\x04\x6f\xc3\xc8\x3b\x41\x70\xa4\xd0\x3b\x60\xa0\x83\xd8\x3b\xc1\xdb\x28\xf8\x4e\xc0\x5f\xa2\xef\x0a\x17\xea\x3b\xfc\x0e\x48\x76\x18\x7f\x27\xf8\x1b\x06\xe0\x09\x82\x23\x45\xe0\x01\x03\x1d\x86\xe0\x09\xfe\x46\x31\x78\x02\x7e\x9c\x20\x3c\x63\xb3\x5f\x42\x14\x2e\xc3\x88\xfa\x01\xe6\x8d\xc3\xb1\xd5\x04\xf0\x96\x91\x46\x61\xff\xdf\x3c\x52\x11\xf5\x6f\xa5\xf7\xf5\x81\xd9\xc2\x2a\xd0\x52\x31\x59\x80\xf6\x24\x5b\x08\x07\x1d\x9a\x2c\x40\xdc\x0e\x88\xb4\x7f\x50\xdb\xac\x8a\xdb\xb7\x06\xfe\x02\x41\x30\x3d\x07\x61\x10\xf3\x74\x10\x02\x31\x61\x0d\x10\xa0\xe9\x42\xf5\x19\x71\x67\x5c\x41\x26\x28\x36\xfa\x30\x4c\xd8\x9a\xcc\x40\xc3\x69\x3e\x83\x86\x8a\x49\xee\x27\xcb\x31\xe7\x3d\x26\x39\x17\xf3\x1e\x72\x9c\x0b\xca\xee\x90\xcf\x30\xd8\x7b\x9d\x3c\x07\x78\x6b\x23\xcd\x49\xa8\x77\x98\xea\x1c\xa8\xc7\x97\x4c\x67\x57\x98\x76\x31\xef\x29\xd1\x01\x42\x5d\xe4\x39\x31\xda\x86\x69\x4e\x0c\x7f\xa4\x2c\x47\xd0\xef\x20\xc9\x89\xd1\x36\xca\x71\x62\xe8\x97\x14\x67\xb7\xef\xf4\x9d\xe1\x08\x8a\x1d\x26\x38\x31\xfa\x86\xf9\x4d\x0c\x7f\xa4\xf4\x46\xd0\xef\x30\xbb\x89\xd1\x37\x4a\x6e\x62\xe8\xe3\xe4\x36\x69\x63\xed\x21\xb5\x59\xaf\xf5\xef\x90\xeb\xdc\x11\xe4\xfa\x1e\x9d\x3f\xcd\x18\xfb\x31\x03\x62\x7a\x8e\x2b\x7c\x3e\x13\x18\x60\x8f\x40\x58\xa9\x47\x7e\x84\xbe\xd3\xa3\xdb\x2a\x55\x91\xa9\x5c\x02\x52\xba\x5b\xaf\x1f\x28\x5f\x22\x08\xd4\xc9\x63\x56\x13\x9f\xe5\x7c\xdc\x09\x3d\xbc\x2a\x35\xae\x0f\x30\x24\x34\xa2\x88\x74\xd4\x16\x4d\x7a\x66\xda\x46\x17\xe4\x9e\xce\x48\x9a\x51\x18\x7d\x2e\x64\x89\x86\x27\x81\x2d\xce\xb2\x48\xea\xa6\x11\x4d\x05\x3d\x69\x45\xd0\x4b\xc7\xb7\x39\xa4\x87\xfd\x49\x9a\x09\xb7\xeb\x0a\xfd\x43\x2b\x42\x87\x99\xf4\x33\x11\xf9\xac\x15\x91\x83\x1a\xc0\x33\x91\xf8\xb4\x15\x89\xdf\xdd\x63\xfa\x6c\x26\xf9\x4d\x5b\x93\xfc\x75\x47\x12\x57\x56\x6c\x20\xa4\xba\xbb\x15\x69\x63\xb1\x68\x63\xce\x93\x9a\x4d\x3c\xec\xb0\xb2\x4d\x3e\x7b\x5e\xaf\x81\x8a\x06\xab\xf6\x15\x5e\xd5\x2c\x81\x24\x48\x50\x84\x85\x7a\xcd\xb1\xa4\xcb\x2a\x0b\x0f\x3f\xe5\x24\x09\x93\xee\x54\xd9\x06\xe8\x95\x15\x8e\xa2\x52\x80\x61\x3b\x26\x61\x88\x8b\x11\xf1\xf8\xb0\x31\x01\xe8\x87\xcb\x92\xe2\x54\x96\x49\x9f\x89\x78\x5a\xf2\xe8\x67\x86\xf7\xc3\x62\xe0\xf1\x3b\x79\x9c\x7b\x84\x24\x3c\xce\x33\xe5\xb2\x16\x78\xdc\x51\x48\x0b\x35\x18\xd6\xd1\xf6\xd1\x75\x49\x81\xad\xa0\xee\xaf\x33\xea\xce\x42\x7c\x01\x95\xb9\x99\xeb\xf7\x58\x9a\x3b\x9f\xdc\xf6\x50\x9b\x03\x2a\xb5\x8a\x72\x82\xab\x36\xaa\x72\x80\xa7\xc3\x72\xdc\xa1\xba\x7b\xa9\xc7\xed\xaa\x29\x80\x76\x7b\x2a\xc8\x09\x4a\x5d\x54\xe4\x12\xbc\x0d\x4b\x72\x09\x82\x23\xd5\xe4\x02\x06\x3a\x28\xca\x25\x78\x1b\x55\xe5\x12\xf0\x97\xb2\x5c\x85\x0b\xf5\x5d\x97\x0b\x48\x76\x58\x98\x4b\xf0\x37\xac\xcc\x25\x08\x8e\x54\x9a\x0b\x18\xe8\xb0\x36\x97\xe0\x6f\x54\x9c\x4b\xc0\x8f\x53\x9d\xcb\xd8\xec\x97\x70\xf3\xe0\x1c\x74\xd1\xf0\x38\xdf\xab\x38\xea\x2d\x07\xbc\x7e\x62\x8d\xe0\xfe\x89\x29\x6f\x04\x68\x98\xd6\xc1\x37\x0f\x20\x6a\x2d\x66\xb0\xd0\x98\xa4\xb0\xf0\xa1\x8d\xe4\x55\x2e\xa6\x10\xc1\x0b\x8c\x57\x87\x1d\xdc\x4b\x9b\xcd\xa5\x1d\x02\xb3\x98\xbf\xe4\x00\x3f\xd3\x22\x95\x25\x0d\xac\x65\xca\x60\x00\x59\xc2\xb2\xa1\x63\xba\xc2\x80\xb2\x84\xe3\x96\x16\x28\xab\xd4\x06\x0f\x65\x64\x17\x07\xc2\x12\xb3\x1c\xc4\x2d\x5f\xc4\xad\x09\xda\xe7\xad\x09\xa3\x8f\x5b\x13\x86\xcd\xa1\x11\xd2\x28\x56\x2b\x41\x33\xda\xb9\x35\x91\x50\xef\x30\x4d\x3b\x50\x8f\x2f\x59\xda\xae\x10\xd3\xe8\xeb\xd6\x84\xd1\xcd\xad\x09\xe3\xc0\x5b\x13\xc6\x91\x6f\x4d\x18\xdd\xdc\x9a\x30\x0e\xba\x35\x61\xbc\xdc\x9a\xd8\xcf\x77\xfa\xce\xce\x8c\x6e\x6f\x4d\x18\x07\xde\x9a\x30\x8e\x7c\x6b\xc2\xe8\xf6\xd6\x84\x71\xd0\xad\x09\xe3\xb8\xb7\x26\x8c\x7e\x6f\x4d\x54\xa6\x65\x71\xe8\xd0\x28\xe3\x99\x94\x1d\x11\x5c\x78\x8e\xcb\xbe\x1f\x7b\x9e\xe3\x31\x64\xd8\xfa\x47\x9f\x23\x97\x78\x91\x2b\x2b\x5b\x91\x9f\xa6\xe3\xdd\xcc\x92\x82\x3e\x38\x60\x0d\xc6\x47\xe4\xb2\x32\x82\x13\x3c\xbb\x23\xbc\x2d\x5a\x31\xb6\x6d\xe4\xde\xd3\xd6\x68\x01\x8d\x01\x1d\x4d\x07\x3a\x1d\xe5\x68\xd5\x4f\x1d\xe9\x1c\x9b\xa6\xc7\x8a\xe9\x23\x4d\x1d\x80\x46\x83\x5a\x3f\xfe\xa4\x73\xad\x95\x53\x4b\x89\xcc\x98\xec\x89\x6a\xbb\x72\xff\xdf\x9e\x32\xf7\xa7\xcc\xcc\x05\x67\x9d\xc8\x0c\xec\x93\x84\xf6\xb9\x72\x4c\xdf\x72\xd0\xd9\xcf\x4a\xa2\x88\xe4\xb8\xaf\x08\x07\x13\x9f\x82\x89\xb8\x0d\x2c\xde\xb0\xcb\x59\x96\xcb\x40\x3c\x50\xd8\x8d\x02\xbe\x97\x73\x7e\xfd\x00\xe0\x32\x46\xc5\xc8\x72\x4e\xa1\x27\x66\xf5\xfb\x12\x41\x89\x74\xdd\x22\x7c\xe8\xd5\x29\x51\xf5\xed\xf0\xa5\x0c\x84\x08\xd2\x1c\x44\xff\xa5\xa7\x2b\x2d\xbc\x98\xee\x6f\xa4\x06\x88\xc5\x71\xa4\x6c\xa4\xbc\x56\xbe\x45\xdf\x38\x5e\x49\xaf\x54\xd2\xb7\xdb\xfa\x00\x34\xd7\x27\x05\x8b\xd0\x16\xbb\x24\xdc\x66\x23\x0c\x24\x9e\xb5\xe2\xca\x27\xf4\x96\x5a\x16\xa4\xe2\x53\xac\xef\x61\x27\x05\x51\x6a\x1b\x4b\x05\x86\x2c\xcb\xb9\xa5\xac\xc0\xf3\x76\x8b\x89\x97\xf9\x6d\xf0\x15\x16\x33\x4e\x6c\x65\x27\x82\x12\x8b\x69\x71\x7d\xa8\x72\x7d\x37\xde\x61\x8a\x16\x1d\xed\x17\x15\x3e\x21\x31\x94\x3a\x45\x84\xa2\xc2\x2b\x0a\xbb\xdd\x36\x8d\x55\x71\x34\x49\xf1\xb2\x1b\x45\x99\xd6\x7b\x50\xf7\xfb\x5f\x6e\xc6\xd7\xa5\xca\x7e\xff\xc4\x49\x95\xaa\x43\xe8\x52\x45\x07\xe0\xfb\xa9\xf9\xbd\x71\x73\xbd\x43\xc7\x22\x08\xd8\xca\x47\x00\xbb\x43\xbb\x02\x78\x7f\xd5\xf6\x53\x93\x73\x59\x8f\x35\xb9\x09\xeb\xa1\x26\x37\xf1\x1c\x91\x45\xd4\x2c\xc9\x01\x6b\x6d\x94\xe4\x62\xe2\x1d\x56\xe4\x0e\xd4\xe2\x4b\x45\x6e\x57\x55\x61\xc2\x7a\xaa\xc8\x01\xa1\x2e\x2a\x72\x31\xda\x86\x15\xb9\x18\xfe\x48\x15\x39\x41\xbf\x83\x8a\x5c\x8c\xb6\x51\x45\x2e\x86\x7e\xa9\xc8\xed\xf6\x9d\xbe\x2b\x72\x82\x62\x87\x15\xb9\x18\x7d\xc3\x8a\x5c\x0c\x7f\xa4\x8a\x9c\xa0\xdf\x61\x45\x2e\x46\xdf\xa8\x22\x17\x43\x1f\xa7\x22\x97\x36\xd6\xff\xd1\xe7\x98\x1a\x3f\x1c\x30\x61\x6d\x3d\xd2\x34\x31\x2e\x9e\xc3\xd3\x10\x42\xe0\x76\x1e\x6d\xba\xed\x55\xe0\xfa\x52\xb6\xf3\x98\xcb\xed\xf5\xf8\xd3\x73\x99\xd7\x76\x9e\x72\x99\x3c\x1b\x79\xdb\x79\x74\xeb\xca\x78\x2e\xf2\xb6\xf3\x74\xde\x67\xe3\xd3\xcd\x73\x91\xf8\xcf\xad\x48\xfc\x69\x7c\xdd\xbb\xc0\x33\x22\xce\x9d\xea\x4b\xfc\x97\x76\x9e\xc0\x34\x2e\xc7\x5f\xf4\xe2\xfc\xb6\x15\x31\xcf\x3f\x5e\x5e\xbe\xbb\x3a\x7c\x1b\xda\x72\xe0\xe4\x7a\xce\xac\xe4\xb8\xc9\x65\xc9\x71\x53\x30\xa4\x8d\xc3\xa6\xe4\x70\xc8\x05\x0d\x19\x17\x8d\xbf\xa8\x08\xc0\x6f\xf7\x07\x4f\x60\x18\xf1\x0e\xa1\x39\xf1\xa8\xe3\x51\xfe\x74\x08\x8e\x2b\x3a\x6b\xf2\xfd\x4a\x31\xfc\x35\xfd\xcf\x41\xf0\x9f\x08\x83\xd0\xd8\xe6\xf5\x70\x48\x4f\x8f\x90\xdc\xd0\xea\x53\xc2\x44\xe2\xcc\x91\x62\x5b\xa5\xcf\xc1\x57\x17\x1f\xcf\x6f\x7e\x99\x8c\xd1\x92\xaf\x20\x57\x18\x84\xff\x89\xba\x22\x44\xe8\x51\xc8\xbf\x22\x1c\xd2\xdf\x25\xf6\x18\xe1\x43\xc5\xe7\x73\xf5\xad\xcc\x06\x82\xf2\x62\xc9\x8f\x50\x20\x78\x07\xc2\x0e\xf4\x70\x40\x0a\xcf\x92\x73\x57\x25\x7f\xf8\xf4\x7e\xa8\xfc\x4b\xbd\x7d\xa7\x9e\x3b\x2b\x17\x73\x0a\xc9\xb3\x02\x02\xdb\x02\x6c\xa8\x18\xe3\x21\x31\x17\x32\x8f\x08\x21\x05\xe6\xa1\x72\x4f\xc9\x83\xeb\x78\x3c\x35\x38\xf8\x12\xe1\xa1\x19\x7c\x51\x80\x1a\x7c\xf8\x1e\xd6\x14\xca\x29\xb6\x54\x06\x49\x09\x19\x9e\x68\xaf\xc1\xb9\xbe\x52\xd5\x5f\xc1\x63\x8d\xf1\x6f\x11\x5a\xb1\xc8\x20\x8f\x58\x41\x59\xd3\xe3\x33\x9f\x23\x0a\x58\x15\xf9\x13\x1c\x73\x7c\x2f\x3e\x6b\xf0\x22\xc0\x7f\x05\x95\xd1\xf9\x6f\xaa\x5a\x00\x0f\xa1\x18\x18\x15\x4c\xde\x9b\xd3\xc7\x37\xa7\x31\x0e\xd0\xcd\xc7\x40\x17\x9f\x89\xc7\xa8\x63\x6f\x36\x12\x2d\x93\x6f\xd4\x37\xa7\x9a\x6b\x2f\x14\xc4\x9f\x5c\x90\xf0\x0a\x5f\x29\x05\x0a\xd8\x75\x2d\xa2\x72\xc7\x9f\x2d\xd5\x0c\xb5\x93\xd3\xd7\x8f\xf0\x57\x8b\x1e\x8c\x0f\x08\xd6\xa0\x72\x76\xf6\x08\x7f\xf5\xa8\x9c\x9d\xd5\xa5\xf2\xc3\xe9\x23\xfc\xd5\xa3\xf2\xc3\x69\x5d\x2a\x6f\x41\x63\x6f\x6b\x6a\xec\xed\x16\x8d\x31\xfe\x64\x11\xb6\x24\x22\x25\x0d\xa7\x4f\x78\xba\x0e\x99\xec\x2e\xfc\xd0\xad\x07\xbb\x9e\x26\x06\x86\xce\x29\x1d\x6e\x30\x75\xcc\xa7\x62\xb2\xcd\x1d\x57\x9d\x62\xaf\x34\xb3\x8e\xfa\xa2\xca\x7b\x52\x0a\xc8\x96\xad\x33\x5b\x6f\xae\xda\x26\x1c\xfe\x34\x75\x90\xb0\xc2\xde\x82\xda\xea\xd4\xe1\xdc\x59\xa9\xaf\xe5\xce\x14\xdc\xaf\x0e\x0f\x49\x86\x85\x1f\xaf\x91\xe0\xbe\x0b\xc3\x08\x13\x3b\x14\x27\x2b\xd7\x82\x0f\xc5\x5f\xba\x41\x5a\xbc\x98\xa1\x41\xb0\x48\x06\xab\x08\x15\xf5\x83\x69\xd0\x15\xb4\x81\x5a\x4e\xb3\xc5\x8e\x5c\x95\x10\x3e\x66\x56\xce\x60\xc9\xf4\xdd\xcc\xa2\x5a\xc6\x75\xf4\x83\x3d\x29\x30\x14\xf1\x9d\x3b\xd4\x28\x15\x43\x42\x6b\xa9\x15\x39\x53\xcb\x8c\x0b\x2f\xb9\xfa\x4c\xd9\xac\xe5\x03\xde\xaa\x69\x8b\x7f\x22\x48\x2c\xa5\xec\x47\x5d\x7f\x78\x78\xd0\x40\xaf\x1e\xfc\x69\x33\x67\xa5\x87\x6b\xaf\x0e\xf6\x49\x30\x23\x4c\x17\xac\x33\xfe\xd7\xd9\xca\x1d\x16\x6d\x51\xc9\x17\x36\xe3\x92\xe6\xd2\xb1\xc4\x85\x94\xc8\x14\xc0\x06\xe4\x9a\x8e\xf7\x93\x56\x6e\x34\xb0\xe4\xda\x04\x7d\x63\x11\x1b\x69\xe3\x47\xb1\x76\x53\x7b\xf1\x6d\x5c\x4b\xa9\x3e\x66\xcb\x8f\x8a\xce\x84\x94\xd1\x56\xd5\xca\x53\xa3\xf8\xc8\x30\xe1\xb5\x5e\xfd\x6a\x07\xc8\x5e\xb7\xca\x4e\x95\x51\x2c\x32\xe2\x4e\xc9\xc1\xef\x14\xc3\x3e\x97\x68\x5d\x98\x5b\x56\x53\x35\x9f\x8b\x87\x79\x1a\xdb\xa6\xeb\x50\x31\x53\x99\x60\x21\x8a\x49\x01\xc4\x09\xa2\xd2\x14\x85\x4a\x69\xf7\x90\x13\xc2\x14\x81\xba\xd6\xdd\xa7\xd7\x09\x98\x64\x7a\x67\x8c\x93\xf7\xa6\xa2\xb1\xa5\x62\x20\x21\x48\x99\xeb\x5b\xb8\xb8\x54\xa1\x12\x27\x17\xe3\x42\x0f\x4f\xa8\x6c\xc3\x29\xbe\xe1\x7f\x9f\xf5\x2f\x18\xb7\x27\x4e\x73\xbe\x1f\x9f\x62\xdc\xbe\x38\xc5\x37\x01\xec\xc3\x67\x30\x6e\x4f\x9c\x74\x4f\x3e\x69\x0d\x3e\x5d\xb6\x1f\x4e\x31\x2e\x8f\x93\xcd\xc0\x85\x79\x7a\x37\xfe\x1d\xdf\xe3\xb0\x55\x19\xdd\x63\x0f\x89\x60\x15\x0d\x65\x01\x7f\xb3\xf9\x09\x4c\x2e\xe8\xde\x07\x43\x3e\x12\x46\xcc\x9b\x95\xef\xf2\xbf\x33\x3d\x4c\x11\x6f\xde\xfd\xfc\xf3\xf8\x62\x4a\xa1\x71\x45\x6d\x7d\xea\xdb\xa6\x45\x34\x78\xab\xfd\xce\xe4\xe9\x34\x60\x91\x1d\x41\x63\x74\xa5\x2a\xc5\xd8\x40\x0f\x23\x03\xd8\x13\x45\x90\xfe\xdf\x00\x00\x00\xff\xff\x91\x78\x81\x12\x84\x6e\x00\x00"

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 28292, mode: os.FileMode(420), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

