// Code generated by go-bindata.
// sources:
// index.html
// DO NOT EDIT!

// +build bin

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5c\x59\x73\xe3\x36\xf2\x7f\xf7\xa7\xc0\x9f\xff\x64\x1f\x52\x91\xb4\x9e\x63\x37\x3b\x91\xbc\x65\x5b\xce\x84\x95\xb1\x47\xe5\x6b\x37\xfb\x92\x82\x48\x90\xc2\x98\x22\x19\x10\x92\x47\x51\xe9\xbb\x6f\xe3\x20\x45\x52\xa4\x24\x1e\x76\xac\x9d\x99\xaa\xb1\x48\x00\xdd\xe8\x06\x1a\xbf\x6e\x1c\x44\xff\xff\x86\x1f\xcf\x6f\x7f\x1d\x5d\xa0\x09\x9f\x7a\x47\x27\x7d\xf9\x83\x10\x3c\x10\x6c\xc3\x83\x78\x9c\x12\x8e\x91\x35\xc1\x2c\x22\x7c\x60\xcc\xb8\xd3\xf9\xc1\x48\x67\x4d\x38\x0f\x3b\xe4\xf7\x19\x9d\x0f\x8c\x7f\x77\xee\x4e\x3b\xe7\xc1\x34\xc4\x9c\x8e\x3d\x62\x20\x2b\xf0\x39\xf1\x81\xce\xbc\x18\x10\xdb\x25\x19\x4a\x1f\x4f\xc9\xc0\x98\x53\xf2\x18\x06\x8c\xa7\x0a\x3f\x52\x9b\x4f\x06\x36\x99\x53\x8b\x74\xe4\xcb\xf7\x88\xfa\x94\x53\xec\x75\x22\x0b\x7b\x64\x70\x1c\x33\xe2\x94\x7b\x44\x3e\xc3\xdb\x72\xd9\x1d\x62\x8e\xbb\x3f\x07\x11\x17\xcc\x57\x2b\x04\x4f\xc0\xb2\xdf\x5b\x97\x3b\xe9\x7b\xd4\x7f\x40\x8c\x78\x03\x83\x42\x95\x06\xe2\x8b\x10\xe4\xa0\x53\xec\x92\x5e\xe8\xbb\x06\x9a\x30\xe2\x0c\x8c\x9e\x83\xe7\xa2\x40\x57\xa4\x6d\x90\x46\x7c\xe1\x91\x68\x42\x08\x8f\x19\x70\xf2\x99\xf7\xac\x28\x4a\xe8\xe1\xb9\x47\x7d\x9b\x7c\xee\x8a\x54\xcd\x21\xb2\x18\x0d\x79\x9a\xe4\x13\x9e\x63\x95\x6a\xe4\xdb\x19\x45\xcc\x02\x46\x9f\xa2\x1e\x13\x2d\xcc\x08\x3c\xbd\xea\x1e\x77\x8f\x7f\x88\x13\xba\x53\xea\x77\x3f\x41\x9d\x36\x28\xde\x99\x62\xea\xab\xf2\xcb\x25\x75\x50\xf7\xf6\xf4\xfd\xfb\x8b\xe1\x98\xfa\xab\x15\x94\xd3\xc2\x28\x8a\xe5\x92\x78\x11\xb4\x10\xd4\xd0\x9b\x52\xef\x41\x67\xca\x0c\xdf\x5e\xad\x8c\xb8\x51\xfb\x3d\x25\x9c\x96\xbf\xa7\x4d\xe3\xa4\x3f\x0e\xec\x85\x4e\xf4\xf1\x1c\x59\x1e\x8e\xa2\x81\x01\x8f\x63\xcc\x90\xfa\xe9\xd8\xc4\xc1\x33\x8f\xc7\xaf\x11\x07\xc3\xb0\x3a\x3c\x08\x0d\xc4\x02\xe8\x47\x51\x9c\xba\x90\x08\xfd\x90\x54\x68\xd3\x84\x9b\x30\x09\xd0\x89\xb0\x8e\xe3\xcd\xa8\x1d\x97\xc9\x95\xd2\xdc\x85\x64\x84\x81\x19\x79\x9d\xa9\xdd\x39\x46\x21\xb6\x6d\xea\xbb\x1d\x8f\x38\xd0\xf9\x71\x17\xc4\xf4\xe3\x19\xe7\x81\x9f\x63\xc1\x03\xd7\xf5\x88\x60\xe1\xe1\x30\x22\x76\xdc\xb7\xaa\xb0\x6e\x65\x55\x48\x08\xa7\x4a\xc5\xc9\x98\xb9\xa2\xeb\xfe\x5f\xf3\x4a\xb2\x53\xd5\x4a\x0b\x08\x71\x52\x6d\xc4\x3a\x81\xef\x2d\xb2\x45\xa0\xd0\xad\x92\x63\xdd\x3a\xd0\x0b\x40\xb6\x85\x93\xb0\xd4\x0e\x54\xbb\xc1\xea\xc5\x50\xf6\x54\x23\x66\x3a\x01\x23\x6a\x0f\x8c\x09\xb4\x6c\xb6\x1f\xc6\x0c\xfb\x36\xa4\x51\x30\x14\x39\xd2\x06\xc6\x14\x7f\x56\x58\xf0\x0e\x1d\xbf\xb2\x26\xc9\x28\x83\x2e\x12\x63\x1b\xb8\xe8\x51\x8f\x36\x61\x20\xd7\x05\x9b\x05\xfa\x3d\x9c\x91\xab\x07\xd6\x95\xb3\x35\x21\x68\xbe\x67\xd7\x66\xaa\x12\xd0\x96\xae\x3f\xe9\xcf\xbc\x94\x96\x71\x51\xf8\xc9\x1b\x88\x47\xe3\x72\xd8\xe2\x74\x4e\x36\x9b\x17\x6b\xe5\x05\xf6\x46\xef\x7a\xbd\xc7\xc7\xc7\x2e\xe8\xc2\xe0\x7f\xd7\x0a\xa6\x3d\x85\x7a\x80\x11\x1e\xc1\x11\x89\x7a\x1e\xe6\x24\xe2\xff\xb4\xa6\xe1\x20\xd6\xfd\xfe\xe2\xfa\xc6\xfc\x78\x95\x6f\x1b\xc9\x3f\x06\x4d\xbc\xd9\xaf\x1e\x2d\x15\x36\x1e\x42\x80\x69\x28\xf5\x0c\xa0\xc4\x5c\xea\x8b\x01\x88\x1c\xca\x22\x2e\x53\x37\x75\xb2\x02\x9b\xe4\x58\x89\x24\x40\xdc\x8d\x06\x90\x22\x26\xdd\x3c\x34\x6f\x6e\xaf\xcd\x33\xd1\x89\x82\xa0\x65\x99\x9b\x0a\x4a\xc3\xbf\xf8\xe3\x28\xfc\x51\x0d\x1c\x61\x44\x60\xd3\x1b\xc5\x52\x46\x69\x8e\x84\x26\x1b\xe3\x47\xeb\xf2\x02\x35\x9c\x6d\x68\x38\xdb\xae\xe1\x5d\xc8\xa9\x1a\x74\x07\xa4\xa5\x87\xf3\x5a\x7a\x78\xab\x96\x1f\x4e\x5b\xd0\xb0\x37\xf3\xb6\xe1\x52\xea\x15\x5e\x40\x09\xed\x8f\x77\x7b\xd0\x4c\x19\x16\x3c\xe6\x3d\xab\x50\x70\x4a\xa6\xe0\xd4\x54\x1c\x97\xe0\x9c\x70\xad\x6f\x62\x1f\x1b\x38\x0e\x44\x2b\x9d\xe3\x0c\xce\x2d\x97\x9c\x4c\x43\x01\x39\xc8\x00\xff\x0f\x75\x47\xef\xde\xa9\x87\xdf\xa0\x35\x88\x07\x7c\x0d\xd4\x15\xad\x53\x8c\xb2\xb6\x53\x5c\xed\xdb\x66\xd5\xda\x4e\x61\xad\x99\x36\xdc\xdd\x28\x56\x38\x7b\x92\x46\x01\xbe\x5b\x1b\x85\x3e\x4d\xa3\xd0\x56\x1a\x25\x8c\x8a\x85\x3b\xfe\x6b\x33\xe9\xc2\xa8\x0d\xe9\xe6\xee\xd3\x48\x37\x77\x77\x4b\x97\xbc\xec\x88\xfc\x63\x82\x39\xc4\xce\x02\x3e\xd0\x20\xf6\x6f\xab\xd5\x8f\xf9\x10\x5c\x47\xde\x22\x18\x97\xf3\xb6\xe5\xb2\xf7\xdd\xd1\x77\xbd\xd5\x6a\xb9\x54\xf2\xa5\x04\x1e\x63\x98\x76\xd9\x62\xde\x22\xc2\x60\x03\xc4\xd5\xc1\x03\xb0\xff\x19\x7e\xc5\x1c\xc9\x3f\xf7\xa8\xf5\x30\x58\xf2\x09\x8d\xba\x13\x88\xbc\x3c\x22\x53\x56\x20\x83\x6c\xb2\xd5\x4a\x14\x3f\x17\x8f\xc8\x18\x73\x1f\xc1\xff\x38\xb6\x07\x96\x20\xcb\x51\x12\x1b\xae\x49\x8c\xcf\x1e\x1e\x13\x0f\xa9\x9f\xa4\xfc\x91\x6e\xdd\xee\x99\x10\x2d\x05\x92\x27\x42\xe5\x5b\x68\x18\x15\x8f\x9d\xe8\x99\xc8\x7e\xda\x31\xea\x4e\x9e\x56\xbd\x44\x38\xd4\x58\xd1\x7d\xd5\xd3\xd6\x06\xd8\x00\xa6\x1d\x19\xa2\xcc\x23\xe5\x13\x24\xde\xc0\x60\x85\xf5\x01\x7b\xf1\x47\x4d\xe6\x96\x4b\x88\x9b\x5d\x82\xbe\xa1\xdf\xa3\x6f\xac\x80\x11\xf4\x6e\x80\x94\x3b\x3a\x1f\xdd\x75\x3f\xd0\x48\xb4\x2d\x67\x20\xfb\x29\xe7\xec\x17\xb2\x40\x12\xd0\x80\xdf\x78\xd1\xb9\x32\x14\x51\xf7\x4a\xea\x0c\x93\x6b\x3b\x1e\x31\xd2\x99\xca\x26\x46\x7e\xf0\xc8\x70\x98\x28\x97\x50\xc0\x1c\xdb\x2e\xa5\x4a\x66\xbf\xb9\x86\x9b\x45\x24\x24\xcc\x82\x68\x53\x45\x85\x6a\x26\xb5\x4e\x1d\xc4\x15\xdc\x45\x84\x49\xa9\x32\xd5\xaa\xd4\x94\x97\x3d\x79\x5a\x29\x6e\x16\xd1\xa6\x10\x32\xf1\xf9\x64\xf8\x17\xa6\x7c\x53\x08\x95\xda\xb6\x14\x1d\xea\xcf\x09\x4b\x66\xb8\x05\xd2\x98\x30\x98\x36\xa5\x51\xa9\x85\xd2\xf4\x38\x4b\x99\x7e\xf6\x67\x9f\x81\xa0\x90\x5c\x14\xfa\x26\x5c\x5b\xf7\x08\x33\x3c\x15\xdd\x20\xb3\x91\xc8\xec\x0a\x0b\x97\x63\xfa\x2a\xf0\xff\x20\x2c\x40\x90\x76\x1e\xce\x7c\x64\xa8\x42\xf2\x6f\x67\x12\x80\x86\x06\x4a\xa6\x70\x9d\x09\xb5\x6d\xe2\x1b\xf1\x10\x48\xad\x84\x81\xe4\x31\xac\xf3\x49\x1a\xf0\x93\x37\x91\xb1\x63\xc8\xc8\x62\xc2\x6e\x33\x33\xe9\x99\x4f\x33\x53\xa2\x93\x6f\x73\xa1\x63\x9d\x5a\xc0\x30\x9f\xbe\x12\x61\x78\x4f\x5f\x8b\x30\xa8\x26\xb5\xf4\x74\xdf\xc9\xd4\x78\x01\x8b\xaf\x57\xb0\xb6\xf9\xfa\x18\x7d\x95\xaf\xe7\x6b\xe7\x2b\x0d\xa8\x0a\x8e\xdb\xce\x78\x01\x13\xf1\xdf\x2a\x82\xb9\x4d\xa3\x87\xb5\xa9\x0f\x7f\x92\x4c\x8a\xc1\x5c\xd7\xa0\x01\xdd\xa6\x4c\x2c\x6f\x18\x8a\x45\x77\x48\xd9\x95\x5c\xed\xd0\xb0\x90\x40\xb8\xca\x25\xf3\x2b\xbd\x16\x92\x00\x47\xae\x44\x4c\xbf\x0f\xb4\xc4\x44\xa7\x73\x4c\xbd\x7d\x49\xca\x3b\x61\x0d\x3d\xb1\x36\x30\x86\x46\x2a\x65\xb5\x52\x53\xb3\xb8\x4a\xc8\xb1\xab\x09\x79\x1b\x70\x9c\x16\xb2\x11\x48\xc5\xbd\x5c\x03\xa9\x6e\xf1\x58\xa0\xd4\xd0\xf1\xd5\x0f\x47\xaf\x5a\x40\xab\xc2\x76\x55\x8b\xa5\xc4\x9f\x4d\x45\xf4\x64\x88\xfa\xee\xe5\xea\xb6\xac\xf8\x01\x1d\x23\x63\x28\x17\xe0\xa1\x36\xa9\x44\x0d\x1e\x20\xfc\x65\x30\xf3\xb9\x58\x47\xad\xcd\xe4\x35\x32\xa4\x0d\x01\x8b\x54\xff\xd5\x64\xf6\x06\x19\x77\x72\x59\xb7\x05\x5e\x6f\x91\x21\xed\x26\xcf\xac\x11\xd8\x64\x20\xa2\x0d\xc4\xa1\x7e\x60\x37\x87\x1c\xc5\xa5\x0c\x73\x54\xee\x0b\x02\x1d\xd3\x61\x64\x6f\x92\x2a\xa0\x63\xce\x4a\x51\x47\x64\x55\x84\x1d\x53\xb6\x5b\x7b\xb8\xa3\xfb\xba\x15\xe0\x39\x6e\x27\x4c\x8a\xdb\x40\x0d\xa6\x94\x47\x57\xe0\x52\x12\x0a\x6c\x94\xd6\x30\xb2\xb5\x38\xca\xb7\xb3\x2c\x26\xb1\xa3\x06\x9d\x80\x89\x1a\x64\x12\x11\x5a\x0b\x3d\xb2\xc3\xb7\x39\x1c\xd0\x7a\x01\x08\x75\xd6\x66\x64\x6e\x0b\x3f\x68\x26\xfc\xd0\x30\x40\x9d\x6e\x31\x02\x24\x19\x7b\x8e\x19\x28\x3f\x24\x1e\xc7\xa6\x5f\x99\xe4\xe3\x8c\x57\xa1\xa9\x56\x43\x96\x79\xa3\x31\x4c\x1b\xc7\x0e\xa6\x1a\xc2\x26\x0c\xe1\xd7\x6d\xcf\x74\x4c\x18\x83\xcc\xc1\xa5\xc3\x76\x33\x82\x8f\xf7\xe6\xce\xcc\xdb\x1b\x04\x58\x8a\x22\x62\x05\x7e\x7a\x1f\xd7\xf4\xb7\xc7\xf5\xfd\xdc\x92\xf8\xb8\xdf\x4b\xa7\x9c\x84\x51\xed\xe9\xc5\x6e\xe1\xa0\x67\xff\x74\xe9\xb8\x40\x14\x74\xf6\xeb\xed\xc5\x0d\x9a\x06\xf6\xcc\x0b\xd0\x9b\xf7\x0d\x1a\xf0\x2c\x27\xe2\xb7\x6f\xde\x3f\xb9\x8c\x95\xdb\xb1\xaa\x90\x4d\x40\x96\xb6\x1b\x72\x51\x87\x30\x16\xb0\x86\x20\xab\x78\x94\xa1\xac\xca\xfd\x0a\xb3\xf5\x61\x56\xf7\x51\x2b\x38\xdb\xc6\x1c\xad\x25\x9c\x2d\x81\xd8\xf4\xd6\x65\xd9\x10\x6c\x01\xaa\xca\x30\xf4\x99\xaa\x2f\x46\xc7\x7d\x2a\x6f\x03\x03\x4b\x70\xaf\x8d\xea\x9b\xa1\x5b\x1a\x8e\xda\x80\xb7\x10\x5b\x0f\x84\x37\xc4\x37\xcd\xa4\x0c\xe0\x74\xf6\x57\x84\xab\x8f\x70\x71\x37\xb5\x02\x71\x2d\xcd\x06\xbf\x42\x5c\x2b\x81\xd6\x9f\x0b\x74\xe5\x32\xbc\x08\xb8\xcb\xc0\x53\x73\xbc\x9b\x92\x69\x8d\xbd\x57\xa0\x5a\x8f\xb5\xcb\x8b\xcb\x62\x9c\x13\x07\x6c\x14\xc2\x3d\x50\x30\x28\x49\xd6\xfd\x85\x0a\xc9\xf2\x10\xb7\xce\xd9\x13\x4e\x04\xc1\x4f\xed\xaf\x82\x09\xb6\x85\x2b\xef\x3a\xa3\x9a\x80\xad\xae\xbb\x03\xc3\x66\x9b\x83\x97\x64\xfa\xfc\x9b\x83\xa9\xe1\x23\xba\xab\x4a\xf9\x2d\x4b\x54\xcf\xb0\x36\x15\x0f\x8c\xe6\x43\x2c\x39\xff\x54\xda\x71\xe2\x24\x8f\xf8\x97\xed\xba\xd1\x7a\x47\x17\xfa\x48\x72\x41\xf2\x6f\xf6\xec\xc6\x09\x42\x9a\xc1\x4e\x72\x79\x84\x9c\xfa\xae\xa1\xb7\xb4\x4f\xc4\x9f\x3e\x4e\x93\x8a\x43\x25\xea\x74\xf6\xcf\x50\x36\x66\xb1\x4a\x9f\x25\xd1\xbc\x24\x5c\xca\xa3\x24\x63\x2f\xb0\x1e\x92\x23\x3e\xea\xa7\x3f\x2e\x17\x67\xf2\xc6\x10\x7f\xd0\xd8\xed\x50\xdf\x09\x8c\x64\x83\x1d\xa8\xcf\x47\x77\xfd\xde\x38\xcd\x2b\x3e\xa7\x2b\xf4\xd4\xc7\x8d\xc4\x63\x91\xb1\x8f\xf2\x7b\xe0\x79\xc3\xd6\xe9\x89\xfe\x02\xb0\xb4\x49\x29\xa5\xc0\xf3\x39\xd4\x5d\x9f\x22\x5c\x8f\x71\x7d\x94\xea\x55\xd9\x19\x7d\xe9\x44\x0a\x17\x4d\x91\x58\x0d\xf6\xf0\xa2\xc0\x77\xc8\xf3\x3d\x1b\xa7\xb7\x95\x12\x76\xc1\xf9\xca\xcd\x13\x92\x1a\x43\x53\x70\xba\x21\x9a\xe8\x22\x97\x05\xb3\x50\x7b\x3a\xf5\x12\x7f\xa1\xa0\x5e\x8e\x32\x02\x14\x8c\x8a\xdc\x39\x2b\xd1\xd0\x1f\x48\x14\x0d\x51\x22\xec\x0e\x32\xd5\x28\x12\x87\x02\x46\x52\x74\xdb\x55\xda\x38\xd3\x66\x08\x4b\x0c\x3c\xd1\x30\xc2\x16\x33\xfd\x91\x26\x5d\x8f\xfd\x67\xea\xe3\x6b\x40\x8b\x8a\x5d\xec\x77\xcf\x00\x56\x0e\xa1\x9f\xaf\xd6\x48\x50\xa9\x9f\x53\x74\x2f\x40\xa5\xb5\x6c\xff\x01\x9f\xb8\xb7\x6c\x9b\x36\xb8\xcb\xe6\x04\x54\x29\x3f\x21\x5f\x76\x1c\xbf\xd0\xa7\x37\x93\xb3\x96\x55\x7d\x8b\xed\xd4\x72\x2d\x62\x37\xac\xbe\x67\xc9\x50\xd7\x72\x2c\xc0\xa1\x2d\xbf\x22\x85\xd9\xe6\x56\x86\x62\xc3\x77\x16\x61\x97\x34\xf4\x2e\xb2\xa6\x03\x77\x2e\x43\xe7\x70\x7c\x8b\x94\xb5\xba\x6b\xd1\x2a\x7e\x99\x9e\x05\x6c\xf4\xb0\x1c\x8b\x44\x82\xea\x7e\x45\x92\xbd\x00\x85\x0a\xdc\xca\x1e\xa2\x55\xf7\x2a\xed\xd9\x5b\x89\xa1\xdd\x10\x8f\x58\x7c\x87\xd8\x99\x41\xf2\x3a\x5d\xc1\xc6\x07\x80\x9d\x90\x7a\x5e\xee\xbb\x54\x8f\xee\x73\x36\x43\x7f\x19\x28\x8f\x55\xe5\x2d\xbc\xa0\x2f\xca\x4e\x31\x49\x5e\xea\x18\x8a\xe2\x95\xfb\x06\x69\x2f\x71\x5e\xb5\x28\x0e\xf0\x3a\x13\xbb\x71\x25\xd2\xa4\xbf\x87\x6a\x1e\x5a\xe4\x4e\xcc\x88\x00\xe3\x68\x17\x45\x7a\x7f\xbe\x7e\x44\x42\xeb\x45\x24\x66\xa3\x88\xc4\x6c\x1c\x91\x98\xed\x45\x24\xe6\xae\x88\x24\x59\x21\x8e\x1a\x46\x24\xe6\xff\x40\x44\x62\x1e\x50\x44\x62\xd6\x8b\x48\xcc\x2f\x39\x22\x31\x0f\x2d\x22\x31\xeb\x45\x24\xe6\xcb\x8d\x48\xf6\x10\xed\x6b\x44\xb2\x65\x7f\xb0\x95\x10\x40\xf3\x1a\xa9\x3d\x9c\x8a\x21\x49\xf6\x48\x46\x6b\xf2\x00\xaf\x0b\xb9\x85\x5e\x5f\x9c\xd7\x2d\x8a\xf3\xfa\x39\x23\xa4\xfc\x36\xf2\x1e\x21\x52\xee\x6c\xcd\x5e\x14\xed\x04\x55\xe2\xbb\xf2\x3a\x51\x95\xda\xf7\xa9\x1d\x56\x65\xc9\x6b\xc5\x55\x82\x45\x5b\x81\x95\x12\x67\x5b\x64\x05\x25\x02\xb6\x68\x18\x55\xa5\x37\xcb\x0e\x36\xac\x02\x25\x0e\x27\xae\x52\xc2\x56\x0f\xac\x62\x25\xbf\xcc\xc8\x4a\xd8\xe9\x61\x85\x56\x0a\x0c\xaa\xc7\x56\x8a\xee\x05\xa8\x54\x10\x5c\xed\x23\xdb\x93\xee\x22\x24\x87\x03\xea\xbb\x97\x30\xaa\xe5\x5d\x46\x51\x13\xe7\x92\xa1\xae\xe5\x5b\x80\x43\x5b\xae\x45\x0a\xb3\xcd\xb3\x8c\x58\x00\xf3\xf5\xa8\xf1\x94\x5d\x56\x74\xe0\xbe\x65\x14\x1d\x8e\x6b\x91\xb2\x56\xf7\x2c\x5a\xc5\x2f\xd3\xb1\x80\x8d\x1e\x96\x5f\x91\x40\x50\xdd\xad\x48\xb2\x17\xa0\x50\x81\x57\xd9\x43\xb4\x27\x75\x2a\x61\xd4\xd4\xa7\xcc\xdd\x5a\x3e\xe5\xde\x6d\xe2\x53\x32\xd4\xb5\x7c\x0a\x70\x68\xcb\xa7\x48\x61\xb6\xf9\x94\x7b\xec\x32\x2c\x6e\x23\x6c\xe4\x51\x64\x35\x07\xee\x51\xee\xdd\xc3\xf1\x28\x52\xd6\xea\x1e\x45\xab\xf8\x65\x7a\x14\xb0\xd1\xc3\xf2\x28\x12\x06\xaa\x7b\x14\x49\xf6\x02\x14\x2a\xf0\x28\x7b\x88\xf6\xa4\x1e\x65\xee\x36\xf1\x28\x51\xc5\x93\xea\x21\x84\xeb\x29\xc7\x73\x23\xeb\x2e\x3e\xaa\x1e\xc6\xdf\xe2\x84\x54\x1c\x54\x17\x94\xdd\x91\x39\xdc\x72\x51\x98\x3e\xe9\x2d\xc1\x38\x29\xbd\xcf\xd9\xf0\x84\xe2\x2e\x47\x71\x94\x0c\x15\x99\xab\xef\xfe\xaa\xc0\x70\xc4\x68\xc0\x28\x5f\x54\x24\xbb\xa2\xd6\x9e\xc7\xe8\x13\x92\x1b\xfa\x47\x55\x92\x6b\x12\x51\x5b\x9e\xa9\x2f\x23\x13\x27\xee\xe3\x5b\x11\x92\x66\xb8\xa5\x65\xd7\x67\x28\xd9\xb3\xdf\x45\x35\x3a\x60\x1f\x87\x3b\x75\xcf\xd7\xa7\x66\x75\xcf\x79\x9b\xcd\x28\x92\xb7\xd9\x80\xfd\x35\xbe\xf6\x45\xb0\xfa\x01\x19\x77\x2d\xb1\xfa\x07\xb0\xba\xb9\xb8\xae\x79\x39\x8e\xe0\xf0\x0a\xf4\xba\x6e\x45\x96\xd7\xc8\xb8\x32\x5b\xe1\xf4\x06\x19\xf7\xe6\xf5\x6d\x2b\xbc\xde\x22\xe3\xfa\xe2\xa6\x15\x56\x7f\x43\xc6\xad\x79\x79\x11\xf3\xd2\x83\xa9\x26\xb3\xbf\x23\xe3\xfc\xe3\xe5\xe5\xe9\xd5\x30\xde\x86\x69\xf0\x25\x85\xc6\xed\xe6\x1f\x52\xa4\xbe\xd4\x01\x56\xf9\xbb\xfd\xe4\xe5\x94\x45\x37\xf9\xa9\x1d\x9a\x13\xf9\x10\x5f\xa3\x56\xa1\xd6\xb9\x2b\x37\x7c\x0c\xe5\x33\x1e\xc8\x42\xdc\xb8\xaa\x92\x62\x14\xcb\x04\x68\x6f\x13\x04\xd3\x37\x91\xab\x00\x5f\xee\xb1\x95\x42\xd5\x1e\x52\x24\xce\x4f\x7b\xb7\x29\xb6\x26\x6b\x90\xd2\xb5\x5c\x42\xa2\xa0\x2b\xf6\x72\x73\x55\x48\xbb\xba\xd9\x4c\xfa\x3a\xc1\xa7\x7b\x77\x97\x72\x76\x09\xc4\xa6\xb2\x8a\x10\x58\x66\x97\xdf\x6f\x24\xb3\x47\x2c\x98\x03\xee\xb3\x2d\x45\xc0\x2f\xf3\x6d\x2c\xb4\x6a\x0e\xf5\xc4\xac\x92\x4f\x76\xe1\xfd\x1e\x6d\x19\x41\x00\x61\x4d\xf6\x09\x25\xa8\x83\xc8\xef\x68\xb3\x27\x6d\xc4\xd9\x8c\x94\x0c\xaf\x9c\xe5\xa0\x0c\xc7\x6d\xe5\x93\x81\x52\xd7\x87\xc5\x01\x56\x5d\x1f\x96\x9a\x47\xb6\xf6\x29\xec\x30\xf7\x11\xd7\x3a\x4b\xd8\x4e\x69\x66\x6c\x39\xa5\x05\xa4\xdd\x94\xe6\x0e\x29\x23\x16\x97\x1b\x81\x2d\x7d\x11\x96\x98\x4d\x03\x24\x4b\x20\x77\x95\xbe\xc9\xf7\x03\xa4\xec\xbc\xcd\x57\x63\x98\x28\x5b\xed\x12\xe1\x1c\xd8\x0b\x23\x98\xa4\x81\x53\xdf\xf7\x04\xbc\x4f\x3d\xea\xfa\xe7\x2a\x5d\x81\x5b\xa1\x8c\x99\x6b\x85\x45\xba\x26\x89\xa7\x03\x59\x29\x73\x38\x2d\x6e\x22\xc6\x8c\xf0\x34\x8d\x6c\xc4\xf4\x65\xaa\x58\xb7\xeb\x24\x51\xf0\xbf\x01\x00\x00\xff\xff\x7f\x49\xb7\xb2\xcc\x67\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 26572, mode: os.FileMode(384), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

