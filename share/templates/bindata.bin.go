// Code generated by go-bindata.
// sources:
// index.html
// DO NOT EDIT!

// +build bin

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5d\x79\x73\xdb\xb8\x15\xff\x7f\x3f\x05\x96\xd3\xed\x6c\xb6\x21\x69\x3b\x4e\x9b\xc9\x4a\xea\x24\xb6\x9a\x72\x6a\x3b\x9a\xd8\x4e\xbb\xb3\xb3\xd3\x81\x44\x48\x42\x42\x91\x5c\x02\xf4\x51\x8d\xbe\x7b\x1f\x48\x82\xb7\x0e\x9e\x1b\x4f\x92\x19\x3b\x12\x88\x77\x02\x0f\x78\xef\x07\x48\x5e\xaf\x4d\x32\xa7\x36\x41\x4a\xf8\xff\x7f\x7d\x97\xd3\x15\x51\x36\x9b\x01\x73\xb1\x3d\x5a\xaf\xb5\x73\xcc\xb1\x16\x36\x43\xab\x1e\x35\x13\xdb\xdc\x6c\x0a\xd4\x4b\x87\x71\x1b\x87\xf4\x18\x2d\x3d\x32\x1f\x2a\xba\x82\x38\xe5\x16\x19\x2a\xf2\x29\x92\x5c\x65\xc3\x66\xa3\x8c\x8a\x6d\x03\x1d\x6f\x15\x64\x61\x10\xf1\xdd\xc0\xa4\x77\x68\x66\x61\xc6\x86\x8a\xe7\xdc\x23\xf2\x00\xca\x99\xc4\x04\xc9\xea\xd4\xe1\xdc\x59\x29\xa3\xef\x10\x4a\x77\x9b\x39\x96\xbf\xb2\x11\x5b\x61\xcb\x52\x8f\x11\x27\x0f\x5c\xf5\xe8\x62\xc9\x95\x51\xba\xdb\x7a\x4d\xe7\x28\x54\xc8\xc5\x1e\x5e\x31\xed\x02\xdb\xda\x15\x59\x60\x4e\xef\x40\x37\xb6\x74\xee\x55\xf1\x6b\x49\x4d\x02\x4a\x5a\x0c\x1a\xc5\xeb\x74\xa3\xd0\x3c\x50\x00\x54\x58\x1e\x4b\xd6\xcb\xd3\x50\xaa\x73\x47\xbc\xb9\xe5\xdc\x83\x60\x2c\x3d\x74\xe1\x60\x13\xe1\xbb\x05\x32\x29\x73\x2d\xfc\x88\x1c\xf0\xbb\x63\x33\x25\xf4\xa5\xf4\x51\xa4\xd2\x8d\x45\xed\xcf\x81\x66\x9b\xcd\x28\x18\x2f\x29\x43\x2a\xa1\x8a\x5f\x08\x5e\x72\x02\x8f\x67\x44\x75\x3d\x82\x40\x28\xe6\xaa\x45\xe6\x60\xb3\xa6\x69\x28\x1a\x53\x29\x5b\xb8\x3d\xd4\x59\x5f\x1e\x8f\x06\x3a\x78\x25\x70\x62\xfc\xa2\xe8\x4d\x0b\x7b\x0b\xa2\x1e\x1f\x77\xec\x43\xdf\x4a\x0f\xf6\x8a\xd8\x3e\x8a\x0d\x15\x2f\xa2\x7e\xd0\xd3\xa2\xf2\x65\x56\x5f\x6a\xbb\x3e\x57\x17\x9e\xe3\xbb\x4a\xd2\x63\x6b\x1f\xd5\xc2\x53\x62\x85\x93\x25\x1c\x34\xdb\xb9\xf7\x30\xd0\x9a\x04\x46\x27\x76\xc9\x3e\x36\x53\x1f\xe6\xa2\x1d\x0c\x74\xf4\x34\x6c\x89\x38\x33\x32\x73\x6c\x13\x7b\x8f\x62\xd8\xf1\xd4\x22\x66\x12\x0e\xb1\xe7\xcc\x30\x20\x2a\xcb\x4c\x75\x85\xce\xb8\x74\x22\x9d\xcb\x89\x64\x6a\x17\x84\x31\xed\x9f\xd0\x07\xc2\x0b\x65\xff\x45\x42\x52\x7e\x40\x19\x33\xf6\x30\x1d\x3f\x70\x0f\x9f\x09\x1e\x30\xa2\x39\xde\x23\x75\x1f\xf5\x0d\x48\x0d\x3d\x90\xb6\xbd\x63\x67\x5c\x3a\x1e\x69\xdd\x19\x01\xd3\x9d\xce\xd8\x43\x1b\xba\x02\xfd\x65\xb7\x33\x32\x6f\x07\x7a\x12\x11\xdd\x07\x07\x44\x27\xeb\x35\x36\x6c\xed\xcd\x94\xc1\x52\xc4\x49\x87\x41\x72\x15\xaf\xb6\x4d\x82\x84\xf9\xb3\x19\x50\xe7\xe7\x47\x9e\x79\xb5\x60\xc9\x53\xf7\x17\x2c\x29\xc9\x0d\x82\x65\xbf\x53\x2a\x07\x4d\x9e\xb6\x51\xd0\x0c\x74\xdf\x2a\x6e\x6d\xe4\xf7\xe2\xee\x26\xe7\x21\x3a\x0a\xb7\xb2\xdc\x0e\x96\x62\xc1\xb8\x47\x5d\x92\x6c\x59\xb9\x54\x86\x2f\x09\x86\xa9\x9e\xd9\xd5\xc3\xf4\x06\xc1\xa6\x2b\xf3\x17\x65\x34\x21\x1e\x75\xcc\x68\x0b\xdf\xd3\x3b\x93\xed\xa0\x8f\xd8\xf2\xc9\x6e\x42\x90\x1f\x3d\x4f\xfb\x25\xb5\xaf\x5b\x38\x1e\xec\xf5\xda\xc3\xf6\x82\xa0\x3f\x59\x18\xbd\x1e\xc6\xcf\xb5\x0b\xca\xc4\x5c\xcc\x9a\x77\x80\x61\xa5\x4b\x54\x62\x00\xba\xa7\x26\x5f\xaa\x2f\x3c\xb2\x12\x0b\x02\x48\xd5\x42\x57\x6c\x36\xab\x50\xdb\x3a\x3e\x09\x19\x05\x9e\x89\x73\xdd\x2d\x0c\x54\xcb\xcb\xb9\x27\x1a\xeb\xd8\x1f\xc9\x3b\xa9\x50\xf2\x3b\x49\xa8\x32\xb4\x85\x3c\x77\x05\xe6\xf5\x9c\xe8\x5e\x92\x55\x0f\x99\x2e\x48\x71\xc2\x45\xfd\xe0\x3c\x57\x28\xd6\x46\xa2\x1b\x8a\xee\x30\xcd\x6d\xea\xc1\xaf\x38\xcf\x05\xd7\xf5\x90\xe8\x0a\x29\xed\x67\xba\x09\xd7\x5a\xa9\x6e\x42\xde\x7b\xae\x1b\x88\x6e\x3d\xd9\x4d\xb8\xd6\xc8\x76\x13\xe2\x6f\xe9\x6e\x21\x44\xfa\xcc\x77\x03\x71\x9d\x25\xbc\x09\xf7\x5a\x19\x6f\x42\xde\x7b\xca\x1b\x88\xee\x2c\xe7\x4d\xb8\xd7\x48\x7a\x13\xe2\x1e\xb2\xde\xcc\x74\xec\x2d\xed\x95\x7b\x78\xf5\x14\xef\xc6\xe1\xd8\xaa\x43\x78\xcb\x48\xad\x3c\xfb\x1f\x1e\xd9\x93\x66\x6f\x95\xf7\x43\xc3\xf4\x1c\xb2\xc7\x62\x7e\x0e\x8d\x49\x82\x0e\x6f\x6a\x67\xe8\x90\x2c\x0b\xf2\x7f\x51\xdb\xdc\x97\x2c\x6f\xcd\xb6\x05\x83\x60\x44\x1a\x71\x10\x43\xd3\x88\x81\x18\xa3\x1a\x0c\xd0\x74\xa1\xfa\x8c\xb8\x33\xae\x20\x13\xdc\x19\xbd\x19\x26\x6a\x4d\x66\xe0\xda\xb4\x9e\x41\xc3\x9e\x71\xed\xa7\xb4\x30\xe7\x7d\x57\x16\xe7\xf3\x1e\x0a\x8b\x73\xca\x3e\x23\x9f\x61\x98\xea\x55\x8a\x0b\xd0\xad\x8d\xda\x22\x91\xde\x61\x7d\xd1\xd0\x8f\x5f\x71\x79\x71\x3e\xef\xa1\xba\x00\x21\xed\x17\x17\x31\xd3\x5a\xb5\x45\x4c\xdd\x7b\x69\x21\x24\xb7\x5e\x59\xc4\x4c\x6b\x14\x16\x31\xed\xb7\xba\x22\x1f\x1b\x7d\x96\x15\x42\x5a\x67\x55\x45\xcc\xbc\x56\x51\x11\x53\xf7\x5e\x53\x08\xc9\x9d\x95\x14\x31\xf3\x1a\x15\x45\x4c\xdb\x43\x41\x91\x9e\x87\x6d\xd5\x13\xeb\xb5\xfe\x13\x72\x9d\xcf\x04\xb9\xbe\x47\xe7\x8f\x33\xc6\x5e\x67\xfa\x9a\x9e\xe3\x8a\x78\xcd\xec\xca\xd8\x23\x90\xd8\xe9\x51\x1c\xa0\x9f\xf4\xe8\x56\xc4\xbe\xdc\x50\x06\x70\xca\x41\xeb\xf5\x3d\xe5\x4b\x04\xa9\x32\x79\xc8\x9a\xfb\x51\x7a\xf8\xb3\x30\xf6\xbb\xd2\xa9\x72\x01\x5d\xc2\x29\x11\x89\x8e\xda\xa2\x41\xcc\x8c\xe1\xe8\x9c\xdc\xd1\x19\x49\x2b\x0a\xbd\xcf\x84\x2d\x51\xf7\x24\xb5\xc4\x59\x15\x49\xd5\x44\xbe\xae\xa1\xc7\xad\x18\x7a\xe9\xf8\x36\x87\x9a\xac\x3f\x4b\x33\xb9\x6e\x55\xa3\x5f\xb6\x62\x74\x58\xbe\x3e\x11\x93\x4f\x5b\x31\x39\x28\xbc\x9f\x88\xc5\x27\xad\x58\xfc\xe6\x0e\xd3\x27\x33\xc8\x2f\xda\x1a\xe4\x1f\x3a\xb2\x78\x2f\x4c\x62\xce\x8b\x28\x89\x39\x4f\x40\x12\x73\x5e\x13\x23\xc9\x57\xa9\xeb\x35\xf0\xd5\x60\x81\xbe\xc2\xab\x8a\x78\x43\xc2\x04\x45\x5c\xa8\x57\x9f\x4b\x1a\xc3\x58\x78\xf8\x31\x67\x49\x58\xdc\xa6\x30\x12\x90\x57\x86\xd2\x44\x25\xb7\x61\x3b\x26\x61\x88\x8b\x1e\x71\xff\xb0\x31\x21\xe8\x47\xcb\x12\x24\x28\xab\xa4\xcf\x44\xea\x2b\x75\xf4\x33\xdd\xfb\x51\x31\x08\xee\x9d\x3a\xce\x3d\x42\x12\x1d\xe7\x19\x6c\xaa\x05\x1d\x77\xa0\x56\xa1\x07\x43\xd0\xea\x10\x5f\x97\xa0\x59\x05\x77\xff\x90\x71\x77\x96\xe2\x0b\x80\xc1\x66\xae\xdf\x37\x0e\x76\x36\xb9\xed\x01\x08\x03\x29\x95\x10\x30\xa1\x55\x1b\x10\x18\xf0\xe9\x10\xfb\x6a\xea\xbb\xaf\x18\xfc\x02\xd7\xf5\x80\x7e\x09\x29\xed\xc3\x5f\x09\xd7\x5a\xf8\x57\x42\xde\x3b\x00\x16\x88\x6e\x1d\x01\x4b\xb8\xd6\x80\xc0\x12\xe2\x6f\x18\x58\x21\x44\xfa\x04\xc1\x02\x71\x9d\xa1\x60\x09\xf7\x5a\x30\x58\x42\xde\x3b\x0e\x16\x88\xee\x0c\x08\x4b\xb8\xd7\x40\xc2\x12\xe2\x1e\xa0\xb0\xcc\x74\xec\xed\x6c\xfd\x0c\xac\xab\x79\x60\xed\xed\x39\xd9\x2c\x27\xbc\x7e\x64\xb5\xe8\xfe\x8d\x29\xaf\x45\x68\x98\x56\xe3\xb3\x75\xc8\x1b\x8b\x55\x23\x34\x26\x65\x23\xbc\x69\x54\x37\xca\x35\x10\x92\x67\xc1\xea\xaa\xd9\x01\xb5\x9c\x91\xb9\x8c\x5f\x70\x16\x03\x97\x1c\x54\x67\x5a\xa4\x97\xe4\x94\x6a\x59\x32\x8c\x7c\x56\xb0\x6c\xe8\x58\xae\x98\x39\x59\xc1\x71\x4b\x0b\x92\x55\x6a\x43\x3e\xce\xc8\x2e\x0d\xc4\x14\xcc\x6a\x10\xb7\x7c\x11\xb7\x03\x68\xef\xb7\x03\x8c\x3e\x6e\x07\x18\x36\x87\x46\xa8\x60\x58\xa5\xda\xc8\x68\xe7\x76\x40\x22\xbd\xc3\x0a\xa9\xa1\x1f\xbf\xe2\x02\xc9\xe8\xe3\x76\x80\xd1\xc5\xed\x00\xa3\xd1\xed\x00\xe3\x0f\xbb\x1d\x60\x74\x71\x3b\xc0\x68\x70\x3b\xc0\xf8\x76\x3b\x60\x5b\x6c\xf4\x59\x18\x19\x5d\xde\x0e\x30\x1a\xdd\x0e\x30\xfe\xb0\xdb\x01\x46\x97\xb7\x03\x8c\x06\xb7\x03\x8c\x1e\x6f\x07\x18\x1d\xdc\x0e\xd8\x5b\x11\xc5\xfb\x76\xad\x62\x63\x52\x86\x8f\x9f\x7b\x8e\xcb\x9e\x8f\x3d\xcf\xf1\x18\x32\x6c\xfd\xbd\xcf\x91\x4b\xbc\x28\x14\x95\xad\xcc\x4f\xd2\x19\x67\x66\x41\x40\x17\x0e\x8c\xae\xf1\x1e\xb9\xac\x4c\xe0\x04\xcf\x3e\x13\xde\x96\xac\x98\xdb\x36\x71\x6f\x69\x6b\xb2\x40\xc6\x80\x8e\xa6\x03\x9d\x8e\x72\xb2\xaa\x57\x6d\x36\x81\x64\xaf\x58\xb7\xd1\xd4\x69\x5f\xd0\xa5\xbd\x03\x3f\x3a\xd7\x5a\x39\xa7\x93\xcc\x8c\xc9\x81\xac\xb6\x7b\xf4\xcf\xf6\x94\xb9\x3f\x67\x86\x2b\x38\xdd\x43\x66\x30\x29\x49\x38\x29\x57\x8e\xe9\x5b\x0e\x3a\x7d\x17\x0f\x5a\xfa\x80\xab\x48\x07\xa3\x9d\xa2\x89\xb4\x0d\xa6\xb9\x61\x97\xab\x2c\x03\x3c\xee\x28\x26\x8b\x02\x01\x97\x0b\x6b\xbd\x01\x71\x99\xa2\xa2\x67\xb9\xa6\xf0\x24\x56\xf5\x79\x89\xa1\x44\xc6\x6b\x91\x3e\x0c\xe5\x94\xa9\xfa\x76\xfa\x52\x05\x42\x06\x69\x0d\xa2\xff\xd2\xc3\x95\x36\x5e\x0c\xf7\x8f\xd2\x03\xc4\xe2\x38\x72\x36\x52\x8e\x94\x67\xe8\x47\xc7\x2b\x79\x2a\x9d\xf4\x6c\xdb\x33\x20\xcd\x3d\x93\x86\x45\x6c\x8b\x8f\x24\xdd\x66\x23\x26\x48\x3c\x6a\xc5\xe5\x4e\xf8\x2d\xb5\x16\x48\xc7\xa7\x54\x3f\x60\x9e\x14\x4c\xa9\x3c\x59\xf6\x70\xc8\xaa\x9c\x5b\xbf\x0a\x3a\x6f\x9f\x31\xf1\xda\xbe\x8d\x7e\xcf\x8c\x19\x27\x73\x65\x27\x83\x92\x19\xd3\xe2\xfa\xb0\x2f\xf4\xdd\x78\x5b\x29\xce\xe8\x68\x93\xd8\x13\x13\x92\x43\x69\x50\x44\x2c\xf6\x44\x45\x61\x8b\xdb\xe6\xb1\x7d\x1a\x4d\x52\xba\xec\x66\x51\xe6\xf5\x1e\xdc\xfd\xf6\x97\x9b\xf1\x75\xa9\xb3\xdf\x3e\x72\xb2\xcf\xd5\x21\x75\xa9\xa3\x03\xf2\xc3\xdc\xfc\xd6\xb8\xb9\xde\xe1\x63\xb1\xf3\x6f\xd5\x23\xa0\xdd\xe1\x5d\x41\x7c\xb8\x6b\xfb\x81\xc2\x5c\xd6\x37\x14\x36\x61\x3d\x40\x61\x13\xcf\x11\xf5\x40\x45\x24\x0c\x54\x6b\x03\x09\x8b\x85\x77\x08\x84\x35\xf4\xe2\x57\x0c\x84\x4d\x58\x0f\x40\x18\x08\x69\x1f\x08\x8b\x99\xd6\x02\xc2\x62\xea\xde\x81\x30\x21\xb9\x75\x20\x2c\x66\x5a\x03\x08\x8b\x69\xbf\x01\x61\xf9\xd8\xe8\x13\x08\x13\xd2\x3a\x03\xc2\x62\xe6\xb5\x80\xb0\x98\xba\x77\x20\x4c\x48\xee\x0c\x08\x8b\x99\xd7\x00\xc2\x62\xda\x1e\x80\xb0\xf4\x3c\x7c\xca\x1f\x93\xa9\x7d\xf7\x7c\xc2\xda\xfa\xc4\xcc\xc4\x38\x7f\x0a\x97\xed\x85\xc1\xed\x7c\x72\xe6\xb6\x57\x83\xab\x5b\xd9\xce\xa7\x28\x6e\xaf\xc7\x1f\x9e\xca\xb8\xb6\xf3\x21\x8a\xc9\x93\xb1\xb7\x9d\x4f\x06\x5d\x19\x4f\xc5\xde\x76\x3e\xfc\xf5\xd1\xf8\x70\xf3\x54\x2c\xfe\x6b\x2b\x16\x7f\x18\x5f\xf7\x6e\xf0\x8c\x88\xe3\x9e\xea\x16\xff\xad\x9d\x0f\xf8\x19\x97\xe3\x2f\x7a\x71\x7e\xd5\x8a\x99\x67\xef\x2f\x2f\xdf\x5c\x35\xdf\x86\xb6\x9c\xf3\xb8\x9e\x33\x63\xc5\x73\x1e\x97\x25\xe7\x3c\x41\x97\x46\xe7\x3c\xc9\xb9\x8c\x0b\xae\x31\xce\x6b\x7f\x05\x0d\x90\xdf\x1e\x4e\x9e\xd0\x30\xe2\x35\x91\x39\xf1\xa8\xe3\x51\xfe\xd8\x84\xc7\x15\x9d\xd5\xf9\xe6\x9c\x98\xfe\x9a\xfe\xaf\x11\xfd\x07\xc2\x20\xf1\xb5\x79\x35\x1e\x32\xc4\x23\x26\x37\x74\xff\x01\x5d\x62\x71\xe6\x34\xaf\x2d\xd4\x71\xf0\xfd\xf9\xfb\xb3\x9b\x5f\x26\x63\xb4\xe4\x2b\x0b\x1e\x86\xff\x09\x34\x0f\x52\xf3\x28\xa1\x5f\x11\x0e\x75\xeb\x12\x7b\x8c\xf0\xa1\xe2\xf3\xb9\xfa\x4a\xe6\xfa\x01\xa8\x57\xf2\x25\xfa\x08\x5e\x81\xb1\x03\x3d\xec\x90\xe2\xb3\xe4\xdc\x55\xc9\xef\x3e\xbd\x1b\x2a\xff\x51\x6f\xdf\xa8\x67\xce\xca\xc5\x9c\x42\xd5\xab\x80\xc1\xb6\x20\x1b\x2a\xc6\x78\x48\xcc\x85\xac\x1c\x42\x4a\xc1\x79\xa8\xdc\x51\x72\xef\x3a\x1e\x4f\x75\x0e\xbe\x93\x75\x68\x06\x1f\x40\x57\x83\x37\xcf\x61\x31\xa1\x9c\x62\x4b\x65\x33\x6c\x91\xe1\xb1\x76\x04\xc1\xf5\xbd\xaa\xfe\x0a\xa1\x6a\x8c\x7f\x8b\xd8\x8a\xd5\x05\x79\xc4\x0a\xc0\x44\x8f\xcf\x7c\x8e\x28\x70\x55\xe4\x9f\x10\x98\xe3\x3b\xf1\x5e\x83\x5f\x82\xfc\x57\x70\x19\x9d\xff\xa6\xaa\x05\xf2\x90\x8a\xc1\xa4\x82\xc1\x7b\x71\xf2\xf0\xe2\x24\xe6\x01\xbe\x79\x1f\xf8\xe2\x23\xf1\x18\x75\xec\xcd\x46\xb2\x65\xf2\x85\xfa\xe2\x44\x73\xed\x85\x82\xf8\xa3\x0b\x16\x5e\xe1\x2b\xa5\x20\x01\xbb\xae\x45\x54\xee\xf8\xb3\xa5\x9a\x91\x76\x7c\x72\xf4\x00\x3f\x95\xe4\x41\xff\x40\x60\x05\x29\xa7\xa7\x0f\xf0\x53\x4d\xca\xe9\x69\x55\x29\x2f\x4f\x1e\xe0\xa7\x9a\x94\x97\x27\x55\xa5\xbc\x02\x8f\xbd\xaa\xe8\xb1\x57\x5b\x3c\xc6\xf8\xa3\x45\xd8\x92\x88\x5a\x34\x1c\x3e\x11\xe9\x3a\x94\xb0\xbb\xf8\xc3\x63\x3d\xd8\xee\x34\xd1\x31\x0c\x4e\x19\x70\x83\xa9\x63\x3e\x16\x4b\x69\xee\xb8\xea\x14\x7b\xa5\xb5\x74\xf4\x2c\xc2\xbb\x93\x42\x3f\xc1\x92\x05\x8e\x9c\xc5\xbb\xd2\x00\x59\xd0\xb0\x3c\x49\xc1\xf7\x2b\xec\x2d\xa8\x1d\x9d\x30\xa8\x47\x72\x67\x0a\x6e\x14\x87\xe7\x13\xc3\xc2\x1f\xdf\x90\xe4\xbe\x0b\xdd\x08\x13\x3b\x14\x27\x2b\xd7\x82\x37\xc5\xbf\xd4\x81\xb4\x78\x31\x43\x83\x60\x91\x0c\x56\x11\x2a\x10\x83\x69\xf0\x28\x68\x03\xb7\x9c\x64\xa1\x8c\xac\xde\xc2\x8c\xcc\xca\x19\x2c\x99\xbe\x9b\x59\x54\xcb\xb4\x8e\xfe\xe0\x48\x8a\x0c\x45\x7a\xe7\x8e\x12\x4a\xcd\x90\xd4\x5a\x6a\x45\xce\x20\x8e\x02\x4b\x89\x11\x96\x34\xdc\x52\x32\x6a\xf9\x4c\x77\xdf\xb0\xc5\x7f\xe2\x44\x2c\xa5\xec\xb5\xae\xdf\xdf\xdf\x6b\xe0\x57\x0f\x7e\xb4\x99\xb3\xd2\xc3\xb5\x57\x87\xf9\x49\x30\x23\x4c\x17\xaa\x33\xfe\xf7\xd9\xca\x1d\x16\xe7\xa2\x92\x47\x24\x63\x2c\x72\xe9\x58\xe2\x2e\x48\x34\x15\x60\x0e\xc8\x35\x1d\x1f\x66\xad\xdc\x68\x60\xc9\xb5\x09\xfa\xd1\x22\x36\xd2\xc6\x0f\x62\xed\xa6\xf6\xe2\x59\x0c\xa2\x1c\x78\xc2\x95\xef\x9a\x3b\x95\x89\x36\x5a\x67\x3e\x87\x4d\x6a\xeb\x17\x79\xe7\xf0\xa8\x32\xf1\x07\x5d\xce\x3a\x51\x46\xb1\x25\x88\x3b\x25\x47\xa9\x53\x0c\xdb\x57\xe2\x4c\x31\x8b\xb2\x0e\xa8\xf8\xd9\x6a\x70\xff\xd8\x36\x5d\x87\x8a\x01\xc8\xe4\x00\x51\x8e\x09\x24\x4e\x90\x65\xa6\x24\x6c\x37\xf3\x00\x03\x21\xed\x10\x3c\x2b\x5d\x23\x3a\x4a\xc8\xa4\xb6\x3b\x73\x96\x02\x18\x59\x98\x3c\xa9\x9c\x46\x58\x50\x16\xca\x16\x2e\x2e\x3d\xa8\x24\x68\x45\xbf\x30\x62\x13\x29\xdb\x78\x8a\x2f\x40\x3f\x64\x3d\x0b\xfa\x1d\xc8\xd3\x9c\x1f\xa6\xa7\xe8\x77\x28\x4f\xf1\x31\xf2\x43\xf4\x0c\xfa\x1d\xc8\x93\x1e\xa8\x27\xad\xa0\xa7\xcb\x0e\xe3\x29\xfa\xe5\x79\xb2\x19\x04\x2d\x4f\xef\xae\x9f\xf0\x1d\x0e\x5b\x95\xd1\x1d\xf6\x90\x48\x3e\xd1\x50\x22\xeb\x9b\xcd\xcf\x30\xe5\x82\xc7\x87\x70\xc8\x67\xb6\x88\x79\xb3\xf2\x5d\xfb\x13\xd3\xc3\x5a\xef\xe6\xcd\xbb\x77\xe3\xf3\x29\x85\xc6\x15\xb5\xf5\xa9\x6f\x9b\x16\xd1\xe0\xa5\xf6\x89\xc9\x33\x5e\xe0\x22\x1f\x04\x8d\xd1\xed\xa4\x94\x62\x03\x3d\xdc\xe9\x61\x8f\x13\x49\xf7\xff\x03\x00\x00\xff\xff\x3c\x87\xfa\x86\x14\x6b\x00\x00"

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 27412, mode: os.FileMode(420), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

