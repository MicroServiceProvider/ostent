// Code generated by go-bindata.
// sources:
// index.html
// DO NOT EDIT!

// +build bin

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5d\x6d\x73\xdb\x36\xf2\x7f\xef\x4f\x81\x72\xda\x69\xd2\x31\xc9\xd8\x71\xfa\xcf\xdf\x67\xf9\xc6\xb1\xdd\x54\x53\xdb\xd1\xc4\x72\xee\x7a\x9d\x4e\x03\x91\x90\x85\x98\x22\x79\x04\x28\xdb\xd5\xe8\xbb\xdf\x02\x24\x45\x8a\x0f\x12\xa8\x47\xbe\xf0\x0b\xc7\x7c\x00\x76\x17\x8b\xc5\xe2\xb7\x3f\x93\xcc\xc9\x77\x17\x9f\xce\xbb\xbf\x77\x2e\xd1\x80\x0f\x9d\xbd\xd3\xf1\xf8\xfb\x11\x3a\x6e\x21\xe3\x13\xe3\xc4\xe5\x5f\x48\xc0\xa8\xe7\x4e\x26\x27\xf2\x36\x42\xa7\x27\x03\x82\x6d\x38\x10\x87\x43\xc2\x31\xb2\x06\x38\x60\x84\xb7\xb4\x90\xf7\xf5\xf7\x5a\x7c\x8b\x53\xee\x10\x79\x0c\x67\xe3\xb1\x71\x81\x39\x36\x06\x1e\xe3\x2e\x1e\x92\xc9\x04\x79\x52\xfc\x89\x99\xb6\x8b\xc5\x0d\x38\xf7\x75\xf2\xdf\x90\x8e\x5a\xda\xbf\xf5\xbb\x33\xfd\xdc\x1b\xfa\x98\xd3\x9e\x43\x34\x64\x79\xae\xe8\xd6\xd2\xda\x97\x2d\x62\xdf\x13\x2d\xdb\x53\x48\x6e\x69\x23\x4a\x1e\x7d\x2f\xe0\x99\xc6\x8f\xd4\xe6\x83\x96\x4d\x46\xd4\x22\xba\x3c\xd9\x47\xd4\xa5\x9c\x62\x47\x67\x16\x76\x48\xeb\xc0\x78\x13\x8b\x1a\x8f\x7f\xed\x5e\x5f\x21\xed\xe4\x3b\x6d\x32\xd1\xf5\x3f\x68\x1f\xb5\x2f\xff\x3c\x3d\x71\xa8\xfb\x80\x02\xe2\xb4\x34\x36\x00\xe9\x56\xc8\x11\x05\x05\x1a\x1a\x04\xa4\xdf\xd2\xcc\x3e\x1e\x89\x73\x03\xfe\x29\x93\xf4\x07\x71\x6d\xda\xff\x53\xd7\xb3\x92\x22\x01\x8c\xfe\x4d\x58\x4b\x7b\x7b\xf8\xf4\xf6\x70\x2a\x4e\x4c\xc3\x64\x92\x48\x65\xc9\x81\xfe\xf6\xd0\xf0\xdd\x7b\x0d\xf1\x67\x1f\xc6\x4a\x87\xf8\x9e\x98\xe2\x42\xec\x87\x54\x36\xf6\x7d\x87\xe8\xdc\x0b\xad\x81\x3e\xa3\xe7\xe0\xf0\xcd\x13\xfc\x2c\xd4\x04\x6d\x8c\x9a\x92\x8f\x8e\x9e\xe0\x67\xb1\xe4\xa3\xa3\xba\x92\xdf\x1d\x3e\xc1\xcf\x62\xc9\xef\x0e\xeb\x4a\x7e\x0f\xde\x78\xaf\xe0\x8d\xf7\x15\xde\x60\xfc\xd9\x21\x6c\x40\x08\x4f\x26\x85\x93\x27\x6e\x5a\x8c\xe5\x65\xc2\x25\x93\xba\x36\x79\x32\xc4\xcd\x58\x90\x19\xaf\xa6\xd3\x93\x9e\x67\x3f\xc7\x17\x6d\x3a\x42\x96\x83\x19\xd8\xc7\x3d\x5f\xef\xe1\x40\x4b\x56\x52\xc9\x3d\xdd\x21\x7d\x9e\x34\x10\x4d\x42\x27\x69\x31\x24\x6e\x98\xde\x89\x0c\xcf\x9c\xca\xd5\x7c\x98\x34\x1e\xc0\xcc\xc9\xd1\x40\x3f\x1c\xdc\x53\x57\xef\x79\x9c\x7b\xc3\x63\xf4\x46\x9b\xe9\x24\xba\x31\x1f\xbb\x49\xc7\xd0\xb7\x31\x27\x30\x5e\xf8\x85\x75\x9b\xf4\xa9\x0b\x32\xa2\xdf\x7f\x25\x4b\x3e\x2f\x42\x2e\x10\x4e\x86\xbe\x03\x7d\x51\xdc\x9a\x1d\x1f\xe7\xbb\x21\x03\x72\x8f\x29\xd4\xe5\x6d\x40\x27\x6c\x88\x1d\xa7\x4c\xae\x71\x41\x19\x0f\x68\x4f\x76\x2d\x69\x24\xfc\x7e\x98\x73\x84\x39\xe3\x9a\x12\x4f\x65\x87\x6c\x79\x4e\xc1\x27\xa1\x5f\x62\x67\xa1\x1b\x8a\xbd\x85\x1e\x07\x14\x7e\xf9\x18\x52\x92\x1f\x90\x72\xe7\x85\x3e\xa7\x45\xd7\xcd\x75\x5c\xdc\xa5\xc2\x6d\xc5\x61\x9a\xa1\x93\x09\x1d\x13\xc2\x6b\x5e\xa8\x05\xf4\x7e\xb0\x7c\xac\xe1\xa4\x6d\x2f\x84\xc0\x72\x11\x23\xb0\xb4\x6c\x1c\x3c\xa3\x81\xe7\x38\xde\x63\x2e\xfe\x44\xe0\xc5\x6b\x48\x6c\x0a\xec\xd8\x34\x1f\x1f\x1f\x0d\x88\x8c\x00\x7e\x0c\xcb\x1b\x9a\xd1\x2e\x62\xc2\x4a\x24\x98\x11\x66\x0a\x9f\x30\xfe\x4f\x6b\xe8\xb7\xa2\x55\x57\xf0\x5d\xb2\xef\xe0\xe5\xfd\x32\x3d\x99\x71\xd1\xdc\x55\x00\xf3\x40\x1c\x07\x6b\x7b\x0a\x33\x98\xb4\x8d\xa6\x70\x49\x5d\x43\x32\x54\x57\x26\x1a\xaf\xa4\xcd\xee\xab\x2b\x83\xb6\x2b\xe9\xb2\xfc\x50\x5d\x99\x68\xbc\x92\x36\x5a\x63\x64\x74\xc5\x91\xf9\x4c\x5d\x17\xb4\xcd\xeb\x62\x56\x40\x7d\x9e\xdd\x84\xbe\xe1\x11\x8e\xae\x4e\x05\x8f\x70\x80\x04\x14\x43\x2d\x14\x83\xb2\xc9\xe4\x1f\x90\x28\x64\x2b\x15\x41\x79\xb8\x87\x58\x60\xa5\x7b\xdc\x37\x06\x47\x00\x99\x8c\xee\xd9\xc7\x8f\x97\x17\x3d\x0a\xc8\x71\x48\x5d\xb3\x17\xba\xb6\x43\x0c\x38\x34\xbe\xb1\xf1\x98\x38\x0c\x30\x20\xf4\x4c\x6e\xc8\x8b\xae\x9d\xae\xd7\xd3\x9c\x4d\x66\xbc\x3d\x8a\xcc\x1d\xe3\x54\xf3\xa7\xbd\x9f\xcc\xc9\x64\x3c\x8e\xfc\x92\x71\x14\x16\xdb\xf3\x5f\x3d\x0c\x00\x51\xee\x8d\xe0\x27\x1c\x25\x12\x18\xf3\xaf\xf0\x1b\xf0\xe7\x78\x2c\xe7\x65\x32\x11\xd7\xce\xa3\x43\xe4\xb9\xe7\x0e\xb5\x1e\x5a\x63\x3e\xa0\xcc\x18\x60\x61\x9b\xbc\x32\x41\x68\x2f\xda\x59\x3e\x08\xa9\xb2\xbf\xd1\x05\xd7\x88\x29\xc0\xc2\x1a\x69\xbd\xa2\x51\x51\x16\x5d\xa7\x55\x91\x29\x28\xb5\x4f\xd9\xaa\x91\x30\x6b\xd6\x96\x2b\xb8\x52\x66\x8f\xb8\x5e\xc3\x26\xd1\x3c\x76\x91\xdc\x03\x67\xc7\x86\x03\xc2\x63\x61\xc9\x14\xc7\xbb\xd5\xa9\xaa\xed\x79\xa8\x90\x0e\x42\x33\x35\x50\xd7\x15\xa5\x45\x07\xce\xe9\x13\xb1\x91\x96\xb4\x43\xb0\x72\x72\xd5\xc8\x5e\x69\x8d\x52\xd3\x8e\x69\xc2\x11\x8d\xbe\xf7\x65\x11\x25\x25\xfa\x38\xc0\x43\x18\xa7\xcc\x06\xa9\x17\xb4\xfb\x80\xda\x7a\xcf\xf1\xac\x07\xb0\x1a\xc0\xa9\xaf\xed\xe5\x72\x06\xe0\x05\xdd\x09\x90\x03\xdb\x21\xd1\x0f\x90\x58\x8b\xd9\x2d\xf8\x34\x96\x28\xfd\xd8\xf1\x18\x54\x34\x23\x82\xbe\xf7\x8d\xf3\xce\x9d\x0b\x03\xa6\x36\xd1\xa1\x5a\x79\x14\x07\x1a\x12\x85\xcb\x63\x7a\x1e\xfb\x5d\x62\xc0\x83\x14\x03\x46\x4a\xbc\x11\x09\xfa\x62\x47\xde\xcb\xee\xde\x50\xd1\x80\x37\xbb\xa0\x21\x51\x02\x91\x20\x0b\xb8\x96\x06\x67\xc8\xa6\x0c\x72\xd6\x33\xf2\x00\x83\x00\x78\x9e\x45\x03\xb9\x18\xd0\x12\x43\x74\xf1\x4f\x0e\x0d\x21\xd0\x8d\x79\x0e\xd8\x4a\x31\x86\x61\xa0\x02\xae\x39\x05\xe5\xd9\x1d\x5d\x24\x89\x83\xb2\xed\x3a\x3e\x9c\xe3\xe3\x83\xf5\x7a\x36\xa3\x27\x9d\xed\x6a\xfc\x84\xa6\x4e\x11\x07\x0b\xd0\x54\x46\x36\x75\xfd\x90\xeb\xf7\x81\x17\xfa\x45\xa8\x5e\xde\x4e\x77\x70\x8f\x38\x48\xa2\xe3\x68\xce\x5d\xef\x31\xc0\x85\xfe\x20\xc1\x26\x30\xa9\x59\x08\xb4\x50\x76\x84\xef\x4a\x44\x15\x21\xa0\xd4\x9f\x02\x41\x08\x21\x0c\x95\xbe\x5d\xec\x2b\x97\x68\x34\x03\x76\xb4\x36\x8b\xd2\xd7\x62\x63\xe9\xde\x9b\xdf\x52\xd0\x15\x61\xec\x22\x5d\x09\x90\x5f\x66\x46\x94\xf5\x68\x76\x9b\xde\xa4\x61\x51\x66\x40\xd7\x5e\x40\x56\xb4\xac\x70\x51\xa1\x3c\xda\x5a\x38\x06\xde\x23\x6b\x52\x34\xba\xc6\x59\x8f\x79\x4e\xc8\x49\x43\xc2\xf2\x26\x93\xa0\x73\x93\xcf\x42\xcb\x82\x16\xbb\x0e\xcf\x35\x59\xa8\x10\xa6\xea\x65\x5c\x9c\xec\x6f\x3c\xf7\x3f\x24\xf0\x52\xeb\x04\x91\xe0\x8b\x24\xaf\x94\xdb\x11\x17\x84\x4e\x36\xc3\xe7\xeb\x7f\x39\x4c\xfd\x60\x26\xb9\x9f\x83\x4f\x72\xbb\x5a\x95\x7c\xe1\x10\xe4\x7a\x00\x8e\xa1\x64\x2e\xd9\x61\x8b\x9a\x0a\xb0\x61\xda\x03\xdd\x31\x12\x14\x77\xd3\x25\x04\xdd\x3e\xb3\xb5\xc8\xf9\x17\xa6\x7c\x2d\x82\xda\x80\x47\x17\x0b\xd2\xf2\xd1\x53\xe8\x30\x13\x62\xb3\x01\x14\x15\x3a\x12\xe1\x01\xea\x13\xa0\x2f\xc0\xee\x3d\xa0\x04\x38\x4b\xc1\x1f\x9c\x00\x12\x66\x5c\xdc\xff\xc6\x9e\xd0\xd7\x08\x31\x8b\x4b\xaf\x44\x83\xd7\xc6\x10\xfb\xaf\xfa\xa1\x6b\x09\xcc\xf4\x4a\x74\xde\x47\xf4\x35\x1a\x23\x00\xc8\x61\xe0\x7e\x8d\x71\xe3\x5c\x14\x31\xd7\x3f\xc5\x44\x2a\x52\x97\xb0\xeb\xa6\xc0\x11\x25\x4b\xe1\x37\xf2\x8c\x34\x68\xa2\x43\xb2\xed\x3d\xeb\x37\x1a\x4a\x3a\x54\x00\x58\xc5\xb0\x5c\x38\x71\x05\x98\x28\x86\x13\xe3\xca\x58\x55\xef\x5e\x0f\x19\xf1\x2d\xe8\x2a\x4b\xe9\xe8\xa4\x15\x8f\x49\x84\x74\xc7\xe2\xd3\x75\x9a\x86\x44\xbe\xc1\x0f\xe5\xfc\xd8\xdc\x98\xd9\xbc\xfd\xb0\x92\xe6\x9a\x9f\xdc\x6f\xa6\xf5\x62\xfd\xce\x35\x7f\xda\x60\xe7\xf6\xeb\xd4\x85\x22\x87\x91\xd2\x71\x88\xf4\x31\x77\x1c\xd3\x06\xcb\x8c\x23\x2e\x39\xc8\x13\x5c\xcb\x61\x8b\xd3\x24\x4b\x7c\x63\xf1\x1e\x6a\xdc\x42\xfd\xf8\x00\xdb\x28\x79\x35\x86\xea\xeb\x18\xd1\x7d\x04\x02\x8e\xd1\x8f\xb1\x0d\x3f\xee\x23\x68\x8a\x43\x87\xdf\xfa\x1e\x67\xc7\x88\x07\x21\x99\xbc\x9e\x7c\x2d\x61\x80\x17\x24\x34\xa9\x3a\xea\x3a\xad\x7b\xe5\xaf\xd2\x22\x4a\x1e\xd4\x2d\x90\xed\x7e\x03\xea\xe3\x8b\xfe\xe6\xcb\x63\xd0\x91\x56\xc7\x17\x94\x3d\xa0\x90\x61\xd8\x1e\x76\x56\x24\xa7\x36\x6c\xa9\x56\xae\xe7\xe5\x97\x52\x39\xd7\x61\xf5\xe2\xe4\xa2\xdf\xb4\x4a\x19\x2c\x6a\x66\xa1\xbc\x9c\x61\x2f\x75\xb2\x7a\x28\x36\xb6\x4c\x96\x69\xaa\xc9\x55\xf2\x6a\x06\x6e\xb8\x48\x96\xc6\x6d\xa3\x46\x2e\x77\x5c\xf4\xe7\x0b\xf4\x45\x3e\x90\x91\xb8\xeb\x01\x1d\x20\xed\x42\x3e\xee\xa3\x55\x94\x38\xeb\x28\xac\xf3\x35\x67\x2d\x0b\x0f\x91\x76\xed\x85\x2e\x87\x45\x53\x8a\xd3\xea\x97\xbc\xb5\xd4\xff\x8c\xb4\xae\xc7\xb1\xb3\x13\xe5\xef\x90\x06\x55\xd8\x6e\x06\xfe\x16\x69\x67\x23\x4c\x77\x33\xf0\x23\x39\xf0\x1f\x94\x74\xaf\x8b\x9b\x80\xdc\xfc\x70\x27\x50\x5f\x86\xa1\xb0\xfb\x29\xfa\x9e\xde\xaf\x45\x53\xd8\xfd\x35\xb3\x14\x45\x48\x1d\x6d\x1d\x76\xdf\x80\x95\x7c\x13\xff\x41\xae\x9a\xac\xb0\xfb\x31\x57\x61\xd3\x20\x7a\x70\x48\x76\xa5\x41\xd4\x75\x35\xda\x42\xc9\xda\xb8\x3a\xcc\x6a\xad\x1b\x61\x51\x2a\x5f\x54\xdf\x26\x28\x38\x14\xed\xb4\xa4\xc4\x68\xbb\x9e\x4d\x60\x4b\x90\xab\xba\xac\x6c\x05\xc3\xa2\x36\xe5\x4f\x06\xc5\x4d\x64\x56\xd8\x89\xe5\x21\x2b\x02\x88\xa9\xe1\xe2\xe6\x5c\xbb\xef\xca\x1b\x6c\xde\xec\x7e\x40\x8a\x4f\x68\x25\x66\x8b\x9b\x73\xcd\x96\xb9\x68\xa1\xdd\xc5\x34\x54\x8d\xfd\xea\x91\x38\x28\x47\x7e\x44\x9e\x2c\xa5\x3e\xd4\xa6\xf0\x87\x12\xcc\x93\x99\xc4\x4a\xce\x64\x66\x26\x77\xcd\xac\x44\x26\xfc\xd8\x58\x12\x85\x36\x81\x44\x69\x6f\x81\x44\x69\x67\x49\x94\x36\xa0\xa5\xa0\x8f\x01\xf9\xee\x8e\x44\x49\x6d\xd8\x12\x89\x52\xcf\xcb\x2f\x24\x4a\xae\xc3\xea\x95\x6b\xbb\x71\x24\x4a\xbb\xa9\x24\xca\x72\x86\xbd\x90\x28\xea\xa1\xd8\x58\x12\xa5\xdd\x74\x12\x65\x35\x03\x37\x4c\xa2\xb4\xb7\x45\xa2\x4c\xb7\xaf\x5d\x3c\x6d\xd0\xee\x28\xc3\xf3\xc3\x2a\xa8\x3b\xfd\x83\x4a\xe0\xf9\x6c\xff\x32\x08\xbc\x80\xa1\xb6\x6b\x7e\x0a\x39\xf2\x49\x10\x2f\xa7\xbc\xe6\x2b\x0f\xe6\xb9\xfd\x09\xf9\xea\x4f\x29\x2c\xb4\xa0\x83\xad\x07\xc2\x15\x94\x4f\x1b\xae\x57\xff\x07\xaa\xa2\x1c\x94\x9e\xd0\x7c\x38\xf7\x4e\xcc\x5c\x42\x55\x31\x6c\x5d\x84\x04\xed\x63\xdb\x0e\x58\x86\x8e\xa0\x19\x3a\x22\xbe\x5b\x8b\x8c\xa0\xdb\x22\x23\x68\xdf\x58\xcc\x44\xd0\x84\x89\x88\x69\x88\x69\xa7\x35\x73\x10\x99\xd0\xa8\xa0\x23\x22\x8b\xdb\x9d\x1a\x75\x71\x65\xd8\xe5\xe2\x6a\x5e\x31\x28\x29\x04\x64\xcb\x15\x4a\xa2\x15\x3a\xf4\xec\xd0\xf1\xd0\xd1\xc7\x8a\x37\xc9\x8a\x3d\x21\xb4\xab\x7b\x4d\xc7\x26\xd3\x40\xdb\xad\x7a\x45\x2c\x29\x05\x92\x7c\x7b\x43\x1d\x34\xed\x26\x16\x8e\x56\x48\xb7\x99\xde\xe6\xea\x42\xcb\x06\x26\x9a\x28\x8e\x0c\x9a\x56\x0d\x6d\xbf\xc4\x71\x24\x49\x87\x0a\xf2\xa3\xd4\x59\xed\x3a\xb3\x5a\xbe\xda\x00\x22\x05\x73\x46\x50\xca\x8a\xcc\x38\xf7\xcc\x71\xa2\x1d\x52\xf8\x83\x38\x1c\xc7\xd3\x9d\xbb\x20\xec\x99\x5e\x49\xc6\x95\xbf\x22\x27\x26\x0e\xd4\x2a\x6e\x23\xbb\xb7\x08\x2f\x56\xa5\xd5\xec\x34\x65\xcc\xaa\x1d\x85\x33\x23\x58\x6b\x28\x56\x49\x9e\x1d\xe2\xbc\xad\xa3\x74\x8c\xca\xf1\x38\xdd\x98\x95\xe5\xd7\x8b\xc7\xcb\x34\x12\xeb\x29\xa8\x19\x8f\x5b\xc9\x9b\x0a\x29\xd1\x9f\x82\x0d\x85\x95\x17\x03\x8e\x7a\x6b\x3b\xd1\xa0\xb6\xb8\x63\x15\xcb\xad\xee\x02\x80\x9a\x33\x87\xd9\x19\x9c\x3f\xae\xdc\xa8\x3a\x99\xf1\xd4\x12\x5f\x35\xa6\xc6\xc4\xc2\x87\xdf\xbb\x97\xb7\x6a\x91\xf0\xe1\x99\x93\x9a\x71\x10\x49\x57\x8b\x02\x29\x7e\xa5\x18\xf8\xd0\xee\xde\xaa\x07\x80\x80\xbc\x6a\xb3\x2f\xe5\xaa\x4f\xbd\x10\xbc\xc2\xbc\xaf\x83\x72\x8e\xec\x88\x1d\x7a\x13\x0e\x9b\x4b\x3e\x3b\xb8\x01\xe4\xf3\x15\xde\x3c\xf9\x0c\x3a\xd2\x1d\xf3\xca\xc3\x36\xc2\xa3\xfb\xdd\x51\xcf\x89\x05\x5b\x22\x9e\xeb\x79\xf8\x85\x78\xce\x75\x58\x9d\xed\xbb\xc2\x4d\x23\x9e\xc1\xa2\x66\x12\xcf\xcb\x19\xf6\x42\x3c\xab\x87\x62\x63\x89\x67\x99\xa6\x9a\x4c\x3c\xaf\x66\xe0\x86\x89\x67\x69\xdc\x36\x88\xe7\x0e\xb8\xc6\xb3\x77\xc1\x3a\x7f\xc1\x4e\xb8\xc5\x57\xc1\x60\x4f\xb7\x61\x93\xce\xb0\x9b\x0e\x4e\x81\x52\x7c\xb7\x16\xbb\xe9\xe0\xb5\xb1\x9b\x79\x3e\xd3\xc1\x46\x34\x31\x93\xc9\x70\x1e\xa5\xe9\xe0\x98\xd2\xf4\x65\x6b\x0d\x65\x7b\x6e\x82\xd6\x2c\x79\xae\x0a\x34\xca\xa9\x54\x21\x33\xd7\x01\xc8\xa5\xb2\xe6\xa2\x70\xf1\xcd\x9e\xdd\xc3\xf0\x6b\x32\xdc\x3c\x0e\x17\x4a\x52\x20\x0e\x67\x5e\xb4\x69\xed\x06\x86\x47\xfa\xb7\x04\xc2\x6b\xfa\xf7\x05\x85\xe7\x3a\xac\x0e\x7d\x60\x06\x9a\x06\xc3\x85\x49\xcd\xc4\xe1\x4b\x5a\xf6\x02\xc4\x6b\x44\x63\x63\x91\x78\x94\xab\x9a\x0c\xc5\x57\xb4\x70\xc3\x58\x3c\xb2\x6e\x1b\x60\x3c\xd9\xc2\xb6\x0f\xc6\x25\xc7\xbc\x96\xf7\x2e\xc4\xf3\xde\x6b\x11\xf4\x4b\x40\x14\xca\x03\x35\x8b\x8a\x8f\x2c\x6f\xac\xce\x18\xca\x39\xcc\x94\x19\x70\x21\x45\x82\xd1\xdd\x5a\x65\x06\x74\xd9\x58\x9d\x01\xb2\x8d\xdf\xa8\x5b\x7c\x40\x7f\xa6\xca\x80\x56\x71\x99\xf1\x00\x6d\x35\x94\xe9\xb6\xa5\x1a\x43\x28\x5c\xf2\x05\x88\x79\x22\x97\x7b\x37\x61\x9e\xc4\x5f\xca\xdf\x2b\xd8\xe4\xe7\x1e\xf2\x6f\x0a\xc4\x03\xab\xfc\x4a\x42\xf6\xfe\xcb\xa3\xfc\x95\x75\x9c\xcf\x1a\x50\xc6\x75\xd8\xe6\xab\x38\xd0\x91\x16\x71\x9d\xc0\x13\xdb\xee\x2e\x9f\xe4\x9f\x9a\xb0\xa5\x52\xae\x9e\x8f\x5f\x2a\xb9\x5c\x87\xd5\xb1\x73\x87\x35\xad\x90\x03\x8b\x9a\x59\xc7\x2d\x67\xd8\x4b\x19\xa7\x1e\x8a\x8d\xad\xe2\x64\x9a\x6a\x72\x11\xb7\x9a\x81\x1b\xae\xe1\xa4\x71\x1b\x2a\xe1\x2a\x70\x9c\xfa\x87\x11\x3a\x4c\x7e\x18\xa1\xd3\xbe\x58\xf2\xab\x08\x95\xdf\x93\xdb\xe4\x7b\xf3\xc2\xea\x43\xa4\xdd\x95\x59\xad\x58\x82\xd4\xd6\xf7\x16\xf4\xdd\x5e\x7e\xde\xfa\x37\x02\x84\xee\x23\x98\xa1\xdd\x68\x7e\x87\xb4\x9b\xf6\x4e\x34\xff\x8c\xb4\x2f\xed\xcf\xdd\x9d\xe8\xfe\x3f\xa4\x7d\xbe\xbc\x5d\x42\xb5\x45\xc4\xcb\x34\x2b\xe9\x7e\x8f\xb4\x6e\xfb\xfa\x72\x7b\x81\xfd\xff\x48\x3b\xff\x74\x7d\x7d\x76\x53\xb1\x98\xd4\xb8\x07\x1f\xa0\x73\xf6\xfd\x0d\x9f\x65\x8a\x17\x71\xaf\x16\xf1\xe0\xb3\x75\xbe\xba\x51\x96\x1f\x41\x85\x01\x59\x6f\x3e\xfb\xe0\xb3\xe4\x6f\x9c\x54\x70\x0f\x49\x97\x2d\x31\x0f\xa0\xee\xae\xc4\xc2\x5a\x71\x20\x85\x30\x12\xac\x8f\x6a\x10\x4e\x08\xa8\x17\x50\xfe\xbc\x56\xa1\x37\xd4\x5a\xe2\xeb\x18\x73\x04\xde\xd2\xbf\xd7\x2b\xf0\x33\x61\xb0\x79\xbb\x65\x8f\x84\x2e\x99\x16\x84\xd4\x2e\x55\xfc\x2a\x48\x29\xeb\x91\x38\xaf\xea\xd3\x22\x3b\xa4\x32\xe2\xff\x75\x28\xfe\xaf\x1e\xf6\x50\xfa\xdf\x29\x44\x77\xa6\xf6\x26\x32\xff\x17\x00\x00\xff\xff\xc0\x95\x84\x91\x77\x6e\x00\x00"

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 28279, mode: os.FileMode(420), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

