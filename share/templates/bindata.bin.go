// Code generated by go-bindata.
// sources:
// index.html
// DO NOT EDIT!

// +build bin

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5c\x6f\x73\xe2\xb6\xf6\x7e\x9f\x4f\xa1\x7a\xda\x5f\xb7\x9d\xd8\x6c\xfe\xed\x6f\x6f\x1a\x72\x27\x9b\xa4\x5b\xa6\x9b\x84\xd9\x90\xbd\xb7\xb7\xd3\xe9\x0a\x5b\x80\x36\xc6\xf6\xb5\x64\x12\xca\xf0\xdd\xef\x91\x2c\x83\x6d\x64\xb0\x81\x10\xd2\xd9\x17\x49\xc0\x92\x8e\x9e\x73\x24\x1d\x3d\x8f\x10\x39\xf9\xe6\xe2\xe6\xbc\xf5\x5b\xf3\x12\xf5\x78\xdf\xdd\x39\x1d\x8d\xbe\x1d\xa0\xe3\x3a\xb2\x6e\x18\x27\x1e\xff\x44\x42\x46\x7d\x6f\x3c\x3e\x91\xc5\x08\x9d\x9e\xf4\x08\x76\xe0\x85\x78\xd9\x27\x1c\x23\xbb\x87\x43\x46\x78\xdd\x88\x78\xc7\x7c\x6b\xa8\x22\x4e\xb9\x4b\xe4\x6b\x78\x37\x1a\x59\x17\x98\x63\xab\xe7\x33\xee\xe1\x3e\x19\x8f\x91\x2f\xcd\x9f\xd4\xa6\xf5\x94\xb9\x1e\xe7\x81\x49\xfe\x1b\xd1\x41\xdd\xf8\xb7\x79\x77\x66\x9e\xfb\xfd\x00\x73\xda\x76\x89\x81\x6c\xdf\x13\xcd\xea\x46\xe3\xb2\x4e\x9c\x2e\x31\xd2\x2d\x85\xe5\xba\x31\xa0\xe4\x21\xf0\x43\x9e\xaa\xfc\x40\x1d\xde\xab\x3b\x64\x40\x6d\x62\xca\x37\xbb\x88\x7a\x94\x53\xec\x9a\xcc\xc6\x2e\xa9\xef\x59\xaf\x95\xa9\xd1\xe8\x97\xd6\xd5\x07\x64\x9c\x7c\x63\x8c\xc7\xa6\xf9\x3b\xed\xa0\xc6\xe5\x1f\xa7\x27\x2e\xf5\xee\x51\x48\xdc\xba\xc1\x7a\x60\xdd\x8e\x38\xa2\xd0\x81\x81\x7a\x21\xe9\xd4\x8d\x5a\x07\x0f\xc4\x7b\x0b\x7e\xe9\x2c\xfd\x4e\x3c\x87\x76\xfe\x30\xcd\xb4\xa5\xd8\x00\xa3\x7f\x11\x56\x37\x0e\xf6\x1f\x0f\xf6\x27\xe6\xc4\x30\x8c\xc7\x89\x55\x96\xbc\x30\x0f\xf6\xad\xc0\xeb\x1a\x88\x0f\x03\xf0\x95\xf6\x71\x97\xd4\xc4\x03\x15\x87\xa9\x6d\x1c\x04\x2e\x31\xb9\x1f\xd9\x3d\x33\xd3\xcf\xde\xfe\xeb\x47\xf8\x59\xd8\x13\xd4\xb1\x2a\x5a\x3e\x3c\x7c\x84\x9f\xc5\x96\x0f\x0f\xab\x5a\x3e\xda\x7f\x84\x9f\xc5\x96\x8f\xf6\xab\x5a\x7e\x0b\xd1\x78\x5b\x22\x1a\x6f\x0b\xa2\xc1\xf8\xd0\x25\xac\x47\x08\x4f\x06\x85\x93\x47\x5e\xb3\x19\xcb\xdb\x84\x47\x35\xea\x39\xe4\xd1\x12\x85\xca\x50\x4d\xad\xa6\xd3\x93\xb6\xef\x0c\xd5\x43\x87\x0e\x90\xed\x62\x06\xf8\xb8\x1f\x98\x6d\x1c\x1a\xc9\x4a\xd2\x94\x99\x2e\xe9\xf0\xa4\x82\xa8\x12\xb9\x49\x8d\x3e\xf1\xa2\x69\x49\x0c\x3c\xf5\x36\x67\x2f\x0a\x1c\xcc\x09\xe0\x86\x3f\xd8\x74\x48\x87\x7a\xe0\x4e\xfc\xf7\xcf\x64\xe9\x1a\x99\xf6\x72\x9a\x73\xd2\x0f\x5c\x68\x89\x54\x5d\x76\x7c\x9c\x6f\x84\x2c\xc8\x20\x35\xe8\x2b\xd7\x7b\x2d\x83\x47\x0f\x2f\xdf\xe1\x49\x10\x92\xdc\x33\x78\xea\x33\x24\xb2\x0c\x65\x3c\xa4\x6d\xd1\xd9\x6c\xad\xd3\xa7\x45\x10\x05\xff\xe7\xb5\x59\xf0\xd3\x09\x0b\xb0\x57\x2a\xa6\x51\xc0\xe9\x6c\x44\xa5\xb1\x79\x51\x55\xcd\xe2\x98\x8a\xce\x66\xb1\x3c\x83\xfb\x2e\xae\xea\xbe\xeb\x63\x07\x0f\xba\x95\xfd\x4f\xda\x3d\x49\x00\x6a\x91\xbb\xa3\x6d\xa0\x5d\x7a\x21\xed\xf6\x96\x5f\x7b\x78\x52\x17\x87\x5d\xea\x99\xaf\x51\x3b\xe2\xdc\xf7\x10\x23\x90\x73\x1c\x1c\x0e\x51\xcf\x77\x5d\xff\x21\x49\x25\x62\x6f\x64\xc7\xb5\xda\xc3\xc3\x83\x05\x4b\x2b\x84\x1f\xcb\xf6\xfb\xb5\x78\x33\xad\x41\x42\x22\x98\x11\x56\x13\x71\x63\xfc\x9f\x76\x3f\xa8\xc7\xc9\x67\x66\xd5\x26\xdb\x2f\x5e\x3e\x1c\x93\x37\x82\x33\x04\x92\x33\xc8\x4d\x3e\xc0\x21\xee\x33\x18\x9a\x54\xbc\xba\x21\x75\xcc\xb6\xeb\xdb\xf7\x28\xc0\x8e\x43\xbd\xae\x29\x42\xf8\xfa\xe8\x8d\x36\xb3\xb9\x10\x0f\x62\xee\x81\xd7\x66\xdb\x0f\x1d\x12\x8a\xda\x46\x89\x71\xb1\x7d\x37\xea\x7b\x48\xb5\xdf\x43\x73\xe7\x1f\x4c\x1c\xe2\xf6\x49\x3f\x65\x78\xde\xb4\x9b\x54\xcf\x27\xb3\x74\x28\x5e\x86\xd3\x4e\xa7\x8a\xcf\x50\xfb\xe5\xbb\x6c\x07\x51\x15\x9f\x45\xf5\x97\xef\x34\xad\x34\xce\xf4\xef\x30\xce\x01\xab\xe2\x32\xd4\x9e\xeb\x32\xb3\x43\x1a\xf0\x34\xb1\xfb\x82\x07\x38\x7e\x3a\xf1\x74\x80\x43\x24\x32\x1f\xaa\x23\x25\x74\xc6\xe3\x9f\x60\x63\x92\xb5\xca\x18\xca\x4b\x28\xc4\x42\x7b\xca\x1b\xbf\x30\x78\x05\x32\xc4\x6a\x9d\xbd\x7f\x7f\x79\xd1\xa6\xa0\xc6\xfa\xd4\xab\xb5\x23\xcf\x71\x89\x05\x2f\xad\x2f\x6c\x34\x22\x2e\x03\x5d\x05\x2d\x93\x02\xf9\xd0\x73\xa6\xc9\xff\x34\x87\xa9\xa6\x28\xa7\x60\xa1\x4a\xfb\xd5\x7e\xdc\xf9\xb1\x36\x1e\x8f\x46\x71\x90\x52\x51\xc3\x82\xf2\xfe\xd9\xc6\x20\xba\x24\xdf\x84\xa0\xe1\x78\x57\x02\x9f\x7f\x81\xbf\xa0\xe9\x46\x23\x39\x6c\xe3\xb1\x78\x76\x1e\xbf\x44\xbe\x77\xee\x52\xfb\xbe\x3e\xe2\x3d\xca\xac\x1e\x16\xd8\xe4\x93\x31\x42\x3b\xb1\x36\x7c\x27\xac\xca\xf6\x56\x0b\x42\x23\xc6\x03\x0b\x34\x12\x7d\x49\x50\xf1\x4e\xbc\x4e\x54\x31\x14\x34\xc5\x57\x1a\xd5\x40\xc0\xca\x62\xf9\x00\x4f\x74\x78\xc4\xf3\x0a\x98\x44\x75\x15\x22\x49\xb3\xb2\xbe\xe1\x90\x70\x65\x2c\x19\x62\xc5\x8e\x4e\xcb\x62\xcf\x13\x77\xe9\xc4\xb4\x17\xa3\x77\x64\xc0\xdb\x96\x10\xed\x4d\x70\x87\x3e\x12\x07\x19\x49\x6d\x64\xa0\x19\x9d\xaf\x34\x90\xb1\x93\x26\x8e\x9a\x03\x81\x84\xb0\x55\x45\x9a\x90\x41\x15\x91\x9d\x94\x71\x55\x34\x21\x89\x15\xac\x4e\xf6\x00\x51\xa9\x88\xdc\xec\x24\xc9\x6a\x34\x92\x51\x6f\xfa\x8c\x72\x3a\x20\xe8\xdb\xc0\x3a\x6f\xde\x79\xc8\xe0\xb8\xcd\x90\xf8\xa5\xd2\x1e\x8a\xe5\x9a\xd0\x86\x33\x65\xd0\x55\x9c\xd5\xc4\xb3\x79\x19\x57\xaf\x05\x85\x21\x79\x96\x82\x04\xf1\x14\x46\x4c\x95\x99\xd3\x79\x56\x8c\xa5\x98\x86\x2d\xc0\x98\xc0\x54\x93\x25\xa9\xd2\x3b\xca\xb1\xd2\xb6\x0f\x9c\xb4\x6f\xbe\xce\x72\xc8\x53\x68\x0a\x79\xe3\x28\xcb\x16\x71\x89\x9c\x0e\x8b\xb6\xeb\x99\x8c\xb8\x1d\xd3\x06\x0e\x4a\x42\x3d\x7f\x86\x50\xa1\x6a\xfa\x95\x7a\x41\xc4\xcd\x6e\xe8\x47\x01\x9a\x8b\xbd\xb8\x9d\xe9\xe2\x36\x71\x11\xeb\x63\xd7\x45\x22\x4d\x9b\x9e\xff\x10\xe2\x60\x56\xa3\x9c\x3a\xc4\xc5\xc3\x63\x24\xa6\x87\x08\xa3\xa3\x13\xb8\x73\x3a\x8a\x99\xbe\xc6\xae\x76\xcf\xca\x67\x5f\xf4\x01\x26\xd1\xc5\x74\x10\x61\x11\x26\xd2\x61\x06\xfa\xa6\x80\xc5\x19\x18\x5d\xf9\x21\x59\x11\xd9\x92\x3a\xf5\x79\xe6\x41\xe8\x3f\xb0\xe9\x34\xf0\xac\xb3\x36\x03\xd2\xc2\xc9\xe6\xe7\xc3\x75\x6a\x51\xe7\xa2\xce\x22\xdb\x86\x1a\xcf\x3d\x2f\xd6\x84\x70\x35\x19\x9f\xa2\x77\x35\x4d\x16\xbf\xf6\xbd\xff\x90\xd0\x9f\xc2\x14\x27\x4a\x01\x81\x8c\xdd\xa3\x8e\xd8\x10\xe7\xb2\x61\x2e\xce\xf3\xa6\x19\x3a\x7d\x16\x02\x5c\x36\xf6\xd5\xdc\xcb\x50\xdf\xd4\x01\x46\x91\x55\x11\x0d\xe4\xf9\xc0\xde\x7c\xd7\x4d\x37\x2e\xb0\x1f\x47\x31\x77\x38\x01\xf5\xd1\x1d\x23\xe1\x77\xb9\x33\x93\xea\x56\x6e\x87\x6c\x75\x23\xff\xc2\x94\xaf\x6e\xa5\x01\x1c\x69\x65\x2b\x33\xed\x0b\xcf\x39\x04\x0d\x97\x3c\x00\xb8\x81\xa0\x06\x21\xf6\xba\xb0\xdf\xc3\xbb\x29\x45\x80\x37\xc0\xd3\x18\x17\xe5\x5f\xd8\x23\xfa\x1c\xf3\x39\xf1\xe8\x95\xa8\xf0\x83\xd5\xc7\xc1\xab\x4e\xe4\xd9\x9c\xfa\xde\x2b\xd1\x78\x17\xd1\x1f\xd0\x08\x01\x7d\x8b\x42\xef\x73\xd1\xd1\xc9\xc2\x69\x95\xf2\x4f\x9f\xb4\xc4\x49\x8d\x80\x77\x9d\x3b\x38\x4b\x16\xc0\xaf\x64\x88\x0c\xa8\x60\x42\x52\x6b\x0f\xcd\x6b\x03\x25\xd5\xd3\x1c\xb0\xea\xc4\x5c\x14\xfd\x1c\x93\x95\x1e\x39\x94\x41\x4a\x19\xaa\x6e\xda\x5d\x33\x62\x24\xb0\xa1\xa1\xa4\x48\xf1\x9b\xba\xf2\x46\x4c\xea\xa6\xcd\x33\x3c\x46\xcc\x8d\x7c\x71\x7e\x9e\xe8\x46\x7e\x93\xb8\x61\x19\xcd\x81\x9d\x94\x6e\x1b\x6a\xb1\x6e\xe7\xc0\x9e\x14\x3f\x23\x6e\x93\x7a\x03\x02\x82\x5a\x8b\x5f\x64\x8c\x39\xf8\x27\xc5\x55\xf1\xcb\x75\x08\xf2\xe0\xde\x15\x8a\x82\x3c\x42\x91\x93\xf1\x20\xc9\x06\x5f\x98\xda\x25\xad\xdb\xa4\xfa\xab\x11\x70\xf2\x63\x44\x77\x11\x58\x39\x46\xdf\x2b\x10\xdf\xef\xa2\x1e\x11\x91\x38\x46\x07\x47\xbb\x08\x9a\xe1\xc8\xe5\xb7\x81\xcf\x81\x71\xf0\x30\x22\xe3\x1f\xc6\x9f\x67\xce\xc0\xe7\xa4\x2f\x09\x20\x6e\x34\xd1\x42\xf2\xcf\x74\x27\x94\x2f\xaa\x2a\x25\xa7\xb3\xb4\x50\xba\xe8\xbc\x04\x9d\x04\x28\x97\x94\x49\x17\x94\xdd\xa3\x88\xe1\x2e\xf9\xaa\x96\x14\x4d\xbe\xe8\x3c\xa3\x58\x82\xce\xb7\x53\x2b\x2d\x07\xec\xa5\x4a\x25\x58\x50\x5b\xa0\x94\x64\xf2\xd9\x66\xa1\xb4\x1a\xc0\x4d\xe9\x24\x89\xf2\x69\x65\x92\x3e\x76\xf1\x41\x2b\xfa\x24\xaf\x63\x24\x11\xbb\x47\x7b\xc8\xb8\x90\x97\x7d\x0c\x2d\xcf\x5d\x5d\x5f\x65\x35\x48\x25\x6c\xfb\xc8\xb8\xf2\x23\x48\xe4\x4e\x1e\xdc\x32\xf2\xa7\x52\xd7\x6f\x90\xd1\xf2\x39\x76\x37\xde\xf1\x11\x32\x80\x84\x6f\xde\xe1\x03\x64\x9c\x0d\x30\xdd\xbc\xc3\x87\xd2\xe1\xef\x4a\xf4\xbb\xaa\x0e\x05\x06\x7c\x7f\x27\xd8\x45\x4a\x8d\x3a\x9d\x29\x0d\x9b\x94\x57\x92\xa4\x4e\x67\xad\x8a\xd4\x07\x36\xde\x11\xd7\x18\x32\x42\xd4\xe9\x58\xb0\x4a\xaf\xd5\xe9\x7f\x91\x1a\x75\x3a\x4a\x8c\x3a\x34\x8c\xaf\x12\xc9\x86\x34\x8c\x1b\xae\xa2\x4b\x4b\xe0\x54\xc2\x20\xdd\x63\xb5\x99\x14\x67\xe8\xf9\xa2\x26\xe1\x91\x91\xa8\x65\x20\xc9\x4e\xeb\x46\xc3\xf3\x1d\x02\x79\x5e\xae\xd8\x59\xad\x02\x90\xe2\x1a\x9a\x3b\x30\x49\x05\xb9\xda\x37\x8e\x38\x12\x4b\x5d\x0f\x58\x14\xcd\xc1\x7b\xa7\x2b\x7e\x6a\xb8\x9d\x90\x90\x02\xb8\xa2\x68\x0e\x5c\x99\x5b\x16\xe0\x2d\x7b\x32\x53\x55\x99\xa3\x9c\xb2\x8d\xa3\xa7\xd1\xb5\xe5\x06\xec\xbb\x19\xb6\x97\x1a\xb2\x02\x39\x9c\x19\xb7\x67\x97\xcc\x31\x86\x8c\x62\xde\x16\x75\x4c\x97\x57\xc7\x8d\x17\xa1\x8e\x1b\x4b\xab\xe3\x86\x50\xb4\x1d\x0c\x8c\xf6\xab\x3a\x56\xca\xa8\xf1\x9c\xea\xb8\xb1\xad\xea\x78\x39\x60\x2f\x55\x1d\x37\xb6\x42\x1d\x37\xb6\x5d\x1d\xaf\x06\x70\x53\xea\xb8\xf1\xf4\xea\x78\x92\x46\x37\xfb\x69\x62\xa3\x59\x92\xab\xed\x17\xf1\x9f\x84\x89\xbc\xa3\x9c\xa1\x86\x57\xbb\x89\x38\x0a\x60\x87\x8b\x2f\x40\xe7\x7a\xbb\x41\x27\xb9\xc5\xda\x3e\xa9\x65\x06\x2c\x60\xeb\x02\xd4\xc4\xf6\x3d\x59\x8c\x69\x52\xed\x06\xad\xaf\xef\x8b\xd0\x0f\xd8\xee\x65\x18\xfa\xe1\x42\x00\x1f\x7c\x56\xd4\xfb\x62\xf1\x48\x3b\xb0\xb7\x87\x2c\x25\x1d\x69\x4a\x3a\xaa\xd2\x4a\xc2\x91\x76\x9e\x5a\x35\xd2\x8e\xb5\x48\x32\xd2\x44\x32\x2a\xbd\x38\x69\xb2\x56\xb1\x98\x1a\x3f\xad\x6e\x8c\xb1\x36\x9a\xa5\x05\x4d\xe1\xbc\xc8\x0c\xb8\x8e\xcf\xeb\x18\xbf\x9a\x4b\x52\x02\xa2\x77\xbf\xb5\x2e\x6f\x61\x2a\xa1\xbe\xef\x44\xae\x8f\x0e\xdf\x6b\xbe\xc6\x23\xe0\xbe\x1b\x72\xc2\x1a\x9e\xf6\x7b\x15\xa7\xb5\x42\xcb\x62\x86\x96\x32\x0d\x15\xf5\xb6\x35\x22\x2b\xd3\xdb\xbb\x46\x4b\x3a\xa0\x5f\x07\x93\x4e\x2e\x88\xcb\xb1\x48\x26\x5a\x1f\x72\x1e\x48\x9b\xc5\x8b\x6b\xd6\xa8\x1e\x7d\x09\x8d\xf3\xd4\xe3\x1b\x4c\xb2\xd5\xc2\x61\x50\x19\xab\xca\x18\x27\xd6\xcb\x8c\xb2\x32\xbf\xf4\x38\x4f\xf3\x6e\xa9\x51\x99\xe7\x4d\xce\x97\x66\xca\x8b\x0a\xa6\x9f\x6b\xcc\xb3\x43\xe0\xc8\x2d\x81\xc4\x5b\x42\xc1\x18\xe8\x26\x86\x6c\x57\x66\x5a\xc8\x3d\xa7\x68\x52\x24\x27\x13\x09\xb3\xb9\xa6\x2e\x9a\x34\x12\xf1\x34\x72\xc4\x26\x33\x08\x2b\x1a\xd4\x39\x54\x66\x26\x26\xb6\xf4\x2e\xed\x6a\x82\x45\x92\x1d\x77\xa1\xed\x78\x6f\xae\xb2\x86\x94\xed\x32\xc0\x63\xe3\xd5\x57\x90\x0a\xe7\x99\xeb\xc6\xcc\x33\x99\xc8\x6a\x68\x73\x0f\x04\x92\xc9\x93\xc4\x9f\xfc\x13\x39\x14\x6a\x42\xea\x0f\x96\xd2\x94\x65\xde\xa2\xcd\xae\xad\xe5\x66\x5b\x06\xfb\xda\xa6\x5c\x91\xd5\xac\x6b\xf3\xb2\x86\xc6\xb7\x92\xf3\x6e\xc2\xf1\x4a\xda\xae\x32\xef\x2e\xa7\x33\xae\x8a\xf1\x0a\xf3\xee\xf9\x4f\xd6\xc4\xb7\xf1\x96\x3d\x5a\xbb\x22\xfd\x97\x70\xb6\x26\x60\x2e\x79\xb8\x06\x4d\xfd\x70\xf8\xf5\x60\x4d\x1d\xaa\x40\x38\x9e\xf1\x64\x4d\xf4\xbe\x9d\x47\x6b\x4b\x22\x7b\xa9\x67\x6b\x62\x41\x6d\xc1\xe1\x5a\x9c\x7e\xb6\xf9\x74\x6d\x45\x84\x9b\x3a\x5e\x8b\x61\xfe\x9d\x2e\xe9\x4b\xc6\xb8\xf2\x85\x05\xf1\x61\xea\xca\x46\x7e\x0e\x09\x59\x07\x92\x85\x57\xf4\x57\xbd\x07\xd1\x97\x7b\x5d\xea\x24\x0b\x1e\x4c\x39\x41\x5c\x5a\xe9\x24\x0b\x9a\xac\xe9\x0e\x44\xf6\xfc\x0a\xec\x5a\xbf\x52\x2f\xff\x39\x77\xe6\x00\x0b\xea\xa8\x13\xac\x7b\xa8\x69\xa0\x54\xa3\xf5\x1f\x61\xcd\x5c\x76\x10\x9d\x2d\x75\x73\xa0\xd8\xdc\x32\x1f\xec\x17\x5b\xfb\x59\xf7\xb1\xfc\xd3\x5d\x82\xcf\x7f\xd4\xae\x1c\x2a\xb8\x43\x9e\x2e\xfd\xfa\x79\x78\xd1\x97\xee\x97\x25\xed\x4d\xf6\x12\x38\x3b\xa0\x5c\x92\xb2\x37\x43\x5f\x6c\xb0\x5f\x3f\x0e\x9f\xb0\xf6\x26\x7b\x46\xd2\x0e\x9d\x6f\x27\x67\x5f\x0e\xd8\x4b\xa5\xec\xb0\x9e\xb6\x80\xb1\xcb\xdc\xb3\xcd\x84\x7d\x35\x80\x9b\xe2\xeb\x12\xe5\x13\xd0\x75\xed\x5e\x5f\xfe\xde\x78\x93\xc9\x7b\xe3\xcd\xc6\xc5\x52\x97\xc6\x0b\xbe\x6f\xf9\x74\xd7\x8c\x05\xde\x7d\x64\xdc\xcd\xe2\x2d\x45\x45\x2b\xf7\x75\x00\x7d\xdd\x5e\x7e\xdc\xe8\x55\x6a\xd1\xef\x21\x8c\xc9\xe6\x7b\x3d\x42\xc6\x75\x63\xe3\xbd\xbe\x41\xc6\xa7\xc6\xc7\xd6\xc6\xfb\xfd\x7f\x64\x7c\xbc\xbc\xad\xdc\x6d\x9e\x62\x54\xee\xf7\x2d\x32\x5a\x8d\xab\xcb\xcd\x4c\xe0\x7f\x20\xe3\xfc\xe6\xea\xea\xec\x5a\xbb\x60\x16\x2b\xcc\x00\xa8\x59\xfa\xaa\x44\xc0\x52\xf4\x55\x94\x55\x92\x97\x01\x5b\xf3\x17\xbe\xb3\x2a\x33\x60\x16\x64\xb2\x79\x1a\x33\x60\x4a\x62\x06\x54\x28\xcc\xa4\xc1\x06\xf4\x25\x74\x75\x37\x83\xad\xc2\x98\x4b\x03\x8c\x84\xeb\x11\x94\xc2\xf1\x90\xfa\x21\xe5\xc3\xb5\x19\xbc\xa6\x76\xe5\x2f\x0a\x14\x1a\xbb\xa5\x7f\xad\xcf\xd8\x47\xc2\x60\xc3\xf5\x66\x3f\xe2\x59\x6a\xa9\x0b\x8b\x2d\x5a\xea\x4b\x11\x1a\x31\x9b\x04\x4b\xff\xad\x8a\x4d\xaa\x52\xf5\x0f\x55\x35\xff\x42\x2a\x2e\x99\xf9\x0f\x52\xff\x0b\x00\x00\xff\xff\x96\x28\x43\x4d\x35\x5b\x00\x00"

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 23349, mode: os.FileMode(420), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

