// Code generated by go-bindata.
// sources:
// index.html
// DO NOT EDIT!

// +build bin

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5d\xfb\x72\xdb\xb8\xd5\xff\x3f\x4f\x81\xe5\x7c\xfb\xcd\xee\x76\x49\xc6\x8e\xd3\x66\x76\x25\x75\x12\x4b\xdd\x72\x6a\x3b\x9a\xd8\x4e\xbb\xe3\xd1\x74\x20\x11\x92\x90\x50\x24\x97\x00\x7d\xe9\xd3\xf7\x80\x17\x00\x94\xa8\x0b\x29\x92\x71\x27\xc9\x8c\x6d\x11\xc4\xb9\xe3\x72\xce\x0f\xa4\x72\x77\xe7\x92\x39\xf5\x09\x32\xd2\xbf\xff\x8e\x43\x4e\x57\xc4\x98\x4c\x7a\x2c\xc4\xfe\xe0\xee\xce\x1a\x62\x8e\xad\xb4\x19\x5a\xed\xac\x99\xf8\xee\x64\xb2\x41\xbd\x0c\x18\xf7\x71\x4a\x8f\xd1\x32\x22\xf3\xbe\x61\x1b\x88\x53\xee\x91\xbe\x91\xdf\x45\x39\xd7\xbc\x61\x32\x31\x06\x9b\x6d\x3d\x1b\x6f\x15\xe4\x61\x10\xf1\xa2\xe7\xd2\x7b\x34\xf3\x30\x63\x7d\x23\x0a\x1e\x10\x79\x04\xe5\x5c\xe2\x82\x64\x73\x1a\x70\x1e\xac\x8c\xc1\x0b\x84\xf4\x6e\xb3\xc0\x8b\x57\x3e\x62\x2b\xec\x79\xe6\x09\xe2\xe4\x91\x9b\x11\x5d\x2c\xb9\x31\xd0\xbb\xdd\xdd\xd1\x39\x4a\x15\x0a\x71\x84\x57\xcc\xba\xc0\xbe\x75\x45\x16\x98\xd3\x7b\xd0\x8d\x2d\x83\x07\x53\xfc\x5a\x52\x97\x80\x92\x1e\x83\x46\xf1\x59\x6f\x14\x9a\x27\x0a\x80\x0a\xcb\x93\x9c\xf5\xf2\x75\x2a\x35\xb8\x27\xd1\xdc\x0b\x1e\x40\x30\xce\x3d\x74\x11\x60\x17\xe1\xfb\x05\x72\x29\x0b\x3d\xfc\x84\x02\xf0\x7b\xe0\x33\x23\xf5\x65\xee\xa3\x4c\xa5\x1b\x8f\xfa\x9f\x13\xcd\x26\x93\x41\x12\xaf\x5c\x46\xae\x84\x29\x7e\x21\xf8\xc8\x09\xdc\x9e\x11\x33\x8c\x08\x02\xa1\x98\x9b\x1e\x99\x83\xcd\x96\x65\xa1\x2c\xa6\xb9\x6c\xe1\xf6\x54\x67\x7b\x79\x32\xe8\xd9\xe0\x95\xc4\x89\xf2\xc3\xa6\x37\x3d\x1c\x2d\x88\x79\x72\xd2\xb2\x0f\x63\x4f\x0f\xf6\x8a\xf8\x31\x92\x86\x8a\x0f\x59\x3f\xe8\xe9\xd1\xfc\x63\x51\x5f\xea\x87\x31\x37\x17\x51\x10\x87\x86\xea\xb1\xb5\x8f\xe9\xe1\x29\xf1\xd2\x70\xf9\xc1\x43\x84\x81\xca\x25\x10\x17\xe9\x8c\x7d\x0c\xa6\x31\x8c\x42\x3f\x09\x71\x76\x37\x6d\x49\x07\x20\x62\x64\x16\xf8\x2e\x8e\x9e\x44\xc0\xf1\xd4\x23\xae\x9a\x08\xd2\x67\x6e\x3a\x15\x2a\xcb\xd4\xba\x42\x67\x5c\x3a\x84\x86\xf9\x10\x72\xad\x0b\xc2\x98\xf5\x77\xe8\x03\x13\x0b\x15\xff\x65\x42\x34\x3f\xa0\x82\x19\x7b\x98\x8e\x1e\x79\x84\xcf\x05\x0f\x88\xe5\x1a\xef\x81\xb9\x8f\xfa\x06\xa4\xa6\x1e\xd0\x6d\x6f\xd9\x19\x97\x41\x44\x1a\x77\x46\xc2\x74\xa7\x33\xf6\xd0\xa6\xae\x40\x7f\xda\xed\x8c\xc2\x65\xcf\x56\x73\xa1\xcd\x69\x01\x33\x92\x75\x3a\x2b\x7c\xeb\xed\x94\xc1\xf2\xc3\x49\x8b\xd3\xe3\x4a\xae\xb0\xc7\x4c\x0f\x16\xcf\x66\x40\xbd\x3e\x32\xd6\x99\x57\x9b\x26\xeb\xd4\xdd\x4d\x13\x4d\xf2\x11\xd3\x64\xbf\x53\x2a\x4f\x97\x75\xda\xa3\xa6\x4b\xcf\x8e\xbd\xcd\xed\x8c\xfc\xb1\xb9\xa3\xe5\xe3\x10\xbd\x4c\xb7\xaf\xb5\x5d\x4b\x63\xc1\x78\x44\x43\xa2\xb6\xa9\xb5\xf4\x85\x2f\x09\x86\xa1\x5e\xd8\xc9\xd3\x94\x06\xc1\x46\x9b\xe7\x2c\xc6\x60\x4c\x22\x1a\xb8\xd9\xb6\xbd\xa7\x77\x21\xc3\x41\x1f\xb1\x17\x93\xdd\x84\x20\x3f\xbb\x9f\xf8\x45\xdb\xc4\x3d\x2c\x12\xb1\x08\xfb\x0b\x82\xfe\xcf\xc3\xe8\x97\xbe\xbc\x61\x5d\x50\x26\x46\x5f\xd1\xa0\x03\x4c\x29\x5d\x8e\x94\xca\xe8\x81\xba\x7c\x69\xbe\x8a\xc8\x4a\x2c\x01\x20\xd5\x4a\x8d\x9f\x4c\x56\xa9\x7e\x75\xbc\x90\x32\x4a\x7c\x21\x33\xda\x2d\x0c\x4c\x2f\xda\x70\x48\x96\x91\x26\x7f\x5e\xa8\x11\xa4\xff\x56\xf9\xd2\x1a\xd1\x5a\x1a\xbb\x02\xbb\x3a\xce\x63\x2f\xc9\xaa\x83\x44\x16\xa4\x04\xe9\xfa\x7d\x70\x1a\x2b\x14\x6b\x22\x8f\x4d\x45\xb7\x98\xc5\x1e\xeb\xc1\xaf\x32\x8d\x05\xa7\x75\x90\xc7\x0a\x29\xcd\x27\xb2\x8a\x6b\xad\x4c\x56\x91\x77\x9e\xca\x26\xa2\x1b\xcf\x65\x15\xd7\x1a\xc9\xac\x22\xfe\x96\xcd\x16\x56\x94\xee\xd2\xd9\x44\x5c\x6b\xf9\xac\xe2\x5e\x2b\xa1\x55\xe4\x9d\x67\xb4\x89\xe8\xd6\x52\x5a\xc5\xbd\x46\x4e\xab\x88\x3b\x48\x6a\x0b\xc3\xb1\xb3\xac\x36\xdf\xb7\xab\xe7\x73\x37\x01\xc7\x5e\x1d\xc2\x5b\x46\x6a\xa5\xd1\x7f\x8b\xc8\x9e\x2c\x7a\xab\xbc\xef\xeb\x66\xdf\x90\x2a\x6a\xe9\x37\x5c\xa9\xfc\x1b\x2e\x6a\x27\xe0\x90\x0b\x0b\xf2\x7f\x50\xdf\xdd\x97\x0b\x6f\x4d\xa6\x05\x83\x24\x06\x47\x71\x10\xc1\x38\x8a\x81\x88\x4a\x0d\x06\x68\xba\x30\x63\x46\xc2\x19\x37\x90\x0b\xee\xcc\x2e\xfa\x4a\xad\xf1\x0c\x5c\xab\xeb\x99\x34\xec\x89\x64\xcb\x95\x83\x3b\xef\xba\x70\x18\xce\x3b\xa8\x1b\x86\x94\x7d\x46\x31\xc3\x30\xc6\xab\xd4\x0e\xa0\x5b\x13\xa5\x83\x92\xde\x62\xf9\x70\xa4\x1f\xbf\xca\xea\x61\x38\xef\xa0\x78\x00\x21\xcd\xd7\x0e\x92\x69\xad\xd2\x41\x52\x77\x5e\x39\x08\xc9\x8d\x17\x0e\x92\x69\x8d\xba\x41\xd2\x7e\x2b\x1b\xf4\x95\xa4\xbb\xaa\x41\x48\x6b\xad\x68\x90\xcc\x6b\xd5\x0c\x92\xba\xf3\x92\x41\x48\x6e\xad\x62\x90\xcc\x6b\x14\x0c\x92\xb6\x83\x7a\x41\x1f\x87\x4d\x95\x0b\x77\x77\xf6\x4f\x28\x0c\x3e\x13\x14\xc6\x11\x9d\x3f\xcd\x18\xfb\xa5\xd0\xd7\x8d\x82\x50\xcc\xd4\xc2\x4e\x8c\x23\x02\x59\x9c\x9d\xcd\x03\xf4\x93\x9d\x3d\xc7\xb0\x2f\x11\xcc\x27\xf0\xdd\xdd\x03\xe5\x4b\x04\xc9\x30\x79\x2c\xda\xf8\x31\x77\xeb\x67\x61\xe1\x8b\xd2\xf1\x71\x01\x5d\xd2\x71\x90\xc9\xcb\xda\xb2\xc8\x15\x02\x37\x18\x92\x7b\x3a\x23\xba\x76\xd0\xfb\x5c\x18\x90\x75\x57\xc9\xa3\x7c\x0c\xa2\x4a\x6e\x5b\xc9\xa4\x93\x46\x4c\xba\x0c\x62\x9f\x43\x45\xd5\xb2\x4d\x85\x9c\xf5\x20\xf3\x5e\x37\x62\x5e\x5a\x66\x3e\x3b\xe3\xce\x1a\x31\x2e\x29\x85\x9f\x9d\x6d\xa7\x8d\xd8\xf6\xf6\x1e\xd3\x67\x18\xb8\x57\x4d\x05\xee\xfb\x26\x6d\xdb\x8e\x40\xb8\x73\x0d\x80\x70\xe7\x0a\x7f\x70\xe7\x35\xe1\x87\xf5\x3a\x10\x2a\x6c\xe0\x05\x2b\xe3\x15\x5e\x55\x2c\xe5\x15\x13\x94\x71\xa1\x51\x7d\x2e\x3a\x3c\xb0\x88\xf0\xd3\x9a\x25\x69\xf9\xa8\xc1\x0f\x20\xaf\x0c\x00\xc9\x8a\x5a\xc7\x0f\x5c\xc2\x10\x17\x3d\x64\xff\xb4\x51\x11\x74\xa3\x65\x09\xc8\x52\x54\x32\x66\x22\xd1\xcc\x75\x8c\x0b\xdd\xbb\x51\x31\x99\xad\x3b\x75\x9c\x47\x84\x28\x1d\xe7\x05\xd8\xa7\x01\x1d\x77\x00\x42\xa9\x07\x53\x3c\xe8\x10\x5f\x97\x00\x45\x1b\xee\xfe\xbe\xe0\xee\x22\xc5\x97\x44\x98\x66\x61\xdc\x35\xc4\x74\x3e\xbe\xed\x00\x63\x02\x29\x95\xc0\x25\xa1\x55\x13\xe8\x12\xf0\x69\x11\x56\x3a\xd6\x77\x5f\x25\xae\x04\x4e\xeb\x00\x58\x12\x52\x9a\x47\x96\x14\xd7\x5a\xd0\x92\x22\xef\x1c\x5b\x4a\x44\x37\x0e\x2e\x29\xae\x35\xd0\x25\x45\xfc\x0d\x5e\x2a\xac\x28\xdd\xe1\x4b\x89\xb8\xd6\x00\x26\xc5\xbd\x16\xc2\xa4\xc8\x3b\x87\x98\x12\xd1\xad\x61\x4c\x8a\x7b\x0d\x90\x49\x11\x77\x80\x32\x15\x86\x63\x67\xa7\xd2\xe7\x60\x5d\xcd\xa3\xde\x68\xcf\x09\x61\x39\xe1\xf5\x13\xab\x45\xf7\x4f\x4c\x79\x2d\x42\xc7\xf5\xea\x9f\x4a\x43\x92\xa8\x15\x85\x70\xa5\xaa\x42\xb8\x38\xaa\x2c\x54\x00\x96\xe0\x6b\x5d\x1d\x77\xb4\x9b\x8f\xc1\xb5\x84\x5e\x70\x16\xa1\x52\x47\xbc\x85\x96\xdc\x2f\xf9\x20\x6a\x58\x32\xc4\xba\x28\x38\x6f\x68\x59\xae\x18\x2b\x45\xc1\xb2\xa5\x01\xc9\x26\xf5\x21\xeb\x66\x64\x97\x06\x62\xd0\x15\x35\x90\x2d\x5f\xf6\x5c\x9d\x76\x7e\xae\xee\x74\x71\xae\xee\xf8\x1c\x1a\xa1\x40\x61\x95\x4a\x1f\xa7\x99\x73\x75\x25\xbd\xc5\x02\xe8\x48\x3f\x7e\x95\xf5\x8f\xd3\xc5\xb9\xba\xd3\xc6\xb9\xba\x73\xd4\xb9\xba\xf3\xc5\xce\xd5\x9d\x36\xce\xd5\x9d\x23\xce\xd5\x9d\x6f\xe7\xea\x9b\xb3\xa2\xcb\xba\xc7\x69\xf3\x5c\xdd\x39\xea\x5c\xdd\xf9\x62\xe7\xea\x4e\x9b\xe7\xea\xce\x11\xe7\xea\x4e\x87\xe7\xea\x4e\x0b\xe7\xea\x7b\x0b\x1e\xb9\x57\xd7\xaa\x25\xc6\x65\x58\xf7\x30\x0a\x42\xf6\xf3\x28\x8a\x82\x88\x21\xc7\xb7\xdf\xc7\x1c\x85\x24\xca\xa6\xa2\xb1\x95\xf9\xa9\x9e\x5e\x16\x16\x04\x74\x11\x40\x74\x9d\xf7\x28\x64\x65\x02\xc7\x78\xf6\x99\xf0\xa6\x64\x49\x6e\xdb\xc4\xbd\xa3\x8d\xc9\x02\x19\x3d\x3a\x98\xf6\x6c\x3a\x58\x93\x55\xa1\x28\xf3\x09\x64\x76\x5a\x59\x46\xb5\xb3\xba\xe4\x5e\x73\xc7\x75\x74\x6e\x35\x72\xca\x96\x33\x73\xc6\x07\xb2\xda\xee\xc3\xff\xf7\xa7\x2c\xfc\xb5\x10\xa0\xe4\x6c\x0e\xb9\xc9\x30\x24\xe9\x30\x5c\x05\x6e\xec\x05\xe8\xec\x37\x19\x26\xfd\x78\x6a\x93\x0e\xe2\xab\xd1\x64\xda\x26\x03\xdb\xf1\xa5\xca\xf6\x56\x6a\x31\x34\xca\xc9\xe1\x8e\xa4\xff\xb9\x84\x9e\xe4\xd3\x66\x93\x3e\x9d\x51\x7b\xe4\x67\xf4\xa5\x0a\xa4\x0c\x74\x0d\xb2\x3f\xba\x0f\xf5\x15\x4a\xc4\xe0\x07\x58\xa6\x12\xed\x89\xc7\x71\xe6\x01\x64\xbc\x34\x7e\x2c\xb9\x23\xa4\x6e\xde\xca\xf5\xde\x7a\x2b\x27\x9b\x4c\x44\x50\xe4\x92\xb7\xb9\xa8\x08\xb7\x68\x33\x2e\xf7\xab\xa6\xd9\x16\xdf\x0c\x65\x54\x76\x91\x6f\x8f\x8d\x5c\xcc\xb6\xd1\xef\x89\xcd\x48\x45\x65\x27\x83\x92\xd8\x34\x38\x3d\xf6\x8d\xfc\x50\xae\xa3\x9b\x63\x27\x5b\x15\xf7\x8c\xbe\x9c\x43\xe9\xf0\xcb\x58\xec\x19\x7f\x1b\x6b\xfa\x36\x8f\xed\xd3\x68\xac\xe9\xb2\x9b\x45\x99\xd7\x3b\x70\xf7\xbb\xdf\x6f\x46\xd7\xa5\xce\x7e\xf7\x04\x55\xf6\x1e\x57\xa7\xd4\xa5\x8e\x4e\xc8\x0f\x73\xf3\x3b\xe7\xe6\x7a\x87\x8f\xc5\x56\xb7\x55\x8f\x84\x76\x87\x77\x05\xf1\xe1\xae\x6d\x19\xe8\x09\x59\xd7\x40\xcf\x98\x75\x00\xf4\x8c\xa3\x40\x64\xbe\x15\x71\x1e\x50\xad\x09\x9c\x47\x0a\x6f\x11\xe6\x39\xd2\x8b\x5f\x25\xcc\x33\x66\x1d\xc0\x3c\x20\xa4\x79\x98\x47\x32\xad\x05\xf3\x48\xea\xce\x61\x1e\x21\xb9\x71\x98\x47\x32\xad\x01\xf3\x48\xda\x6f\x30\x8f\xbe\x92\x74\x07\xf3\x08\x69\xad\xc1\x3c\x92\x79\x2d\x98\x47\x52\x77\x0e\xf3\x08\xc9\xad\xc1\x3c\x92\x79\x0d\x98\x47\xd2\x76\x00\xf3\xe8\xe3\xf0\x7f\xf9\xf5\x89\x6a\x4f\x40\x8f\x59\x53\x6f\x52\x8c\x9d\xe1\xf3\x7a\xb8\x5b\x98\xd6\xcc\x1b\x15\xb7\xed\x9b\x76\xa0\x3d\xcd\x3c\x89\x7f\x7b\x3d\xfa\xf0\xfc\x62\xd5\xcc\x83\xf8\xe3\x67\x68\x59\x33\xef\x86\x5c\x39\xcf\xcf\xb2\x66\x5e\xe9\xf9\xe8\x7c\xb8\x79\x7e\xb6\xfd\xb9\x11\xdb\x3e\x8c\xae\xbb\x31\x6d\x46\xc4\x91\xc1\x81\xb6\xfd\xa5\x99\x57\xb1\x9c\xcb\xd1\x33\x59\x18\xdf\x34\x62\xd0\xf9\xfb\xcb\xcb\xb7\x57\x35\x17\xfb\x75\xfc\x3f\x84\x32\x9c\x69\xf8\x7f\xc8\x14\xfe\x9f\xdc\x3b\x0a\xff\x57\x78\x7d\x08\x1e\x70\x86\xb5\xbf\xb3\x03\xc8\x6f\x0f\x27\x57\x34\x8c\x44\xc7\xc8\x1c\x47\x34\x88\x28\x7f\x3a\x86\xc7\x15\x9d\xd5\xf9\xaa\x11\x49\x7f\x4d\xff\x73\x14\xfd\x07\xc2\x20\x49\xf4\x79\x35\x1e\xf9\x44\xcd\x98\xdc\xd0\xfd\x07\x37\xca\xe2\xc2\x29\xcf\xd1\x70\x5c\xef\xbb\xe1\xfb\xf3\x9b\xdf\xc7\x23\xb4\xe4\x2b\x0f\x6e\xa6\x7f\x04\xcc\x05\xf9\x6b\x96\xf5\xae\x08\x87\xe2\x6e\x89\x23\x46\x78\xdf\x88\xf9\xdc\x7c\x93\x27\xc4\x09\xda\x55\xf2\x9d\xe1\x08\x3e\x81\x95\x3d\x3b\xed\xa0\xf1\x59\x72\x1e\x9a\xe4\x8f\x98\xde\xf7\x8d\x7f\x99\xb7\x6f\xcd\xf3\x60\x15\x62\x4e\xa1\x34\x34\xc0\x52\x5f\x90\xf5\x0d\x67\xd4\x27\xee\x22\x4f\xaf\x53\x4a\xc1\xb9\x6f\xdc\x53\xf2\x10\x06\x11\xd7\x3a\x27\x5f\x4e\xd9\x77\x93\x17\x79\xcd\xe4\xe2\x67\x58\x2c\x28\xa7\xd8\x33\xd9\x0c\x7b\xa4\x7f\x62\xbd\x84\x59\xf5\x9d\x69\x8a\xc9\xe9\x8c\x26\x19\x5b\xb1\x7a\xa0\x88\x78\x09\xca\x16\xf1\x59\xcc\x11\x05\xae\x46\xfe\x8d\xe9\x73\x7c\x2f\xae\x2d\xf8\x25\xc8\x85\xcb\xe8\x7c\x62\x9a\x1b\xe4\x29\x15\x83\xd1\x04\x51\x7b\x75\xfa\xf8\xea\x54\xf2\x00\xdf\xbc\x4f\x7c\xf1\x91\x44\x8c\x06\xfe\x64\x92\xb3\x65\xf9\x07\xf3\xd5\xa9\x15\xfa\x0b\x03\xf1\xa7\x10\x2c\xbc\xc2\x57\xc6\x86\x04\x1c\x86\x1e\x31\x79\x10\xcf\x96\x66\x41\xda\xc9\xe9\xcb\x47\xf8\xa9\x24\x0f\xfa\x27\x02\x2b\x48\x39\x3b\x7b\x84\x9f\x6a\x52\xce\xce\xaa\x4a\x79\x7d\xfa\x08\x3f\xd5\xa4\xbc\x3e\xad\x2a\xe5\x0d\x78\xec\x4d\x45\x8f\xbd\xd9\xe2\x31\xc6\x9f\x3c\xc2\x96\x44\x14\x6c\x69\xf8\xc4\x14\xb7\xa1\xce\xdb\xc5\x1f\x6e\xdb\xc9\x76\x66\x89\x8e\xe9\xe4\xcc\x27\x5c\x6f\x1a\xb8\x4f\x9b\xf5\x26\x0f\xa0\xb2\xc7\x51\x69\xc1\x99\xdd\x33\x93\xc9\xa6\x7f\x99\xeb\xf2\x54\xc3\xaa\x57\x38\x5a\x50\x3f\x83\xd3\xcd\x97\xf9\x36\x93\x3c\x15\x9a\x82\xf1\xfd\x8d\xff\x3f\x20\x27\x8f\x43\xe8\x46\x98\xd8\x6e\x38\x59\x85\x1e\x5c\x6c\xfe\x67\x03\xc8\x92\x2b\x93\xdc\x80\x0d\x31\xdf\xd9\x2f\xb6\xfd\xf0\xf0\x60\x41\xc7\x08\x7e\xac\x59\xb0\xb2\xd3\x05\xc2\x06\x27\x12\xcc\x08\xb3\x05\x4b\xc6\xff\x3a\x5b\x85\xfd\x4d\x87\x19\x83\x7c\x3d\x11\xe0\xd0\xf2\x54\x95\xf8\x6a\xcb\x4d\x49\x6e\xc3\x45\x84\x5d\x22\xf7\xf5\x32\x37\xa5\x78\x79\xd3\x1a\xca\x36\xa9\x82\x82\xb2\xf4\xb5\x39\xd5\xa9\x1c\xbc\xcb\x35\xcc\x76\x19\x3d\xa1\xd9\x17\x4a\xb1\xc1\x24\x0b\x31\x15\xc8\xc4\x14\x96\xe0\x38\x44\xdb\x23\x9c\xfd\xff\x12\x6b\xf1\x5d\x3b\x5f\x28\x0d\x77\x4e\x69\xe9\xe7\x47\x89\x74\x3d\x32\x1b\x58\x8c\xbc\xd0\x62\xe6\x13\xf4\x83\x47\x7c\x64\x8d\x1e\xc5\x92\x4e\xfd\xc5\x8f\x12\x8b\x38\xf0\x44\x68\xbd\xeb\xda\x29\x46\xb6\xf1\x06\xf3\x39\xec\x5d\x5b\xbf\xe8\x78\x0d\xcb\x29\x13\x7f\xd0\x63\x3b\xa7\xc6\x40\x5a\x82\x78\x50\x72\xe6\x38\xc5\xb0\xab\x29\x50\x54\x38\xb8\xe8\x80\x8a\x6f\xd0\x42\xe8\x47\xbe\x1b\x06\x54\xcc\x8d\x42\x4e\x90\xe5\x9c\x40\x12\x24\x59\xa7\x26\x61\xbb\x99\x07\x18\x08\x69\x88\xe0\x59\xe9\x71\x93\x97\x8a\x2c\xd7\xb6\x3c\x87\x39\x78\xf0\x68\xa9\x8e\xb0\xa0\x6c\x84\x7b\x78\x73\xf5\x42\x25\xe3\x59\xf4\x4b\x07\xb3\x92\xb2\x8d\xa7\xf8\x9e\xe8\x43\x96\xc4\xa4\xdf\x81\x3c\xdd\xf9\x61\x7a\x8a\x7e\x87\xf2\x14\xef\x0c\x1f\xa2\x67\xd2\xef\x40\x9e\xf4\x40\x3d\x69\x05\x3d\x43\x76\x18\x4f\xd1\x6f\x9d\x27\x9b\xc1\xa4\xe5\xfa\xa6\xfb\x09\xdf\xe3\xb4\xd5\x18\xdc\xe3\x08\x89\x9c\x14\xf5\x73\x54\x7a\x32\xf9\x15\x86\x5c\x72\xfb\x10\x0e\xeb\x09\x2f\x62\xd1\xac\x7c\x33\xff\xc4\xec\x74\x07\xba\x79\xfb\xdb\x6f\xa3\xe1\x94\x42\xe3\x8a\xfa\xf6\x34\xf6\x5d\x8f\x58\xf0\xd1\xfa\xc4\xf2\x33\x51\xe0\x92\xdf\x48\x1a\xb3\x27\x6a\x34\xc5\x7a\x76\x9a\x00\xc0\x6a\x2a\x72\xf1\xff\x06\x00\x00\xff\xff\x73\x7f\x13\xe3\x1a\x68\x00\x00"

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 26650, mode: os.FileMode(420), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

