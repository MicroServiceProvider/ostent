// Code generated by go-bindata.
// sources:
// index.html
// DO NOT EDIT!

// +build bin

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5c\x6d\x73\xe2\xb6\xf6\x7f\xbf\x9f\x42\xf5\xb4\xd3\x6d\x27\x36\x9b\xa7\xfe\xf7\x9f\x1b\x72\x27\x1b\xd2\x96\xe9\x26\x61\x36\xa4\xf7\xf6\x76\x3a\x5d\x61\xcb\xa0\xc4\xd8\xbe\x96\x4c\x42\x19\xbe\xfb\x3d\x92\x1f\xb0\x8d\x0c\x36\x10\x42\x3a\xfb\x22\x89\x6d\x49\x47\xbf\xf3\xa0\xe3\xf3\x13\x22\xa7\x5f\xb5\x6e\x2e\xba\xbf\x75\x2e\xd1\x80\x0f\x9d\x37\x67\x93\xc9\xd7\x23\x74\xd2\x44\xc6\x0d\xe3\xc4\xe5\xbf\x92\x80\x51\xcf\x9d\x4e\x4f\x65\x33\x42\x67\xa7\x03\x82\x2d\xb8\x10\x97\x43\xc2\x31\x32\x07\x38\x60\x84\x37\xb5\x90\xdb\xfa\x7b\x2d\x6e\xe2\x94\x3b\x44\x5e\xc3\xdd\x64\x62\xb4\x30\xc7\xc6\xc0\x63\xdc\xc5\x43\x32\x9d\x22\x4f\x8a\x3f\x6d\xcc\xfa\xc5\xe2\x06\x9c\xfb\x3a\xf9\x6f\x48\x47\x4d\xed\xdf\xfa\xdd\xb9\x7e\xe1\x0d\x7d\xcc\x69\xcf\x21\x1a\x32\x3d\x57\x0c\x6b\x6a\xed\xcb\x26\xb1\xfa\x44\xcb\x8e\x14\x92\x9b\xda\x88\x92\x47\xdf\x0b\x78\xa6\xf3\x23\xb5\xf8\xa0\x69\x91\x11\x35\x89\x2e\x6f\xf6\x10\x75\x29\xa7\xd8\xd1\x99\x89\x1d\xd2\xdc\x37\xde\xc5\xa2\x26\x93\x9f\xbb\x57\x1f\x91\x76\xfa\x95\x36\x9d\xea\xfa\xef\xd4\x46\xed\xcb\x3f\xce\x4e\x1d\xea\x3e\xa0\x80\x38\x4d\x8d\x0d\x40\xba\x19\x72\x44\x61\x02\x0d\x0d\x02\x62\x37\xb5\x86\x8d\x47\xe2\xde\x80\x5f\x2a\x49\xbf\x13\xd7\xa2\xf6\x1f\xba\x9e\x95\x14\x09\x60\xf4\x2f\xc2\x9a\xda\xe1\xc1\xd3\xe1\x41\x2a\x4e\xb8\x61\x3a\x4d\xa4\xb2\xe4\x42\x3f\x3c\x30\x7c\xb7\xaf\x21\x3e\xf6\x41\x57\x3a\xc4\x7d\xd2\x10\x0f\x62\x3b\xcc\x64\x63\xdf\x77\x88\xce\xbd\xd0\x1c\xe8\xb9\x79\xf6\x0f\xde\x3d\xc1\xcf\xd2\x99\xa0\x8f\x51\x53\xf2\xd1\xd1\x13\xfc\x2c\x97\x7c\x74\x54\x57\xf2\xf1\xc1\x13\xfc\x2c\x97\x7c\x7c\x50\x57\xf2\x7b\xb0\xc6\xfb\x0a\xd6\x78\x5f\x62\x0d\xc6\xc7\x0e\x61\x03\x42\x78\xe2\x14\x4e\x9e\x78\xc3\x64\xac\x28\x13\x1e\x35\xa8\x6b\x91\x27\x43\x34\xc6\x82\x1a\xf1\x6a\x3a\x3b\xed\x79\xd6\x38\x7e\x68\xd1\x11\x32\x1d\xcc\x00\x1f\xf7\x7c\xbd\x87\x03\x2d\x59\x49\x8a\x36\xdd\x21\x36\x4f\x3a\x88\x2e\xa1\x93\xf4\x18\x12\x37\x9c\xb5\x44\xc0\x33\xb7\x72\x35\x1f\x24\x9d\x07\x47\x68\x88\x83\x3e\x75\xf5\x9e\xc7\xb9\x37\xd4\xdf\x69\xb9\xbe\xa2\x37\xf3\xb1\x9b\xf4\x0f\x7d\x0b\x73\x02\x6a\xc2\x1f\xac\x5b\xc4\xa6\x2e\x68\x1f\xfd\xfd\x33\x59\xe9\x45\x11\x72\x5d\x70\x32\xf4\x1d\x18\x8b\xe2\xde\xec\xe4\xa4\x38\x0c\x19\x90\x72\x1a\x62\xba\x22\x06\x74\xca\x86\xd8\x71\x54\x72\x8d\x16\x65\x3c\xa0\x3d\x39\x54\xd1\x49\x98\xfb\xa0\xa0\x7f\x23\x67\x11\xb8\x0f\x9d\x8c\x29\x1b\x60\xee\x45\xa6\x0f\x68\x7f\xb0\xba\xed\x71\xda\x37\xb2\xfb\x3b\xd4\x0b\xc1\xf2\x2e\x62\x04\x62\xce\xc2\xc1\x18\x0d\x3c\xc7\xf1\x1e\x93\x50\x12\xb9\x91\x9d\x34\x1a\x8f\x8f\x8f\x06\x58\x2a\x80\x1f\xc3\xf4\x86\x8d\x28\x99\x36\x20\x20\x09\x66\x84\x35\x84\x71\x19\xff\xa7\x39\xf4\x9b\x51\xf0\xcd\x79\x32\x49\xbf\x78\x75\x73\xa4\x37\x39\xcb\xf4\x03\x6a\xe9\x3d\xc7\x33\x1f\x94\x31\x3b\x6b\x46\x6c\x10\xc0\x2a\xca\x1a\x2f\x1b\x5d\xa6\xe7\xe4\xac\x17\xfa\x85\x70\x98\xeb\x8e\x16\x06\x64\xe8\x73\x2a\xe2\x4a\xae\x57\x78\x25\x0c\x28\x27\x3a\x48\x30\xc9\x09\xf2\x83\x5c\x9c\x2e\x8c\xd0\x44\xce\x7c\x7c\x2e\xc6\xef\xe0\xf5\xf0\x3b\x1e\xb6\xf0\xa8\x5f\x19\x67\xd2\x5f\x09\xb4\xc4\x8f\x10\x2b\xbe\x7c\xf7\xcb\x97\xb5\x8f\x03\x3c\x64\x30\x5a\xed\x3e\x1f\x5b\x16\x75\xfb\xba\x58\x0a\xef\x8e\x7f\x50\x7a\xdb\x81\xb8\x26\xfa\x3e\x44\x2f\xe4\x94\xc0\x22\x81\xe8\xad\x55\x58\x5f\x60\x8e\x70\xe8\xa2\x78\xfc\xfe\x62\xd3\x80\x6e\xc4\x19\x92\x61\x46\xf0\x22\xcb\xa4\xdd\x23\xd3\xd4\x09\xe9\x5d\x53\xda\xb2\xeb\xe8\x0c\xbd\x5f\xbf\xca\xa6\x1f\xd6\xd1\x59\x74\x7f\xfd\x4a\xd3\x5a\x7e\xa6\x7f\x07\x3f\xfb\xac\x8e\xca\xd0\x7b\xa1\xca\xcc\x0c\xa8\xcf\xb3\x05\xda\x3d\x1e\xe1\xe8\x69\xaa\xe9\x08\x07\x48\x64\x3e\xd4\x44\x31\x61\x99\x4e\xff\x01\xb9\x53\xf6\xaa\x22\xa8\x48\x85\x10\x0b\xcc\x59\xfd\x77\xcf\xe0\x0a\xe8\x84\xd1\x3d\xff\xe9\xa7\xcb\x56\x8f\x02\xab\x1a\x52\xb7\xd1\x0b\x5d\xcb\x21\x06\x5c\x1a\xf7\x6c\x32\x21\x0e\x03\x7e\x04\x23\x93\x06\xf9\xd0\xb5\x66\x2f\xf1\xb3\x02\xa6\x46\x5c\x3a\x8a\xf2\x26\xe6\x70\x8d\xef\xdf\x7c\xdf\x98\x4e\x27\x93\xc8\x48\x19\xab\x61\x51\xba\xfe\xd9\xc3\x40\x9e\x64\xdd\x08\x46\xc3\x51\x75\x01\x3a\xff\x0c\x7f\x81\x9b\x4d\x26\xd2\x6d\xd3\xa9\x78\x76\x11\x5d\x22\xcf\xbd\x70\xa8\xf9\xd0\x9c\xf0\x01\x65\xc6\x00\x0b\x6c\xf2\xc9\x14\xa1\x37\x51\xf9\xf5\x41\x48\x95\xe3\x8d\x2e\x98\x46\xf8\x03\x0b\x34\x12\x7d\x45\x50\x51\x45\xb5\x49\x54\x11\x14\x34\xc3\x57\x19\xd5\x48\xc0\xca\x63\xf9\x08\x4f\x54\x78\xc4\xf3\x1a\x98\x44\xf7\xd8\x44\xb2\x0a\xc8\xeb\x86\x03\xc2\x63\x61\x89\x8b\xe3\x17\xf8\x59\x55\xec\xc5\x7a\x7a\xa6\x84\xd6\xd0\x32\xd3\x69\xd4\x1d\x80\xcd\xb9\x0e\x2b\xd4\x0b\x34\x04\x4d\x5d\xc1\xc8\x3b\xd0\x95\x3e\x11\x0b\x69\x89\x08\xa4\xa1\x22\x89\x7f\xa3\xa4\xf6\x35\x21\x26\x85\x4a\x6c\x8a\xac\xcc\xb8\x29\x2d\x60\x6a\x48\x4d\x93\xbf\xe8\x54\x56\xd5\xbc\x49\xb2\xd4\x64\x22\xcd\xdd\xf1\x18\xe5\x74\x44\xd0\xd7\xbe\x71\xd1\xb9\x73\x41\x79\x6a\x41\x95\x38\xf0\x1e\xc5\x85\x86\x04\xf7\x7f\x9c\xdd\xa7\xee\x51\x67\x54\x88\xea\xbe\xab\xdf\x87\x8c\x53\x7b\x3c\x5b\xbc\x83\xfd\x94\x71\x1d\x96\x33\x2e\xc1\x0e\xca\xdd\x34\x99\x88\x20\xec\x02\xd0\x04\xeb\x34\x0a\xae\x74\x38\x3c\x2b\x86\x96\x96\x00\xd7\x25\xfa\x7c\xe5\x6f\x18\xc6\x1c\xdf\x3a\xcb\xf2\x03\x91\x5d\xf6\x55\xb9\x3d\x95\x2a\x2e\xd0\xe0\x29\x56\x26\x56\x9f\x11\xc7\xd6\x6d\x87\x3c\xe9\xe0\x3a\x44\x9e\x60\x06\xab\x9c\x30\x21\x1b\x7c\xce\x8b\xb4\x4a\x49\x9e\x32\x08\xa8\xeb\x87\x5c\xef\x07\x5e\xe8\x2f\xa7\xb0\xea\x71\xba\x83\x7b\xc4\x41\x92\x35\x22\x91\xd7\x75\xd7\x7b\x0c\xb0\xaf\xe0\xaf\x16\x71\xf0\xf8\x04\x89\xb0\x12\x96\xb7\xf2\xaf\x9d\xa5\x13\x45\x14\xaf\x2a\x2f\x2e\xa6\x6b\xf4\x91\x30\xd6\x9a\xf9\x1d\x16\x68\xc2\x19\xe7\xa0\x6f\x0b\x58\xe4\x2d\x74\xe5\x05\x64\x4d\x64\x73\x0f\xe7\x09\xe9\xee\xc4\x41\xe0\x3d\xb2\x59\x18\xb8\xc6\x79\x8f\x41\x95\xc3\xc9\xf6\xe3\xe1\x3a\x93\x07\x0a\x56\x67\xa1\x69\x42\x8f\x97\x8e\x8b\x0d\x21\xac\x10\x1f\xd5\x36\x2c\x1a\x8a\xec\x7f\xed\xb9\xff\x21\x81\x37\x83\x29\xf6\x92\x7c\x91\xf5\xab\x24\x7b\x2e\x36\xf2\x66\x49\xbe\xc8\xed\xa5\xae\xfa\x7e\xae\x56\xce\x64\xdb\x32\xa9\xc2\x1a\xc8\xf5\xa0\xdc\xf3\x1c\x67\xc1\x56\x49\x22\x3f\xb2\xe2\x7c\xfa\x44\x77\x8c\x04\xdf\x2c\xdd\x81\x58\x26\xe5\x76\xcc\xd6\x17\xf2\x2f\x4c\xf9\xfa\x52\xda\x50\x54\xad\x2d\xa5\xfa\xc6\x88\xa8\xdb\x65\xfd\x00\x35\x85\x28\x29\x02\xec\xf6\xa1\x4e\x80\xbb\x59\x69\x01\x37\x50\xd8\x31\x2e\xda\xef\xd9\x13\xfa\x1c\x15\x80\xe2\xd1\x5b\xd1\xe1\x3b\x63\x88\xfd\xb7\x76\xe8\x9a\x9c\x7a\xee\x5b\x31\x78\x0f\xd1\xef\xd0\x04\x41\xbd\x17\x06\xee\xe7\xb2\xbd\x96\xa5\x61\x95\xd1\x4f\x9d\xb4\xc4\xd6\x8e\x80\x77\x5d\xd8\x0c\x4a\x16\xc0\x2f\x64\x8c\x34\xe8\xa0\x43\x52\xeb\x8d\xf5\x6b\x0d\x25\xdd\xb3\xf5\x43\xdd\xc0\x5c\x66\xfd\x62\x7d\x22\x34\xb2\x28\x83\x94\x32\x8e\xa7\xe9\xf5\xf5\x90\x11\xdf\x84\x81\x92\x29\x46\x37\xcd\x58\x1b\x11\xd4\x1d\x93\xc7\x2b\x73\x16\x1b\xc5\xe6\x62\x9c\xa8\x3c\xbf\x4d\xdc\xb0\x8c\x16\xc0\x4e\x5a\x77\x0d\xb5\x58\xb7\x0b\x60\xa7\xcd\x2f\x88\x5b\xa7\xee\x88\x00\x03\x57\xe2\x17\x19\x63\x01\xfe\xb4\xb9\x2e\x7e\xb9\x0e\x81\x56\x3c\x38\x82\x89\x14\x2b\x5c\xb9\xf6\xa2\x6c\x70\xcf\xe2\xb7\xa4\x71\x9b\x74\x7f\x3b\x81\x32\xfe\x04\xd1\x3d\x04\x52\x4e\xd0\xb7\x31\x88\x6f\xf7\xd0\x80\x08\x4b\x9c\xa0\xc3\xe3\x3d\x04\xc3\x70\xe8\xf0\x5b\xdf\xe3\x50\x71\xf0\x20\x24\xd3\xef\xa6\x9f\xeb\xec\xeb\x4a\x00\xd1\xa0\x94\x43\xc9\x3f\xb3\x37\xa1\xbc\xa8\xcb\xb0\x2c\x7b\x65\x82\xd5\xb2\x5f\x0d\xbf\x02\xa8\x45\x7a\xd5\xa2\xec\x01\x85\x0c\xf7\xc9\x17\x96\xf5\xec\x2c\xab\x65\xbf\x20\xc9\x82\xc9\x77\x93\x63\xad\x06\xec\xb5\x52\x2c\x58\x83\x3b\xc0\xb0\x64\xd2\xda\x65\x82\xb5\x1e\xc0\x6d\xf1\x2b\x89\xf2\x79\xe9\x95\xda\x76\xd1\x8e\x2e\xfa\x55\x9e\xdf\x48\x2c\xf6\x80\xf6\x91\xd6\x92\xa7\x83\x34\x65\x7d\xbc\x3e\x2f\xcb\x73\x97\x5a\xd8\x0e\x90\x76\xe5\x85\x2e\x27\x56\x11\xdc\x2a\xb4\xa9\xd6\xd4\x3f\x20\xad\xeb\x71\xec\x6c\x7d\xe2\x63\xa4\x41\xf1\xbe\x7d\x85\x0f\x91\x76\x3e\xc2\x74\xfb\x0a\x1f\x49\x85\xbf\xa9\x30\xef\xba\xfc\x15\x2a\xe7\x87\x3b\x51\xb7\x64\x58\xac\x65\xcf\xca\xb7\xb4\xbd\x16\x95\xb5\xec\x8d\x32\x59\x0f\xaa\x78\x5b\x9c\x7b\xc9\x11\x58\xcb\x36\x60\x95\x5e\xc7\x1f\x32\x94\xb1\x58\xcb\x8e\x49\xac\x45\x83\xe8\x28\x91\x1c\x48\x83\x68\xe0\x3a\x7c\xb6\x02\xce\x98\x50\x64\x67\xac\x17\x49\x51\x86\x5e\x4c\x86\x92\x52\x2e\x14\xbd\x34\x24\x8f\x50\x36\xb5\xb6\xeb\x59\x04\xf2\xbc\x5c\xb1\xf3\x1c\x07\x20\x45\x3d\x14\x07\xab\x92\x0e\x72\xb5\x6f\x1d\x71\x28\x96\xba\x1a\xb0\x68\x5a\x80\xf7\x4e\xd5\xfc\xdc\x70\xed\x80\x14\xcb\xfa\x04\xae\x68\x5a\x00\x57\xe6\x96\x25\x78\xab\xee\xe8\xd4\x65\xf4\xa8\xc0\x88\x23\xeb\x29\xf8\x70\x35\x87\x7d\x33\x57\xed\x65\x5c\x56\x42\xa3\x73\x7e\x7b\x71\xaa\x1d\x61\xc8\x31\xed\x5d\x61\xd5\x74\x75\x56\xdd\x7e\x3d\xac\xba\x3d\xcf\xaa\xdb\x50\xe6\x04\x36\x86\x7a\xf5\x0b\xab\x7e\x76\x56\xdd\x7e\x49\x56\xdd\xde\x55\x56\xbd\x1a\xb0\xd7\xca\xaa\xdb\x3b\xc1\xaa\xdb\xbb\xce\xaa\xd7\x03\xb8\x2d\x56\xdd\x7e\x7e\x56\x9d\x26\xe8\xed\x7e\x7a\xd9\xee\x54\xac\xf1\x0e\xca\xea\xa6\xa4\x82\xf9\x40\x39\x43\x6d\xb7\x71\x13\x72\xe4\x93\x20\x3e\x69\x5f\x98\xed\x06\x9d\x16\x16\x6b\xef\xb4\x91\x73\x98\xcf\x36\x05\xa8\x83\xcd\x07\xb2\x1c\x53\xda\xed\x06\x6d\x6e\xee\x56\xe0\xf9\x6c\xef\x32\x08\xbc\x60\x29\x80\x8f\x1e\x2b\x9b\x7d\x39\xe9\xa4\x36\xb6\xac\x80\x65\x28\x27\xcd\x50\xce\xb8\xb5\x16\xe1\xa4\xf6\x73\xb3\x4d\x6a\x1b\xcb\xa8\x26\x4d\xa8\x66\xcc\x33\xd3\x21\x1b\x25\x99\x19\xff\x29\xf9\x66\x84\xb5\xdd\xa9\x4c\x84\x4a\xe3\x22\xe7\x70\x15\x0f\x50\x31\x85\x38\x96\x24\x75\x44\x1f\x7e\xeb\x5e\xde\x42\x28\xa1\xa1\x67\x85\x8e\x87\x8e\x7e\x9a\x7b\x7f\x45\x70\x3f\x8c\x39\x61\x6d\x57\xf9\x25\x9f\xb3\x46\xa9\x64\x11\xa1\x95\x44\x43\x47\xb5\x6c\x05\x39\xcb\xcd\xf6\xa1\xdd\x95\x0a\xa8\xd7\x41\x3a\x49\x8b\x38\x1c\x8b\x64\xa2\xd4\xa1\xa0\x81\x94\x59\xbe\xb8\xe6\x85\xaa\xd1\x57\xe0\x46\xcf\xed\x5f\x3f\xcd\x56\x4b\xdd\x10\x67\xac\x3a\x3e\x4e\xa4\x57\xf1\x72\x2c\x7e\x65\x3f\xcf\xf2\x6e\x25\xaf\x2c\xd2\xa6\xa0\x4b\x27\xa3\x45\x0d\xd1\x2f\xe5\xf3\xbc\x0b\x2c\xf9\x4a\x20\xd1\x2b\xa1\xc4\x07\xaa\xc0\x90\xe3\xaa\x84\x85\x7c\xe7\x94\x05\x45\xc2\xfa\x92\xca\xe6\x9a\x3a\x28\x1d\x24\xec\xa9\x15\x0a\x9b\x9c\x13\xd6\x14\xa8\x52\xa8\x4a\x24\x26\xb2\xd4\x2a\xed\x29\x8c\x45\x92\x37\xee\x52\xd9\xd1\xbb\xb9\xce\x1a\x8a\x65\x57\x01\x1e\x09\xaf\xbf\x82\x62\x73\x9e\x3b\x4e\x54\x79\x26\x81\x1c\xbb\xb6\xf0\x40\x20\x49\x9f\x24\xfa\x14\x9f\x48\x57\xc4\x01\xa9\xde\x90\xca\x96\x2c\x8b\x16\x6d\x7e\x6d\xad\x16\x6d\x39\xec\x1b\x0b\xb9\x32\xa9\x79\xd5\x16\x65\x0d\x85\x6e\x15\xe3\x2e\xad\xf1\x2a\xca\xae\x13\x77\x97\xb3\x88\xab\x23\xbc\x46\xdc\xbd\xfc\x8e\x9c\xf8\xba\xe0\xaa\x5b\x72\x57\x64\xf8\x6a\xf6\xe4\x04\xd6\xe2\xa6\x1c\x3c\xf3\x82\xf1\x97\x0d\xb9\x67\xdf\x90\x03\x43\xbf\xe0\x8e\x9c\x98\x7d\x37\xb7\xe4\x56\x44\xf6\x5a\xf7\xe4\xc4\x1a\xdc\x81\x4d\xb9\x28\x6d\xed\xf2\xae\xdc\x9a\x08\xb7\xb5\x2d\x17\xc1\xfc\x3b\x7d\x99\x40\x56\x9a\x6b\x1f\x90\x10\x1f\xde\xae\x2d\xe4\xc7\x80\x90\x4d\x20\x59\xfa\x55\x82\x75\xcf\x5d\x0c\xe5\x5b\x34\xb3\x03\x06\x0f\x66\xb5\x44\xd4\x5a\x6b\x07\x0c\x86\x6c\xe8\xcc\x45\x7e\xdf\x0b\xe4\x1a\xbf\x50\xb7\xf8\xb9\x7a\x6e\xe3\x0b\xfa\xc4\x3b\x5f\x0f\xd0\x53\x43\x99\x41\x9b\xdf\xfa\x9a\x3b\x5c\x21\x26\x5b\xe9\xa4\x42\xb9\xb8\x55\x0e\x12\x94\x4b\xfb\x51\x75\x0c\xe0\xf9\x0e\xeb\x17\x3f\xda\x8f\x15\x2a\x39\xeb\x9e\x6d\xfd\xf2\xf9\x7b\xd9\x7f\x13\x58\xb5\xd8\xef\xb0\x57\x53\xeb\x03\xd4\x62\xa9\xdf\x09\x3c\xf1\xfa\xfc\xf2\xf1\xfb\x16\xaa\xfd\x0e\x7b\xc1\x62\x1f\x26\xdf\xcd\x5a\x7f\x35\x60\xaf\xb5\xd4\x87\x25\xb8\x03\x95\xbe\xcc\x59\xbb\x5c\xe8\xaf\x07\x70\x5b\x75\xbe\x44\xf9\x0c\x65\xbe\xb2\x46\xa8\x7e\xbe\xbd\xc3\xe4\xf9\xf6\x4e\xbb\xb5\xd2\xe1\xf6\x92\xef\x93\x3e\xdf\x71\x68\x81\xf7\x00\x69\x77\xf3\x78\x2b\x95\xb0\xb5\xe7\x3a\x84\xb9\x6e\x2f\x3f\x6d\xf5\xc8\xb7\x98\xf7\x08\x7c\xb2\xfd\x59\x8f\x91\x76\xdd\xde\xfa\xac\x3f\x20\xed\xd7\xf6\xa7\xee\xd6\xe7\xfd\x3f\xa4\x7d\xba\xbc\xad\x3d\xad\x49\xc4\x31\x97\x35\xe6\x7d\x8f\xb4\x6e\xfb\xea\x72\x3b\x01\xfc\xff\x48\xbb\xb8\xb9\xba\x3a\xbf\x56\x2e\x98\xe5\xcc\xd4\x87\xa2\x2f\x7b\x34\xc3\x67\x99\xb2\x57\xb4\xd5\xa2\xa5\x3e\xdb\xf0\x17\xda\xf3\xec\xd4\x67\x06\x64\xb2\x45\xdc\xd4\x67\x31\x35\xf5\xa9\x60\xa6\xc9\x80\x2d\xf0\x52\x98\xea\x6e\x0e\x5b\x0d\x9f\x4b\x01\x8c\x04\x9b\x21\xa2\x42\xf1\x80\x7a\x50\xfe\x8f\x37\x26\xf0\x9a\x9a\xb5\xbf\xd0\x50\x2a\xec\x96\xfe\xb5\x39\x61\x9f\x08\x83\x17\xae\x3b\xff\x91\xd2\x4a\x4b\x5d\x48\xec\xd2\x4a\x5f\xde\x50\x90\xe0\xc4\x58\xea\x6f\x7f\x6c\x93\xcd\xc6\xff\xac\x54\xf1\xaf\xb5\xa2\x96\xb9\xff\xac\xf5\xbf\x00\x00\x00\xff\xff\x8e\x2a\x62\x7c\x0e\x5c\x00\x00"

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 23566, mode: os.FileMode(420), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

