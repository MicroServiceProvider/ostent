// Code generated by go-bindata.
// sources:
// index.html
// DO NOT EDIT!

// +build bin

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd4\x5c\x6d\x73\xdb\x36\xf2\x7f\x9f\x4f\x81\x72\xd2\xff\xb4\x9d\x92\x8a\x1d\xbb\xff\x5c\x2a\xf9\xc6\xb1\xdc\x56\xd3\xd8\xd6\x38\x72\xef\x7a\x9d\x4e\x0b\x91\x90\x85\x98\x22\x79\x04\x28\xdb\xd5\xe8\xbb\xdf\xe2\x81\x8f\x22\x25\x92\x66\x5c\xe5\x85\x23\x12\xc0\x2e\x76\x17\xfb\xf0\x03\x48\xa6\xff\xc5\xf0\xea\x6c\xf2\xeb\xf8\x1c\xcd\xf9\xc2\x7d\x71\xb2\x5a\xbd\x5c\xa2\xb7\x03\x64\x5d\x31\x4e\x3c\xfe\x0b\x09\x19\xf5\xbd\xf5\xba\x2f\xbb\x11\x3a\xe9\xcf\x09\x76\xe0\x42\x5c\x2e\x08\xc7\xc8\x9e\xe3\x90\x11\x3e\x30\x22\x3e\x33\xdf\x18\xba\x8b\x53\xee\x12\x79\x0d\x77\xab\x95\x35\xc4\x1c\x5b\x73\x9f\x71\x0f\x2f\xc8\x7a\x8d\x7c\xc9\xbe\xdf\x4b\xc7\x69\x76\x73\xce\x03\x93\xfc\x37\xa2\xcb\x81\xf1\x6f\xf3\xe6\xd4\x3c\xf3\x17\x01\xe6\x74\xea\x12\x03\xd9\xbe\x27\xc8\x06\xc6\xe8\x7c\x40\x9c\x5b\x62\x64\x29\x05\xe7\x81\xb1\xa4\xe4\x3e\xf0\x43\x9e\x19\x7c\x4f\x1d\x3e\x1f\x38\x64\x49\x6d\x62\xca\x9b\x6f\x11\xf5\x28\xa7\xd8\x35\x99\x8d\x5d\x32\x38\xb0\x5e\x69\x56\xab\xd5\x4f\x93\x8b\xf7\xc8\xe8\x7f\x61\xac\xd7\xa6\xf9\x1b\x9d\xa1\xd1\xf9\xef\x27\x7d\x97\x7a\x77\x28\x24\xee\xc0\x60\x73\xe0\x6e\x47\x1c\x51\x98\xc0\x40\xf3\x90\xcc\x06\x46\x6f\x86\x97\xe2\xde\x82\x7f\xca\x38\xfd\x46\x3c\x87\xce\x7e\x37\xcd\x2c\x27\xc5\x80\xd1\xbf\x08\x1b\x18\xaf\x0f\x1f\x5e\x1f\x26\xec\xc4\x32\xac\xd7\x31\x57\x16\x5f\x98\xaf\x0f\xad\xc0\xbb\x35\x10\x7f\x0c\x40\x57\xba\xc0\xb7\xa4\x27\x1a\xb4\x1d\x52\xde\x38\x08\x5c\x62\x72\x3f\xb2\xe7\x66\x6e\x9e\x83\xc3\x57\x0f\xf0\xb7\x73\x26\x18\x63\x35\xe4\x7c\x74\xf4\x00\x7f\xbb\x39\x1f\x1d\x35\xe5\x7c\x7c\xf8\x00\x7f\xbb\x39\x1f\x1f\x36\xe5\xfc\x06\xac\xf1\xa6\x86\x35\xde\x54\x58\x83\xf1\x47\x97\xb0\x39\x21\x3c\x5e\x14\x4e\x1e\x78\xcf\x66\xac\xc8\x13\x9a\x7a\xd4\x73\xc8\x83\x25\x3a\x35\xa3\x9e\x8e\xa6\x93\xfe\xd4\x77\x1e\x75\xa3\x43\x97\xc8\x76\x31\x03\xf9\xb8\x1f\x98\x53\x1c\x1a\x71\x24\x65\xfb\x42\xff\x3e\x6e\x2f\xa7\x32\x5d\x32\xe3\xe9\x10\x31\x28\x72\xe3\x31\x0b\xe2\x45\xd9\x3e\xa5\x56\xdc\xeb\xe2\xf0\x96\x98\x07\x28\x0a\x1c\xcc\x09\xe8\x02\x3f\xd8\x74\xc8\x8c\x7a\xa0\xa2\xfa\xfd\x23\x0e\xe7\x3c\x1b\xe9\xfa\x9c\x2c\x02\x17\x28\x91\x1e\xcb\xde\xbe\x2d\x12\x21\x0b\xb2\x4a\xcf\xa5\x1b\x32\x14\xb9\xf5\x71\x2c\xd5\x34\xe2\xdc\xf7\x10\x23\xb0\x24\x0e\x0e\x1f\xd1\xdc\x77\x5d\xb0\x82\xb6\xb4\x48\x1d\xec\x6d\xaf\x77\x7f\x7f\x6f\xc1\x2c\x21\xfc\x59\xb6\xbf\xe8\xa9\x5c\xd3\x83\xf5\x22\x98\x11\xd6\x13\x82\x31\xfe\x4f\x7b\x11\x0c\xd4\xda\x14\x15\x80\x49\xe3\xfc\x84\x37\xa4\xa9\x25\x72\xde\xce\xe0\x6d\x60\x8e\x0d\x3b\x95\xd2\xaa\x66\xdb\x77\x48\x49\x87\x14\x0c\x89\x74\x4a\x41\x3f\x3a\x15\x16\xac\x18\xba\x29\x68\xcb\x09\xa3\xe0\xff\xbc\x29\x0b\xbe\xef\xb3\x00\x7b\xb1\x56\x5b\xfd\x22\x0a\x38\xdd\xf4\x8a\x84\xe1\x36\xef\xd0\xa4\xca\x37\xc4\x84\xe5\x32\x7d\x7a\xad\x5d\xdc\x54\x6b\xd7\xc7\x0e\x5e\xde\xb6\x52\x3b\xa6\xed\x5c\xef\x5e\xe4\xd6\x70\xe0\xfc\x28\xb8\x87\x5c\xf2\xa2\xf4\x36\x73\x53\x95\x8b\x72\xed\xb6\xef\x46\x0b\x8f\x21\x9d\x4f\x0e\xf4\x85\x3f\x9b\x01\x64\x30\x0f\x2a\xf2\x17\x70\x43\x6c\x81\x5d\x28\xcf\x1c\xdb\x77\x51\x90\x4f\x62\x25\xfc\xd9\x3c\x14\x29\x39\xc0\x8e\x43\xbd\x5b\x53\x24\xc0\x57\xc7\xdf\x6d\x4f\x5f\x60\x65\xe2\x2e\xc8\xa2\x90\x05\xb7\xad\x53\x42\xa2\x16\x2a\x6b\xa6\xae\x05\x73\x66\x4d\xe5\x02\x8a\x4f\x2f\x96\x1d\x14\xab\xc6\x4e\xb9\x04\xc9\xa7\x17\x8c\x36\xb6\x17\x7d\x0e\x7b\x05\xac\xa9\x58\x40\x51\x2e\x56\xcd\xa8\x64\x76\x48\x03\x9e\x05\x23\x1f\xf1\x12\xab\xd6\x24\x46\x97\x38\x44\x02\x92\xa3\x01\xd2\xe0\x7c\xbd\xfe\x1e\x32\x8f\x1c\x55\x87\x51\x11\xf6\x23\x16\xda\x29\xd6\xf9\xc8\xe0\x0a\xa0\xb3\x35\x39\xfd\xf1\xc7\xf3\xe1\x94\xc2\x0e\x62\x41\xbd\xde\x34\xf2\x1c\x97\x58\x70\x69\x7d\x64\xab\x15\x71\x19\xec\x05\x80\x32\xee\x90\x8d\x9e\x93\x56\xe4\x93\x82\x4c\x3d\x0d\x93\x04\x72\xd2\xfb\x95\xde\x37\x2f\xbe\xe9\xad\xd7\xab\x95\x32\x62\xc6\xaa\x58\xc0\xb4\x3f\xa6\x18\x36\x0a\x12\x09\x81\x51\xb1\x82\x0a\xa0\xf3\x4f\xf0\x0b\xfb\x90\xd5\x4a\xae\xf4\x7a\x2d\xda\xce\xd4\x25\xf2\xbd\x33\x97\xda\x77\x83\x15\x9f\x53\x66\xcd\xb1\x90\x4d\xb6\xac\x11\x7a\xa1\xf6\x33\xef\x04\x57\x49\x6f\x4d\xc0\x34\x62\xbd\xb0\x90\x46\x4a\x5f\x53\xa8\x90\xde\xce\xbb\x95\x4a\x89\x82\x52\xf9\xea\x4a\x55\x04\x67\x52\xa8\x54\x0a\xc3\x76\x69\x70\x90\x02\x70\x03\x16\x63\xb5\x9a\x88\xbd\xdb\x18\x5a\xe8\x03\x71\x90\x11\x13\x23\xf0\xdf\xc2\x76\xef\x45\xe9\x26\xb0\xa1\x70\x71\x91\x04\x42\x5d\x21\x13\x9e\xba\x2b\x29\x9e\x0d\xb8\x26\x29\x4a\x0c\x7a\x19\xc8\xbd\xaf\xe4\x19\xe0\x10\x2f\x40\xf9\xbe\x0a\x2d\x89\xe9\x56\x2b\xb9\x18\x63\x9f\xc1\xee\x71\x49\xd0\xcb\xc0\x3a\x1b\xdf\x78\xc8\xf0\x7c\x73\x1a\xb9\xae\xd8\x05\x18\x1c\x4f\x19\x70\x53\x39\x41\xdc\x24\x9b\x86\x04\x9f\x43\xa3\x29\x77\xbe\xba\xcc\xa5\x0d\xa9\xe3\x0b\xfb\x0b\x77\x98\xc0\x2c\xf1\x44\xd2\x92\xf1\x80\xf9\x71\x82\x31\xa1\xa8\x52\xcf\x9c\xfa\x00\x8f\x17\xe6\xab\x5c\xb5\x04\x32\x88\x95\xe3\x6c\xe2\xc0\x69\x70\x69\x28\x10\x43\x00\x95\xfb\x2a\xb5\xd4\xca\x99\x7a\x67\x6d\x68\x71\xb6\x9b\x66\x4e\x1d\x00\x74\x46\x80\x41\x44\xd8\xc7\x03\x7e\x2f\x64\x51\x23\xd1\x2a\x6b\xa3\x25\x09\x39\x85\xcd\xb9\x09\x01\x73\xeb\x89\xb1\x48\xab\x29\x62\xd9\x3c\x08\xb3\x85\x1b\xb6\x4f\x59\x9d\x87\xc4\xc5\x8f\x1a\xbf\xf5\xa6\x99\x51\x59\x30\x27\x43\x30\xdd\x4b\xe4\x8c\x26\x3c\x41\x88\xef\x6c\xc0\xb1\x93\x98\x6d\x02\xa2\x72\xe0\x32\x57\x3c\xd4\x76\xc5\xbc\x0d\xfd\x28\x11\xbe\x74\x8d\x4a\x6b\x42\x31\x7b\xa1\xf7\x84\xb1\x61\xea\x0c\x10\x71\x55\xfb\x21\xe1\xca\xdb\x39\xaa\xd4\x83\x2e\xfc\x90\xd4\x65\xb9\x51\x7f\x72\x16\xa8\x5e\xb6\xca\x55\x52\x96\xbc\xf6\xef\x59\x17\x4b\xe5\x59\xa7\x53\x06\xd5\x9a\x93\x7d\x5b\xb3\xcb\x4c\x00\x77\xb4\x66\x75\x59\x6e\x5b\xb3\x18\xf4\x9f\xf4\x21\xa6\x21\x13\xe9\x00\xbe\xf4\xbd\xff\x90\xd0\xcf\xc4\xaf\x0f\x6b\x8a\x66\x90\xdd\x36\xec\xa1\x83\x3b\x13\xbf\x3c\x39\x1d\xd4\xf7\x61\x0e\xc2\xf0\x79\x71\xe7\x91\x6b\x11\x03\x92\x1c\x09\xa5\xcc\x54\x2a\xe7\x69\x6e\x18\x09\xdb\xd0\x7d\x78\x64\x6d\xc8\xfe\x85\x29\x6f\x43\x37\x82\xea\xbc\x41\xd7\xcb\xd8\x43\x2a\x9f\x5a\x0b\x98\x26\x47\x40\xf2\x5e\x01\x28\x59\x8a\xa0\x3c\x09\xf7\x08\xb1\x07\x61\xf0\x12\xee\xd2\x2a\x05\x37\xd6\x7b\xca\xb8\xe8\xff\xc8\x1e\xd0\x9f\x0a\x1d\x88\xa6\xaf\xc4\x80\xaf\xad\x05\x0e\xbe\x9a\x45\x9e\x2d\x52\xef\x57\x82\xf8\x6b\xb4\x42\x21\xe1\x51\xe8\xfd\x09\x1e\xc2\x43\x58\xf9\x9f\xc9\x23\x32\xa0\xcb\x84\x9d\xd7\xf4\xd1\xbc\x34\xe4\x2c\xd6\x65\xa6\xde\x48\x09\x9d\x4d\xb5\x91\xbc\xf4\xfc\xfb\x10\x07\x1b\x50\x37\xe6\x02\xaa\x3a\x45\x4e\x19\x74\x91\xe1\x36\xbd\x35\x23\x46\x02\x5b\x9a\x53\x56\x50\x75\x3b\xd0\xcc\xc4\xea\x8f\x6d\x9e\x13\x2c\x9d\x2a\xe9\xfd\xb2\xbb\x19\xc1\x6f\xaa\x27\x8c\x3b\x3b\x9c\x4f\x38\x5c\xf5\x84\x49\x6f\x9b\x19\x4d\xea\x41\x2c\x33\x52\x31\xb3\x70\xd9\xea\x99\x93\xde\xcd\x99\x73\x6e\xad\xfd\x70\xfd\xf5\xfa\x4f\xe1\x94\x1a\x87\xc9\x1f\x18\x98\xf1\x71\x41\x27\x32\x4f\x8c\x40\x62\x9c\x25\x2f\x9a\x22\x38\xd8\xfc\xb6\x04\x70\xc3\xd9\xf3\xe0\x37\x98\xa7\x05\x7c\x1b\x52\x76\x87\x22\x86\x6f\x49\x07\x28\x4e\xaa\xda\x10\xc4\x49\x9a\xcf\x16\xc3\x0d\x67\x7b\x0b\xe1\x40\xb4\x8e\x11\xdc\x0e\x8e\xfb\x0c\xe0\xc0\xcb\xf6\x1e\xbf\xc9\x48\xe8\x14\xbe\xed\xe0\xf8\x34\xf4\xa6\x02\xf7\x69\xe0\x2d\x57\xee\x37\x6b\xbc\x58\xbb\x50\x24\xdc\x2c\x0c\xaa\xb0\x04\x9f\x2f\x85\x2d\x0c\xf4\x8b\x7c\x78\x16\x1b\xe0\x0e\x1d\x20\x63\x28\x1f\xcd\x82\x44\x8d\x89\x0f\x91\x71\xe1\x47\x90\xc8\x9c\x36\xd4\xaf\x91\x71\xba\xc4\xd4\x05\xb8\x13\x36\xa5\x3d\x42\x06\xa0\x8d\x2f\xdb\x90\x1e\x4b\x52\xa7\x0d\xe9\x77\xc8\x98\xf8\x1c\x6b\x89\xdb\xe2\x49\x07\x8a\xca\x8d\xa8\x29\x19\x54\xe9\xcc\xd2\xca\x99\xf4\x37\x82\x96\xce\xac\x0a\x59\x3a\x33\x0d\x2c\x1d\x1a\xaa\x67\x7f\x30\xd8\x1a\xd2\xf0\x32\x3e\x1d\x4a\xa4\x44\xa8\x0c\xc7\x28\xd7\x43\xf1\x29\x94\xac\xb4\x02\xb5\x08\x2e\x64\xb9\xc1\x45\x79\x66\xb6\xb3\x08\x59\x9a\x4f\x53\x22\x6c\x3a\x4d\xdc\x59\x86\xc9\x9a\x20\xe6\x5c\xd2\x5c\x44\x62\x60\x2c\x86\x31\xf2\x7c\x87\x30\x34\x0b\x49\xd9\x03\x57\x21\xc6\x48\xf4\x95\x3e\x40\x3a\x41\x6a\x84\xf4\xf6\x56\x70\x3c\x27\x74\x11\x3c\x02\x67\x70\xe8\x12\xe8\x58\x43\x9f\x48\x04\x51\x85\x3e\x11\x4b\x10\x67\xa5\x4a\x37\xac\x0a\x95\x76\x6f\xfb\x48\x44\x6d\xb5\xac\x9b\x50\xa3\x20\xa8\xf3\x2c\x1e\xc2\x65\x82\xa8\x10\x53\x0e\xd9\x2a\xa7\xcc\x2f\x25\x82\xee\x01\xc8\xa7\xad\x41\xfe\xe8\x99\x40\xfe\xa8\x15\xc8\x1f\x41\x01\x0b\x67\xd8\x26\xac\x03\x90\x3f\x6a\x01\xf2\x47\x9f\x35\xc8\x1f\xed\x2f\xc8\x1f\x75\x0e\xf2\x77\x70\xdc\x67\x90\x3f\xfa\x0c\x40\xfe\xa8\x73\x90\xbf\x83\xe3\xd3\x40\xfe\xa8\x03\x90\x5f\x38\xd9\x2c\x1c\x63\xc6\xa9\xa9\xd5\x19\xe8\xb8\x16\x15\xca\x81\x2f\xdf\x35\x17\x8e\xf9\x3a\xa9\x6a\xef\x28\x67\x68\xe4\xf5\xae\x22\x8e\x02\xd0\x53\xd9\xb0\x38\xd3\x15\xea\x6f\xbc\x85\x35\xed\xf7\x0a\x6f\xba\x04\xf5\x8e\x80\xb7\x0b\x34\xc6\xf6\x1d\xa9\x21\x53\x32\xee\x0a\x75\x32\xef\x30\xf4\x03\xf6\xed\x79\x18\xfa\xe1\xee\xc9\xdf\xfb\xac\x6a\xe6\x96\x9b\x06\x3a\x83\x6a\x10\xb2\xcc\x96\x81\x66\xb6\x0c\xba\xb7\xd1\x86\x81\x56\x6e\x18\x68\xbc\x61\xd0\xbb\x05\x3a\xb3\x36\xb7\x0a\x4d\x10\x7c\x19\x03\x95\x96\x92\x9e\x5a\xc8\x6c\xf3\x84\x1b\xe8\x47\xe3\x4f\x83\xeb\x8a\xfe\xac\xc6\x68\x6f\x90\x30\x0d\xbd\xfb\x75\x72\xfe\x01\x9c\x01\x2d\x7c\x27\x72\x7d\x74\xf4\x63\xc9\x4b\x86\x4a\xca\x77\x8f\x9c\xb0\x91\x57\xf1\x82\xd9\x49\xaf\x92\xbb\xf0\xb3\x9a\xec\x61\x68\x15\xff\x52\xc4\x99\x9b\xf3\xdd\x68\x22\x55\xa9\xf2\xe9\x64\x2a\x40\x0d\x1c\x8b\xb4\x50\xa1\x4d\x41\x17\xc9\x77\x5b\xb0\x6c\x32\xae\xd2\xe3\xe4\x6f\x5a\xe6\x20\x49\x39\x35\x56\x42\xe7\x9d\x66\x4b\x1d\xcf\x50\x6f\xb1\xf5\x14\x4f\x5a\xee\x34\x8d\xd6\x5c\x98\xed\x7a\x15\xb4\x1a\x67\xf4\x69\xc4\xfe\x59\x97\x3e\xbf\x06\x8e\x4c\xf0\x44\x25\xf8\xca\x45\x28\xf3\x0f\x49\x59\xcf\x3b\x64\x15\xa9\xf6\x0d\xc5\x3c\x05\x1a\x97\xd4\x45\x09\x99\x30\xa6\xb1\x81\x29\x72\x6b\xf0\x64\xa6\x65\x8a\xd5\x73\xca\x98\x5b\x95\x6a\xdf\x96\x18\x8e\xc4\xd5\xb4\x06\x7f\x55\x79\x9b\x85\x95\xe6\x5f\x4f\x01\x35\x41\xbb\xa0\xd2\xc6\x3d\x75\x5d\x05\x0d\x63\xaf\xd6\xcb\x5d\x68\x10\xf2\x24\x2d\xb1\x5e\xc5\x16\xb9\x30\xda\x51\x37\x16\x3b\xef\x85\xc3\xd8\xff\xaa\x43\x2d\x1f\x6c\x6d\xbd\x30\xa7\x41\xa7\xae\x58\xc5\x39\xaf\xe2\xf6\x74\x52\xa2\x63\x6d\x7f\x4c\x70\x5d\x6d\xfe\xcd\xfc\xf1\x3c\xf5\xc4\x66\x13\x34\xf4\xc7\x7d\x3c\x37\x12\x6f\x6c\xb7\x3c\x38\xba\x20\x8b\xe7\x39\x39\x12\x13\xb5\x38\x3a\x02\x32\x3f\x7c\xec\xe0\xd8\x48\x29\xda\xf0\xdc\x48\x11\x7d\xb6\x07\x47\x20\xfe\xde\x9e\x1c\x09\xd9\x3a\x3e\x3a\xda\xc5\x72\x9f\xcf\x8e\x84\xa7\xed\xfd\xe1\x91\x0a\x87\x4e\x4f\x8f\x76\xb1\x7c\xda\xf1\x91\x8e\xdf\x3d\x7b\xc3\xef\x87\x90\xb4\x3a\x6e\x12\xcf\x63\x5b\xd2\x39\x6d\xe8\x24\xc4\xeb\xea\x78\x65\x21\x13\x79\xe6\x74\x05\x1a\xd2\x6a\xa5\x7a\x1b\x9d\xae\x00\x49\xd5\xf1\x0a\x74\xe9\xf3\x95\x3b\xea\x89\xe7\xd0\xd0\x60\xfd\x4c\x45\x49\x2d\xec\x70\x36\x8e\x3b\xd2\x91\x2d\xcf\x4b\x04\x83\x1f\xf4\x73\xca\xe6\xaf\xcc\x15\x9f\x3c\x0a\x6e\xe5\x8f\x1e\x0b\x9d\xf5\x1e\x0f\x96\x8b\xdb\xe0\xc9\x5d\x39\x83\x3d\x7e\xa4\x16\xb0\xb6\xc8\x68\xcc\x9e\x07\x18\xc1\x3c\x2d\x70\xd1\x38\xf4\x6d\xc8\xcc\x9d\x3c\x51\x93\x9a\x36\x44\x46\x92\xe6\xb3\x05\x46\x63\xb6\xb7\xb8\x08\x44\xeb\x18\x16\xed\xe0\xb8\xcf\xa8\x08\xbc\x6c\xef\x41\x91\x8c\x84\x4e\x31\xd1\x0e\x8e\x4f\x83\x44\x2a\x70\xff\x9e\xd7\xe6\x5e\xda\x69\xab\x4d\xc4\x93\xb7\x46\xaf\xb4\x8d\x99\x7c\x9b\x6e\x3c\x1a\x36\x7d\xb5\x4c\x50\x1e\x22\xe3\xa6\x1d\xe5\x6b\xa0\xfc\x70\x7e\xdd\xf4\x0d\x3c\x41\x7a\x04\xe2\x5e\xb7\x99\xf3\x18\x19\x97\xa3\x36\x84\xdf\x21\xe3\x97\xd1\xf5\xa4\x0d\xe9\xff\x23\xe3\xfa\xfc\x43\x1b\xca\x37\xc8\x98\x8c\x2e\xce\xc5\x67\x15\x4d\x49\xff\x81\x8c\xb3\xab\x8b\x8b\xd3\xcb\xa1\xb2\x6f\x5b\x7c\x19\x40\x41\xcc\x3e\xbc\x0b\x58\xa6\xe2\x8b\xbe\x46\xe0\x32\x60\x55\xd8\x32\x60\x1a\x5a\x06\x54\x20\xcb\x80\x59\xe0\x8f\x35\xbe\x23\x29\x20\x27\xf1\x32\x52\x4c\xdb\x06\x79\x69\xfa\x9b\x0a\xfa\x0d\x98\x26\xc6\x32\x12\x3e\x69\xb2\x71\x48\xfd\x90\xf2\xc7\x27\x31\xb9\xa4\x76\xcb\x87\x91\x9a\xc1\x07\xfa\xd7\xd3\x18\x5c\x13\x06\x19\xce\xe3\xbb\x99\xe8\x1c\x55\x66\xcc\x09\xad\x78\xa6\x5a\x36\xb8\xe2\x01\xec\xdf\x0b\x8f\xf5\x7f\x45\x52\xf2\xb5\xb1\xea\x69\xf4\xb1\x71\x1c\xde\x22\x54\xe6\xd9\x5d\x8e\x88\x5e\x22\x82\xc7\x3a\x15\xc0\x41\x7f\xeb\x6d\xbc\x50\x48\x38\xfe\x2c\xfc\x3d\xd0\x96\x7d\x1a\x2e\xda\x6b\x7e\x1e\xae\xe4\x17\x04\xfa\x7b\x75\x7d\x10\x9e\xfd\xd0\x1c\x43\x40\x6b\x76\xa9\x31\x13\x4c\xa1\xc1\xb3\xda\xd2\xc7\x4a\xff\x2f\x00\x00\xff\xff\x42\x86\x70\x98\x40\x4c\x00\x00"

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 19520, mode: os.FileMode(420), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

