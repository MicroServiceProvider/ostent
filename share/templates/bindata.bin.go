// Code generated by go-bindata.
// sources:
// index.html
// DO NOT EDIT!

// +build bin

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5c\x6d\x73\xdb\x36\xf2\x7f\x9f\x4f\x81\x72\xda\x7f\xd3\x8e\x49\xc5\x4f\xfd\xe7\x5c\xcb\x37\x49\xec\xb6\x9a\xc6\x8e\x26\x96\x7b\xd7\xeb\x74\x5a\x88\x04\x25\xc4\x14\xc9\x03\x40\xd9\xaa\x46\xdf\xfd\x16\xe0\x83\x48\x0a\x92\x48\x3d\x59\xee\xe4\x85\x6d\x89\x00\x16\x3f\xec\x2e\x16\xfb\x5b\x41\x3e\xff\xe2\xf2\xc3\xbb\xce\xaf\xed\x2b\xd4\x17\x03\xef\xc5\xc5\x78\xfc\xe5\x10\x9d\x35\x91\xf5\x81\x0b\xe2\x8b\x5f\x08\xe3\x34\xf0\x27\x93\x73\xd5\x8c\xd0\xc5\x79\x9f\x60\x07\x5e\xc8\x97\x03\x22\x30\xb2\xfb\x98\x71\x22\x9a\x46\x24\x5c\xf3\xb5\x91\x34\x09\x2a\x3c\xa2\x5e\xc3\xbb\xf1\xd8\xba\xc4\x02\x5b\xfd\x80\x0b\x1f\x0f\xc8\x64\x82\x02\x25\xfe\xbc\x31\xed\x97\x88\xeb\x0b\x11\x9a\xe4\xbf\x11\x1d\x36\x8d\x7f\x9b\x77\x6f\xcc\x77\xc1\x20\xc4\x82\x76\x3d\x62\x20\x3b\xf0\xe5\xb0\xa6\xd1\xba\x6a\x12\xa7\x47\x8c\xfc\x48\x29\xb9\x69\x0c\x29\x79\x08\x03\x26\x72\x9d\x1f\xa8\x23\xfa\x4d\x87\x0c\xa9\x4d\x4c\xf5\xe6\x00\x51\x9f\x0a\x8a\x3d\x93\xdb\xd8\x23\xcd\x43\xeb\x55\x22\x6a\x3c\xfe\xa9\x73\xfd\x1e\x19\xe7\x5f\x18\x93\x89\x69\xfe\x46\x5d\xd4\xba\xfa\xfd\xe2\xdc\xa3\xfe\x3d\x62\xc4\x6b\x1a\xbc\x0f\xd2\xed\x48\x20\x0a\x13\x18\xa8\xcf\x88\xdb\x34\x1a\x2e\x1e\xca\xf7\x16\xfc\xd2\x49\xfa\x8d\xf8\x0e\x75\x7f\x37\xcd\xbc\xa4\x58\x00\xa7\x7f\x11\xde\x34\x8e\x8f\x1e\x8f\x8f\x32\x71\xd2\x0c\x93\x49\x2a\x95\xa7\x2f\xcc\xe3\x23\x2b\xf4\x7b\x06\x12\xa3\x10\xd6\x4a\x07\xb8\x47\x1a\xf2\x41\xa2\x87\xa9\x6c\x1c\x86\x1e\x31\x45\x10\xd9\x7d\xb3\x30\xcf\xe1\xd1\xab\x47\xf8\x59\x3a\x13\xf4\xb1\x6a\x4a\x3e\x39\x79\x84\x9f\xe5\x92\x4f\x4e\xea\x4a\x3e\x3d\x7a\x84\x9f\xe5\x92\x4f\x8f\xea\x4a\x7e\x0d\xda\x78\x5d\x41\x1b\xaf\xe7\x68\x83\x8b\x91\x47\x78\x9f\x10\x91\x1a\x45\x90\x47\xd1\xb0\x39\x2f\xcb\x84\x47\x0d\xea\x3b\xe4\xd1\x92\x8d\x89\xa0\x46\xb2\x9b\x2e\xce\xbb\x81\x33\x4a\x1e\x3a\x74\x88\x6c\x0f\x73\xc0\x27\x82\xd0\xec\x62\x66\xa4\x3b\x49\xd3\x66\x7a\xc4\x15\x69\x07\xd9\x25\xf2\xd2\x1e\x03\xe2\x47\xd3\x96\x18\x78\xee\xad\xda\xcd\x47\x69\xe7\xfe\x09\x1a\x60\xd6\xa3\xbe\xd9\x0d\x84\x08\x06\xe6\x2b\xa3\xd0\x57\xf6\xe6\x21\xf6\xd3\xfe\x51\xe8\x60\x41\x60\x99\xf0\x07\x9b\x0e\x71\xa9\x0f\xab\x8f\xff\xfe\x91\xee\xf4\xb2\x08\xb5\x2f\x04\x19\x84\x1e\x8c\x45\x49\x6f\x7e\x76\x56\x1e\x86\x2c\x08\x39\x0d\x39\x5d\x19\x03\x3a\xe7\x03\xec\x79\x3a\xb9\xd6\x25\xe5\x82\xd1\xae\x1a\xaa\xe9\x24\xd5\x7d\x54\x5a\x7f\xa3\xa0\x11\x78\x1f\x79\x39\x55\x36\x40\xdd\x8b\x54\xcf\x68\xaf\xbf\xba\xee\x71\xd6\x37\xd6\xfb\x2b\xd4\x8d\x40\xf3\x3e\xe2\x04\x7c\xce\xc1\x6c\x84\xfa\x81\xe7\x05\x0f\xa9\x2b\xc9\xd8\xc8\xcf\x1a\x8d\x87\x87\x07\x0b\x34\xc5\xe0\xc7\xb2\x83\x41\x23\x0e\xa6\x0d\x70\x48\x82\x39\xe1\x0d\xa9\x5c\x2e\xfe\x69\x0f\xc2\x66\xec\x7c\x33\x96\x4c\xc3\x2f\x5e\x5d\x1d\xd9\x9b\x82\x66\x7a\x8c\x3a\x66\xd7\x0b\xec\x7b\xad\xcf\x4e\x9b\x11\xef\x33\xd8\x45\x79\xe5\xe5\xbd\xcb\x0e\xbc\x82\xf6\xa2\xb0\xe4\x0e\x33\xdd\xd1\x42\x87\x8c\x42\x41\xa5\x5f\xa9\xfd\x0a\x47\x42\x9f\x0a\x62\x82\x04\x9b\x9c\xa1\x90\x15\xfc\x74\xa1\x87\xa6\x72\x66\xfd\xb3\xa4\x1e\xcd\x56\x41\xe4\x11\x1e\x3a\x7a\x80\x5e\x80\x1d\x3c\xec\xe5\xf4\xb1\x08\x46\xda\x7b\x06\x47\xde\x2e\x60\xfb\x50\x9d\xe5\xea\xf0\x0d\x31\xc3\x03\x0e\xdd\xf5\xe6\x08\xb1\xe3\x50\xbf\x67\x4a\xd7\x7e\x75\xfa\x9d\xd6\x7a\x1e\xf8\x29\x31\x0f\xc1\x1b\x21\x46\x30\x87\x30\xd9\xdb\xa8\xb0\x5f\xc0\x3c\xd1\xc0\x47\xc9\xf8\xc3\xc5\xa6\x82\xc5\x10\x6f\x40\x06\x15\x55\x91\x75\x8f\x75\x51\xc7\x45\xf7\x6d\xd1\x8e\x5b\x67\xcd\xd0\xfb\xf9\x2f\xd9\x0e\xa3\x3a\x6b\x96\xdd\x9f\xff\xa2\x69\x2d\x3b\xd3\xbf\x83\x9d\x43\x5e\x67\xc9\xd0\x7b\xe1\x92\xb9\xcd\x68\x28\xf2\x09\xd7\x27\x3c\xc4\xf1\xd3\x6c\xa5\x43\xcc\x90\x8c\x7c\xa8\x89\x12\x02\x32\x99\x7c\x0f\xc1\x52\xf5\xaa\x22\xa8\x4c\x6d\x10\x67\xf6\x34\x9f\xfb\xc4\xe1\x15\xd0\x03\xab\xf3\xe6\xc7\x1f\xaf\x2e\xbb\x14\x58\xd2\x80\xfa\x8d\x6e\xe4\x3b\x1e\xb1\xe0\xa5\xf5\x89\x8f\xc7\xc4\xe3\xc0\x77\x60\x64\xda\xa0\x1e\xfa\xce\xf4\x50\xbe\x28\x61\x6a\x24\xa9\xa0\x4c\x57\x12\x4e\xd6\xf8\xf6\xc5\xb7\x8d\xc9\x64\x3c\x8e\x95\x94\xd3\x1a\x96\xa9\xe8\x1f\x5d\x0c\x64\x48\xe5\x81\xa0\x34\x1c\x67\x0b\xb0\xe6\x9f\xe0\x2f\x70\xad\xf1\x58\x99\x6d\x32\x91\xcf\xde\xc5\x2f\x51\xe0\xbf\xf3\xa8\x7d\xdf\x1c\x8b\x3e\xe5\x56\x1f\x4b\x6c\xea\xc9\x04\xa1\x17\x71\x3a\xf5\x56\x4a\x55\xe3\xad\x0e\xa8\x46\xda\x03\x4b\x34\x0a\x7d\x45\x50\x71\x86\xb4\x49\x54\x31\x14\x34\xc5\x57\x19\xd5\x50\xc2\x2a\x62\x79\x0f\x4f\x74\x78\xe4\xf3\x1a\x98\x64\xf7\x44\x45\xea\xdc\x2f\xae\x0d\x33\x22\x12\x61\xa9\x89\x93\x13\xfb\xa2\x2a\xf6\x72\x7e\x3c\x5d\x84\xd1\x30\x72\xd3\x19\xd4\xef\x83\xce\x85\x09\x3b\x34\x60\x06\x82\xa6\x8e\x64\xd8\x6d\xe8\x4a\x1f\x89\x83\x8c\x54\x04\x32\x50\x99\x94\xbf\xd0\x52\xf5\x9a\x10\xd3\xcc\xa4\x98\x68\x00\x1c\x53\x74\x51\x2e\x3e\x0d\x09\x13\x14\xc8\xb7\xf1\x62\x7e\x0c\x7b\x60\x38\x44\x7e\x00\xbb\x03\xd2\xe0\x94\x32\xe5\x13\x2b\x95\xe5\x43\x00\x93\xe2\x3d\x86\xe4\x06\x2e\xe6\xe4\xc5\xee\x2e\x80\x13\x65\xbe\xe4\xe1\xff\xf3\xbb\x3c\xfc\xbe\x98\x46\x1d\x0e\x72\xef\xeb\x4e\x9a\x2a\x31\xd1\x85\xe5\xe1\xc3\x42\x9a\x56\x58\x6f\x92\x14\x4e\xc7\x7e\xe2\x8f\xe8\x4f\xf8\x9d\x68\xd6\xba\x85\xcc\xed\x1e\x5c\x97\xbc\x1c\x83\x15\xcf\xd0\xd7\x20\xee\xeb\x03\xd4\x27\x72\xce\x33\x74\xf4\x6a\xf2\xcd\xe4\xcf\x7c\xb0\xcc\x42\xe5\x16\xf5\x7a\xba\x59\xfd\x9c\x6e\x56\x3f\xa7\x4f\xae\x9f\xc3\x0d\x2b\xe8\x70\xc3\x1a\x3a\xac\xac\x22\xf5\xa2\x46\x00\xc8\xf2\x34\xd9\x69\x1e\x01\xc9\x94\x3f\x1e\xab\xc8\xd8\x0e\x38\x15\x74\x48\xd0\x97\xa1\xf5\xae\x7d\xe7\x43\x9c\xa2\x0e\x10\xb4\x7e\xf0\x20\x5f\x18\x48\x96\xdd\x1e\xa6\xef\xb3\x48\xaa\x37\x20\x1c\x40\x3d\xdf\xfc\x14\x71\x41\xdd\xd1\x34\x16\xf4\x0f\xb3\x62\xc7\xf1\xfc\x62\x87\x24\xe6\xf3\x23\xea\x78\x2c\xcf\x8b\x0e\x00\x4d\xb1\x4e\xe2\x73\x20\x1b\x0e\xcf\xca\xa7\x80\x91\x02\x37\x15\xfa\x22\xe9\xb6\x2c\x6b\xa6\xd4\x71\x91\xa7\xe6\x32\x11\x38\xd4\xa5\x61\x99\x54\xf9\x02\xf5\x1f\x93\xc5\x24\xcb\xe7\xc4\x73\x4d\xd7\x23\x8f\x26\x98\x0e\x15\x9d\x64\xb6\x56\x81\xe2\xe0\x58\xaa\x68\x68\xeb\x16\x39\x04\xd4\x0f\x23\x61\xf6\x58\x10\x85\xcb\xab\x47\xfa\x71\xa6\x87\xbb\xc4\x43\x6a\x53\xc4\x7b\xc1\x0f\xe4\x06\xd4\x94\x8e\x1c\xe2\xe1\xd1\x19\x92\x6e\x25\x35\xef\x14\x33\xc4\xa5\x13\xc5\xd5\x95\xaa\x25\xa9\x72\x66\x85\xde\x13\xce\x2f\xa7\x76\x87\xb3\x34\x2d\xd7\xcc\x40\xdf\x15\xb0\xd8\x5a\xe8\x3a\x60\x64\x4d\x64\x33\x0f\x67\x6b\x41\xfb\xe3\x07\x2c\x78\xe0\x53\x37\xf0\xad\x37\x5d\x0e\x84\x44\x90\xdd\xfb\xc3\x4d\x2e\x0e\x94\xb4\xce\x23\xdb\x86\x1e\x4f\xed\x17\x1b\x42\x58\xc1\x3f\xaa\xd5\x0a\x1b\x9a\xe8\x7f\x13\xf8\xff\x21\x2c\x98\xc2\x94\x65\xdc\x50\x46\xfd\x2a\xc1\x5e\xc8\x1a\xba\x3e\xe1\x93\x65\xc1\xe4\xb4\x2d\xd0\xda\x42\xc1\xac\x72\x0e\xb0\x50\xbe\xe6\x18\x57\xfd\xd1\x1d\x27\xec\xab\xa5\xc5\xcb\x65\x52\x6e\x47\x7c\x7d\x21\xff\xc2\x54\xac\x2f\xa5\x05\xfc\x67\x6d\x29\x8b\x8b\xa7\xf9\x1a\xa6\xa4\xd8\x2a\x7f\x80\x9c\x42\xa6\x14\x0c\xfb\x3d\xc8\x13\xe0\xdd\x34\xb5\x80\x37\xc0\xc1\xb8\x90\xed\x71\xf2\xa3\xb8\x9a\x7c\xf4\x52\x76\xf8\xc6\x1a\xe0\xf0\xa5\x1b\xf9\xb6\xa0\x81\xff\x52\x0e\x3e\x40\xf4\x1b\x34\x46\x40\xcd\x22\xe6\xff\x39\xaf\x2c\xba\xd4\xad\x72\xeb\xd3\x07\x2d\x59\x85\x95\xf0\x6e\x66\x0a\xb5\xf1\x06\xf8\x99\x8c\x90\x01\x1d\x4c\x08\x6a\xdd\x91\x79\x63\xa0\xb4\x7b\x3e\x7f\xa8\xeb\x98\xcb\xb4\x5f\xce\x4f\xe4\x8a\x1c\xca\x21\xa4\x8c\x92\x69\xba\x3d\x33\xe2\x24\xb4\x61\xa0\x2a\xea\xc4\x6f\x9a\xc9\x6a\xa4\x53\xb7\x6d\x91\xec\xcc\xa9\x6f\x94\x9b\xcb\x7e\xa2\xb3\xfc\x2e\x71\xc3\x36\x5a\x00\x3b\x6d\xdd\x37\xd4\x72\xdf\x2e\x80\x9d\x35\x3f\x21\x6e\x93\xfa\xc0\xe8\x39\xd1\xe2\x97\x11\x63\x01\xfe\xac\xb9\x2e\x7e\xb5\x0f\x53\x6e\x33\x93\xe1\x56\xa2\x42\xf4\x40\xd2\x30\xa0\x44\x09\x88\x1c\x2b\x3a\x3e\x3d\x40\x30\x0c\x47\x9e\xb8\x0d\x03\x01\x19\x87\x60\x11\x49\x99\x52\xd5\xf0\xa5\x00\xc4\x83\x32\x0e\xa5\xfe\xac\xc9\xb0\x1c\x77\x65\x82\x75\xe9\x3e\x1b\x7e\x05\x50\xcb\xf4\xea\x92\xf2\x7b\x14\x71\xdc\x23\x9f\x59\xd6\xd6\x59\xd6\xa5\xfb\x84\x24\x0b\x26\xdf\x4f\x8e\xb5\x1a\xb0\xe7\x4a\xb1\x60\x0f\xee\x01\xc3\x52\x41\x6b\x9f\x09\xd6\x7a\x00\x77\xc5\xaf\x14\xca\xed\xd2\x2b\xbd\xee\xe2\x0f\x5f\xd0\x2f\xea\xea\x54\xaa\xb1\x7b\x74\x88\x8c\x4b\x75\x31\xcf\xd0\xe6\xc7\xeb\xf3\xb2\x22\x77\xa9\x85\xed\x08\x19\xd7\x41\xe4\x0b\xe2\x94\xc1\xad\x42\x9b\x6a\x4d\xfd\x1d\x32\x3a\x81\xc0\xde\xce\x27\x3e\x45\x06\x24\xef\xbb\x5f\xf0\x31\x32\xde\x0c\x31\xdd\xfd\x82\x4f\xd4\x82\xbf\xaa\x30\xef\xba\xfc\x15\x32\xe7\xfb\x3b\x99\xb7\xe4\x58\xac\xe3\x4e\xd3\xb7\xac\xbd\x16\x95\x75\xdc\x8d\x32\xd9\x00\xb2\x78\x57\x5e\x39\x2b\x10\x58\xc7\xb5\x60\x97\xde\x24\x9f\x07\xce\x63\xb1\x8e\x9b\x90\x58\x87\xb2\xf8\x16\x9f\x1a\x48\x59\x3c\x70\x1d\x3e\x5b\x01\x67\x42\x28\xf2\x33\xd6\xf3\xa4\x38\x42\x2f\x26\x43\x69\x2a\x17\xc9\x5e\x06\x52\xb7\x97\x9b\x46\xcb\x0f\x1c\x02\x71\x5e\xed\xd8\x59\x8e\x03\x90\xe2\x1e\x9a\x3b\x8d\x69\x07\xb5\xdb\x77\x8e\x38\x92\x5b\x5d\x0f\x58\x36\x2d\xc0\x7b\xa7\x6b\xde\x36\x5c\x97\x91\x72\x5a\x9f\xc2\x95\x4d\x0b\xe0\xaa\xd8\xb2\x04\x6f\xd5\x8a\x4e\x5d\x46\x8f\x4a\x8c\x38\xd6\x9e\x86\x0f\x57\x33\xd8\x57\x33\xd9\x5e\xce\x64\x73\x68\x74\xc1\x6e\x4f\x4e\xb5\x63\x0c\x05\xa6\xbd\x2f\xac\x9a\xae\xce\xaa\x5b\xcf\x87\x55\xb7\x66\x59\x75\x0b\xd2\x1c\xe6\x62\xc8\x57\x3f\xb3\xea\xad\xb3\xea\xd6\x53\xb2\xea\xd6\xbe\xb2\xea\xd5\x80\x3d\x57\x56\xdd\xda\x0b\x56\xdd\xda\x77\x56\xbd\x1e\xc0\x5d\xb1\xea\xd6\xf6\x59\x75\x16\xa0\x77\xfb\xe9\x65\xab\x5d\x31\xc7\x3b\x9a\x97\x37\xa5\x19\xcc\x5b\x2a\x38\x6a\xf9\x8d\x0f\x91\x40\x21\x61\xc9\x97\x5c\x4a\xb3\x7d\x40\xe7\xa5\xcd\xda\x3d\x6f\x14\x0c\x16\xf2\x4d\x01\x6a\x63\xfb\x9e\x2c\xc7\x94\x75\xfb\x80\x36\x37\xf7\x25\x0b\x42\x7e\x70\xc5\x58\xc0\x96\x02\x78\x1f\xf0\x79\xb3\x2f\x27\x9d\xd4\xc5\x8e\xc3\x78\x8e\x72\xd2\x1c\xe5\x4c\x5a\x6b\x11\x4e\xea\x6e\x9b\x6d\x52\xd7\x5a\x46\x35\x69\x4a\x35\x13\x9e\x99\x0d\xd9\x28\xc9\xcc\xd9\x4f\xcb\x37\x63\xac\xad\x76\x65\x22\x34\xd7\x2f\x0a\x06\xd7\xf1\x00\x1d\x53\x48\x7c\x49\x51\x47\xf4\xf6\xd7\xce\xd5\x2d\xb8\x12\x1a\x04\x4e\xe4\x05\xe8\xe4\xc7\x99\xf3\x2b\x86\xfb\x76\x24\x08\x6f\xf9\xda\xef\xd7\x5d\x34\xe6\x4a\x96\x1e\x5a\x49\x34\x74\xd4\xcb\xd6\x90\xb3\xc2\x6c\x6f\x5b\x1d\xb5\x00\xfd\x3e\xc8\x26\xb9\x24\x9e\xc0\x32\x98\x68\xd7\x50\x5a\x81\x92\x39\x7f\x73\xcd\x0a\xd5\xa3\xaf\xc0\x8d\xb6\x6d\xdf\x30\x8b\x56\x4b\xcd\x90\x44\xac\x3a\x36\x4e\xa5\x57\xb1\x72\x22\x7e\x65\x3b\x4f\xe3\x6e\x25\xab\x2c\x5a\x4d\x69\x2d\xed\xdc\x2a\x6a\x88\x7e\x2a\x9b\x17\x4d\xe0\xa8\x23\x81\xc4\x47\xc2\x1c\x1b\xe8\x1c\x43\x8d\xab\xe2\x16\xea\xcc\x99\xe7\x14\x29\xeb\x4b\x33\x9b\x1b\xea\xa1\x6c\x90\xd4\xa7\x51\x4a\x6c\x0a\x46\x58\x53\xa0\x6e\x41\x55\x3c\x31\x95\xa5\x5f\xd2\x81\x46\x59\x24\x3d\x71\x97\xca\x8e\xcf\xe6\x3a\x7b\x28\x91\x5d\x05\x78\x2c\xbc\xfe\x0e\x4a\xd4\xf9\xc6\xf3\xe2\xcc\x33\x75\xe4\xc4\xb4\xa5\x07\x12\x49\xf6\x24\x5d\x4f\xf9\x89\x32\x45\xe2\x90\xfa\x82\x54\x3e\x65\x59\xb4\x69\x8b\x7b\x6b\x35\x6f\x2b\x60\xdf\x98\xcb\xcd\x93\x5a\x5c\xda\xa2\xa8\xa1\x59\x5b\x45\xbf\xcb\x72\xbc\x8a\xb2\xeb\xf8\xdd\xd5\xd4\xe3\xea\x08\xaf\xe1\x77\x4f\x5f\x91\x93\xdf\xec\x5d\xb5\x24\x77\x4d\x06\xcf\xa6\x26\x27\xb1\x96\x8b\x72\xf0\x2c\x60\xa3\xcf\x05\xb9\xad\x17\xe4\x40\xd1\x4f\x58\x91\x93\xb3\xef\x67\x49\x6e\x45\x64\xcf\xb5\x26\x27\xf7\xe0\x1e\x14\xe5\xe2\xb0\xb5\xcf\x55\xb9\x35\x11\xee\xaa\x2c\x17\xc3\xfc\x3b\x7d\x99\x40\x65\x9a\x6b\x5f\x90\x90\x1f\xde\xae\x2d\xe4\x07\x46\xc8\x26\x90\x2c\xfd\x2a\xc1\xba\xf7\x2e\x06\xea\x14\xcd\x55\xc0\xe0\xc1\x34\x97\x88\x5b\x6b\x55\xc0\x60\xc8\x86\xee\x5c\x14\xeb\x5e\x20\xd7\xfa\x99\xfa\xe5\xcf\xd5\x0b\x85\x2f\xe8\x93\x54\xbe\xee\xa9\xfc\x57\x32\xb9\x41\x9b\x2f\x7d\xcd\x5c\xae\x90\x93\xad\x74\x53\x61\xbe\xb8\x55\x2e\x12\xcc\x97\xf6\x83\xee\x1a\xc0\xf6\x2e\xeb\x97\x3f\xda\x4f\x16\x34\xe7\xae\x7b\xbe\xf5\xf3\xe7\xef\xf3\xfe\xf1\xc7\xaa\xc9\x7e\x9b\x3f\x9b\x5c\x1f\xa0\x96\x53\xfd\x36\x0b\xe4\xf1\xf9\xf9\xe3\xf7\x1d\x64\xfb\x6d\xfe\x84\xc9\x3e\x4c\xbe\x9f\xb9\xfe\x6a\xc0\x9e\x6b\xaa\x0f\x5b\x70\x0f\x32\x7d\x15\xb3\xf6\x39\xd1\x5f\x0f\xe0\xae\xf2\x7c\x85\x72\x0b\x69\xbe\x36\x47\xa8\x7e\xbf\xbd\xcd\xd5\xfd\xf6\x76\xeb\x72\xa5\xcb\xed\x73\xbe\x4f\xba\xbd\xeb\xd0\x12\xef\x11\x32\xee\x66\xf1\x56\x4a\x61\x6b\xcf\x75\x0c\x73\xdd\x5e\x7d\xdc\xe9\x95\x6f\x39\xef\x09\xd8\x64\xf7\xb3\x9e\x22\xe3\xa6\xb5\xf3\x59\xbf\x43\xc6\x2f\xad\x8f\x9d\x9d\xcf\xfb\xff\xc8\xf8\x78\x75\x5b\x7b\x5a\x9b\xc8\x6b\x2e\x6b\xcc\xfb\x1a\x19\x9d\xd6\xf5\xd5\x6e\x1c\xf8\x1f\xc8\x78\xf7\xe1\xfa\xfa\xcd\x8d\x76\xc3\x2c\x67\xa6\x21\x24\x7d\xf9\xab\x19\x21\xcf\xa5\xbd\xb2\xad\x16\x2d\x0d\xf9\x86\xbf\xd0\x5e\x64\xa7\x21\xb7\x20\x92\x2d\xe2\xa6\x21\x4f\xa8\x69\x48\x25\x33\x4d\x07\xec\x80\x97\xc2\x54\x77\x33\xd8\x6a\xd8\x5c\x09\xe0\x84\x6d\x86\x88\xca\x85\x33\x1a\x40\xfa\x3f\xda\x98\xc0\x1b\x6a\xd7\xfe\x42\xc3\x5c\x61\xb7\xf4\xaf\xcd\x09\xfb\x48\x38\x1c\xb8\xfe\xec\x47\x4a\x2b\x6d\x75\x29\xb1\x43\x2b\x7d\x79\x43\x43\x82\x53\x65\xe9\xbf\xfd\xb1\x4b\x36\x9b\xfc\x9f\xe0\xe4\x1f\x02\xbe\x40\xd3\xff\xe9\x15\xb7\x64\xf0\x52\x99\xff\x0b\x00\x00\xff\xff\x7c\x18\x65\x8c\x89\x5f\x00\x00"

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 24457, mode: os.FileMode(420), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

