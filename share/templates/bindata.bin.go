// Code generated by go-bindata.
// sources:
// index.html
// DO NOT EDIT!

// +build bin

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xe4\x5c\x6d\x73\xdb\x36\xf2\x7f\xef\x4f\x81\xf2\x9f\xfe\xa7\xed\x94\x54\xed\x38\xbd\x5c\x2a\xf9\xc6\xb1\x9c\x96\x53\x3f\x68\x6c\xb9\x77\xbd\x4e\xa7\xa5\x48\x48\x42\x4c\x91\x3c\x00\x94\xed\x6a\xf4\xdd\x6f\x01\x82\x8f\x22\x2d\x42\x91\x6d\x4d\xee\x85\x23\x11\xc0\xfe\xb0\x58\x2c\x76\x7f\x00\xa8\x74\xbf\xe8\x5f\x9e\x0c\x7f\x1d\x9c\xa2\x29\x9f\xf9\x7b\x47\x8b\xc5\xab\x39\x7a\xd7\x43\xd6\x25\xe3\x38\xe0\xbf\x60\xca\x48\x18\x2c\x97\x5d\x59\x8d\xd0\x51\x77\x8a\x1d\x0f\xbe\x88\xaf\x33\xcc\x1d\xe4\x4e\x1d\xca\x30\xef\x19\x31\x1f\x9b\x6f\x0d\x55\xc5\x09\xf7\xb1\xfc\x0e\x4f\x8b\x85\xd5\x77\xb8\x63\xfd\x74\xb1\x5c\xa2\x50\x02\x77\x3b\x79\x0b\x05\x34\xe5\x3c\x32\xf1\x7f\x62\x32\xef\x19\xff\x32\x6f\x8e\xcd\x93\x70\x16\x39\x9c\x8c\x7c\x6c\x20\x37\x0c\x84\x58\xcf\xb0\x4f\x7b\xd8\x9b\x60\xa3\x28\x19\x38\x33\xdc\x33\xe6\x04\xdf\x45\x21\xe5\x85\xc6\x77\xc4\xe3\xd3\x9e\x87\xe7\xc4\xc5\xa6\x7c\xf8\x16\x91\x80\x70\xe2\xf8\x26\x73\x1d\x1f\xf7\xf6\x15\xd0\x62\xf1\xd3\xf0\xfc\x0c\x19\xdd\x2f\x8c\xe5\xd2\x34\x7f\x23\x63\x64\x9f\xfe\x7e\xd4\xf5\x49\x70\x8b\x28\xf6\x7b\x06\x9b\x02\xb6\x1b\x73\x44\x00\xde\x40\x53\x8a\xc7\x3d\xa3\x33\x76\xe6\xe2\xd9\x82\x7f\xea\x90\x7e\xc3\x81\x47\xc6\xbf\x9b\x66\x11\x29\x01\x60\xe4\x2f\xcc\x7a\xc6\xeb\x83\xfb\xd7\x07\x19\x9c\x30\xff\x72\x99\xa2\xb2\xf4\x8b\xf9\xfa\xc0\x8a\x82\x89\x81\xf8\x43\x04\x23\x25\x33\x67\x82\x3b\xa2\x40\x59\x21\xc7\x76\xa2\xc8\xc7\x26\x0f\x63\x77\x6a\x96\xfa\xd9\x3f\xf8\xee\x1e\xfe\xd6\xf6\x04\x6d\x2c\x4d\xe4\xc3\xc3\x7b\xf8\x5b\x8f\x7c\x78\xa8\x8b\xfc\xe6\xe0\x1e\xfe\xd6\x23\xbf\x39\xd0\x45\x7e\x0b\xd6\x78\xdb\xc2\x1a\x6f\x1b\xac\xc1\xf8\x83\x8f\xd9\x14\x63\x9e\x4e\x0a\xc7\xf7\xbc\xe3\x32\x56\xc5\x84\xa2\x0e\x09\x3c\x7c\x6f\x89\x4a\x05\xc4\x5c\x4a\x22\x5e\x94\xfc\xe8\xcc\x9d\xa4\xd4\xa8\x2e\x29\xc4\xa8\x9b\xe3\x7d\x64\x1d\x2a\x56\x09\xc5\xf0\xed\xc0\xda\xb7\x0e\xbe\x4b\x0b\xac\x19\x09\xac\x8f\xa0\x81\x07\xab\xcd\x9c\x39\x24\x28\x89\x2d\x16\xe0\xd5\xd6\xf0\xf8\xc7\x1f\x4f\xfb\x23\x02\x8b\x1a\x9a\x2b\xd5\x12\xc1\xc5\x02\xfb\x0c\x2f\x97\xd0\x9f\x2a\x97\x65\x81\xb7\x5c\x1a\xe9\x5a\xee\x76\x12\x2d\xd5\x40\x3a\x2a\x1c\x1c\x75\x47\xa1\xf7\xa0\x0a\x03\x67\x8e\x5c\xdf\x61\x60\x68\xf8\x3a\x72\x28\x4a\x3e\x4c\x0f\x8f\x9d\xd8\xe7\xe9\x23\xe3\xb0\xbc\x5d\x98\x9f\xc8\x40\x34\x84\xd5\x28\x9a\x93\x09\x14\xc2\x54\x65\x1d\x7a\x24\x43\x13\x0b\x1b\x46\x85\xa9\x39\xf6\x63\xe2\xa5\x6d\x2a\xad\x14\xba\xd0\x0c\x53\x08\x06\xbe\x39\xf3\xcc\x7d\x14\x39\x9e\x47\x82\x89\xe9\xe3\x31\x44\x9e\x74\x2e\x52\xf9\x51\xcc\x79\x18\x54\x20\x78\x38\x99\xf8\x58\x40\xf8\x4e\xc4\xb0\x97\xce\x75\xd2\x58\xd9\x39\x69\x24\x94\x4b\x5a\xa5\xc5\x0e\x9d\x88\x39\xfc\x3f\x85\x95\x55\x17\xba\x95\xae\x10\x39\x59\xb7\x8c\x9a\x61\xe0\x3f\x94\x9b\x40\xa3\x61\xa2\x47\x6e\x1d\x98\x05\x10\x7b\x04\x49\x7a\x2f\x74\xbb\x02\xb5\x33\x92\x9d\xc4\x88\x7b\x4d\x68\x71\x04\x66\xc4\xa9\x33\x83\xe7\xc0\xbc\xf7\x8c\xe4\xf3\x0f\xb1\x10\x47\xd4\x09\xbc\x8a\x35\x17\x0b\x8e\x67\x91\x0f\x82\x48\x35\x65\xef\xde\xad\xc8\x20\x0b\x12\x5a\x55\x27\xd0\x08\x7c\xa8\xe2\x51\xc4\xcb\x7c\x21\x9f\xde\xcc\x19\x93\x02\xf4\xc8\x04\x1f\x75\x63\xbf\xe0\x53\x69\x53\xf8\xa8\xba\x81\x4f\xd2\x76\x8e\xcb\xc9\x1c\xaf\x1a\xd1\x51\x81\x45\xe4\x49\xf6\xae\xd3\xb9\xbb\xbb\xb3\x20\x99\x52\xf8\xb3\xdc\x70\xd6\x49\x12\x2b\xc4\x02\x1f\x3b\x0c\xb3\x8e\xb0\x02\xe3\xff\x70\x67\x51\x2f\x89\x01\x55\x48\x00\x4d\x93\xb1\xb3\x3a\x65\x3e\x69\xd4\x30\x5d\x1d\x10\xb7\x50\xe1\x3b\x44\x1c\x3a\x21\x81\x58\x5b\x68\x4c\x28\xe3\xb2\x74\x75\x20\x6e\xe8\xe1\x0a\x94\x28\x82\xf9\x59\x19\xb5\x54\x11\x09\xfe\x40\x60\xa4\x64\x24\xe6\x4d\xb4\xdd\xb2\xba\x9f\xaa\x63\x1c\xfd\x7f\x30\x62\xd1\x0f\xed\x1d\x58\x34\x8c\xa3\x55\xa8\x35\x3e\xac\xc4\x6a\x1d\x38\x33\xc5\x0e\x1a\xc8\x77\x36\x31\x90\xef\x6c\x64\x20\x10\xdb\x8a\x81\x3a\xb1\xff\x58\x7c\x28\x3c\xc2\x03\xd8\x40\x65\xbf\xf5\xf9\xaa\xd4\x86\x86\x77\x0d\x79\x4c\x65\xae\xc3\x34\x85\x85\xe3\x31\xb0\x02\xc8\x64\x8f\x1a\x0e\xc6\x8c\xfd\x19\x9e\x95\xc2\xd0\x63\x26\xcb\x04\x12\xa3\xad\x06\xc1\xb2\x3a\xdf\xb7\xe8\xde\x1b\xeb\xf5\x0e\xed\xeb\x3a\x2f\x59\xf8\xa9\x4d\xe6\x46\xb1\x9e\xd2\x42\x60\x7b\x26\x23\x9a\x26\x23\x5b\x36\xd9\xfe\x77\x1b\xd8\x2c\x62\x7a\x4a\x43\xfb\xb5\x4a\x67\x0f\x6b\x58\x72\x2a\x30\x07\x7a\x29\x76\x97\xa8\x87\xd4\x3e\x73\xb9\xfc\xa1\xca\x52\x15\x39\x15\x7c\x55\x6d\x73\x3b\xdf\xec\x7d\xd3\x59\x2e\x17\x8b\x44\xbf\x82\xc2\x8e\x20\x0a\x7f\x8c\x1c\xd8\x65\x0a\xaa\x08\xbb\xb8\x34\xf5\x02\xfe\x4f\xf0\x09\x9b\xd8\xc5\x42\x5a\x6f\xb9\x14\x65\x27\xc9\x57\x14\x06\x27\x3e\x71\x6f\x7b\x0b\x3e\x25\xcc\x9a\x02\xd3\xf0\xb1\x2c\x59\x22\xb4\x97\x6c\x83\xdf\x0b\x54\x29\x6f\x0d\x61\x3c\xc2\x14\x8e\xd0\x46\x72\xec\x96\x4a\x51\x32\x99\x6e\x57\xab\x44\x15\x94\xeb\xd7\x56\xab\x15\x66\x25\xb5\xca\xd5\x48\x33\x83\xac\x04\x87\x23\xd1\x7e\xbe\x9b\x33\x60\x6a\x16\x8b\xa1\x38\x06\x18\x40\x09\xb9\xc7\x1e\x32\xa6\xc0\x48\xc4\x76\x1e\x81\xa3\x64\x67\x06\x7b\x95\x33\x04\x4d\xf5\xb2\xd5\x2a\x1a\xbd\x8a\xe4\xf1\x86\xc4\x1a\x38\xd4\x99\x81\x9e\x72\x39\x2c\x16\xd2\x62\x83\x90\x11\xc1\xbf\xd0\xab\xc8\x3a\x19\xdc\x04\xc8\x30\x90\x21\x11\x90\xfc\x37\xdd\xc3\x18\x89\x5a\xc5\x95\x34\x3d\x2c\xed\x31\x4c\x9f\xdc\x62\x33\x11\x12\x7b\x11\x92\xef\x23\x85\x8d\xc4\x9c\x0d\xa1\x97\xb4\x23\x89\x27\xab\xe1\x29\x65\x64\xd9\x72\x90\x44\xb2\x59\xc7\x29\xf1\x3c\x0c\x1b\x12\xc3\x07\x9e\x64\x4e\x68\x08\x24\x41\x01\x16\x13\x7d\x5e\x6b\x12\x58\xaa\x48\x66\xf9\x20\xbc\xa3\x4e\x84\xf8\x34\x4f\x4f\x39\x69\x95\x12\xc0\x01\x4a\x69\x5d\x40\xae\xf0\xf6\x4a\xf2\x1c\x55\x13\x6c\x1f\xfb\xce\x03\xac\xc4\x72\x3b\x54\x62\x04\xd2\xbf\x57\xb8\x86\x98\x34\x31\x4e\xaf\x36\xa7\xaf\xee\x2e\x00\xb4\x30\x2b\x23\x1e\x28\x83\xb4\xd8\x2a\x54\xd7\x3e\x3a\x03\xf2\xd3\xcf\x67\x09\x3c\x14\xf0\x90\xc0\xcc\xfd\x60\x1d\x52\xb2\x60\xd1\x79\x48\xf1\x3a\xa8\x72\x64\xac\xd2\x92\x8d\xec\x7e\x15\xde\xb1\x4f\x32\x7b\x60\x1d\x8f\x58\xe8\xc7\x1c\xbf\x90\xfd\x2f\x0a\xab\xe4\x13\xed\xbf\x0e\x6a\x9d\xfd\x73\x4a\x98\xd7\xa4\xa5\x47\x5d\xee\x8c\x60\x97\xae\x16\xe9\x45\x18\xfc\x1b\xd3\x30\xef\x2d\xa9\x95\xff\x9a\xd3\x70\x8e\xa9\x91\xad\xdb\x6c\xa9\xf2\xec\x74\x55\x3e\xd1\x42\xd7\x7c\x5a\xd6\xab\xf0\x2c\x2a\x53\x73\xcb\x25\x9d\x8c\xb8\xd8\xfe\x86\x61\xaa\x2b\x73\xfd\xc0\x74\x45\xfe\xe9\x10\xae\x2b\x63\x43\x42\xaa\xc8\x74\xb2\x91\xcb\x81\xe6\x27\xce\x3c\x3b\x65\x92\x1e\x24\xce\xb3\x64\x24\x07\x0b\x0b\x3f\x80\x34\x33\x81\xa8\x08\xb1\x3e\x0f\xf2\x50\x65\x9d\x41\x14\x13\xf5\x1f\xd9\x3d\xfa\x33\x49\x84\xa2\xe8\x2b\xd1\xe0\x6b\x6b\xe6\x44\x5f\x8d\xe3\xc0\x15\x07\x2b\x5f\x09\xe1\xaf\xd1\x02\x51\xcc\x63\x1a\xfc\x09\x2e\xc1\x29\x4c\xe9\xcf\xf8\x01\x19\x50\x65\x02\x91\x1a\x3d\x98\x17\x86\xec\xc5\xba\xc8\xa2\xb6\xd4\xce\x5b\x1d\x6a\x31\xc6\x56\xc8\x52\x8a\x00\x43\xf4\xca\x28\x85\x0c\x5a\x40\x1a\x4d\xcc\x98\xe1\xc8\x95\xe6\x93\x9c\x2c\x79\xec\x29\x28\x31\xc7\x03\x97\x17\x54\xca\xbb\xc9\xea\xbe\xdc\x56\x6f\xe0\x1d\x4d\x9d\xa5\x55\x5b\xeb\x4b\xb8\x55\x53\x67\x59\x9d\x7e\x6f\x90\xd8\x60\x19\x26\x27\x36\x35\xbd\x0a\xc7\x6c\xea\x35\xab\xab\xf6\x5a\x70\x5d\xe5\x6f\xcb\xaf\x97\x7f\x0a\xe7\x53\x74\x45\x7e\x40\xb3\xc2\x79\x69\x47\x06\x85\xbd\x2c\xdd\xeb\x72\x1b\xd8\x3e\xe9\x52\x9b\xfe\xf8\x79\x98\x0d\xf4\x93\x13\x9b\x3e\x61\xb7\x28\x66\xce\x04\xb7\xe7\x37\x52\xd1\xcf\x9f\xde\xf4\xc7\x2f\xcd\x6e\x40\x83\x2d\x91\x9b\x06\xa4\x9d\xe3\x36\xe0\x5a\xbb\x42\x6d\xa4\x97\x6f\x85\xd9\x34\x20\x3d\x0d\xb1\x91\x9d\x6d\xc2\x6b\x4a\x79\xb2\x9a\x1c\xc5\xec\x50\x11\xca\x8a\x8c\xa1\xc1\x18\x7c\x3a\x17\xe6\x30\xd0\x2f\xf2\x6e\x2e\xb5\xc1\x2d\xda\x47\x46\x5f\xde\xfb\x82\x36\xda\xc2\x07\xc8\x38\x0f\xe3\x80\x8b\x1b\x1f\x7d\xe9\xd7\xc8\x38\x9e\x3b\xc4\x07\x8e\x40\x75\x65\x0f\x91\x01\xa9\xfa\xcb\x4d\x44\xdf\x48\x51\x6f\x13\xd1\xef\x91\x31\x0c\xb9\xa3\x34\xd6\xa7\x5f\xfd\x0f\x05\xf6\xe5\x8d\xf3\x34\xd4\xff\xa0\xc5\xbd\xbc\x71\x13\xf5\xf2\xc6\x8a\x79\x79\x84\x8a\xf3\x01\x43\xf4\x63\xf5\x09\xbd\x80\x87\x22\x09\x43\xa8\x2e\xf1\xab\x24\x90\x9e\x40\xc8\x77\x0f\x44\x9a\x17\x18\x78\x5e\xc1\x48\x3c\xb0\x58\x55\xce\xf1\xfa\x5d\xac\xa8\x99\x77\x91\x56\xad\x92\x97\xf6\x54\xb2\x14\xf0\x66\xb1\xbc\x75\x51\x0a\x18\x76\x10\x7a\x98\xa1\x31\xc5\xd5\x9b\xc7\x44\x01\x5b\xd4\xd4\x5d\x87\xa1\xa4\x5e\x7a\xf2\x06\x1c\xb5\xa4\x6c\x85\x5c\x01\x2c\x78\xea\x0a\xb5\x6a\x31\x8c\x58\xac\x8d\xda\x61\xc4\x2c\xe3\x63\x0d\x23\xb9\x61\xf5\x8c\x6d\xdb\xa6\x8e\xc5\x22\x6c\xd2\xb1\x2e\xcb\x17\x14\xf4\x9e\xdc\x11\xb8\x5c\xe7\xb5\xea\xc9\x06\x8f\xe8\x27\x43\xc4\x8a\x82\x2f\x41\x78\x89\x3e\xe1\xb5\x9f\x89\xf0\xda\x45\xc2\x6b\x43\x0a\xa1\x63\xc7\xc5\xac\x3d\xe1\xb5\xff\x37\x08\xaf\xfd\xe2\x84\xd7\xde\x1a\xe1\x6d\x40\xda\x39\xc2\x6b\xef\x0e\xe1\xb5\xb7\x46\x78\x1b\x90\x9e\x86\xf0\xda\x9b\x12\xde\xc6\x83\xbc\x2c\x44\x68\x1f\x9b\x0d\x5a\x48\x94\x22\x82\xba\xdf\x7b\x9d\xa5\x84\xf7\x84\x33\x64\x07\x9d\xcb\x98\xa3\x08\x53\xc4\xb0\x1b\x96\x5f\xa9\x39\xb2\x2f\x51\xb7\x72\x2f\x3e\xea\x76\x4a\x8e\x1b\xb5\x39\x25\x7c\x5c\x91\x81\xe3\xde\xe2\xb5\xba\x64\xad\x2e\xd1\x16\xfa\xec\xd3\x30\x62\xdf\x9e\x52\x1a\xd2\x75\x1d\x9f\x85\xac\xbe\x57\x6d\xa2\x6c\x17\x89\x32\x29\x10\x65\x5b\x8f\x28\x93\x46\xa2\x4c\x52\xa2\xac\x58\x32\x19\x5b\x55\x8a\xac\xc3\x5e\x57\xc5\x93\x60\x92\x95\xb7\xa0\x2b\xd5\x63\x4f\x90\xb5\x07\xdb\x27\x3a\x95\x48\x26\x5b\xa8\xb9\x96\xcc\x05\xbd\xff\x75\x78\x7a\x0d\x53\x8d\x66\xa1\x17\xfb\x21\x3a\xfc\xb1\x2e\x4c\x82\x76\xef\x1f\x38\x66\x76\x50\x1f\x22\x3b\x8d\xc8\xc2\x83\x5a\x41\x43\xc3\xf6\xe1\xb7\xd8\xdb\x7b\x7b\x28\x07\x50\xef\xa7\x59\x27\x90\x9a\xb9\x23\x16\x77\xed\x18\x2a\x23\x90\x98\xcd\xce\xbf\x0a\x5a\xaf\xfd\xd1\xb3\x4f\x67\x94\x05\x8d\xb5\x56\x57\x91\x43\x67\x4a\x53\xf4\x36\x93\xaa\xe0\x37\x9e\xd6\x3c\xfc\xb5\x9a\x84\xc7\x46\x53\x19\xcb\xa0\x30\x0a\x0d\xe8\x67\x9a\xe2\xb2\xc5\x3d\x19\x90\x71\x12\x90\x1b\x4c\x5e\xe7\x07\x52\xae\x8d\x17\xc8\x88\xdf\xe4\x03\x09\x70\x9e\xf1\x2f\x88\x8f\x32\x21\x61\x3e\x63\x25\xcb\x97\xac\xfe\xc9\x90\x75\x83\x6a\xe3\x7c\x29\x5a\xfd\xb0\xbe\xad\x31\x18\x4e\x73\xde\x5a\xec\x24\x3b\xea\x2c\x1b\x85\xdd\x46\xf1\x04\x5c\x7f\xd1\x28\x83\x1e\xfb\x7e\xc2\xca\x52\xdf\x55\xd3\x5b\x29\x10\x9a\x64\x25\xe9\x78\xaa\x25\x72\x32\x94\x53\x56\x26\xb7\xec\x71\xfd\xd4\xd7\x9a\x16\x53\x79\x39\x6d\xe6\x71\x25\xdd\xb7\xe8\x76\xcd\xb8\xe5\xe1\x3d\x16\x2c\x6a\xc6\xd7\xd2\xf7\x32\xa6\xd5\x12\x5b\xc7\xf7\x4e\x73\xaf\xd3\x01\xd7\xf0\xbd\x1d\x38\xf4\x10\xaf\x68\xea\x9e\x7a\x9c\xe3\xd9\xf3\x1c\x7b\x88\x8e\xf2\x73\x0f\x78\x0a\xe9\x43\xfb\x33\x8f\x44\xcd\xcf\xff\xd0\x03\xc6\xf9\xd2\xa7\x1e\x42\x85\x2d\x1d\x7b\x34\x41\xed\xdc\xb9\x87\x70\xaf\x5d\x39\xf8\x48\x5c\x7d\x2b\x27\x1f\x4d\x50\x4f\x73\xf4\x91\xf4\xf6\xa2\x2f\x31\x7d\xa0\x58\xfb\x98\x44\xdc\xa6\x6d\x20\xe3\xe9\xca\x48\xfa\xf3\xa9\xc7\x03\xe7\xa7\xe7\x85\xf3\x01\x08\xf8\x79\xa4\x87\x2a\xad\x13\x02\x10\x6e\x3a\x22\x80\x2a\x75\x46\x70\x4b\xc4\xaf\xa1\x44\x5b\xeb\x67\x22\x72\x51\x89\xdd\x57\xb6\xed\x79\xab\x0d\xf6\xfc\x42\xf8\x83\xba\x69\xd2\x7d\x27\xa8\x72\x7b\x24\xa0\xea\xae\x8f\x2a\x55\x6d\xae\x79\xea\xb4\x6c\x7d\x0b\x53\x27\xbc\x3b\x57\x24\x11\xd3\x26\x0b\x03\xf6\x3c\x5c\x01\xfa\xc9\xa9\xc2\x80\x86\x2e\x84\x47\x9d\x1b\x12\xa9\xe7\xe7\x4f\x16\x06\xec\xa5\xb9\x02\x68\xb0\x25\xaa\xd0\x80\xb4\x73\x4c\x01\x5c\x6b\x57\x88\x82\xf4\xf2\xad\xf0\x84\x06\xa4\xa7\xa1\x09\xb2\xb3\xe7\x7b\x25\xe8\x95\x9b\x97\xba\x58\xdc\xa5\x68\xbd\xae\x33\x60\xf2\x4d\xa1\x81\xdd\xd7\x7d\x6d\x46\x48\x1e\x20\xe3\x66\x33\xc9\xd7\x20\x79\x7d\x7a\xa5\xfb\x76\x91\x10\x3d\x04\x75\xaf\x36\xe9\xf3\x0d\x32\x2e\xec\x4d\x04\xbf\x47\xc6\x2f\xf6\xd5\x70\x13\xd1\xbf\x21\xe3\xea\xf4\x7a\x13\xc9\xb7\xc8\x18\xda\xe7\xa7\xe2\x3d\x6b\x5d\xd1\xbf\x23\xe3\xe4\xf2\xfc\xfc\xf8\xa2\x9f\xd8\x57\x9f\x87\x0d\xae\x0b\x34\x2c\x62\x85\x14\x7a\xad\x45\xc2\x22\xd6\xc4\xc1\x22\xa6\x28\x58\x44\x04\x03\x8b\x98\x05\x3e\xb8\xf6\x65\xf2\x12\xe5\x10\x6f\x65\xa4\x72\xba\x74\x45\xc9\xde\xd4\xca\x56\x78\x8d\x68\xc7\x30\xdd\xb8\x93\x01\x25\x21\x25\xfc\x61\x63\x80\x0b\xe2\x6e\x70\xd1\xa4\x84\xaf\xc9\x5f\x9b\x0b\x5f\x61\x46\x20\x68\xf1\x75\x00\x2a\xf2\xac\x1a\x6e\x48\x6a\xef\xc8\x56\x1b\xd6\x5e\xa6\x3d\x33\x6f\x54\xbf\x9d\x06\x44\x95\xe2\xb2\x1f\xdd\x9d\x1d\x67\xc9\x50\x13\x4f\xb2\xb2\x15\xbc\x9b\x81\x16\x5e\xba\xd2\xc5\x0a\x9a\x16\xb7\x0b\xea\xbf\xf8\x00\xd8\x63\x9f\x4c\x02\xf5\x93\x47\x63\x2f\x61\x9d\xe9\xaf\x23\xcf\x40\xb6\xee\x17\x92\xa2\xbc\xe5\xaf\x24\x13\xdd\x85\x80\xfa\xd9\xa6\x3a\x63\x2d\xfe\xde\xd2\x81\x75\xae\xe0\xf2\x68\x93\x91\x85\xa3\x84\xdf\x26\x7b\xde\x74\xd0\xff\x0d\x00\x00\xff\xff\x9d\x2e\xe3\x8f\x7e\x49\x00\x00"

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 18814, mode: os.FileMode(420), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

