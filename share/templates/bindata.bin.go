// Code generated by go-bindata.
// sources:
// index.html
// DO NOT EDIT!

// +build bin

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5c\x6d\x73\xdb\x36\xf2\x7f\xdf\x4f\x81\x62\xda\x7f\x93\x4e\x48\xd5\x8e\xd3\x7f\xce\x95\x7c\xe3\x58\x6e\x8e\xd3\x58\xd1\xc4\x72\xee\x7a\x9d\x4e\x03\x91\x90\x85\x98\x22\x79\x04\x28\xdb\xa7\xd1\x77\xbf\x05\xc0\x47\x89\x7a\x20\x65\x3d\xcc\x24\x2f\x6c\x91\xe0\x62\x77\xb1\xbb\x58\xfc\x16\xa0\x34\x99\x38\x74\xc0\x3c\x8a\xb0\xfe\xe4\xa7\xa7\xc4\x65\xde\xdd\x5f\x7d\xe2\xdc\x52\x97\x0e\x04\x9e\x4e\xbf\x69\x12\x34\x0c\xe9\xa0\x35\x99\x98\xff\x80\xcf\xe9\x14\x4d\x26\xb6\x4b\x38\x9f\x4e\x65\xdb\x85\xbe\x44\xbe\x77\xe1\x32\xfb\xae\x35\x11\x43\xc6\xcd\x21\xf1\x1c\x97\xaa\x96\xe9\x37\x08\x9d\x01\xe1\x1b\xc9\x54\xf5\x36\x7b\xf4\x41\x4c\xa7\xcd\x06\x81\x76\xea\x39\xd3\xe9\x72\x4d\x42\x76\x3b\x7c\x52\x55\xb4\x7c\x94\x29\xb5\x42\x95\xb1\xd4\x65\x46\x81\x77\xd0\x54\xa6\x84\x6c\x5f\x5b\x11\x49\x1c\x1b\x83\x07\xc4\x9b\x19\x0e\x09\xa9\x88\x59\x9d\x35\x1b\x92\xe0\x6c\xb9\xa2\xfa\xe2\xaf\x28\x10\x6c\x44\x71\xcc\x54\xca\x69\x13\x41\x4c\xdd\x2c\x07\x1b\x37\xc7\x6c\x1a\x3f\xa2\x27\xe0\x84\x7e\x6c\x2c\xd3\x69\xe8\x73\xe1\x11\xcd\x2b\x36\x22\x6e\x60\x18\x70\x8f\x09\x97\x76\xe1\x9e\x3d\x50\x07\xe1\x84\x0e\x61\xa4\x65\x25\x0d\x60\x83\x44\x7c\xd6\xb4\x96\x39\x40\x45\xea\xba\x04\x4b\x9a\xef\x02\x74\xda\x8a\x39\x07\x24\x24\x23\x2e\xbd\xea\xb0\x31\x52\x86\x6f\xe1\xdb\x90\x39\x46\xdf\xf5\xed\x3b\x50\xd2\x10\x7e\x80\xcf\xc0\x57\x79\x0a\xdb\x77\x0d\x37\x44\x2e\x09\x6f\xa9\x71\x84\x04\xb8\xcf\xd0\x11\x7a\xa6\xc8\x26\x13\xe5\xb3\xae\xcf\x99\x60\x63\x8a\xbe\x0b\xcc\x77\xe0\x5a\x3c\x64\x0e\x35\xf8\xd0\xbf\x97\x17\x18\x61\x79\x99\xdd\xc3\xf0\x40\x0e\x48\x1a\x1e\x25\x82\x86\x27\x9a\xb9\x3f\xa6\xe1\xc0\xf5\xef\xb1\xa6\x00\x1a\x02\x42\x64\xec\xf5\x80\x79\xcc\x1f\xa2\x4d\x48\x4b\xb6\xf0\x3b\x9f\x38\x88\x8c\x6f\x91\xc3\x78\xe0\x92\x47\xe4\x83\xb7\x7c\x8f\x67\xdd\x67\x42\x0d\x27\x4a\x18\xf2\x1f\x82\x4b\x41\x81\xc4\xa6\x46\x10\x52\x04\x92\x89\x30\x54\x32\x38\x33\x4d\x13\xc5\x3e\x4f\xa4\x48\x0f\x68\xc5\x1b\xc3\x23\x08\x4f\xb0\x80\x32\x58\x7a\xb1\xd0\x72\x47\x4f\x63\xaf\x52\xdf\x65\x63\x8d\xdc\xe4\xe9\x88\x7a\x11\x4a\x87\x2a\x2f\x52\x2a\xa0\x73\x59\x76\x53\xe4\xca\xbc\x20\x12\xc6\x6d\xe8\x47\x01\xce\xd3\x2c\xa4\x32\x5c\xd2\xa7\x2e\xe2\x23\xe2\xba\xda\x83\x9e\x7f\x1f\x12\xe8\xed\x50\xf0\x47\x6a\x9a\xd5\x8c\xfa\x91\x10\xbe\x07\x76\x22\xc9\x53\xdd\x12\xf3\xe6\xd4\xf6\x3d\x87\x84\x8f\xd2\xd5\xa4\xef\x52\x07\x9f\xc9\x10\x07\xfb\x39\x7a\x6e\xd4\x90\x35\x99\x08\x3a\x82\xb8\x11\xcb\x96\x05\x84\xde\x51\xce\xdb\x69\xf8\xc1\xc4\x2d\x68\x96\x1f\xb5\xd4\xe4\xc9\xb5\xd0\x13\x0e\x5d\xf9\x21\xad\xad\xc5\x4c\x43\xb3\x91\x8f\x81\xdd\x04\x44\xe8\xdf\xf3\x9d\xc4\x83\x67\x9e\xf7\xb9\xef\x46\x82\xee\x22\x30\x3a\x59\x5e\x9a\x71\x09\x8f\x6c\x1b\x08\x76\x1a\x20\x1b\x6b\xb3\x24\x50\x9a\x8d\xc8\x4d\xf2\x9f\x24\xca\x67\xb4\x8e\xef\xfd\x9b\x86\x7e\x2a\x1a\xeb\x9c\xb6\x22\x75\x21\xc8\xf6\x82\xd9\x04\xb4\x13\x21\x0b\x68\x96\xca\xca\xc9\xc5\x90\x12\xf0\xb3\x4e\xea\xf1\x63\xfa\x00\x37\x0e\x82\x7c\xab\x07\x6a\x40\xae\xed\x82\x49\x7c\x27\x81\x11\xcb\xa9\x0b\x8b\x1a\xfa\x48\xdc\x88\x2e\xef\x88\x33\x7c\x22\xad\x30\x99\xb0\x41\xbc\xc8\xc2\xea\xe1\xc0\x32\x31\x9d\xc6\xa3\x98\x4c\x42\xe2\xdd\x42\x96\x77\x49\xb6\x12\xc7\x44\x00\x87\xb8\xc8\x51\x7e\xe6\x0f\x08\x7d\xd2\xe0\x49\x3e\x7a\x26\x89\x9f\x9b\x23\x12\x3c\x1b\x44\x9e\x2d\x57\xb5\x67\xc0\xe7\x05\x62\xcf\xd1\x04\x01\x58\x8a\x42\x0f\x3d\xfb\x94\x72\x88\x9d\xf1\x1b\x7d\x44\xd8\x25\x06\x4c\xb6\xfe\xa3\x11\x28\x3b\x60\xa9\x80\xa9\x6d\x52\x40\x70\x85\x45\x64\xa5\x51\x61\x76\xe5\xd8\x8c\xea\x58\x57\xb3\x50\x36\x4e\x01\xd5\x02\x06\xb0\x78\x4a\x91\xd2\x2c\x9f\xe0\x7f\x1c\xf6\xe6\x35\x00\x99\x3b\x88\x7c\xfa\x6c\x02\x98\xe0\x14\xb1\x17\x92\xf8\x14\xfd\xa0\x98\xfe\x30\x7d\x3e\xfd\x94\x71\xce\x87\x72\xcc\xea\xf9\x2f\x9a\x24\x6d\x55\x78\xaa\xe4\x2e\x0e\xf1\xdc\xff\x6c\xa5\x4f\x1c\xbf\x0e\x16\x1b\xd1\xd1\x1e\xc1\xd8\x15\x1d\x6d\x17\x8d\x49\x01\x19\x1c\x83\x3b\x5f\x67\xe4\xed\x81\x31\x2d\x63\x2b\x50\xac\x92\xb5\xbe\x62\xb1\xf9\xb5\x17\x0c\xb8\x53\x30\x26\xe5\x1d\x00\x1a\xab\xae\xc6\x97\x03\xc7\xe4\x9c\xda\x0b\x1e\xd3\x93\xf9\x60\x00\x59\x7d\x75\x36\x47\x64\x5a\xf6\x7e\x21\x59\x92\xb6\xab\x83\x86\x9e\x2f\x88\x5b\xa7\xe3\x0d\xa7\xb5\x30\xe0\xaf\x21\x5d\x01\x01\x17\xca\xfb\xbe\x2e\x74\x1c\x29\xf3\xcc\x23\x47\x68\xcf\x70\x83\x26\xaa\x85\x1c\xa1\xeb\x5a\xd0\x11\xe8\x62\xec\x78\xc7\x3c\x89\x1c\xa1\xc1\xfc\x8d\x79\x1b\x02\xc7\x8c\x4b\x4d\xd8\x28\x19\xa8\x40\xd8\x88\x83\x8c\x88\x8d\x18\xc8\xd0\x98\x61\x90\xb3\xca\x52\x26\xa8\x7f\x6b\x44\x9c\x06\x36\x24\x06\x07\x3c\x14\xdf\xb4\x32\xd5\xba\x36\xb8\x35\xaf\xab\x6a\x58\x11\x52\x55\x71\xb2\x66\x7b\x80\x40\xd9\x19\xec\x11\x27\xb7\x07\xdb\x85\xc9\xc0\x3f\x43\xc9\x6d\xc6\xef\x50\xc4\x09\xcc\xef\xad\x22\xe5\x4c\xce\x56\xd0\x72\x15\x9b\x7d\x05\xcb\xf3\xc8\xa8\x3d\xd8\x29\x56\x06\x71\x07\x00\x95\x2b\x6b\xf1\xe5\x20\x65\x98\x4f\x7b\x01\xca\x6a\x1e\x1f\x0c\x4e\xae\xad\xcd\xe6\x30\x59\x89\xde\x27\x4a\x2e\x86\x5d\xb9\xf1\xf4\xf1\x2c\xfa\x28\x3f\x52\x93\xdd\xa1\x23\x84\xdb\x74\xcc\x6c\xc8\xc1\xf1\x31\xe7\xaf\xd7\x4a\x21\x79\x52\x59\x05\xf0\xd4\x92\x7e\x8c\xf0\x95\x1f\x79\x02\x62\x39\x96\x7e\xd5\xdd\x40\x7a\x61\xc9\xae\xa4\xc8\xcf\x08\x2b\x94\x08\x21\x1e\x2b\xd2\x7b\xdf\x3b\x7f\xb7\x7b\x45\x5e\x21\x2c\xc1\x26\xe8\x91\x28\x72\x73\x7d\xd9\xde\x83\x45\x5e\x22\x7c\x3e\x26\x2c\x67\x91\xf3\x8f\xe7\xd6\x1e\x2c\x72\xa2\x2c\xf2\x7d\xd1\x22\xdd\x8b\xde\x1a\x8a\x2c\x2e\x9b\x20\x85\xde\xdd\x48\x84\x33\x5f\x39\x39\x83\x0c\x48\xa6\x64\x65\xb5\xd3\xaa\xd2\xc9\x19\xac\x55\x39\x39\x83\xb8\x70\x72\x58\xa8\x0e\xff\xa5\x0a\x66\x9b\x85\x1d\x75\x7a\x5f\xb3\x7a\x9a\x05\x98\xb0\x52\x48\xae\x74\xdc\x21\xa3\x95\x7b\xe8\x8b\x98\xa0\x98\x4b\xa2\x5b\x1d\x2e\xf9\xca\xe6\x36\x24\x8f\x33\x23\xd1\x90\x34\x57\x3d\x81\xbc\xb2\xfa\x2d\x86\xc4\x96\xe7\x3b\x14\x52\xbc\x9a\xbb\x09\xbd\x6e\xcc\x55\x29\x3b\xd1\xb2\xa4\x46\x2c\x2a\x19\xc9\x79\x9d\xea\x18\x15\xc8\x77\xa3\xa2\x9a\xd0\x4b\x75\x1c\x40\x9d\x9a\xe9\x38\x28\x54\xad\x15\x8b\xd7\x45\x7a\x2e\xa9\x67\xb5\x15\x75\x39\xbb\x8e\xbd\x4b\xea\xdc\x39\x93\x7f\x5f\x30\x79\xb1\xc7\x97\x51\x20\xdb\x41\xb4\xc7\x0a\xf9\xa2\x7b\xb3\xdd\x12\x59\x0a\xc8\x6a\x64\xb8\xdb\x6e\x71\x0c\x02\xb6\x52\x15\x57\xb2\xd3\xd7\xb2\x78\xbe\x0c\x02\x03\xee\xb4\x2e\x96\xf2\x0e\xa0\x30\xae\xae\xc6\x97\x53\x19\xcb\x39\xb5\x97\xd2\x58\x4f\xe6\x83\xa9\x8d\xeb\xab\xb3\x79\x71\xac\x65\xef\xf7\x0c\xe9\x02\x6c\x51\xf3\x60\x26\x5c\xb1\x8d\x5e\xde\xf1\xfa\x91\xd7\xea\xf7\x4f\xc2\x44\xad\x8e\x96\xe3\xd6\x3f\x43\x02\x80\x30\x5f\x06\x41\x63\x06\x17\xe0\xa6\xd6\xe9\x11\xf4\x5b\xab\x06\x02\xba\xb8\x08\xea\x60\x25\xda\xec\x6c\x58\xf9\x64\xdb\x11\x09\xbb\x4d\x0f\x5f\x92\x49\x30\x83\x59\x25\x77\x19\x27\xd9\x21\x4c\xa1\x25\x71\xca\x22\x08\xf2\x04\xd2\x21\xd8\x8a\xc2\x93\x86\x1d\xc8\x96\x01\x5b\x14\x9e\xb6\x3c\x91\x74\x83\x79\x90\x15\x38\x5d\xa6\x85\x8c\xfe\xa2\x16\x69\xcb\x13\x9f\x82\xc5\x7c\x7f\x78\x21\xbf\x0d\x40\x22\x57\x5c\x07\xbe\xe0\xa7\x48\x84\x11\x3d\x3c\xe4\xcf\xf6\x79\x34\x66\x6d\xf9\x68\xcc\xca\x1f\x8d\x59\x9e\x00\x7a\x80\xee\x7c\xbb\xe8\x3f\x93\xb3\x95\x22\xa0\x8a\xcd\xbe\xd6\x00\xf3\x80\xcf\xda\xed\xd1\x98\x75\x10\x47\x63\x95\xb5\xf8\x72\x0a\x00\x6b\x4f\x47\x63\xd6\x41\x1d\x8d\xd5\xd6\x66\x73\xf4\x6f\xed\xfb\x68\x0c\x67\x29\xbb\x16\xae\xee\x96\xed\x2e\xb6\x43\x3f\xe0\x2f\x2e\xc3\xd0\x0f\x39\xb2\xbc\xc6\xfb\x48\xa0\x80\x86\x71\x1c\xe2\x85\xcc\x8f\xf3\x08\xa7\x30\x1f\xd0\x3b\x1f\xdc\x61\xbd\x47\x01\x2f\x13\xd8\x25\xf6\x1d\x15\x4f\x25\x2b\xe5\xb6\x48\xdc\x1b\xf6\x64\xb2\x40\x46\x93\x9d\xf5\x9b\x0d\x76\x36\x23\xab\x42\x81\xc2\x06\xc4\x71\x42\x3e\x5f\xa4\xb0\xdc\x59\x4d\x4c\x54\xe7\xa4\x86\xad\x77\x52\xc3\x92\x93\x9a\xf8\x98\x86\x0d\xcc\xa7\x3e\xa3\x49\x59\x6e\x78\x22\x90\x30\xb3\xba\x6b\xb2\x5a\xec\xc2\xff\xf3\xfa\x3c\xf8\xa5\x10\x1f\xea\x40\x06\x39\x6a\x16\x50\x3d\x0b\x46\xbe\x13\xb9\x3e\x3a\x79\x8b\xb3\xa9\x9a\x9d\x49\xcc\xf7\x83\xf0\xca\xf5\x89\xb5\x55\xf3\xca\xf2\xe6\x6a\xb5\x24\xab\x74\x98\x8b\x52\x3a\x19\x9c\xf9\xd4\xd2\x28\xd6\x1b\xca\x79\x15\xfa\x97\xe9\x28\x49\xca\x95\x84\x27\xa9\x96\x39\x81\x2f\x4a\x86\x4b\x93\x34\x31\xcf\x4a\x67\x90\xdc\x80\x1b\x8b\xfb\x97\xea\xa2\x19\xe4\x95\x89\x3f\xb4\xd3\xbe\x29\x35\xc4\xb9\xeb\xea\xf4\x2c\x07\x43\x5d\x41\x62\xb3\xcf\x34\x48\x81\x69\x4b\xa2\xe9\x6c\x8b\x32\xa2\xf2\x74\x7a\x64\x93\xcf\x91\x72\xd4\xb9\x04\x92\x58\x30\x27\x74\xb5\xaf\x0b\x0a\x2d\x75\x78\x65\x16\x45\x5d\x67\xb2\xdd\x9c\xb2\xa5\x3e\x2f\x7a\x3c\x5d\x12\x16\x31\x5a\xe1\xf1\xcb\xcc\xd7\x4b\x19\x94\x78\xfc\x09\x67\xf9\xaa\x09\x1c\xa4\xab\xd1\x7c\x44\xc6\x6b\xcb\x8a\x98\x4e\x38\x94\x06\x75\xcc\x62\x61\x54\x2f\x58\x19\x17\x59\x6c\x95\x46\xdd\x9c\x2e\xcb\x59\x94\x59\x7d\x07\xe6\x7e\xf3\x7b\xef\xf2\xba\xd4\xd8\x6f\x1e\xa1\x64\x5d\x61\x6a\xdd\xbb\xd4\xd0\xaa\xfb\x7a\x66\x7e\x63\xf5\xae\x97\xd8\x58\x02\x86\x85\x7a\xa8\xbe\x4b\xac\x2b\x3b\xaf\x6f\xda\xaa\x3b\x36\x5a\x44\x3c\xd2\x4e\x34\x3a\xc0\x03\xda\x80\xef\x71\x9b\xa6\xcb\xb7\xbb\x4d\x03\xfc\xb3\x44\xdb\x0d\x7d\x59\x77\x6c\x7b\x97\x26\x15\xb3\x95\x4d\x9a\x2a\x16\xfb\xba\x49\x33\x5f\x94\x77\xf9\x4e\x37\x69\x40\xdc\x01\x6c\xd2\x54\xd6\xe2\xcb\xd9\xa4\x81\xf9\xb4\x97\x4d\x1a\x35\x8f\x0f\x66\x93\xa6\xb6\x36\x9b\x6f\xd2\x28\xd1\x87\xf2\xfe\x72\xbd\x17\x45\xbb\x5c\xbd\xca\xdc\xb5\xda\xf2\x3d\x51\xb4\xf1\x1b\xaa\xa8\x92\xe4\x63\x84\x6f\x36\x90\x5c\x55\xdc\x4b\x10\x77\x7d\xf9\x01\xef\x7e\xa0\x27\x60\x62\x25\x37\x7d\x17\xb7\xfb\xc1\x7a\x92\x57\x82\xab\xe9\xf1\x0a\xe1\x8e\x55\xd0\xa3\x63\x5d\x5c\xee\x5e\x8f\x9f\x11\xfe\x68\x7d\xe8\xed\xc1\x13\xff\x8f\xf0\x87\xcb\xeb\x0d\x83\xdd\xa6\x72\x6f\xb4\xaa\xe8\xd7\x08\xf7\xac\xab\xcb\xba\x83\xae\x2a\xee\x6f\x08\x5f\xbc\xbf\xba\x3a\xef\xb4\x93\xef\x08\x74\xce\xaf\x8a\xbe\x9e\xdd\x2f\x0c\x00\xff\x95\xec\x16\x42\x8d\x9f\x01\x6c\x49\x52\x67\xaf\x30\xe0\xab\x37\x0a\x03\x9e\xfc\x8e\x0a\x93\x5f\x85\x0d\xb8\x09\x89\x69\xc3\x6d\xc2\x6c\x5b\x2f\x61\x57\xf3\xeb\xa8\xd0\xfd\x66\xfd\xee\x59\x1f\x4e\xc3\x4d\x64\x76\x43\xe6\x87\x4c\x3c\x6e\xc2\xa3\xc3\xec\x8a\x5b\xa3\xc5\xfe\xd7\xec\xbf\x1b\xf5\xff\x40\x39\x2c\x91\x9e\xa8\xc6\x23\x37\xcb\x24\x93\x1e\x5b\xbd\xbf\x9b\x8d\xb8\xb0\x19\xbc\x93\x62\xb5\xf9\x6d\xfb\xfd\x45\xef\xf7\xee\x25\x1a\x8a\x11\xc0\x87\xa6\xfe\x90\xe5\x1f\xac\xe5\x31\x38\x18\x51\x01\x28\x6f\x48\x42\x4e\x45\x0b\x47\x62\x60\xbc\x8e\xa1\x40\x53\x95\x7a\x25\x3f\x43\x88\xe0\x0a\x2c\xd1\x6c\x68\x82\x1c\x9f\xa1\x10\x81\x41\xff\x13\xb1\x71\x0b\xff\xcb\xb8\x39\x37\x2e\xfc\x51\x40\x04\x03\x8c\x88\xc1\x1a\x9e\xec\xd6\xc2\xd6\x65\x8b\x02\x74\xc2\xf9\x9e\x92\x73\x0b\x8f\x19\xbd\x0f\xfc\x50\xe4\x88\xef\x99\x23\x86\x2d\x47\x7d\xb3\xc9\x50\x37\x2f\x10\xf3\xa0\x84\x23\xae\xc1\x01\xbe\xd0\xd6\x91\xf9\x13\xcc\xbc\x6f\x0d\xe3\x0f\x48\x1b\xd6\xe5\x9f\x31\x5b\x95\x7c\x42\xea\xaa\xc2\x33\x14\x76\x24\x10\x03\xae\x38\xf9\x35\xc6\x01\x19\xcb\x7b\x13\xfe\xc9\xee\x7f\x80\xc9\xd8\xe0\x4f\xc3\x98\xeb\xae\x7b\x71\x88\x38\xf0\xec\xcb\xe3\x87\x97\xc7\x29\x0f\xb0\xcd\x7b\x65\x8b\x8f\x34\xe4\x90\x54\xa6\xd3\x84\x2d\x4f\x2e\x8c\x97\xc7\x66\xe0\xdd\x22\xf1\x18\xd0\x16\x1b\x91\x5b\xda\x80\x5b\x3c\x27\x85\x04\x81\x4b\x0d\xe1\x47\xf6\xd0\x28\x48\x3c\x3a\xfe\xe9\x01\xfe\x2a\xc9\x04\x7a\xb3\xa2\x94\x93\x93\x07\xf8\xab\x26\xe5\xe4\xa4\xaa\x94\x57\xc7\x0f\xf0\x57\x4d\xca\xab\xe3\xaa\x52\x5e\x83\xc5\x5e\x57\xb4\xd8\xeb\x05\x16\xe3\xe2\xd1\xa5\x7c\x48\x29\x04\xa5\xf2\x21\x96\xa9\xa0\x61\x73\xbe\x8c\x3f\x3c\x6e\x30\xcf\xa1\x0f\xa6\x24\xd4\x13\x34\x99\x74\xcd\xbe\xef\x3c\xce\x43\x73\xe1\x43\xd5\x41\xc2\x52\x1c\x1e\x3f\x8b\xf7\x47\xb2\x0a\xa1\xb8\xeb\x50\xa8\x12\x67\x0a\x4b\x39\xe9\x8f\x91\x1a\x0c\x10\x93\xf0\x96\x79\x46\xdf\x87\x1a\x65\x74\x8a\x7e\xc2\xd9\x66\x50\xb2\x86\xa9\x77\xb3\xf4\x8a\xde\xc2\xb3\x3f\x6a\x9a\x90\x47\x01\x90\x51\xbe\x00\xdd\xcf\xf5\x32\xd3\xfc\x87\x9a\x2a\xaf\xaa\xdc\xc2\x64\xfd\xd1\x57\x8f\x54\x1b\x18\xea\xb8\x58\x15\xcd\x94\xc8\x70\x5b\x48\xb6\x2a\xcb\x46\x41\x21\x0f\x97\xa9\x1f\xff\xba\x6b\xae\x1b\x8a\x07\x30\xb3\x19\xb5\x7c\x3c\x09\x1b\x33\x97\xcd\x0b\x15\x7d\x5a\xaa\xcd\x54\x74\x65\x0e\x8d\x57\xa5\xb5\x3d\x0a\x15\x79\xc1\x87\xca\x79\x3a\x0c\x65\xee\xe5\xa7\x8d\xc6\xfd\xfd\xbd\x09\x26\x0f\xe1\xcf\xb4\xfd\x51\x43\x27\xeb\x06\x04\x33\x25\x9c\xf2\x86\x1c\x15\x17\x7f\xb7\x47\x41\x6b\x3e\x70\xf1\x6c\xc1\x9f\x96\xfa\x43\xdf\x55\xbb\x83\x49\xee\x27\xeb\x0d\x3b\x7f\x29\xc7\x5f\xe6\x98\x20\xfe\xc5\xda\x4a\x61\x95\x76\x32\x0b\x95\xf4\x72\x21\xf2\xa7\xd8\xaa\x4b\x51\xbd\xaa\x88\x71\x06\x35\xa4\xc8\x4e\x55\x84\xc8\x2f\x03\x55\x97\xa2\x7a\x55\x11\xc3\xea\x8c\x85\x55\x1c\x4b\xc0\x6b\x08\x91\x9d\x66\x84\x70\x3b\x64\x81\xc8\xe7\xe9\xcf\x64\x4c\x74\x2b\x3e\x1b\x93\x10\x49\x28\x83\x5a\x28\x06\x35\xd3\xe9\x2f\x30\x87\xd5\xe3\x75\x38\xcc\xe2\x24\xc4\x43\xbb\x3c\xff\x7f\xe6\x0d\x5d\xc5\xf4\xce\xdf\xbe\xbd\x6c\xf7\x19\x34\x8e\x98\xd7\xe8\x47\xf2\x47\xb1\x4d\xb8\x34\x3f\x73\x80\x69\x2e\x07\x3c\x05\x5c\x92\x07\xaa\x51\x62\x37\xf5\x0a\x45\xaa\x58\xb3\xa1\xd7\x0c\xc8\x8d\x12\xc2\xfd\x2f\x00\x00\xff\xff\xce\x57\x2f\x0d\xca\x5c\x00\x00"

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 23754, mode: os.FileMode(420), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

