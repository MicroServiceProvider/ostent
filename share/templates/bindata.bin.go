// Code generated by go-bindata.
// sources:
// index.html
// DO NOT EDIT!

// +build bin

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xe4\x5c\x6f\x73\xdb\x36\xd2\x7f\xef\x4f\x81\xf2\x49\x9f\x69\x3b\x25\xd5\x38\x4e\x2f\x97\x4a\xbe\x71\x2c\xb7\xd5\x34\xb6\x35\x8e\xdc\xbb\x5e\xa7\xd3\x42\x24\x24\x21\xa6\x48\x1e\x00\xca\x76\x35\xfa\xee\xb7\x00\xc1\xbf\x22\x2d\x42\x91\x6d\x4d\xef\x85\x23\x11\xc0\xfe\xb0\x58\x2c\x76\x7f\x00\xa8\x74\x3f\xeb\x5f\x9e\x8e\x7e\x19\x9e\xa1\x99\x98\xfb\x07\xc7\xcb\xe5\x8b\x05\x7a\xdb\x43\xce\x25\x17\x24\x10\x3f\x13\xc6\x69\x18\xac\x56\x5d\x55\x8d\xd0\x71\x77\x46\xb0\x07\x5f\xe4\xd7\x39\x11\x18\xb9\x33\xcc\x38\x11\x3d\x2b\x16\x13\xfb\x8d\xa5\xab\x04\x15\x3e\x51\xdf\xe1\x69\xb9\x74\xfa\x58\x60\x67\x16\x72\x11\xe0\x39\x59\xad\x50\xa8\xe0\xbb\x9d\xbc\x9d\x86\x9b\x09\x11\xd9\xe4\x3f\x31\x5d\xf4\xac\x7f\xd9\xd7\x27\xf6\x69\x38\x8f\xb0\xa0\x63\x9f\x58\xc8\x0d\x03\x29\xd6\xb3\x06\x67\x3d\xe2\x4d\x89\x55\x94\x94\xc8\x3d\x6b\x41\xc9\x6d\x14\x32\x51\x68\x7c\x4b\x3d\x31\xeb\x79\x64\x41\x5d\x62\xab\x87\xaf\x11\x0d\xa8\xa0\xd8\xb7\xb9\x8b\x7d\xd2\x7b\xa9\x81\x96\xcb\x1f\x47\xe7\xef\x91\xd5\xfd\xcc\x5a\xad\x6c\xfb\x57\x3a\x41\x83\xb3\xdf\x8e\xbb\x3e\x0d\x6e\x10\x23\x7e\xcf\xe2\x33\xc0\x76\x63\x81\x28\xc0\x5b\x68\xc6\xc8\xa4\x67\x75\x26\x78\x21\x9f\x1d\xf8\xa7\x0e\xe9\x57\x12\x78\x74\xf2\x9b\x6d\x17\x91\x12\x00\x4e\xff\x24\xbc\x67\xbd\x3a\xbc\x7b\x75\x98\xc1\xc9\x49\x58\xad\x52\x54\x9e\x7e\xb1\x5f\x1d\x3a\x51\x30\xb5\x90\xb8\x8f\x60\xa4\x74\x8e\xa7\xa4\x23\x0b\xb4\x15\x72\x6c\x1c\x45\x3e\xb1\x45\x18\xbb\x33\xbb\xd4\xcf\xcb\xc3\x6f\xee\xe0\x6f\x63\x4f\xd0\xc6\x31\x44\x3e\x3a\xba\x83\xbf\xcd\xc8\x47\x47\xa6\xc8\xaf\x0f\xef\xe0\x6f\x33\xf2\xeb\x43\x53\xe4\x37\x60\x8d\x37\x2d\xac\xf1\xa6\xc1\x1a\x5c\xdc\xfb\x84\xcf\x08\x11\xe9\xa4\x08\x72\x27\x3a\x2e\xe7\x55\x4c\x28\xea\xd0\xc0\x23\x77\x8e\xac\xd4\x40\x1d\xbd\x96\x8e\xbb\xe3\xd0\xbb\xd7\x85\x01\x5e\x20\xd7\xc7\x1c\xf4\x83\xaf\x63\xcc\x50\xf2\x61\x7b\x64\x82\x63\x5f\xa4\x8f\x5c\xc0\xaa\x70\x61\x58\x91\x85\x58\x08\x4e\x2c\x9b\xd3\x29\x14\xc2\x08\xd3\x95\xd7\xf5\x68\x86\x26\xd7\x03\xa6\x01\x61\xf6\xc4\x8f\xa9\x97\xb6\xa9\xb4\xd2\xe8\x52\x33\xc2\x60\x0d\xf9\xf6\xdc\xb3\x5f\xa2\x08\x7b\x1e\x0d\xa6\xb6\x4f\x26\xb0\x60\xd3\x21\xa4\xf2\xe3\x58\x88\x30\xa8\x40\x88\x70\x3a\xf5\x89\x84\xf0\x71\xc4\x89\x97\x9a\x28\x69\x6c\x21\x0f\x42\x82\x6e\x24\x95\x4b\x5a\xa5\xc5\x98\x4d\x65\x4c\xf9\x3f\x8d\x95\x55\x17\xba\x95\x1d\xf3\x08\x67\xdd\x72\x66\x87\x81\x7f\x5f\x6e\x02\x8d\x46\x89\x1e\xb9\x75\xba\x1d\x29\xf6\x00\x92\x9a\x74\xe8\x76\x0d\x6a\x6f\x24\x3b\x89\x11\x0f\x9a\xd0\xe2\x08\xcc\x48\xb8\xb6\x26\x78\x0e\xcc\x7b\xcf\x4a\x3e\x7f\x4f\xc3\x70\xc5\x98\xcb\xa5\x20\xf3\xc8\x07\x39\xa4\x5b\xf2\xb7\x6f\xab\x22\xc8\x81\x5c\x50\xd5\x08\xf4\x01\x0f\xaa\xf8\x13\xf5\x32\x4f\xc8\x27\x37\x73\xc5\xa4\x00\x3d\x30\xbd\xc7\xdd\xd8\x2f\x78\x54\xda\x14\x3e\xaa\x4e\xe0\xd3\xb4\x1d\x76\x05\x5d\x90\x75\x13\x62\xbd\x1a\x65\x72\xe1\x6f\x3b\x9d\xdb\xdb\x5b\x07\x46\xc4\xe0\xcf\x71\xc3\x79\x27\xc9\x46\x1d\x58\xd3\x04\x73\xc2\x3b\xd2\x08\x5c\xfc\xc3\x9d\x47\xbd\x64\xfd\x56\x21\x01\x34\xcd\x60\x78\x7d\xc2\x7c\xda\xa8\x61\xba\x36\x20\x4c\xa0\xc2\x77\x7b\x0e\x0e\x4f\x03\xb9\xb2\xd0\x84\x32\x2e\x54\xe9\xfa\x40\xdc\xd0\x23\x15\x28\x59\x04\x11\x69\x6d\xd4\x4a\x45\x24\x53\x2f\x85\x91\xd2\xb1\x9c\x37\xd9\x76\xc7\xea\x7e\xaa\x8e\x71\xf4\xff\xc1\x98\x47\xdf\xb5\x77\xdf\x38\x12\xb4\xea\xbc\x1a\xec\x21\x17\xd6\x62\xb5\x0e\x9c\x99\x62\x0f\x0d\xe4\x63\x53\x03\xf9\x21\xf6\xf0\x62\x6a\x6c\xa1\x54\x6e\x27\x26\xea\xc4\xfe\x43\x11\xa2\xf0\x08\x0f\x60\x05\x9d\xfd\x36\xe7\xab\x52\x1b\x16\xde\x36\xe4\x31\x9d\xb9\x8e\xd2\x14\x16\x4e\x26\xc0\x52\x21\x93\x3d\x68\x3a\x18\x33\xf1\xe7\x64\x5e\x0a\x44\x0f\xd9\x2c\x13\x48\x8c\xb6\x1e\x06\xcb\xea\x7c\xdb\xa2\x7b\x6f\x62\xd6\x3b\xb4\xaf\xeb\xbc\x64\xe1\xc7\x36\x99\x1b\xc5\x66\x4a\x4b\x81\xdd\x99\x8c\x1a\x9a\x8c\xee\xd8\x64\x2f\xbf\xd9\xc2\x66\x11\x37\x53\x1a\xda\x6f\x54\x3a\x7b\x00\x3a\xe0\x32\x1a\x89\x22\x2d\xfd\x88\x17\x38\x29\xcd\xd6\xd2\x02\xe8\xa5\xdc\x9a\xa1\x1e\xd2\x9b\xb4\xd5\xea\x3b\x58\xfb\xaa\x55\x1b\xa0\xea\xf6\x0f\x71\xe6\xe6\xac\xf7\x23\x87\x6f\xb0\x89\x72\x46\x27\x3f\xfc\x70\xd6\x1f\x53\xd8\x49\xce\x69\x00\xec\x25\xf0\x7c\xe2\xc0\x57\xe7\x23\x5f\x2e\x89\xcf\x61\x4f\x08\x92\x69\x85\x2a\x0c\xbc\x3c\xef\x1e\x57\x74\xea\x68\xc2\x2c\x39\xb4\xde\xb7\x76\xbe\x3a\xf8\xaa\xb3\x5a\x2d\x97\x89\xcd\x0a\x46\xc4\x92\xb0\xff\x3e\xc6\xb0\x61\x94\xf4\x15\x36\x64\x29\x21\x80\x31\xff\x08\x9f\xb0\x1f\x5d\x2e\xd5\x8c\xae\x56\xb2\xec\x34\xf9\x8a\xc2\xe0\xd4\xa7\xee\x4d\x6f\x29\x66\x94\x3b\x33\x2c\x75\x53\x25\x2b\x84\x0e\x92\x7d\xed\x3b\x89\xaa\xe4\x9d\x11\x98\x46\x4e\x0f\x96\xda\x28\xed\x5b\x2a\xc5\xe8\x74\xb6\x5b\xad\x12\x55\x50\xae\x5f\x5b\xad\xaa\x74\x4f\x29\x95\x6b\x91\xa6\xab\x31\x83\x5e\x61\x0d\xd0\xe8\x65\xbe\x2f\xb3\x60\x66\x96\xcb\x91\xdc\xd0\x0f\xa1\x84\xde\x11\x0f\x59\x29\x12\x02\xdf\xad\x9c\x01\x1c\xd4\x9e\x0c\x18\x6a\x9a\xe6\x2c\x10\xd4\x09\x2b\xc3\xd4\x55\x59\x2e\x33\x40\xcd\x42\x94\x6c\xf4\x22\x52\x07\x22\x0a\x33\xc2\x0c\xcf\xc1\x12\x2a\x06\x2c\x97\x6a\x4a\x86\x21\xa7\x92\x76\xa2\x17\x91\x73\x3a\xbc\x0e\x90\x65\x21\x4b\x21\x20\xf5\x6f\xba\x71\xb3\x92\x21\x17\xc3\xc7\xec\xa8\xb4\xb1\xb2\x7d\x7a\x43\xec\x44\x48\x6e\xc0\x68\xbe\xe7\x94\xb3\x20\x9d\x62\x04\xbd\xa4\x1d\x29\x3c\x55\x0d\x4f\x29\x11\xcd\x62\x80\xe2\xcf\xcd\x3a\xce\xa8\xe7\x11\xd8\x85\x59\x3e\xd0\x43\x7b\xca\xc2\x38\xb2\x34\x60\x91\xdf\xe4\xb5\x36\x85\xf8\x84\x14\xb9\x09\xc2\x5b\x86\x23\x24\x66\xf9\xf2\xcc\xb9\xba\x92\x00\xea\x53\x62\x33\x12\x72\x6d\xb3\x52\x61\x0c\xe3\x2a\xab\xe8\x13\x1f\xdf\xc3\x52\x2f\xb7\x43\x25\x22\xa4\x16\xd0\x1a\xc5\x92\x93\x26\xc7\xe9\xd5\x12\x99\xf5\x2d\x15\x80\x16\x66\x65\x2c\x02\x6d\x90\x16\x1b\xa4\x6a\x70\x41\xef\x81\xf3\xf5\xf3\x59\x82\x35\x00\x78\x48\x62\xe6\x7e\xb0\x09\x29\x89\x08\xe8\x3c\x64\x64\x13\x54\x39\x1d\x54\xb9\xd8\x56\x76\xbf\x0a\x6f\xf9\x27\x99\x3d\x70\x4e\xc6\x3c\xf4\x63\x41\x9e\xc9\xfe\x17\x85\x55\xf2\x89\xf6\xdf\x04\xb5\xc9\xfe\x39\x0f\xce\x6b\xd2\xd2\xe3\xae\xc0\x63\x9f\xa4\x8b\xf4\x22\x0c\xfe\x4d\x58\x98\xf7\x96\xd4\xaa\x7f\xed\x59\xb8\x20\xcc\xca\xd6\x6d\xb6\x54\x45\x76\x1e\xab\x9e\x58\xa1\x6b\x31\x2b\xeb\x55\x78\x96\x95\xa9\xb9\xd5\x92\x4e\x46\x5c\x6c\x7f\xcd\x09\x33\x95\xf9\x70\xcf\x4d\x45\xfe\x89\xa9\x30\x95\x19\x40\xc6\xab\xc8\x74\xb2\x91\xab\x81\xe6\x67\xd4\x22\x3b\x5a\x53\x1e\x24\xc9\x88\x8a\xe4\x10\xdd\xa5\x1f\x40\x22\x9b\x42\x54\x84\xa7\x3c\xc8\xc3\x83\xf3\x1e\xa2\x98\xac\xff\xc8\xef\xd0\x1f\x49\xa6\x95\x45\x5f\xc8\x06\x5f\x3a\x73\x1c\x7d\x31\x89\x03\x57\x9e\x26\x7d\x21\x85\xbf\x44\x4b\xc4\x88\x88\x59\xf0\x07\xb8\x84\x60\x30\xa5\x3f\x91\x7b\x64\x41\x95\x0d\xec\x71\x7c\x6f\x5f\x58\xaa\x17\xe7\x22\x8b\xda\x4a\x3b\x6f\x7d\xa8\xc5\x18\x5b\x61\x88\x29\x02\x0c\xd1\x2b\xa3\x14\x72\x74\x01\x69\x3c\xb5\x63\x4e\x22\x57\x99\x4f\x11\xd1\xe4\xb1\xa7\xa1\xe4\x1c\x0f\x5d\x51\x50\x29\xef\x26\xab\xfb\x7c\x57\xbd\x81\x77\x34\x75\x96\x56\xed\xac\x2f\xe9\x56\x4d\x9d\x65\x75\xe6\xbd\x41\x62\x83\x65\x98\x1c\x54\xd5\xf4\x2a\x1d\xb3\xa9\xd7\xac\xae\xda\x6b\xc1\x75\xb5\xbf\xad\xbe\x5c\xfd\x21\x9d\x4f\xd3\x15\xf5\x01\xcd\x0a\x87\xc4\x1d\x15\x14\x0e\xb2\x74\x6f\xca\x6d\x60\xcf\x68\x4a\x6d\xfa\x93\xa7\x61\x36\xd0\x4f\x4e\x6c\xfa\x94\xdf\xa0\x98\xe3\x29\x69\xcf\x6f\x94\xa2\x7f\x7d\x7a\xd3\x9f\x3c\x37\xbb\x01\x0d\x76\x44\x6e\x1a\x90\xf6\x8e\xdb\x80\x6b\xed\x0b\xb5\x51\x5e\xbe\x13\x66\xd3\x80\xf4\x38\xc4\x46\x75\xb6\x0d\xaf\x29\xe5\xc9\x6a\x72\x94\xb3\xc3\x64\x28\x2b\x32\x86\x06\x63\x88\xd9\x42\x9a\xc3\x42\x3f\xab\x7b\xbc\xd4\x06\x37\xe8\x25\xb2\xfa\xea\x8e\x18\xb4\x31\x16\x3e\x44\xd6\x79\x18\x07\x42\x5e\x73\x99\x4b\xbf\x42\xd6\xc9\x02\x53\x1f\x38\x02\x33\x95\x3d\x42\x16\xa4\xea\xcf\xb7\x11\x7d\xad\x44\xbd\x6d\x44\xbf\x45\xd6\x28\x14\x58\x6b\x6c\x4e\xbf\x3c\x08\xec\xd7\x32\xae\x17\x48\x98\x37\xc9\xb3\x51\x56\x6f\xc4\xc4\xbc\x49\x13\x11\xf3\x26\x9a\x87\x79\x94\x25\x17\x59\xd0\xd8\xe9\x53\x76\x91\x9e\x45\xa4\xcb\x15\xd5\xd1\x00\x9d\x12\xd2\x13\x0f\xf5\xd6\x82\x4c\xfa\x12\x83\x2c\x2a\x18\x89\x3f\x16\xab\xca\x19\xdf\xbc\x8b\x35\x35\xf3\x2e\xd2\xaa\x75\x2a\xd3\x9e\x58\x96\xc2\xdf\x3c\x56\x57\x4f\x5a\x01\x6b\x10\x84\x1e\xe1\x68\xc2\xc8\xfa\x7d\xa1\x54\x60\x20\x6b\xea\xee\x04\x51\x52\xaf\xfc\x7a\x0b\xc6\x5a\x52\xb6\x42\xb5\x00\x16\xfc\x76\x8d\x68\xb5\x18\x46\x2c\x57\x4a\xed\x30\x62\x9e\xb1\xb3\x86\x91\x5c\xf3\x7a\xfe\xb6\x6b\x53\xc7\x72\x49\x36\xe9\x58\x97\xf3\x0b\x0a\x7a\x8f\xee\x08\x42\xad\xfa\x5a\xf5\x54\x83\x07\xf4\x53\x01\x63\x4d\xc1\xe7\xa0\xbf\xd4\x9c\xfe\x0e\x9e\x88\xfe\x0e\x8a\xf4\x77\x00\x09\x85\x4d\xb0\x4b\x78\x7b\xfa\x3b\xf8\xdf\xa0\xbf\x83\x67\xa7\xbf\x83\x9d\xd1\xdf\x06\xa4\xbd\xa3\xbf\x83\xfd\xa1\xbf\x83\x9d\xd1\xdf\x06\xa4\xc7\xa1\xbf\x83\x6d\xe9\x6f\xe3\xb1\x5e\x16\x22\x8c\x0f\xd1\x86\x2d\x24\x4a\x11\x41\x5f\x71\xbe\xca\x52\xc2\x3b\x2a\x38\x1a\x04\x9d\xcb\x58\xa0\x88\x30\xc4\x89\x1b\x06\x5e\xb9\x97\x4b\xd4\xad\xbc\x1a\x30\xee\x76\x4a\x8e\x1b\xb5\x39\x33\x7c\x58\x91\x21\x76\x6f\xc8\x46\x5d\xb2\x56\x97\x68\x07\x7d\xf6\x59\x18\xf1\xaf\xcf\x18\x0b\xd9\xa6\x8e\xdf\x87\xbc\xbe\x57\x63\xda\x4c\x27\x90\x55\x18\x2f\x90\x66\x5a\x20\xcd\xba\xd6\x88\x32\xd3\x46\xca\x4c\x53\xca\xac\xf9\x32\x9d\x38\x55\xb2\x6c\xc2\x63\xd7\xc5\x93\xb0\x92\x95\xb7\x20\x2e\xd5\xe3\x50\x90\x1d\x0c\x77\x4f\x79\x2a\x31\x4d\xb5\xd0\xb3\xae\x38\x0c\x7a\xf7\xcb\xe8\xec\x03\x4c\x3a\x9a\x87\x5e\xec\x87\xe8\xe8\x87\xba\x80\x09\xda\xbd\xbb\x17\x84\x0f\x82\xfa\x60\xd9\x69\x44\x96\xbe\xd4\x0a\x1a\x1a\xb6\x0f\xc4\xc5\xde\xde\x0d\x46\x6a\x00\xf5\x1e\x9b\x75\x02\x49\x5a\x60\xb9\xcc\x6b\xc7\x50\x19\x81\xc2\x6c\x5e\x06\xeb\xa0\xf5\xda\x1f\x3f\xf9\x74\x46\x59\xf8\xd8\x68\x75\x1d\x43\x4c\xa6\x34\x45\x6f\x33\xa9\x1a\x7e\xeb\x69\xcd\x03\x61\xab\x49\x78\x68\x34\x95\xb1\x0c\x0b\xa3\x30\x80\x7e\xa2\x29\x2e\x5b\xdc\x53\xa1\x99\x24\xa1\xb9\xc1\xe4\x75\x7e\xa0\xe4\xda\x78\x81\x8a\xfd\x4d\x3e\x90\x00\xe7\xb9\xff\x82\xfa\x28\x13\x92\xe6\xb3\xd6\xf2\x7d\xc9\xea\x9f\x0c\x59\x37\xa8\x36\xce\x97\xa2\xd5\x0f\xeb\xeb\x1a\x83\x91\x34\xfb\x6d\xc4\x4e\xf2\xa4\xc9\xb2\xd1\xd8\x6d\x14\x4f\xc0\xcd\x17\x8d\x36\xe8\x89\xef\x27\xfc\x2c\xf5\x5d\x3d\xbd\x95\x02\xa9\x49\x56\x92\x8e\xa7\x5a\xa2\x26\x43\x3b\x65\x65\x72\xcb\x1e\xd7\x4f\x7d\xad\x69\x31\x95\x97\xd3\x76\x1e\x57\xd2\x7d\x87\x6e\xd7\x8c\x5b\x1e\xde\x43\xc1\xa2\x66\x7c\x2d\x7d\x2f\xe3\x5c\x2d\xb1\x4d\x7c\xef\x2c\xf7\x3a\x13\x70\x03\xdf\xdb\x83\xe3\x0f\xf9\xbe\xaa\xe9\xf9\xc7\x39\x99\x3f\xcd\x01\x88\xec\x28\x3f\x01\x81\xa7\x90\xdd\xb7\x3f\xfd\x48\xd4\xfc\xeb\x1f\x7f\xc0\x38\x9f\xfb\xfc\x43\xaa\xb0\xa3\x03\x90\x26\xa8\xbd\x3b\x01\x91\xee\xb5\x2f\x47\x20\x89\xab\xef\xe4\x0c\xa4\x09\xea\x71\x0e\x41\x92\xde\x9e\xf5\xe5\xa6\xef\x19\x31\x3e\x30\x91\xb7\x6c\x5b\xc8\x78\xa6\x32\x8a\xfe\x7c\xea\x41\xc1\x5c\xc5\xcd\xc2\x39\x01\x14\xe4\xc1\x3e\xa9\x35\x3a\x27\x00\x91\xa6\x83\x02\xa8\xd2\x27\x05\x37\x34\x90\xb7\x89\x50\xe0\xfc\x44\x65\x46\x2a\x71\xfc\xca\xe6\x3d\x6f\xb5\xc5\xce\x5f\x0a\x7f\xaf\x6f\x9e\x4c\xdf\x18\xaa\xdc\x26\x49\xa8\xba\xeb\xa4\x4a\x55\x9b\x6b\x9f\x3a\x2d\x5b\xdf\xca\xd4\x09\xef\xcf\x95\x49\xc4\x8d\x29\xc3\x90\x3f\x0d\x63\x80\x7e\x72\xc2\x30\x64\xa1\x0b\x41\xd2\xe4\xc6\x44\xe9\xf9\xd7\xa7\x0c\x43\xfe\xdc\x8c\x01\x34\xd8\x11\x61\x68\x40\xda\x3b\xbe\x00\xae\xb5\x2f\x74\x41\x79\xf9\x4e\xd8\x42\x03\xd2\xe3\x90\x05\xd5\xd9\xd3\xbd\x30\xf4\xc2\xcd\x4b\x5d\x22\xef\x56\x8c\x5e\xe6\x19\x72\xf5\x1e\xd1\x70\xd0\x37\x7d\xa9\x46\x4a\x1e\x22\xeb\x7a\x3b\xc9\x57\x20\xf9\xe1\xec\xca\xf4\xdd\x23\x29\x7a\x04\xea\x5e\x6d\xd3\xe7\x6b\x64\x5d\x0c\xb6\x11\xfc\x16\x59\x3f\x0f\xae\x46\xdb\x88\xfe\x0d\x59\x57\x67\x1f\xb6\x91\x7c\x83\xac\xd1\xe0\xfc\x4c\xbe\x85\x6d\x2a\xfa\x77\x64\x9d\x5e\x9e\x9f\x9f\x5c\xf4\x13\xfb\x9a\xb3\xb1\x08\x92\x52\xf1\xd2\x26\xe2\x85\x2c\x2a\xeb\x8c\xa8\x58\xc4\x9b\x98\x58\xc4\x35\x11\x8b\xa8\xe4\x61\x11\x77\xc0\x13\x37\xbe\x70\x5e\x22\x1e\xf2\x5d\x8d\x54\xce\x94\xb4\x68\xd9\xeb\x5a\xd9\x0a\xbb\x91\xed\x38\x61\x5b\x77\x32\x64\x34\x64\x54\xdc\x6f\x0d\x70\x41\xdd\x2d\x2e\x9d\xb4\xf0\x07\xfa\xe7\xf6\xc2\x57\x84\x53\x08\x5d\x62\x13\x80\x8e\x3f\xeb\x86\x1b\xd1\xda\xfb\xb2\xf5\x86\xb5\x17\x6b\x4f\xcc\x1e\xf5\xef\xee\x6b\x7e\xa0\x97\xd4\x18\xfd\x3e\x2f\x5d\xa3\xd2\xeb\x67\x45\xa2\xaf\xff\xbf\x12\x80\x3e\xf1\xe9\x34\xd0\xbf\x95\xb4\x0e\x12\xbe\x98\xfe\xac\xf2\x3d\xc8\xd6\xfd\xb4\x52\x96\xb7\xfc\x79\x65\xa2\xbf\x14\xd0\xbf\xf7\xd4\x67\xa4\xc5\x1f\x6a\x62\x58\x9b\x1a\x2e\x8f\x13\x59\x9a\x3f\x4e\x98\x69\xb2\x67\x4d\x07\xfd\xdf\x00\x00\x00\xff\xff\x0b\xbe\x77\x4e\x88\x49\x00\x00"

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 18824, mode: os.FileMode(420), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

