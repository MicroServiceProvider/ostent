// Code generated by go-bindata.
// sources:
// index.html
// DO NOT EDIT!

// +build bin

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xe4\x5b\x5b\x73\xdb\x36\xf6\x7f\xf7\xa7\x40\xf9\x4f\xff\x0f\x9d\x52\xac\x2f\xc9\x7a\x53\xcb\x3b\xb6\xe5\x26\x9c\xfa\xa2\xb1\xe5\xec\x76\x3a\x9d\x0e\x44\x42\x12\x62\x8a\xe4\x02\x90\x6c\x45\xd1\x77\xdf\x83\x0b\xaf\xba\x52\xa6\x63\xcf\xe4\xc1\x16\x09\xe0\x5c\x71\x0e\x7e\xc0\x11\x74\xf4\x43\xeb\xfa\xac\xf3\x47\xfb\x1c\x0d\xc4\x30\xd8\x39\x3e\x52\x1f\x08\xc1\x03\xc1\x3e\x3c\xc8\xc7\x21\x11\x18\x79\x03\xcc\x38\x11\x4d\x6b\x24\x7a\xf6\xa1\x65\xba\x04\x15\x01\x51\xcf\xf0\x36\x9d\x36\x5a\x58\xe0\xc6\xc7\xab\xd9\x0c\x45\x5c\x90\x50\x1c\x39\xd9\x08\xc3\x68\x20\x44\x6c\x93\xff\x8e\xe8\xb8\x69\xfd\xc7\xbe\x3b\xb1\xcf\xa2\x61\x8c\x05\xed\x06\xc4\x42\x5e\x14\x4a\xb2\xa6\xe5\x9e\x37\x89\xdf\x27\x56\x9e\x32\xc4\x43\xd2\xb4\xc6\x94\x3c\xc4\x11\x13\xb9\xc1\x0f\xd4\x17\x83\xa6\x4f\xc6\xd4\x23\xb6\x7a\xf9\x19\xd1\x90\x0a\x8a\x03\x9b\x7b\x38\x20\xcd\x5d\xc3\x68\x3a\xfd\xd8\xb9\xbc\x40\xd6\xd1\x0f\xd6\x6c\x66\xdb\x7f\xd2\x1e\x72\xcf\xff\x3a\x3e\x0a\x68\x78\x8f\x18\x09\x9a\x16\x1f\x00\x6f\x6f\x24\x10\x05\xf6\x16\x1a\x30\xd2\x6b\x5a\x4e\x0f\x8f\xe5\x7b\x03\xfe\x2d\xe2\xf4\x27\x09\x7d\xda\xfb\xcb\xb6\xf3\x9c\x34\x03\x4e\xbf\x10\xde\xb4\xf6\xf7\x1e\xf7\xf7\xca\xec\x78\xf2\x60\xef\xef\x35\xe2\xb0\x6f\x21\x31\x89\xc1\x44\x3a\xc4\x7d\xe2\xc8\x06\x63\x7e\xc6\x14\xc7\x71\x40\x6c\x11\x8d\xbc\x81\x5d\x10\xb0\xbb\xf7\xcb\x23\xfc\x2d\x17\x01\x9d\x8d\x8a\x2c\x0f\x0e\x1e\xe1\x6f\x05\xcb\x83\x83\xaa\x2c\xdf\xee\x3d\xc2\xdf\x0a\x96\x6f\xf7\xaa\xb2\x3c\x04\xc3\x0f\x57\x19\x7e\xb8\xc4\x70\x2e\x26\x01\xe1\x03\x42\x44\xe2\x78\x41\x1e\x85\xe3\x71\x9e\x32\x83\x67\x87\x86\x3e\x79\x6c\xc8\x56\xc3\x81\x7b\x8c\xc6\x22\x4f\xf2\x19\x8f\xb1\x6e\xb5\xca\x89\x82\x38\xf3\x80\xd1\x67\xee\x30\x19\xf4\x8c\xc0\xd3\x5e\x63\xb7\xb1\x7b\x98\x34\x34\x86\x34\x6c\x7c\x06\x99\x3e\x24\x8f\x3d\xc4\x34\xd4\xe3\xa7\x53\x88\xce\x46\xe7\xe4\xc3\x87\xf3\x56\x97\x86\xb3\x19\x8c\x33\xca\x68\x8a\xe9\x94\x04\x9c\xcc\x66\x20\xc1\x19\xd2\xe0\xde\x74\xaa\x8e\xd0\x9f\xcd\xac\x24\x31\x8f\x1c\xad\x9c\xd1\xdf\x31\xb9\x7d\x7c\xd4\x8d\xfc\x89\x69\x0c\xf1\x18\x79\x01\xe6\xe0\x51\x78\xec\x62\x86\xf4\x87\xed\x93\x1e\x1e\x05\x22\x79\xe5\x02\x72\xd5\x83\x89\x88\x2d\xc4\x22\x48\x2d\x39\x9c\xf6\xa1\x11\xe6\x24\x15\xe8\xd3\x94\x9b\xcc\x52\xb0\x89\x30\xbb\x17\x8c\xa8\x9f\x8c\x29\x8d\x32\xdc\xa5\x66\x84\x41\x66\x07\xf6\xd0\xb7\x77\x51\x8c\x7d\x9f\x86\x7d\x3b\x20\x3d\x58\x46\x92\x29\x48\xe8\xbb\x23\x21\xa2\xb0\xc4\x42\x44\xfd\x7e\x40\x24\x8b\x00\xc7\x9c\xf8\xc9\xdc\xea\xc1\xc6\xcb\x7a\x90\x54\x4e\x8f\x4a\x9a\x31\xeb\xcb\xa9\xfb\x3f\xc3\x2b\xed\xce\x89\x55\x11\x10\xe3\x54\x2c\x67\x76\x14\x06\x93\xe2\x10\x18\xd4\xd1\x7a\x64\xde\x81\x59\x00\xb2\x15\x9c\x54\xb4\x82\xd8\x39\x56\xaf\x86\xd2\xd1\x4e\x2c\x4c\x02\x46\xd4\x6f\x5a\x03\xf0\x6c\x71\x1e\xba\x0c\x87\x3e\xb4\xd1\x78\x37\xcb\x77\x98\x0c\x89\x07\x30\x1e\xf0\x41\xae\xe7\x28\x0f\x1a\x25\x37\xe7\xbb\x8e\x1c\x5c\x90\xea\x40\xec\x94\x22\x49\xaa\x51\x9e\xb7\x2c\x08\x75\x03\x5a\x31\xb1\xc7\x47\xa3\x20\x67\x43\x32\x14\x3e\xca\xd3\x1f\xd0\x64\x1c\xf6\x04\x1d\x93\x79\xe7\x61\x63\xb0\x04\x3b\xfe\xde\x71\x1e\x1e\x1e\x1a\x60\x31\x83\xbf\x86\x17\x0d\x1d\x8d\x8e\xb0\x02\x04\x04\x73\xc2\x9d\x00\x0b\xc2\xc5\xbf\xbc\x61\xdc\x4c\xac\xfe\x74\x7e\x73\xeb\x5e\xcf\x79\x45\xf1\x4f\xc0\x15\xcf\xcf\x5a\x40\x97\x2a\x9b\x24\x08\xac\x58\x28\xf7\x0c\x4b\x0e\xeb\xd3\x50\xa6\x17\xea\x51\xc6\x85\x6a\x9d\xb7\xc9\x8b\x7c\x52\x62\x25\x9b\x60\x3d\x9d\x73\x80\x52\x31\x9d\xda\x96\x7b\xdb\xb9\x71\x4f\xe5\x24\x4a\x82\x9a\x75\x7e\xaa\xa2\xa3\xf8\xff\xc3\x2e\x8f\x7f\xd5\x69\x21\x83\x68\x14\xcf\x0f\xcb\x85\xe3\x5d\x5b\x5a\x32\x97\x1d\xc6\x96\x57\x68\x61\x80\xcb\x16\x06\x78\xa5\x85\x17\x27\x35\x58\xe8\x8c\x82\x55\x19\x9b\x7b\x85\x17\x30\xc2\xe0\xd0\x7a\xe4\x28\x8c\x61\xd1\x43\x19\x51\xa4\x81\x43\x32\xcc\xe7\xbe\x04\x93\x83\x04\x55\xa2\x5e\x0f\xf0\xd9\xde\x2d\xe4\xfe\x74\x2a\xc8\x30\x96\x69\x88\x2c\x40\x3c\x90\xca\xdf\xbf\xd7\x0f\x7f\x83\x1f\x48\xa0\x38\x36\xa4\x5f\x16\xaf\x3c\x7e\xaf\x2c\xf0\x5d\x35\x01\x92\xc1\x02\xfe\x05\x3f\xad\x37\xdc\x8b\x47\x35\x1b\xae\x38\xae\x30\x9c\x3e\xd5\x70\x5a\x8b\xe1\x31\x2f\xab\xb1\xfb\xcb\xd3\x0c\x97\x1c\xd7\xe9\x95\xbe\xac\xd9\x15\x26\x04\x63\xd8\x57\xc9\x14\x43\xcd\x64\x75\x9c\xcd\x7e\x2d\x6f\xcf\xcc\xae\x4c\x6e\xd4\xd4\xa1\x6c\x3a\x75\x7e\xda\xf9\xc9\x99\xcd\xa6\x53\xad\x5f\x4e\x61\x2c\xb7\xb3\x7f\x77\x31\x9c\x95\xe4\x1e\x09\xce\x22\x09\xf6\x00\xff\x8f\xf0\x09\x47\xb1\xe9\x54\x39\x66\x36\x93\x6d\x67\xfa\x11\x45\xe1\x59\x40\xbd\xfb\xe6\x54\x0c\x28\x6f\x0c\x00\xab\x03\xa2\x5a\x66\x08\xed\xe8\xb5\xe0\x54\x72\x55\xf4\x8d\x0e\xd8\xa3\x41\xf8\xd8\x6c\x2e\x37\x54\x8a\xd1\xfe\xa0\x5e\xad\xb4\x2a\x28\xd3\x6f\x53\xad\xcc\xdc\x42\x3c\x43\x08\x71\x4b\x8e\x79\xa0\x62\x80\xe4\x1b\x84\x87\x9c\x6b\x60\x2a\xff\xe9\x6d\xf5\x74\x0a\x3b\x98\x3e\x41\x6f\xe8\xcf\xe8\x0d\x50\xa1\xf7\x4d\xa4\xd7\xc7\xb3\xf6\x5d\xe3\x82\x72\xe9\x11\xc1\x40\x93\x13\x21\xd8\xef\x64\x82\x64\xf6\xd9\xc0\xae\x3b\xb1\xaf\x2c\x45\xd3\x00\xfc\x56\x53\x29\xfc\x24\x3a\xd5\xe2\xae\xdc\x82\xd4\x63\x18\x3d\x30\x1c\xa7\xa7\xca\x84\x0a\x4e\xce\x7e\x42\x99\xb9\x2a\x4f\xdd\xed\xdb\x23\x4e\x62\x4f\x45\x97\xda\xbe\xea\xd7\xa6\x61\x72\xc7\x09\x6b\x7b\x42\x29\x90\xb1\x4e\x5b\x7f\x7c\xba\x84\xdb\x09\x9f\x17\x90\x34\xd6\xc0\xff\xdf\x98\x8a\x79\x01\x69\x6b\x15\x09\x36\x0d\xc7\x84\xe9\x0d\xdf\x02\x49\x2e\xc4\xd9\xbc\xa4\xb4\x35\x93\xe4\x08\x96\x0b\xb6\xe2\xc7\xda\xd0\xf3\x7b\x15\x23\xcf\xef\x65\x41\xd7\xfa\x6d\x71\xcc\xf9\x3d\x13\x72\x3e\x65\x72\x47\x6d\x49\xb2\x46\x8b\xb2\x2b\x78\xd1\xd1\x87\xd0\x22\x0f\xe9\xc0\x4b\x77\xe8\x7a\x63\x0e\x96\x4b\x6a\x32\x4e\xa9\xb5\x3b\xf2\x8d\x89\x33\xaa\xb3\xcd\x29\x95\xb1\x4d\x1a\xf3\xb3\xb9\x49\xae\x14\xce\x31\xc3\x91\xda\xb4\x26\xc7\x0b\x37\x84\x4d\x0a\x6c\x67\x19\x49\x37\x44\x46\x9c\x2b\xdb\x0a\xdb\x9b\x63\xa4\x7b\x4e\xc6\x98\x06\x95\x12\xaf\xa0\x54\x29\xaa\x80\x21\xa4\x5a\x2e\xa6\x36\x50\x17\xa8\x7f\x2c\xab\x3b\xe2\x69\x08\xce\x69\x7c\xc7\xcb\xe1\x59\x9f\xeb\x46\xf2\xe8\x3c\xaf\x8b\xbf\xd0\x75\x77\xa6\xa3\x76\x2d\x44\x24\x70\x50\x56\x43\x75\x2d\xd4\xa3\x23\x87\xe7\x14\x79\x52\xb6\xd2\xaa\xd9\x4a\x73\xd9\xea\x2e\xc9\x56\x9a\x64\xab\x49\x55\xda\x6b\x64\x79\x5a\x25\x9d\xf2\x84\xda\x35\x69\xcb\xca\x79\xb0\xf2\xe3\xdd\x76\xbd\xb3\xa6\xfc\x8f\x4e\xff\xe8\x9c\xdf\xa2\x61\xe4\x8f\x82\x08\x1d\x7c\xc8\x4f\x1f\xc8\x3c\x9d\xc0\x51\xd7\x0d\x67\x33\x27\xf7\x7e\x3d\x12\xa5\x09\xd5\x62\x0c\xdf\x53\xb7\x73\x8b\x62\xc2\x10\x27\x70\x28\xf0\x4b\x1c\x5b\x24\x10\xf8\x94\x8a\x3c\xd7\xb4\x6d\x8e\x73\xfd\xf6\xc6\xd8\xbb\x27\x82\x2f\xb5\xb8\xad\xfb\x73\xda\x99\x96\x79\xab\x73\xca\xcf\x53\xe5\x9b\x0d\x69\xdd\xa6\xf8\x2c\x8a\xf9\x57\xc2\x58\xc4\x96\xdb\xd3\x92\x83\xa4\x5e\xd3\x69\x1b\xf6\x72\xf4\xf1\x2a\x0a\xaf\x68\x80\xd2\x3e\x50\x0e\x59\x0e\x64\xce\x57\x4d\x70\xae\xf8\xe5\x2c\xd1\x0d\xcb\x26\x7d\x3a\x55\xdb\xc1\x4b\xa5\xe0\x01\x4a\x4d\x37\x72\x4b\x0d\x52\x58\xda\x92\x48\x2a\xb7\x28\x51\x0b\xa2\x66\xa5\x29\x05\x11\x79\x7b\x0a\xa2\x8a\xd3\xb3\xc4\xb2\x7a\x56\x24\x38\x83\x6e\xb1\x75\x05\xaa\x6c\x5d\xba\x3c\xbf\x5c\xbc\x30\xc1\x28\xb3\x32\xdd\x53\xc8\x30\x45\xd6\xf8\x9d\x4a\xcd\x4c\x88\xa5\x0b\x47\xd6\xb3\xe1\x4a\x23\x09\x7e\x33\xb0\xbb\xf9\x9e\xb0\x04\xa8\x92\x49\x11\x51\x4b\x8d\xab\x51\xd0\x2a\xd3\x54\x53\xbf\x56\x64\x49\xcf\xd5\x72\xd0\x9b\x38\x9b\x9d\x36\x66\x78\x28\xa1\x4d\x9e\x6a\x4d\x1a\xb4\x23\x4e\x65\x91\x11\xbd\x89\xe5\xc1\x23\x44\x96\x85\x2c\xc5\x01\xa9\xff\x49\x81\xde\x32\x13\x95\x3b\x2a\x0f\x0e\x0a\x05\x74\x3b\xa0\xf7\xc4\xd6\x44\xb2\xd0\x4e\xb3\x2f\x45\x30\x48\x93\xe7\xb2\x0e\x48\x49\x04\x65\x09\x03\x6f\x49\xad\x31\x3d\xf2\xaa\x6a\xe9\x72\x1d\x93\x02\xab\x3d\xa0\xbe\x4f\x42\x50\x39\x80\xa8\xb3\xfb\x2c\x1a\xc5\x56\xba\x25\xca\xaa\x60\x59\xaf\x4d\xe1\x5c\x9e\x5f\xbc\x90\x18\x64\xa5\x9f\xac\x44\xab\x28\x68\x58\xac\x79\x49\x96\x85\xaa\xd3\x82\x22\x76\xb7\x5c\xbc\x82\xc4\xc5\x13\x38\x76\x17\xc7\xa1\xc2\x6a\xa9\x0e\xb3\x73\x85\x38\x39\x7b\xd2\x60\x7f\x61\xbd\x6c\xbe\x86\x0e\x4c\x73\xd3\xd3\x15\xa1\x71\xc8\x4e\x89\xeb\x82\xca\x44\xf9\xa0\x8f\x2e\x08\xe7\xad\x6c\xba\x7c\x24\xf9\x21\xc9\x33\x0b\x88\x75\x9c\x74\xa0\xa3\xcb\x88\x91\x75\xac\x8a\x65\x90\x72\xc9\x6f\x2b\xbf\xdf\xc0\xea\xf5\x24\xb7\x87\x8d\x93\x2e\x8f\x02\xc0\x89\x17\xf2\xff\x55\x2e\x5d\x9e\xe8\xff\x75\xac\xd6\xf9\x3f\x2b\xb7\x66\x3d\x49\x2b\x2c\x70\xb8\x1b\x90\x24\x5b\x01\xe3\xbe\x10\x16\x65\xd2\x74\xaf\xfa\x6f\x0f\x22\x38\x27\x5b\xf3\x09\x9c\xe6\xac\x48\x6f\x06\xa8\x37\x96\xd3\x41\x0c\x8a\x0a\xe6\xde\x65\xe7\xb2\x35\xd6\x8c\x90\x95\x89\xaa\x34\xb7\x13\x5e\x95\x44\x96\x0f\xaa\xd2\xc8\x42\x40\x89\xc6\x49\x2d\x57\x86\x66\xb7\x25\x44\xfa\xa5\xea\x9a\x22\x63\x52\x88\xd2\x45\x46\x91\xfb\x2e\xd6\x51\x53\xb1\x93\xae\xb6\x15\xaa\x5b\x49\x29\xb9\x2a\xb2\xb4\x7a\xdf\x06\x58\x40\x4e\x86\x2b\x2d\xca\xef\xe1\xa0\x89\xfb\x64\x73\x78\x51\x8a\x7e\x47\xe8\xd2\xea\xbd\x34\xb8\x80\x06\x35\x61\xcb\x12\x4e\xaf\x0e\x5a\x20\xc6\x5e\x0b\xb2\xa8\x70\xaf\x05\x58\x96\x70\x7a\x1e\x5c\x51\xc2\x9e\x04\x2b\x85\x15\x39\x7f\x8a\x4d\xa6\x89\xc9\xc5\x2d\xbf\x60\x2f\xf1\x8a\x18\x8c\xa5\x5f\x2c\xf4\x49\xdd\xfc\x49\x9c\x71\x8f\x76\x91\xd5\x52\x57\xc6\x40\xad\xca\xc4\x7b\xc8\xba\x8c\x46\xa1\x90\xf7\x4b\xaa\x53\xef\x23\x4b\x55\x1b\xe1\x98\xc5\xaa\xd2\x1e\x20\xeb\x4e\xd6\x09\xb7\x20\x7d\xab\x48\xfd\x6d\x48\xdf\x21\x5d\x21\xd0\xb4\x35\xa0\x9f\xa9\x85\xd7\x0f\x7e\xb4\x3a\xf8\xb9\xdf\x08\xfc\xdc\x3c\xf8\xb9\x10\x3c\xac\x87\x3d\xc2\x37\x07\x3f\xf7\x3b\x03\x3f\xf7\xc5\xc1\xcf\xad\x0d\xfc\x96\x70\x7a\x75\xe0\xe7\xbe\x1e\xf0\x73\x6b\x03\xbf\x25\x9c\x9e\x07\xfc\xdc\x27\x83\xdf\xd2\x33\x55\xba\x68\x54\x3e\xc1\xb4\x37\xa0\x28\x2c\x0d\xe6\xee\xc4\x7e\x5a\x21\x96\xd5\x74\xe4\x86\x8e\xac\x86\xce\xd7\xe2\xb5\x94\x6b\x74\x54\xba\x07\xd4\x3d\x72\x0a\x11\x1c\x6f\x72\x60\x5b\xad\x88\x29\x81\xaf\xd1\x25\x1d\x75\x8d\x6a\x90\xa9\xea\xc0\x5f\x75\x75\x77\x8d\xe0\x8b\x88\x2f\x96\xfa\x74\xd0\xa4\xcf\x05\x9a\xf2\x76\x53\x55\xd4\xbc\x24\xc3\x6f\x03\x9b\x52\x50\x86\x9b\xf0\x16\xb1\xc9\xe6\x98\xa9\xd5\xfc\x8e\x40\x13\x0c\x7e\x69\xd4\x94\x2a\xd4\x04\x9b\xcb\x58\xbd\x3a\xdc\x94\x71\xf6\x5a\x80\x53\xc7\x7c\x2d\xc8\xb9\x8c\xd5\xf3\x40\xa7\x96\xf6\x3a\xea\x91\xf2\x1b\xab\x2d\x6a\x98\x3f\x6e\x41\xe3\x57\xa5\x51\x67\xb1\xda\xe1\x25\xf9\x7e\xb1\x7e\x7c\x89\x79\x65\x78\x69\xf3\x6f\x83\x2e\x20\x27\x03\x97\x36\x8b\xe0\x40\xc6\xab\x9c\xc9\x94\x9e\xdf\x11\xbc\xb4\xf9\x4b\xa3\x0b\x68\x50\x13\xb8\x2c\xe1\xf4\xea\xb0\x05\x62\xec\xb5\x40\x8b\x0a\xf7\x5a\x90\x65\x09\xa7\xe7\x01\x16\x25\xec\x05\x0a\x92\x6f\xbc\xac\xd5\x23\xf2\xf4\x56\xa9\x58\xd8\xe6\xaa\x4e\xd9\x76\x5b\x55\x8b\x76\x92\x72\x0f\x59\x77\xdb\x51\xee\x03\xe5\xed\xf9\x4d\xd5\xda\xa6\x24\x3d\x00\x75\x6f\xb6\x91\xf9\x16\x59\x57\xee\x36\x84\xef\x90\xf5\xc9\xbd\xe9\x6c\x43\xfa\x0f\x64\xdd\x9c\xdf\x6e\x43\x79\x88\xac\x8e\x7b\x79\x2e\xaf\x79\x57\x25\xfd\x27\xb2\xce\xae\x2f\x2f\x4f\xae\x5a\xda\xbf\x35\x20\x77\xcc\x9f\x01\xb8\x79\xc5\xcb\x46\x31\xcf\xa1\xfb\xed\xe2\x6b\x46\x31\x37\xb7\x8c\x62\x2a\xeb\xd0\x31\x6f\x40\x6c\xaf\xb8\x23\x6f\x50\x5b\x5e\x8c\x4b\xc6\x6e\x72\x6b\xc7\x8c\xbf\x2b\x8d\xdf\x49\x97\x54\xae\x2e\xc2\x57\x62\xd6\x66\x34\x62\x54\x4c\x2a\x11\x5d\x51\x6f\xc3\x1b\x99\x86\xe0\x96\x7e\xa9\x46\x70\x43\x38\x85\x85\x6b\xc5\x75\x40\xb3\xee\xe4\x8d\xef\xd0\xd2\x45\xd1\x7c\x67\xe9\x16\xe9\x76\x57\x9d\x92\xe8\x97\x11\x30\xc8\xdf\xf5\x32\x3f\xf1\x85\x10\x3a\x09\x68\x3f\x34\xbf\xfc\xb0\x76\xf4\xde\x2c\xf9\x91\xc8\x05\xd0\x2e\xfa\xa1\x88\x6c\xdf\xf0\xc7\x22\xca\x1e\x45\x60\x7e\xbd\x62\x2e\x17\xe6\x7f\x76\x82\x19\x11\x86\xdd\xce\x3c\x92\x1e\xeb\x5d\xa0\x3e\x39\x24\x2e\xf8\x5f\x00\x00\x00\xff\xff\xfe\xee\xfc\xae\x33\x41\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 16691, mode: os.FileMode(384), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

