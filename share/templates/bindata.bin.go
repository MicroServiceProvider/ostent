// Code generated by go-bindata.
// sources:
// index.html
// DO NOT EDIT!

// +build bin

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5c\x6d\x73\xdb\x36\x12\xfe\xee\x5f\x81\x72\x9a\x6b\xda\x09\xc9\xc4\x2f\xbd\x9c\x6b\xf9\xc6\xb1\xdd\x56\xd3\xd8\xd6\xc4\x76\xef\x7a\x9d\x4e\x03\x91\xa0\x84\x98\x22\x79\x00\x28\xdb\xd5\xe8\xbf\xdf\x02\x04\x29\x92\x22\x25\x91\x56\x6c\xf9\x26\x1f\x6c\x89\x00\xf6\x05\x8b\xc5\xe2\x59\x00\xe2\xc1\x57\x27\x17\xc7\x57\xbf\xf5\x4e\xd1\x50\x8c\xfc\xad\xc3\xc9\xe4\xeb\x31\xda\xef\x20\xeb\x82\x0b\x12\x88\x5f\x09\xe3\x34\x0c\xa6\xd3\x03\x55\x8d\xd0\xe1\xc1\x90\x60\x17\xbe\xc8\xaf\x23\x22\x30\x72\x86\x98\x71\x22\x3a\x46\x2c\x3c\xf3\xad\xa1\xab\x04\x15\x3e\x51\xdf\xe1\x69\x32\xb1\x4e\xb0\xc0\xd6\x30\xe4\x22\xc0\x23\x32\x9d\xa2\x50\xb1\x3f\xb0\x67\xed\x34\xbb\xa1\x10\x91\x49\xfe\x1b\xd3\x71\xc7\xf8\xb7\x79\x7d\x64\x1e\x87\xa3\x08\x0b\xda\xf7\x89\x81\x9c\x30\x90\x64\x1d\xa3\x7b\xda\x21\xee\x80\x18\x79\x4a\xc9\xb9\x63\x8c\x29\xb9\x8d\x42\x26\x72\x8d\x6f\xa9\x2b\x86\x1d\x97\x8c\xa9\x43\x4c\xf5\xf0\x0a\xd1\x80\x0a\x8a\x7d\x93\x3b\xd8\x27\x9d\x37\xd6\x6b\xcd\x6a\x32\xf9\xf9\xea\xec\x3d\x32\x0e\xbe\x32\xa6\x53\xd3\xfc\x9d\x7a\xa8\x7b\xfa\xc7\xe1\x81\x4f\x83\x1b\xc4\x88\xdf\x31\xf8\x10\xb8\x3b\xb1\x40\x14\x04\x18\x68\xc8\x88\xd7\x31\x6c\x0f\x8f\xe5\xb3\x05\xff\xaa\x38\xfd\x4e\x02\x97\x7a\x7f\x98\x66\x9e\x53\xc2\x80\xd3\xbf\x08\xef\x18\x3b\xdb\x77\x3b\xdb\x19\x3b\x39\x0c\xd3\x69\xca\x95\xa7\x5f\xcc\x9d\x6d\x2b\x0a\x06\x06\x12\xf7\x11\xf4\x95\x8e\xf0\x80\xd8\xb2\x40\xdb\x61\xc6\x1b\x47\x91\x4f\x4c\x11\xc6\xce\xd0\x2c\xc8\x79\xb3\xfd\xfa\x0e\xfe\x96\x4a\x82\x36\x56\x43\xce\xbb\xbb\x77\xf0\xb7\x9c\xf3\xee\x6e\x53\xce\x7b\xdb\x77\xf0\xb7\x9c\xf3\xde\x76\x53\xce\x6f\xc1\x1a\x6f\x57\xb0\xc6\xdb\x1a\x6b\x70\x71\xef\x13\x3e\x24\x44\xa4\x83\x22\xc8\x9d\xb0\x1d\xce\xcb\x3c\xa1\xc8\xa6\x81\x4b\xee\x2c\x59\xa9\x19\xd9\x7a\x36\x1d\x1e\xf4\x43\xf7\x5e\x17\xba\x74\x8c\x1c\x1f\x73\xd0\x4f\x84\x91\xd9\xc7\xcc\x48\x67\x52\x45\x9d\xe9\x13\x4f\xa4\x0d\x64\x93\xd8\x4f\x5b\x8c\x48\x10\xcf\x6a\x12\xc5\x73\x8f\x25\x7e\x71\xe4\x62\x41\x40\x6f\xf8\xc0\xa6\x4b\x3c\x1a\x40\x77\x92\xcf\x3f\xd3\xa9\x6b\x14\xe8\x95\x9b\x0b\x32\x8a\x7c\xa0\x44\xba\x2d\xdf\xdf\x2f\x13\x21\x0b\x22\x88\x0d\xb2\x4a\xd2\xed\x82\x3e\xd5\xea\x95\x05\x1e\x44\x8c\x94\xca\xa0\x34\xe4\x48\x46\x19\xca\x05\xa3\x7d\x29\x6c\xbe\xd5\xe1\xe7\xd5\x20\x8e\xfe\x16\xf4\x79\xf4\xc3\x01\x8f\x70\xb0\x92\x4d\xe3\x48\xd0\x79\x8b\x2a\x66\x8b\xac\xaa\xc9\x12\x9b\x4a\x61\xf3\xba\x3c\x41\xf7\x7d\xdc\xb4\xfb\x7e\x88\x5d\x3c\x1e\x34\xee\x7f\x4a\xf7\x59\x0c\x60\xc7\xfe\x56\x25\x41\xe5\xd4\x63\x74\x30\x6c\x3f\xf7\x70\xd6\x16\xb3\x01\x0d\xcc\xd7\xa8\x1f\x0b\x11\x06\x88\x13\x88\x39\x2e\x66\xf7\x68\x18\xfa\x7e\x78\x9b\x86\x12\xb9\x36\xf2\x7d\xdb\xbe\xbd\xbd\xb5\x60\x6a\x31\xf8\xb3\x9c\x70\x64\x27\x8b\xa9\x0d\x01\x89\x60\x4e\xb8\x2d\xed\xc6\xc5\x3f\x9d\x51\xd4\x49\x82\xcf\xdc\xac\x4d\x97\x5f\xdc\xde\x1c\xd9\x83\xc4\x0c\x91\xc2\x0c\x6a\x91\x8f\x30\xc3\x23\x0e\x43\x93\xb3\xd7\x80\x51\xd7\xec\xfb\xa1\x73\x83\x22\xec\xba\x34\x18\x98\xd2\x84\xaf\xf7\xbe\xaf\x8c\x6c\x3e\xd8\x83\x98\x6f\xa0\xd7\x66\x3f\x64\x2e\x61\xb2\xb5\xb1\xc2\xb8\x38\xa1\x1f\x8f\x02\xa4\xe9\xdf\xa0\x85\xfe\x07\x8e\x43\xfc\x11\x19\xe5\x18\x2f\x72\xbb\xac\x79\x39\x98\xe5\x4d\xf1\x3c\x3a\xed\x7a\x4d\xfa\x0c\xad\x9f\x7f\x97\x9d\x28\x6e\xd2\x67\xd9\xfc\xf9\x77\x9a\x36\x1a\x67\xfa\xff\x30\xce\x11\x6f\xd2\x65\x68\xbd\xb0\xcb\xdc\x61\x34\x12\x79\x60\xf7\x09\x8f\x71\x52\x9a\xf5\x74\x8c\x19\x92\x91\x0f\x75\x90\x4e\x74\xa6\xd3\x1f\x60\x61\x52\xad\x56\x61\x54\x4e\xa1\x10\x67\xce\x0c\x37\x7e\xe2\xf0\x0d\xd2\x10\xeb\xea\xe8\xa7\x9f\x4e\x4f\xfa\x14\xb2\xb1\x11\x0d\xec\x7e\x1c\xb8\x3e\xb1\xe0\xab\xf5\x89\x4f\x26\xc4\xe7\x90\x57\x01\x65\x5a\xa1\x0a\x03\x77\x16\xfc\x0f\x4b\x3a\xd9\x1a\x72\x4a\x14\xaa\x73\x3f\xfb\xbb\xad\xef\xec\xe9\x74\x32\x49\x8c\x94\xb3\x1a\x96\x90\xf7\xcf\x3e\x86\xa4\x4b\xe1\x4d\x30\x1a\x4e\x56\x25\xe8\xf3\xcf\xf0\x09\x39\xdd\x64\xa2\x86\x6d\x3a\x95\x65\xc7\xc9\x57\x14\x06\xc7\x3e\x75\x6e\x3a\x13\x31\xa4\xdc\x1a\x62\xa9\x9b\x2a\x99\x22\xb4\x95\xe4\x86\xef\x24\x57\x45\x6f\x5d\x81\x69\xe4\x78\x60\xa9\x8d\xd2\x7e\x45\xa5\x92\x95\x78\x9d\x5a\x25\xaa\xa0\x99\x7e\xab\x6a\x55\x06\xbf\x4a\xa9\x99\x16\xc6\x70\xcf\x80\xc7\x2b\x99\xf8\xf6\x40\x45\x7a\x47\x5c\x64\xa4\xad\x91\x81\xe6\x72\x65\x9d\x47\x18\x5b\x79\xf0\x55\x91\x54\xa7\xa0\xe7\xb0\xa1\xa6\x29\xa0\x02\x0e\x1a\x4d\x65\xcc\x75\x55\x06\xb4\x1a\x70\xcd\xe2\xa8\x6c\x54\x07\x10\xb6\xd2\x09\x3f\x99\xa8\xa1\xe9\x85\x1c\xf2\xf2\x31\x41\x5f\x47\xd6\x71\xef\x3a\x40\x86\xc0\x7d\x8e\xe4\x3f\x1d\x3a\x50\x92\xf2\xc8\xfc\x6a\xae\x0e\x44\x25\x91\x41\x96\x2d\x8a\x5a\xd5\xf9\x94\x64\xa4\xf6\x23\x90\x04\x6f\x92\x89\xa9\xa3\x5b\x3e\x56\xc9\xb1\x94\xae\x75\x05\x3a\xa6\x6a\x4e\xa7\x05\xd4\x34\xdc\x2b\x21\xbb\x7e\x08\xb8\x6e\x64\xbe\x2e\xe2\xb0\x43\x20\x85\xb9\xb7\x57\x44\x5c\x78\x85\xb8\x08\x8e\x3f\x08\x4c\x4e\x7c\xcf\x74\x00\xc7\x11\x56\x8d\x41\xc1\x54\xa8\x59\x0e\x48\x83\x28\x16\xe6\x80\x85\x71\x84\x16\xea\x5e\x4f\x67\xfa\xb8\x4f\x7c\xc4\x47\xd8\xf7\x91\x0c\x75\x66\x10\xde\x32\x1c\xcd\xe3\xfc\x43\x97\xf8\xf8\x7e\x1f\x49\xf7\x90\x66\x74\xab\x92\xc4\x05\x82\x12\xb4\x5c\xc1\xb7\x32\xee\x97\x23\x18\x7a\x0f\x4e\x74\x32\x1b\x44\x98\x84\x29\xfc\x9e\x53\xfd\xb1\x14\x4b\xa2\x18\x3a\x0b\x19\x79\xa0\x66\x2d\x73\xbd\xa7\xf1\x03\x16\xde\xf2\x99\x1b\x04\xd6\x51\x9f\xc3\xc2\x2f\xc8\xe3\xfb\xc3\x79\x6e\x52\x97\xac\xce\x63\xc7\x81\x16\x4f\xed\x17\x6b\xd2\xf0\x61\xa9\x70\x0e\x22\xd9\x69\x14\x87\x70\x09\x91\x53\xc7\xf1\xf3\x30\xf8\x0f\x61\xe1\x4c\xd1\x61\x38\x86\xd8\x5d\x76\x25\x28\xa7\xae\x5c\x21\x35\x33\x91\x6d\x2e\xab\x27\x96\x93\x2f\x86\x45\xe5\x72\xcf\xb2\x32\x0b\xe2\xb2\xef\xa5\xb4\x1c\x5a\x5c\x73\xc2\x5e\x34\x25\xba\xbc\xe7\x8d\x69\xfe\x85\xa9\x68\x4c\xd4\x05\xf4\x31\x4f\xb4\xa0\xbf\x76\x66\x1a\x55\x33\xdb\x91\x17\xd9\x36\xa2\xf2\x2a\x09\x1b\xd5\x9a\x0b\xeb\xb0\x5c\x86\x19\x0e\x06\xb0\xb6\xc2\xd3\x6c\x39\x86\x07\xeb\x3d\xe5\x42\xd6\x7f\xe2\x77\xe8\x63\x82\x89\x64\xd1\x4b\xd9\xe0\x5b\x6b\x84\xa3\x97\x5e\x1c\x38\x82\x86\xc1\x4b\x49\xfc\x0a\xd1\x6f\xd1\x04\x31\x22\x62\x16\x7c\x04\x17\x13\x0c\x06\xfe\x17\x72\x8f\x0c\xa8\x35\x61\x3a\xf7\xef\xcd\x73\x43\x09\xb2\xce\x73\x8b\x23\x28\xe8\xce\xdb\xa2\x2e\x3a\xc8\x8d\x05\xcd\x01\x7a\xe9\x16\xb9\xe4\x00\x55\x8e\x53\x7f\x60\xc6\x9c\x44\x8e\xb2\xaf\x82\x02\xc9\x63\x47\xb3\x92\x7e\xd0\x73\x44\x71\xbd\x2e\xd7\xbd\x58\x97\x34\x70\xa0\x3a\x61\x69\xd5\xda\x64\x49\xc7\xab\x13\x96\xd5\x35\x97\x66\xd2\x00\x26\x2e\x27\x35\x52\xa5\xe7\xd6\x49\xcd\xea\x2a\xa4\x6a\x1f\xf0\x62\xdf\x2f\x8d\x78\xe2\x82\x9f\xb8\x0e\x83\xd6\x25\xc0\xc5\x1b\x88\x84\xe4\xe5\x04\x40\xd7\x3e\xa2\xaf\x10\x64\x85\xfb\xe8\x1b\xcd\xfe\x9b\x57\x08\x9a\xe2\xd8\x17\x97\x51\x28\x60\x19\x11\x2c\x26\xd3\x6f\xa7\x1f\xe7\x9c\x26\x37\x69\xb4\x98\xa4\x59\x06\x69\xd5\x07\x34\xcb\x6d\xc5\xdb\x2a\xaa\x6d\x65\x81\xae\x29\xfe\x75\xbd\xd6\xf0\xf7\xc4\x7b\x0e\xe8\x17\xb4\x6c\x09\x7e\x4f\x28\xbf\x41\x31\xc7\x03\xf2\x05\x03\x6b\xf0\x73\xe2\x3d\x21\x04\x06\xe1\x9b\x89\x80\xdb\x29\xf6\x5c\x01\x30\x4c\xa8\x0d\xc0\xbf\x2a\xf8\x6c\x32\xfc\x7d\x98\x82\xeb\x47\xbf\xb9\x20\x9e\xc3\xbe\x4a\x4b\x79\x24\x19\x91\x39\xac\x5b\xbd\x9d\xaa\xc0\xdc\x2c\x40\xe7\x0f\xd3\x60\xd9\x4b\xba\x6a\xbe\x59\xb6\xc7\x29\x86\x63\x69\x3d\x03\xfd\xaa\x4e\xaa\x53\x93\xdd\xa0\x37\xc8\x38\x51\xf7\x20\x40\x1d\xa3\x74\x7c\x56\xa7\x92\xb4\x24\x0a\x42\xee\xb0\x30\xbf\x5a\xcb\x65\x9e\xc9\x65\x2d\x8f\x6a\xf5\x16\xd2\x42\x95\x81\x14\x35\xd3\x7a\x1b\x19\x67\x61\x0c\x31\xde\xad\x50\x7b\x81\x99\x50\x0d\xde\x6e\x28\xfe\x7b\x64\x5c\x85\x02\xfb\x00\x68\xd9\xa3\x0b\xdf\x43\x06\x00\x53\xf7\x49\x64\xef\x20\xe3\x68\x8c\xe9\xd3\x74\x7c\x57\x75\xfc\xc5\x6a\xb2\x8b\xab\x7b\xb9\x71\xed\xb9\x65\x96\x1f\xb9\x00\x46\xae\x25\x16\xc9\x65\x49\xae\x37\x03\x6d\x59\x7d\xa3\x54\xc9\xf5\xe6\x32\xa5\x25\x80\x6c\xa1\x49\x65\x0a\xed\xc9\xe3\xe0\xc2\x1c\x74\x3d\x0b\xa6\xf4\xb9\xde\x01\x9e\x9b\xcf\x3a\x2f\x73\x3d\x9d\x96\xb9\x94\x25\x57\x32\x14\x21\x65\x09\x61\x3e\x0d\x58\x61\xea\x37\xd5\x33\x19\xfd\x82\xc4\x66\xde\x94\xc4\xf3\x3a\xcf\x2a\xd0\x8e\x62\xd9\xca\x40\x0a\xcb\x76\x8c\x6e\x10\xba\x04\x56\x05\x35\x81\x8b\x31\x5f\xab\x94\xb4\xa8\xb8\x4b\x90\x36\x50\x93\xff\xd1\x35\x8e\xe5\xac\xaf\x56\x58\x56\x2d\xd0\xf7\xba\xaa\xfa\x73\xab\xeb\x31\x42\x6a\xd4\x95\x55\x0b\xd4\x55\x21\x66\x89\xbe\xf3\xa1\xa5\x76\xd3\x20\xa1\xcb\xf9\xb3\xec\x2b\xcc\x5f\x08\x3c\xf7\xda\xad\x67\xb9\x74\x39\xa7\x4d\xac\x57\xce\x68\x57\x1e\xb0\x17\x73\xd8\x30\x37\x64\x69\x2e\x3c\x77\x63\x25\x37\x6e\x35\x6d\xe6\x43\xda\xdc\x60\xa6\x69\x32\x22\x77\x50\xe5\xb6\xcd\xaa\x13\x1d\x20\xa9\x1e\x12\x69\xe5\x7d\xb4\xb3\x97\x26\xd3\xab\x06\xd5\x05\xa9\x75\x8a\x96\x5a\xe5\xd2\xb4\x7d\x2e\xdd\x7d\x16\xb9\x74\xb7\x75\x2e\xdd\x95\xf9\xaf\x87\x01\xff\x7e\xc9\xa5\x75\x1e\xd5\x7d\xca\x5c\xba\xbb\xa9\xb9\x74\x3b\xc5\x9e\x6b\x2e\xdd\xdd\x88\x5c\xba\xbb\xe9\xb9\xf4\xc3\x14\x7c\xbc\x93\x24\xa5\xe7\x9a\x0f\x92\xb2\xc8\xd9\xf8\xcc\xa6\xb7\x02\x45\x01\x5b\xc1\x02\x6b\x8e\x5c\x73\x27\xc3\x0d\xef\xa8\xe0\xa8\x1b\xd8\x17\xb1\x40\x11\x74\x2a\xb9\xf6\x59\x94\x72\x81\x0e\x4a\x33\xab\x7f\x60\x17\xac\x1b\xf1\x07\x2b\xd2\xc3\xce\x0d\x59\xaa\x4b\xd6\xea\x02\xad\x41\xe6\x09\x0b\x23\xfe\xea\x94\xb1\x90\x2d\x13\xfc\x3e\xe4\xd5\x52\x1b\x1f\x83\x51\x0f\x56\x61\xc6\x73\x49\x1e\xcd\x25\x79\xba\xb6\x51\x8a\x47\xbd\xba\x93\x30\x9a\x66\x5c\x3a\xdd\xa2\x9e\x95\x64\x3e\x79\xb3\xcd\x9f\xbf\x54\x1f\x83\x65\xc4\xb5\x47\x29\x35\x6e\x9a\xd0\x76\x7b\x2b\x51\x2e\xc1\xd4\x45\xf4\x5b\x85\x8f\xf5\xd8\xaa\x84\x09\xbd\xfb\xed\xea\xf4\x12\x86\x16\x8d\x42\x37\xf6\x43\xb4\xfb\x53\xc5\x8f\x07\xa4\x76\xef\xee\x05\xe1\xdd\xa0\xf2\x36\xf7\xa1\x5d\xcb\x59\x7a\xcc\x4a\xac\xa1\x61\x35\xef\x8a\x94\xa4\x20\xed\x5d\xf7\x4a\x75\xa0\xda\x2f\x33\x21\x27\xc4\x17\x58\x4e\xe6\xca\x3e\x94\x7a\xa0\x78\xd6\x3b\xfb\x3c\xd3\x6a\xed\x0f\x1f\x7d\x38\xa3\x2c\x48\x2c\xb5\xba\x8e\x14\x4d\x86\x34\xe5\xbe\xca\xa0\x6a\xf6\xad\x87\x75\x16\xee\x56\x1a\x84\x45\xbd\x29\xf5\xa5\x97\xeb\x45\x03\xd6\x8f\x34\xc4\x45\x8b\xbb\x2a\x00\x93\x24\x00\xd7\x98\xbc\xca\x0f\x14\xdd\x2a\x5e\xa0\x22\x7c\x9d\x0f\xa4\x59\x7a\xba\xc6\x9f\x53\x1f\x65\x44\xd2\x7c\x46\x69\x4d\x2f\xd8\xfc\x81\x0c\xab\x3a\xb4\x8a\xe3\xa5\xbc\xaa\xbb\xf4\xaa\xc2\x58\x24\x5d\xdf\x96\xf2\x4e\x56\xc2\x26\x53\x46\xf3\x5e\x45\xf1\x84\x79\xf3\x09\xa3\xcd\x79\xe4\xfb\x09\x06\x4b\xfd\x56\x0f\x6d\xa9\x40\x6a\x92\x95\xa4\xfd\x29\x97\xa8\xa1\xd0\x0e\x59\xbd\xc9\x92\x07\x08\x8b\xe6\x68\x71\x2a\xb5\xf3\xb6\x82\xee\x6b\x73\xb9\x3a\xae\xc5\xae\x2d\x0a\x12\x15\x7d\x5b\xd1\xef\x32\x44\xb5\x22\xef\x26\x7e\x77\x3a\xf3\xb8\x26\xcc\x1b\xf8\xdd\x06\x5c\xd9\x90\x3f\xf1\x69\xbb\xcf\x74\x46\x46\xcf\x61\xa3\x49\xaa\xd9\x72\xa7\x09\x48\x43\x76\xff\x65\x97\x49\xef\x30\x80\x39\x9e\x70\x9b\x49\x4a\xdf\xcc\x7d\xa6\x96\x9a\x3d\xd7\x8d\x26\x39\xa1\x36\x60\xa7\x29\x09\x3f\x9b\xbc\xd5\xf4\x40\x0d\x1f\xeb\xde\x46\xa2\xe6\xe7\xbd\xb8\xf1\x0b\x0d\xdc\x07\xdd\xbf\x68\x7c\xfe\xae\x60\xe3\x83\x4f\xf1\xe5\xe9\xe2\x83\x99\xfc\xc8\x08\x59\x87\x26\xe5\xa3\xb2\xb5\x5f\x0c\x18\xa9\xf5\x2e\xb7\x61\x04\x05\x33\x5c\x90\xd4\x36\xda\x30\x02\x92\x35\x5d\x0a\x28\x5e\x03\x00\xbe\x96\x74\xa9\x45\x97\x00\xa0\x8d\xde\x93\xba\x81\x96\x06\xca\x11\xad\xf5\x02\x40\xe5\xdd\x0f\x25\xac\xd5\x51\x7a\x3d\xbb\x36\x27\xdd\xf5\xdc\x7e\xac\x3a\xa7\x5e\x76\x0e\xbd\xbe\xb3\x67\xdd\xa1\x8a\xc3\x67\x54\xaa\xfd\x72\x40\x5c\xf7\x6b\xde\xb6\xc0\xbd\xc7\x9f\x03\x6e\x07\x2d\x5b\xc2\xf6\x1e\x0b\xe5\x22\xfb\xe5\x7c\x38\x43\xee\x3d\xfe\x84\xc0\x1d\x84\x6f\x26\x6e\x6f\xa7\xd8\x73\x85\xed\x30\x9f\x36\x00\xb5\xab\xd8\xb3\xc9\xa0\xfd\x61\x0a\x3e\xde\xf9\xb0\xd2\xb3\xdd\xf9\x70\x61\x67\xbd\xec\x3a\x35\x37\x9d\xe5\xcf\x9c\x66\xa5\x3a\x2e\xca\xe2\x55\x6f\xb9\xf6\xb8\xba\x90\xdd\xeb\x9e\x24\x97\x5c\x9b\x51\x6e\x23\xe3\xba\x1d\xe5\x0e\x50\x5e\x9e\x7e\x48\xee\x52\x37\x23\xdd\x05\x75\x3f\xb4\x91\xb9\x87\x8c\xf3\x6e\x1b\xc2\xef\x91\xf1\x6b\xf7\xc3\x55\x1b\xd2\xbf\x23\xe3\xc3\xe9\x65\x1b\xca\xb7\xc8\xb8\xea\x9e\x9d\xca\x5f\x30\x36\x25\xfd\x07\x32\x8e\x2f\xce\xce\x8e\xce\x4f\xd2\xbb\xea\x4d\x0f\xa9\x23\x58\xab\xf3\x47\xd4\x11\xcf\xe1\x19\x59\xd7\x28\xdf\x88\x78\xdd\x01\x75\xc4\x75\x32\x10\x51\x99\x0b\x44\xdc\x02\x4f\x5c\xfa\x63\xcd\x39\xe4\x9c\xd2\x35\x3d\x99\xd6\xb4\xd7\x95\xb4\x45\x70\xaa\xda\x71\xc2\x5a\x0b\xe9\x31\x1a\x32\x2a\xee\x5b\x33\x38\xa7\x4e\x8b\xc3\x77\x4d\x7c\x49\xff\x6a\x4f\xfc\x81\x70\x88\x5c\x81\x58\xc6\xa0\x8c\xcb\x32\xc3\x5d\xd1\xca\x7b\x03\xf3\x0d\x2b\x2f\x18\x3c\xf2\x0e\xbc\x7e\xb7\x5d\xc5\x9b\x48\x92\x9a\x46\x2f\x22\x49\xe7\xa8\xf4\xfa\x61\xe1\x0d\x2c\x30\x09\x89\x9c\x07\xd6\x91\x04\xb6\xc7\x49\xb9\xb1\x95\x60\xee\xf4\xfd\x31\xef\x81\xb6\xea\x1d\x32\xb2\x5c\x93\x2c\x7b\x8f\x4c\xa2\xbf\x24\xd0\x2f\xb6\x29\xe5\x87\xf2\x8d\x34\x18\xe6\xa6\x66\x37\x8b\x13\x59\x2a\xa5\x01\x7a\xf2\x03\xf0\xb4\xd3\xff\x0b\x00\x00\xff\xff\xbd\x0e\x17\xa4\xb5\x55\x00\x00"

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 21941, mode: os.FileMode(420), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

