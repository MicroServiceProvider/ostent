// Code generated by go-bindata.
// sources:
// index.html
// DO NOT EDIT!

// +build bin

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5c\x7b\x73\xdb\xb6\xb2\xff\x3f\x9f\x02\xe5\x6d\xef\x1f\x9d\x52\xaa\x1f\xb9\x37\x37\x95\x7c\xc7\xb1\xdc\x94\xd3\xd8\xd1\xf8\x91\x73\x7a\x3a\x9d\x0e\x44\x82\x12\x6a\x8a\x64\x49\x48\xb6\xab\xd1\x77\x3f\x8b\x07\x29\x92\x22\x29\x89\x84\x5d\xeb\x24\x99\x89\x45\xe2\xb1\xd8\x05\x76\x7f\xbb\x20\x1e\xbd\xaf\x06\x1f\xcf\x6e\x7e\x19\x9e\xa3\x09\x9b\x7a\xaf\x4e\x7a\xe2\x07\x21\x78\x20\xd8\x81\x07\xfe\x38\x25\x0c\x23\x7b\x82\xa3\x98\xb0\xbe\x31\x63\xae\xf9\xc6\x50\x59\x8c\x32\x8f\x88\x67\x78\x5b\x2c\x3a\x03\xcc\x70\xe7\xa7\x20\x66\x3e\x9e\x92\xe5\x12\xc1\x13\xf1\x59\xaf\xbb\x2a\xa7\xc8\x4d\x18\x0b\x4d\xf2\xe7\x8c\xce\xfb\xc6\x3f\xcd\xdb\x53\xf3\x2c\x98\x86\x98\xd1\x91\x47\x0c\x64\x07\x3e\xaf\xd6\x37\xac\xf3\x3e\x71\xc6\xc4\xc8\xd6\xe4\x94\xfb\xc6\x9c\x92\xfb\x30\x88\x58\xa6\xf0\x3d\x75\xd8\xa4\xef\x90\x39\xb5\x89\x29\x5e\xbe\x43\xd4\xa7\x8c\x62\xcf\x8c\x6d\xec\x91\xfe\x81\x22\xb4\x58\xfc\x74\x73\xf1\x01\x19\xbd\xaf\x8c\xe5\xd2\x34\x7f\xa5\x2e\xb2\xce\x7f\x3b\xe9\x79\xd4\xbf\x43\x11\xf1\xfa\x46\x3c\x01\xda\xf6\x8c\x21\x0a\xe4\x0d\x34\x89\x88\xdb\x37\xba\x2e\x9e\xf3\xf7\x0e\xfc\x29\xa3\xf4\x2b\xf1\x1d\xea\xfe\x66\x9a\x59\x4a\x92\x40\x4c\xff\x22\x71\xdf\x38\x3a\x7c\x38\x3a\x2c\x92\x8b\x93\x07\xf3\xe8\xb0\x13\xfa\x63\x03\xb1\xc7\x10\x44\xa4\x53\x3c\x26\x5d\x9e\xa0\xc4\x5f\x11\xc5\x61\xe8\x11\x93\x05\x33\x7b\x62\xe6\x1a\x38\x38\xfc\xfe\x01\xfe\x57\x37\x01\x99\x9d\x1d\x49\x1e\x1f\x3f\xc0\xff\x1a\x92\xc7\xc7\xbb\x92\x7c\x7d\xf8\x00\xff\x6b\x48\xbe\x3e\xdc\x95\xe4\x1b\x10\xfc\x4d\x9d\xe0\x6f\x2a\x04\x8f\xd9\xa3\x47\xe2\x09\x21\x2c\xe9\x78\x46\x1e\x58\xd7\x8e\xe3\x94\x18\x3c\x77\xa9\xef\x90\x87\x0e\x4f\x55\x14\x62\x3b\xa2\x21\xcb\x56\xf9\x03\xcf\xb1\x4c\x35\x8a\xe6\x82\xe2\xc8\x06\x42\x7f\xc4\xdd\x88\x2b\x7d\x44\xe0\xe9\xb0\x73\xd0\x39\x78\x93\x24\x74\xa6\xd4\xef\xfc\x01\x6d\x3a\x60\x42\xe6\x14\x53\x5f\x96\x5f\x2c\x40\x3b\x3b\x37\xa7\xef\xdf\x9f\x0f\x46\xd4\x5f\x2e\xa1\x9c\x62\x46\xd6\x58\x2c\x88\x17\x83\xad\x41\x0b\xdd\x29\xf5\xee\x54\xa6\xc8\xf0\x9d\xe5\xd2\x48\xcc\xb3\xd7\x95\xcc\x29\xfe\xbb\xca\xc2\x4f\x7a\xa3\xc0\x79\x54\x89\x3e\x9e\x23\xdb\xc3\x31\xf4\x28\x3c\x8e\x70\x84\xe4\x8f\xe9\x10\x17\xcf\x3c\x96\xbc\xc6\x0c\x6c\xd5\x86\x81\x08\x0d\x14\x05\x60\x5a\xbc\x38\x1d\x43\x22\x8c\x49\xda\xa0\x43\x53\x6a\xdc\x4a\x41\x26\x12\x99\xae\x37\xa3\x4e\x52\xa6\x50\x4a\x51\xe7\x9c\x91\x08\x2c\xdb\x33\xa7\x8e\x79\x80\x42\xec\x38\xd4\x1f\x9b\x1e\x71\x01\x46\x92\x21\x48\xea\x8f\x66\x8c\x05\x7e\x81\x04\x0b\xc6\x63\x8f\x70\x12\x1e\x0e\x63\xe2\x24\x63\x2b\x0b\xab\x5e\x96\x85\x38\x73\xb2\x54\x92\x8c\xa3\x31\x1f\xba\xff\x52\xb4\xd2\xec\x4c\xb3\x42\x03\x42\x9c\x36\x1b\x47\x66\xe0\x7b\x8f\xf9\x22\x50\xe8\x46\xf2\xb1\xea\x1d\x18\x05\xa8\x56\x43\x49\x68\x2b\x34\xbb\x46\xea\xc5\xd4\xec\xca\x4e\xcc\x0d\x02\x46\xd4\xe9\x1b\x13\xe8\xd9\xfc\x38\x8c\x22\xec\x3b\x90\x46\x41\x51\x84\xa5\xf5\x8d\x29\x7e\x90\xf0\xfc\x16\x1d\x1c\xda\x93\xd4\xca\x60\x88\xb8\x97\x00\x2a\xca\x7f\xa0\x75\x87\x52\x18\x82\xf5\x02\xbd\x2e\xce\xf1\xd5\x05\xed\x2a\xe8\x1a\x67\xb4\x38\xb2\x2b\x35\x95\x09\xa8\x66\xe8\x4f\x7a\x33\x2f\x23\x65\x52\x14\x7e\x8a\x0a\xe2\xd1\xa4\x1c\xb6\x19\x9d\x93\xf5\xee\xc5\x4a\x78\xee\x0e\xe3\xb7\xdd\xee\xfd\xfd\x7d\x07\x64\x89\xe0\x7f\xc7\x0e\xa6\x5d\xe9\x3f\x01\x23\x3c\x82\x63\x12\x77\x3d\xcc\x48\xcc\xfe\xdf\x9e\x86\xfd\x44\xf6\x4f\xe7\x57\xd7\xd6\xc7\xcb\x62\xdf\x08\xfa\x89\xfb\xc5\xeb\xe3\xea\xd1\x4a\x66\x13\x13\x02\x4c\x43\x99\x67\x00\xa5\x68\x4c\x7d\x6e\x80\xc8\xa5\x51\xcc\x44\xea\xba\x4c\x76\xe0\x90\x02\x29\x9e\x04\x88\xbb\xd6\x01\x82\xc5\x74\x98\x07\xd6\xf5\xcd\x95\xf5\x8e\x0f\x22\xaf\xa0\x99\xe7\xb6\x8c\xd2\xf0\xbf\xfd\x51\x1c\xfe\x20\x0d\x87\x2b\x11\xe8\xf4\x5a\xb1\x8c\x52\x5a\x43\x2e\xc9\x9a\xfd\x28\x59\x5e\xa0\x84\xb3\x35\x09\x67\xf5\x12\xde\x86\x8c\x4a\xa3\xdb\x23\x29\x3d\x5c\x94\xd2\xc3\xb5\x52\x7e\x38\xd5\x20\x61\x77\xe6\xd5\xe1\x52\xe6\x15\x5e\x40\x08\xe5\x8f\x37\x7b\xd0\x5c\x99\x28\xb8\x2f\x7a\x56\x2e\xe0\x94\x4c\xc1\xa9\xc9\xd0\x3a\xc5\x39\xee\x5a\x8f\x13\x1f\x1b\xb8\x2e\x44\x2b\xe6\x41\x0e\xe7\x16\x0b\x46\xa6\x21\x87\x1c\x64\x80\xff\x87\xb6\xe3\xb7\x6f\xe5\xc3\xef\xd0\x1b\xc4\x03\xba\x06\xea\xf0\xde\x29\x47\x59\xc7\x2d\x6f\xf6\x75\xbb\x66\x1d\xb7\xb4\xd5\x5c\x1f\x6e\xee\x14\x3b\x9c\x3d\x49\xa7\x00\xdd\xda\x4e\xa1\x4f\xd3\x29\x54\x4b\xa7\x84\x71\x39\x73\x07\xdf\xb7\xe3\x2e\x8c\x75\x70\x37\x1f\x3f\x0d\x77\xf3\xf1\x66\xee\xd2\x97\x0d\x91\x7f\x52\x61\x0e\xb1\x33\x87\x0f\xd4\x4f\xfc\xdb\x72\xf9\x43\x31\x04\x57\x91\x37\x0f\xc6\xc5\xf4\x7b\xb1\xe8\x7e\xfb\xea\xdb\xee\x72\xb9\x58\x48\xfe\x32\x0c\x8f\x30\xcc\x84\x1d\x3e\x6f\xe1\x61\x30\x4c\x37\x93\xe0\x01\xc8\xff\x04\xbf\x7c\xb6\xed\x9f\x79\xd4\xbe\xeb\x2f\xd8\x84\xc6\x9d\x09\x44\x5e\x1e\x11\x29\x4b\xe0\x41\x74\xd9\x72\xc9\x8b\x9f\xc9\x47\x68\xf9\x55\x1a\x09\xae\x0a\x18\x0f\x1e\x1e\x11\x0f\xc9\x9f\x24\xf2\x4f\x27\xbc\x9d\x77\x9c\x91\x0c\x24\x9e\x70\x01\x6f\xa0\x1b\x64\xf4\x75\xa2\xe6\x1d\xdb\xc9\x12\xd1\xf1\x44\xa7\x30\x29\x2b\xa8\xb5\x58\xdb\x0a\xa3\x34\x09\xec\x1e\xd4\x36\x36\x78\x99\x7b\xca\x26\x88\xbf\x81\x32\x72\xcd\x02\xf2\xfc\x8f\x9c\xa8\x2d\x16\x10\x13\x8f\x09\xfa\x9a\x7e\x87\xbe\xb6\x83\x88\xa0\xb7\x7d\x24\x5d\xcd\xd9\xf0\xb6\xf3\x81\xc6\xbc\x27\x59\x04\xbc\x9f\x32\x16\xfd\x4c\x1e\x91\x00\x2b\xa0\x37\x7a\x34\x2f\x0d\x59\xa9\x73\x29\x64\x3e\xe9\x31\x27\xb1\x06\xe1\x28\x45\x87\x22\x3f\xb8\x8f\x70\x98\x0a\x97\xd6\xe8\x75\x99\x53\x59\x2b\x9d\xd9\x16\x3a\x6e\x16\x93\x90\x44\x36\x44\x92\x32\xe2\x93\xb3\xa4\x55\x6a\x3f\x69\xe0\x36\x26\x91\xe0\x2a\xd7\xac\x4c\xcd\x78\xd0\x93\xa7\xe5\xe2\xfa\x31\x5e\x67\x42\x24\x3e\x1f\x0f\xff\xc0\x94\xad\x33\x21\x53\x75\x73\x61\x52\x7f\x4e\xa2\x74\xf6\x5a\xc2\x8d\x05\xa6\xb3\xce\x8d\x4c\x2d\xe5\xa6\xcb\xa2\x8c\xea\xe7\x7f\xb6\x31\x04\x89\xd2\xbc\xd0\xd7\xe1\x4a\xbb\x87\x38\xc2\x53\x3e\x0c\x22\x1b\xf1\xcc\x0e\xd7\x70\x61\xc1\x97\x81\xff\x17\x89\x02\x04\x69\x60\x05\x3e\x32\x64\x21\xf1\xd7\x9c\x04\x20\xa1\x81\xd2\xe9\x99\x39\xa1\x8e\x43\x7c\x23\x31\x81\xcc\xc7\x4a\xe0\x3c\x81\x6c\x36\xc9\x82\x79\xfa\xc6\x33\x36\x98\x8c\x28\xc6\xf5\x36\x37\x4b\x9e\xf9\x34\x37\xdd\x39\xf9\xa6\x10\x16\x36\x69\x05\x14\xf3\xe9\x1b\xe1\x8a\xf7\xf4\xad\x70\x85\x6a\xd3\x4a\x57\x8d\x9d\x48\x4d\x3e\x4e\xb1\xd5\xd7\xa9\x3a\x3f\x9e\xa0\xaf\xf4\xe3\x6c\xe5\x58\x85\x02\xed\x82\xe3\x8e\x3b\x7a\x84\x49\xf6\xef\x3b\x82\xb9\x43\xe3\xbb\x95\xaa\x0f\x7e\x14\x44\xca\xc1\x5c\xb5\xa0\x00\xdd\xa1\x11\xff\x74\x61\x48\x12\x9d\x01\x8d\x2e\xc5\x97\x0c\x05\x0b\x29\x84\xcb\x5c\x32\xbf\x54\xdf\x39\x52\xe0\x28\x94\x48\xea\x6f\x03\x2d\x49\xa5\xd3\x39\xa6\xde\xb6\x55\xaa\x07\x61\x05\x3d\x89\x34\x60\x43\x43\x99\xb2\x5c\xca\x69\x57\xd2\x24\xe4\x38\xbb\x31\x79\x13\x30\x9c\x65\xb2\x15\x48\x25\xa3\xdc\x00\xa9\x6e\xf0\x88\xa3\xd4\xc0\xf5\xe5\x0f\x43\x87\x1a\xd0\xaa\xb4\x5f\xe5\x87\x50\xe2\xcf\xa6\x3c\x56\x32\x78\x7b\x9f\xc4\x97\x6b\xd1\xf0\x1d\x3a\x40\xc6\x40\xac\x77\x40\x6b\x42\x88\x06\x34\x80\xf9\x8b\x60\xe6\x33\xfe\x8d\xb4\x31\x91\x23\x64\x08\x1d\x02\x12\x99\xf1\x6b\x48\xec\x18\x19\xb7\xe2\x93\xad\x06\x5a\xaf\x91\x21\xf4\xa6\x48\xac\x15\xd8\xe4\x20\x42\x07\xe2\x50\x3f\x70\xda\x43\x8e\xa4\x52\x85\x39\x32\xf7\x05\x81\x8e\xe5\x46\x64\xeb\x2a\xbb\x80\x8e\x35\xab\x44\x1d\x9e\xb5\x23\xec\x58\xa2\xdf\xf4\xe1\x8e\x1a\x6b\x2d\xc0\x73\xa0\x27\x4c\x4a\xfa\x40\x1a\x53\xc6\xa3\x4b\x70\xa9\x08\x05\xd6\x4a\x2b\x18\xa9\x2d\x8e\x8a\xfd\x2c\x8a\x09\xec\x68\x50\x8f\xc3\x44\x83\x6a\x02\x11\xb4\x85\x1e\x79\xf3\x6d\x0f\x07\xb4\x59\x00\x42\xdd\x95\x1a\x59\x75\xe1\x07\xcd\x85\x1f\x0a\x06\xa8\xdb\x29\x47\x80\x34\x63\x4b\x9b\x81\xf2\x03\xe2\x31\x6c\xf9\x3b\x57\xf9\x38\x63\xbb\xd4\xd9\xad\x85\x3c\xf1\x56\x36\x4c\x5b\xc7\x0e\x96\x34\x61\x0b\x4c\xf8\x48\xf7\x4c\xc7\x02\x1b\x8c\x5c\x5c\x69\xb6\xeb\x11\x7c\xb2\xee\xf6\xce\xba\xb9\x46\x80\xa5\x28\x26\x76\xe0\x67\xd7\x68\x2d\xbf\x3e\xae\xef\x15\x3e\x77\x8f\x7a\xdd\x6c\xca\x49\x18\x37\x9e\x5e\x6c\x66\x0e\x46\xf6\x6f\xe7\x8e\x71\x44\x41\xef\x7e\xb9\x39\xbf\x46\xd3\xc0\x99\x79\x01\x3a\x7e\xdf\xa2\x03\xdf\x15\x58\xfc\xe6\xf8\xfd\x93\xf3\xb8\x73\x3f\xee\xca\x64\x1b\x90\xa5\x7a\x43\x2e\xea\x92\x28\x0a\xa2\x96\x20\x2b\x69\x54\xa1\xac\xcc\xfd\x02\xb3\xcd\x61\x56\x8d\x91\x16\x9c\xd5\x31\x47\xd3\x84\xb3\x15\x10\x9b\x5d\x96\xac\x32\x41\x0d\x50\x55\x85\xa1\xcf\xd4\x7c\x39\x3a\x6e\xd3\xb8\x0e\x0c\xac\xc0\x3d\x1d\xcd\xb7\x43\xb7\x2c\x1c\xe9\x80\xb7\x10\xdb\x77\x84\xb5\xc4\x37\x45\xa4\x0a\xe0\x54\xf6\x17\x84\x6b\x8e\x70\xc9\x30\x69\x81\x38\x4d\xb3\xc1\x2f\x10\xa7\x25\xd0\xfa\x7b\x81\xae\x9a\x87\x17\x01\x77\x39\x78\x6a\x8f\x77\x53\x32\x6d\xb0\xf6\x0a\xb5\x56\xb6\x76\x71\x7e\x51\x8e\x73\x7c\xf3\x8c\x44\xb8\x3b\x0a\x0a\x25\xaa\x75\x7e\xa6\x9c\xb3\x22\xc4\xad\x72\xb6\x84\x13\x5e\xe1\x47\xfd\x5f\xc1\x38\xd9\xd2\x2f\xef\x2a\x63\x37\x06\xb5\x7e\x77\x07\x82\xed\x16\x07\x2f\xc8\xf4\xf9\x17\x07\x33\xe6\xc3\x87\x6b\x97\xf2\x35\x9f\xa8\x9e\xe1\xdb\x54\x62\x18\xed\x4d\x2c\xdd\xdb\x54\x39\x70\x7c\x97\x0e\xff\x97\x1f\xba\xe1\x6a\x45\x17\xc6\x48\x50\x41\xe2\x6f\xba\x03\x43\x8e\x13\x42\x8a\xc0\xc6\xea\x62\x7b\x38\xf5\xc7\x86\x5a\xd2\x3e\xe1\x7f\x7a\x38\x5b\x95\x6f\x21\x91\x3b\xaf\x2f\x09\xdf\x76\x3d\x27\x09\x99\x65\x76\xf7\x88\xa2\x27\x20\x13\x8d\x98\x6f\x8e\xbc\xc0\xbe\x4b\xb7\xf0\xc8\x9f\xde\xa8\x9a\xa5\xc9\xb1\xc1\xff\xa0\xd1\xd8\xa4\xbe\x1b\x18\xe9\x22\x3b\xd4\x86\x12\xbd\xee\x28\x4b\x2b\xd9\x87\xcb\x65\x55\xdb\x89\xf8\x63\x99\xc2\x0f\x8b\xeb\xe0\x45\xe5\x56\xe9\x69\x1f\x70\xd0\x52\x6a\x25\x85\x02\xef\xe7\xd2\xf1\x6a\x97\xe0\xca\xce\xd5\x56\xa9\xc3\xaa\x3d\xf8\xc2\x91\x94\x7e\x38\x45\xfc\x8b\xb0\x87\x1f\x4b\xfc\x87\xd8\xd1\xb3\xb6\x3b\x5b\x0a\xe1\x94\xec\x9f\x5c\xdf\x01\xa9\x70\x34\x03\xa9\x6b\xac\xf1\x21\x1a\x47\xc1\x2c\x54\xde\x4e\xbe\x24\x27\x10\xe4\xcb\xab\x1c\x03\x25\x96\x51\xd8\x47\xc5\x3b\xfa\x03\x89\xe3\x81\xea\x71\x07\xf1\x66\x84\x36\xac\x14\x74\x03\x21\xd9\x4d\x02\x9d\x82\x88\xd4\x52\xaa\x17\x7b\x6d\x5f\x9b\xc1\xb5\x35\xf0\x78\xe7\x71\x7d\xcd\x8d\x59\xb6\xea\x0a\x23\x9e\x49\x0f\xae\x00\x55\x76\x54\x03\xbf\x73\x3a\x8a\x03\x6f\xc6\xca\x76\x0c\xbf\x38\x7d\xb8\x5c\x59\x60\x4b\x7d\xa8\xa5\xf4\x02\xc4\x5e\x71\xfb\x2f\xf0\xb1\x2d\xb8\x5d\xd7\xde\x4d\xda\xca\x81\x50\x7a\x22\xf1\xb2\x61\x83\x87\xda\xfb\x99\xee\xd4\xdc\xd5\x7b\x39\x6e\x23\xe7\xc5\xd7\xdb\x9a\xfb\xae\x5c\xed\xc6\xae\x0b\xa8\xe8\xf2\x5c\x82\xa1\x3a\xc7\x35\xe0\xcb\xca\xb3\x18\x8f\x49\x4b\xff\x25\x5a\xda\x73\xf7\x35\x70\xf7\xc7\x7b\x01\xaf\x7a\x9c\x57\x05\xa1\xcf\xd5\x77\x81\x1e\xef\x9f\xeb\x12\xc6\xa7\xc3\x73\x55\x10\x7a\x01\x42\x97\x38\xae\x46\xcc\xee\xee\xb7\xf4\x69\x6a\x85\x8a\x5e\x13\x8f\xd8\x6c\x03\xdb\x39\xf3\x3a\xca\x36\xb0\x76\x40\xd1\x0c\xa9\xe7\x15\xce\xcd\x7a\x74\x9b\xfd\x25\xea\xe4\xa2\xd8\x1a\x56\xb4\x8d\x92\xd1\xa9\xda\x89\x25\x68\xc9\xad\x34\x92\x56\xe1\x8c\xd4\x56\xec\x1c\x6a\x64\x07\x68\xbd\xe3\x2b\x8a\x15\xdc\x64\xcf\x6b\xb5\x0f\x5e\x0a\xbb\x7e\x78\x08\xf3\x6a\x53\x8d\xec\x1e\x83\xe6\x31\x0f\x6d\x16\xf3\x58\xad\x62\x1e\x4b\x4b\xcc\x63\xe9\x8b\x79\xac\x4d\x31\x4f\xfa\xa5\x3b\x6e\x19\xf3\x58\xff\x01\x31\x8f\xb5\x47\x31\x8f\xa5\x2b\xe6\xa9\x20\xf4\xb9\xc6\x3c\xd6\x3e\xc6\x3c\x96\xae\x98\xa7\x82\xd0\x0b\x10\xba\x24\xe6\x69\xc4\xec\x97\x98\xa7\x66\x15\x55\x4b\x90\xa1\x68\x0d\xe5\x4a\xd7\x8e\x41\x4f\x7e\xe3\x8a\x36\x7e\x80\xd6\xb9\xd8\x68\xd0\x9c\x9d\x23\x8d\xec\x1c\x3d\x67\x0c\x56\x5c\x6c\xdf\x22\x08\x2b\xec\x40\xda\xaa\x86\x9e\xb0\x8d\x9f\xac\x6f\x12\xb7\xc9\xd5\xb1\xc6\x81\x5b\xbe\x7a\xe3\xc8\x8d\x93\xd1\x15\xba\x49\x96\xea\x62\x37\x28\x11\x44\x8f\x2d\xe3\xb6\xec\xb2\xe2\xde\x06\x6e\x20\xc4\xfe\x44\x6e\x9c\x59\x3d\xa1\x5b\x15\xa5\xcf\x35\x76\xe3\xba\xbc\x7f\xc1\x9b\xb4\x40\x1d\xd1\x5b\x15\xa5\x17\x20\x76\x49\xf8\xd6\x8c\xdb\x27\x5d\x6b\x49\x37\x69\x34\x77\x60\x61\xdc\xc8\x7f\x0d\xe3\x36\xee\x2b\x57\xbb\xb1\xf7\x02\x2a\xba\x9c\x97\x60\xa8\xce\x77\x0d\xa3\xc0\x06\x03\x68\xfd\xd9\x41\x34\xb4\xe7\xde\x6b\x18\xef\x8f\xf3\x02\x5e\xf5\xf8\xae\x0a\x42\x9f\xab\xeb\x02\x3d\xde\x3f\xcf\x25\x8c\x4f\x87\xe3\xaa\x20\xf4\x02\x84\x2e\xf1\x5b\x8d\x98\x7d\x52\xb7\x15\xc6\x6d\xbd\xd6\x7c\xdc\xc8\x6b\x7d\x1a\xb7\xf1\x5a\xb9\xda\x8d\xbd\x16\x50\xd1\xe5\xb5\x04\x43\x75\x5e\xeb\x13\x1e\x47\x98\xdf\x2b\xd9\xca\x67\x89\x66\xf6\xdc\x67\x7d\x1a\xef\x8f\xcf\x02\x5e\xf5\xf8\xac\x0a\x42\x9f\xab\xcf\x02\x3d\xde\x3f\x9f\x25\x8c\x4f\x87\xcf\xaa\x20\xf4\x02\x84\x2e\xf1\x59\x8d\x98\x7d\x52\x9f\x35\x1f\xb7\xf1\x59\xf1\x8e\xa7\x1e\x42\x98\x6e\x64\x5c\xdb\xb5\x68\xbb\xfc\xd8\x43\x98\x9c\xeb\x0a\x29\x3f\xf4\xc0\x6b\x76\x86\xd6\xa0\xe6\xd2\x39\x75\x6a\x40\x40\x7d\x5a\x7a\x9b\x73\x06\x69\x8d\xdb\x42\x8d\x57\xa9\x91\x89\x5c\x75\x8f\xdc\x0e\x04\x87\x11\x0d\x22\xca\x1e\x77\xac\x76\x49\xed\x2d\x8f\x64\xa4\x55\xae\xe9\x5f\xbb\x56\xb9\x22\x31\x75\xc4\xf9\x8c\xaa\x6a\xfc\xf4\x46\x72\xc3\x46\xda\x0d\x37\xb4\xea\x2a\x16\xc9\x7b\xfe\x8c\x5d\xab\xc3\x1a\x49\x40\xd5\xf4\xac\x46\x66\x56\xfa\x9c\x37\x23\x0d\x63\x71\x33\x12\xe8\x5f\xeb\x2b\x84\x38\xa9\x37\xc8\xb8\xd5\x44\xea\xff\x80\xd4\xf5\xf9\x55\xc3\x8b\x96\x38\x85\x43\x90\xeb\x4a\x0b\x2f\x47\xc8\xb8\xb4\xb4\x50\x3a\x46\xc6\x27\xeb\xea\x46\x0b\xad\xd7\xc8\xb8\x3a\xbf\xd6\x42\xea\x7f\x90\x71\x63\x5d\x9c\x27\xb4\x94\x31\x35\x24\xf6\xbf\xc8\x38\xfb\x78\x71\x71\x7a\x39\x48\x16\xab\x5a\x9c\xca\x51\xb8\xdd\xfe\x50\x4e\xe6\xd4\x17\x90\x2a\xde\x13\x29\x2e\x3a\x2d\xbb\x15\x52\xae\x63\x9d\x88\x87\xe4\x4a\xbe\x1d\x5a\x9d\x8f\xc5\xb2\x98\x21\x7d\xc6\x1d\x79\xe4\x37\xf3\xca\xa4\x04\xc5\x72\xa1\xdd\xeb\x14\xc1\xd4\x8d\xf5\x72\xfa\x20\x56\x22\x2b\xa1\x6a\x0b\x2e\x52\xe7\xa7\xbc\xdb\x14\xdb\x93\x15\x48\xa9\x56\x2e\x20\x91\xd7\x2b\xf7\x72\x73\x59\x48\xb9\xba\xd9\x4c\xf8\x3a\x4e\xa7\x73\x7b\x9b\x71\x76\x29\xc4\x66\xb2\xca\x10\x58\x64\x57\xdf\x95\x25\xb2\x87\x51\x30\x07\xdc\x8f\x6a\x8a\x80\x5f\x66\x75\x24\x94\x68\x2e\xf5\xf8\xbc\x95\x4d\x36\xe1\xfd\x16\x7d\x19\x43\x00\x61\x4f\xb6\x09\x25\xa8\x8b\xc8\x9f\x68\x7d\x24\x1d\xc4\xa2\x19\xa9\x30\xaf\x82\xe6\xa0\x1c\xc5\xba\xf2\xa9\xa1\x34\xf5\x61\x49\x80\xd5\xd4\x87\x65\x66\xa9\xda\x8e\x55\x0f\x0a\x07\x02\x57\x59\x5c\x77\x2a\x33\x13\xcd\xa9\x2c\x20\xf4\xa6\x32\x77\x40\x23\x62\x33\xb1\x54\xaa\xe9\x74\x61\xaa\x36\x2d\x90\x2c\x85\xdc\x65\xf6\x0e\xe8\x0f\x90\xb2\xf1\x1e\x68\x85\x61\xbc\xec\x6e\xd7\x4f\x17\xc0\x9e\x2b\xc1\x24\x0b\x9c\xea\xee\x30\xa0\x7d\xea\xd1\xb1\x7f\x26\xd3\x25\xb8\x95\xf2\x98\xbb\x90\x9a\xa7\xab\x2a\xc9\x74\x20\xcf\x65\x01\xa7\xf9\x1d\xd6\x38\x22\x2c\x5b\x47\x74\x62\xf6\x62\x5e\xac\xfa\x75\x92\x0a\xf8\xef\x00\x00\x00\xff\xff\xd3\xe7\xb9\xd0\xbb\x6b\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 27579, mode: os.FileMode(384), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

