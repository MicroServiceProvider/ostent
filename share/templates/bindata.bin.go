// Code generated by go-bindata.
// sources:
// index.html
// DO NOT EDIT!

// +build bin

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5d\x7d\x73\xdb\x36\xd2\xff\xbf\x9f\x02\xe5\xb4\xcf\xb4\x9d\x92\x8c\x1d\xa7\x4f\x2e\x95\x7c\x93\xd8\xbe\x9e\xe6\x12\x47\x13\xdb\xb9\xeb\x75\x3a\x37\x10\x09\x59\xa8\x29\x82\x05\x40\xbf\x9c\x86\xdf\xfd\x16\xe0\xbb\x48\x5a\x94\x2c\x4a\x8a\xed\xcc\x38\x26\xc1\x7d\xc1\xfe\xb0\x00\x76\x17\x94\x3c\x9b\xb9\x64\x4c\x7d\x82\x8c\xf8\xf7\x7f\xc2\x40\xd2\x29\x31\xa2\xa8\x27\x02\xec\x1f\xce\x66\xd6\x31\x96\xd8\x8a\x9b\xa1\xd5\x4e\x9a\x89\xef\x46\x51\x85\x7b\xc2\x84\xf4\x71\xcc\x8f\xd1\x84\x93\x71\xdf\xb0\x0d\x24\xa9\xf4\x48\xdf\x48\x9f\xa2\x54\x6a\xda\x10\x45\xc6\x61\xb5\xad\x67\xe3\x46\x45\x1e\x36\x54\xeb\x37\x01\x7a\xd3\x47\x31\x63\x80\x39\x9e\x8a\x28\xfa\xaa\xe7\xd2\x6b\xe4\x78\x58\x88\xbe\x71\xc9\xa9\x6b\x8e\x3c\xe6\x5c\x41\x6f\x4c\xc9\x02\xe3\xf0\x2b\x84\x8a\x14\x0e\xf3\x4c\x8f\x23\x0f\xf3\x4b\x62\xee\x21\x49\x6e\xa5\xc9\xe9\xe5\x44\x1a\x87\x9a\x6c\x36\x3b\x52\x84\x43\x26\xa8\xa4\xd7\x04\x7d\x13\x58\xef\xb1\x8f\x8c\x09\x75\x89\x29\x26\xec\x46\x5d\x18\xc8\x50\x97\xf9\x7d\x14\x29\x3d\xa0\x69\xb2\x97\x2a\x9a\x1c\xc4\xc2\xd9\x35\xe1\x63\x8f\xdd\x18\x31\x05\xd0\x60\x50\xf2\x77\xc0\xea\x1c\x84\x27\xf2\xa3\x28\x05\xed\x3d\xc3\x2e\xc2\xd7\x97\xc8\xa5\x22\xf0\xf0\x1d\x62\x30\x14\xcc\x17\x39\xbb\x1a\x11\x90\xa0\xd5\x44\x51\xdf\x48\x3b\x61\xaa\xff\x10\x5c\x4a\x02\x24\x0e\x31\x03\x4e\x10\x68\xc6\xd2\xf4\xc8\x18\xec\xb3\x2c\x0b\x25\x03\x9a\x6a\x51\x98\xc7\x1d\xb7\x27\x7b\x87\x3d\x1b\x10\xd0\x80\x65\x17\x8d\xc8\xed\xad\x07\xaf\xda\xb1\xcb\x6d\x0d\xbd\xf4\xe9\x94\xf8\x21\xca\x4c\x55\x17\x19\x15\xd0\x79\x34\xbf\x29\x4b\xa5\x7e\x10\x4a\xf3\x92\xb3\x30\x30\x8a\x34\x8d\x54\xa6\x87\x47\xc4\x43\x62\x8a\x3d\x2f\x1e\x41\x9f\xdd\x70\x0c\xdc\x2e\x81\xf1\xc8\xa0\x59\x2c\x68\x14\x4a\xc9\x7c\xc0\x09\xa7\x4f\xe3\x96\x44\xb6\x20\x0e\xf3\x5d\xcc\xef\xd4\x50\xe3\x91\x47\x5c\x35\x2b\x34\x7e\x6e\x3c\x1b\x56\xd0\x35\x9b\xdd\x50\x39\x41\xef\x89\x10\xc7\x99\x7b\xb9\xa8\xac\xb9\x68\x15\x4c\x20\x54\xfa\x07\xbd\x65\xfe\x91\x47\x9d\xab\xfe\x4c\x4e\xa8\xb0\x26\xd8\x77\x3d\xa2\x5b\xa2\x78\x8e\xc3\xdc\x55\xfe\x0b\x4e\x9b\xbb\x21\xb4\x1d\xc5\x97\x73\xf2\x10\x52\x73\xfd\x1d\x76\x2f\x89\x66\xb0\xce\x41\x7b\x69\xb6\x97\x0d\x5c\xd9\xe6\x0f\x8c\x93\x9d\xb2\x39\x36\x14\xe5\xd6\xb7\xb6\x79\xae\xa1\x67\x17\xfd\x7b\x33\xce\xce\xd9\x8d\xd8\x88\xaf\xfb\xd6\xdb\x91\x60\x5e\x28\xc9\x3a\x9c\xfe\x34\x5f\x53\xe7\x1c\x40\x84\x8e\x03\x04\x8f\xd8\xf9\x77\xd2\xf6\x4e\x26\x41\xcf\x0e\xbd\x74\xdf\x52\x44\xc5\x9d\xe8\x94\xf9\xff\x26\x9c\x65\x40\x18\xf1\x5e\xb4\x60\xcb\x41\xb0\x4b\x4b\xea\x60\xc0\x4a\x72\x1a\x90\x7c\x0b\xaa\x27\x97\x13\x82\xc1\x87\xe3\xcd\x38\x79\x4c\x6e\xe1\xc6\x45\xb0\x4f\xc6\xb0\x9b\xb0\x47\x0e\x09\xa7\xcc\x4d\x76\xdd\x05\xd4\xa5\x60\x04\x7d\xc6\x5e\x48\xee\x67\x04\xfd\xc9\xf3\x22\x54\xb3\x19\x1d\x27\x31\x12\x6c\xfe\x2e\xec\xf2\x19\xd2\xb3\x19\xc7\xfe\x25\x6c\xd2\x1e\xce\x03\xa9\x84\xc8\x7a\x4f\x85\x72\xcd\x18\xca\x2c\xba\x28\xee\xca\x0b\xad\xfd\xaa\xce\x6b\x73\xab\xd0\x0d\x75\xe5\xc4\x7c\xc9\xc9\x54\x4f\x7f\x0f\x5b\x31\x3e\x51\x34\x4d\x06\x72\x05\xa0\x62\x41\x1a\xae\x2c\x60\x6d\x10\x00\xf1\xcb\x1c\x66\x65\x4f\x2c\xde\xa5\x1d\xca\xff\xcf\x03\xa3\x12\x6f\x25\x58\x9d\x82\x79\xdb\x8b\x56\x3f\x90\x69\xb7\xe1\xaa\x52\x90\xc7\xab\x70\xc7\xe2\x65\xbd\xbb\x68\x35\xd6\xd1\x49\xac\xba\x14\x5a\xcf\xc1\x6a\x75\x03\x07\x00\xd7\x1a\xad\x2a\x79\xdb\x0f\xdd\x36\x1c\xae\xee\x86\xd1\xcf\xf1\x6a\x2b\x77\xef\x26\x60\x8d\x17\xa2\x5d\x89\xda\x36\x1c\xb1\xee\x96\xf1\xdb\x0c\x59\x63\x24\xb6\x1b\xb3\xa6\xdb\xed\xf2\xa1\xd8\x39\x93\xd8\x5b\x85\xf1\x42\x90\x95\x82\xe4\xbf\x71\xb2\x20\x46\x6e\xd4\xf7\xed\x03\x63\xeb\xa9\x46\xa9\x1a\x5a\x43\x7b\x1e\xf6\xc5\x44\xeb\x08\xad\x61\xf5\x01\x61\xd6\x3f\xa8\xef\x2e\x8a\x72\x1b\xc3\x64\x25\x40\x0f\xd1\x83\x24\xa8\xb1\x7a\x90\x00\x35\x68\x73\x02\x0a\xa8\xdc\x2b\x04\x8d\x2e\xcd\x50\x90\xc0\x91\x06\x72\x01\xe0\xe4\xa6\x9f\x77\x6d\xe8\x00\xd2\xc5\xbe\xea\x86\x05\x83\xbd\x99\xbc\xc0\x1d\x6f\x31\x2d\x38\x1e\x77\x9b\x15\x80\xfc\x3c\x29\x38\xa6\xe2\x0a\x85\x02\xc3\x7c\xe8\x34\x31\xc8\xf5\x74\x92\x1c\x2c\x83\xd9\x73\x6e\x50\x0d\x96\x8e\xc7\x6b\x4d\x0d\x40\xdc\xf6\x83\xe4\x0d\x67\x06\x3b\x61\xf3\x73\x62\xd0\xc6\xd7\xbb\xc9\x0b\xf4\x1a\xb4\x2b\x91\xf1\x86\xd3\x82\x9d\xb2\x7d\x9b\x59\x81\x06\xa2\xd3\xa4\x60\x36\xb3\x7f\x40\x01\xbb\x22\x28\x08\x39\x1d\xdf\x39\x42\xbc\x29\xb1\xb8\x9c\x05\x6a\x32\x96\x36\x52\xcc\x09\x04\x62\x76\xe2\xea\xe8\x07\x3b\x79\x8f\x60\x51\x40\x98\xce\xcd\x64\xcc\x3f\x7b\xd4\xbf\xca\xc6\xfc\x0a\xed\x21\xe3\x98\x5c\x53\x87\x94\xc7\xb6\xdd\xb8\xbe\x07\x59\x75\x63\xab\xda\xeb\xc6\xf7\x30\x79\x96\x38\xf4\x5c\x58\xa2\x9c\x42\x59\x99\x70\xe6\x41\x62\x36\xf6\xcb\x04\xc2\x0b\xec\xde\x47\xc6\x07\x16\xfa\x12\x16\x95\x47\x69\x78\x29\x50\x6d\xc0\xe0\x27\x64\xe8\x14\xe5\xe9\x22\xf0\x0a\x19\x2a\xc5\x7a\xba\x00\xbc\x44\xc6\xdb\x6b\x4c\x9f\xb0\x0b\x1c\x68\x17\xf8\xf6\xcb\x07\x60\x61\x15\x05\xa2\xa8\xab\x0b\x95\xc0\x55\x0b\x29\xee\x38\xcf\x93\x33\xb2\x87\x97\x52\xe6\x13\x5a\x88\xde\xdc\xb1\x05\xfb\xcd\x29\x9e\x2e\x3c\x40\x6c\x12\x82\x12\x29\x94\xaf\x2e\xa5\x58\xe6\xb8\xe4\xf8\x6e\xce\x92\x38\x05\x2e\x94\x52\x40\x5f\x5d\x31\x27\x49\xc1\x07\x3e\x73\x09\x04\x4a\x7a\x2d\x4d\xe9\xe3\xc6\x9c\x61\x33\xbd\xac\x29\x18\x95\x3b\x19\xaa\xe5\x2e\xeb\x63\x58\x22\xdf\x4c\x17\xf5\x7a\x73\x6f\x1f\xc7\x9c\x90\xbc\x8f\xe3\x52\x09\x6b\xc9\x4a\x56\x53\x3f\xef\x29\x6e\xc5\x28\xc6\xb5\xad\x36\x78\xd7\x14\xbd\x2a\x90\x7f\x5b\x82\xbc\xcc\xb1\x03\xd5\x32\x27\x08\xb7\x58\x2e\x3b\x1a\x5e\x74\x5b\x2f\x53\x0a\xf2\x82\x19\xdc\x75\x5b\x29\x03\x05\x9d\x94\xc8\x96\xc2\xe9\xb9\x46\x56\xad\x1b\x00\x80\x6b\x2d\x92\x29\x79\xdb\xaf\x18\x6d\xb8\x4a\xb6\x1b\x46\x3f\x97\xc9\x5a\xb9\x7b\x37\x75\xb2\x78\x21\xda\x95\x62\xd1\x86\x0b\x65\xbb\x65\xfc\x36\x2b\x65\x31\x12\xdb\x3d\x3f\x3f\x82\x91\x59\xf1\x50\x9a\x2f\x38\xa8\xac\x67\x3c\xbb\x13\x2b\xf1\xfd\x13\x53\xb9\x12\xe3\x00\x9c\xe4\xa1\xe7\xe7\x10\xdf\x55\x73\x3e\x68\xcc\xa3\x3d\xb8\x59\x57\xba\x97\x17\xde\x94\x0a\xeb\xf4\xe1\xc7\xcf\xa9\x93\xce\x05\xea\x4a\xba\x1a\xc7\xfc\x18\xba\xd4\x92\x82\xd6\x14\xda\xad\x41\x3b\x38\x43\x59\x79\xda\xb0\x01\xdd\xca\xa1\xca\xca\xb3\x96\x35\x69\x37\xa9\x0f\xb3\x56\x90\xfb\x7a\xa1\xbc\xb3\xdc\x8b\xac\x65\x27\xde\x03\xa0\xdb\x7c\x0f\x60\xd0\xf1\x7b\x00\x83\xe2\x7b\x00\x03\x5f\x02\x3d\xa4\x26\xa2\xdb\xec\x26\xd7\xd3\x49\x92\xb3\x0c\x66\xcf\x39\x4e\x35\xe8\x1b\xac\xf7\x3d\x80\xc1\x2e\x9c\x89\x6f\x38\xc3\xd9\x09\x9b\x9f\x13\x9c\x36\xbe\xde\x4d\x7e\x33\xd8\xa5\xb3\xf0\x0d\xa7\x37\x3b\x65\xfb\x36\xb3\x9b\x41\xe7\xef\x01\x2c\x4c\x6e\xb2\xad\x76\xa5\xbc\x61\x58\x57\x92\x3e\xe6\x2c\x10\x3f\x9e\x70\xce\xb8\x40\x03\xdf\xfe\x18\x4a\x14\x10\x9e\xcc\x31\xa3\x51\xf8\x7e\x31\x42\x2c\xcd\x75\xf4\x9e\x81\x73\x0c\x3e\xa2\x40\xd4\x29\x1c\x62\xe7\x8a\xc8\x75\xe9\xca\xa4\x35\xa9\x7b\x47\xd7\xa6\x0b\x74\xf4\xe8\xe1\xa8\x67\xd3\xc3\x39\x5d\xcb\x27\x60\x74\x8c\x5d\x97\x8b\x6a\x12\x46\x0b\x07\x6f\x09\x51\x27\xc7\x6e\x74\x6c\xad\xe5\xb4\x2c\x15\x36\x18\xb6\x14\xd5\x0c\xf0\xff\xf9\x23\x11\xfc\x5c\x1a\x3d\x7d\xc6\x86\x5c\xed\xa3\x24\xf6\xd1\x29\x73\x43\x8f\xa1\x83\x5f\x8c\x7c\x22\xe5\xc7\x4c\x55\x3e\x18\xfc\x02\x4f\xd2\x5b\xed\xf5\x03\xbf\x39\x13\xd5\x43\x45\xfe\x44\x19\xb1\xf2\x1f\x03\xe6\x60\x14\xa9\xf9\x9f\x2c\x39\xc6\xa1\xfd\x40\x01\x75\x1d\x56\x94\xf5\x3d\x86\x27\x59\x97\x7f\xac\x31\x98\xa4\xd3\xb8\xca\x1f\xcf\xf0\x82\xc9\x76\x33\x7f\x6d\x07\x62\x01\xc5\x1e\x24\xbf\x8a\xc3\x36\x0f\x80\x1a\xfa\xef\x52\x14\x88\x27\x71\x02\x3c\x32\x5e\x18\xdf\xa3\xef\x18\xaf\x79\x9a\x02\xf5\x7d\xd3\x33\x60\x9d\x7b\x96\x1a\x97\x88\xad\x3e\x4a\xf9\xa2\x48\x39\x4b\x36\x7a\xd5\x95\x50\x61\x57\x58\x26\x52\xf0\x0b\x5d\x6f\xe9\x33\x15\x73\x56\x72\x9c\x05\x52\xca\x5d\x9f\x5b\xe2\x2a\x7d\x6f\xf6\x9e\x6c\xf9\x6f\xe2\x5f\xe0\x3d\x27\xb9\xdf\xdc\x2b\xa0\xc6\x7b\xd6\xb8\x66\x2c\x5a\x0e\x82\x6c\xe7\xa9\x7a\x77\xb2\x8f\x2c\x98\x1f\xa9\x84\xda\x09\x92\x88\x58\x30\x43\x2a\xbb\x60\x13\x62\x8b\x7a\x34\x2c\xf4\xe5\x7e\x11\x75\xa8\x6f\x00\xee\x77\xbf\x9e\x9f\x9c\xd5\x82\xfd\xee\x4e\x92\x45\x50\xc7\xdc\xb5\x40\x6b\xf6\x76\x30\xbf\x1b\x9c\x9f\xdd\x83\xb1\x0a\x0e\x1a\xfb\xa1\x79\xef\x41\x57\x31\xb7\x87\x76\x33\xd5\xad\x40\x6c\xb1\xba\x35\x14\xdd\x56\xb7\x40\x7e\x5e\xdd\x1a\x72\xa6\x92\x90\xae\x8b\x5b\x99\x9a\x4e\x6a\x5b\xcb\x20\xf6\x5c\xdb\xaa\xe6\xfb\x43\xb1\xd6\xda\x16\x88\xdb\x7e\x9d\x67\xc3\xb5\xad\x9d\xb0\xf9\xb9\xb6\xd5\xc6\xd7\xbb\xa9\x6d\xe9\x35\x68\x57\xea\x3b\x1b\xae\x6d\xed\x94\xed\xdb\xac\x6d\x69\x20\x1e\xdd\x67\x5c\x16\xbd\xed\x3d\x14\xfa\xe3\x2e\xc3\xc1\xf1\x97\xff\xb2\xf7\xaa\xf6\xef\x23\xe3\xe2\xb1\xda\xdf\x68\xf4\x4b\x30\xfa\xec\xe4\xd3\xe3\xb4\xba\xcd\xa8\x1f\x80\xd7\x3f\x61\xf3\x5f\x21\xe3\x74\xf0\x74\xcd\xff\x09\x19\x9f\x07\x9f\xce\x9f\x2e\x00\xff\x8f\x8c\x4f\x27\x67\x8f\xd9\x7e\x87\xa8\xa3\xa2\x46\x00\x5e\x23\xe3\x7c\xf0\xe1\xe4\x71\x22\xd0\x68\xf5\x5f\x90\x71\xf4\xf1\xc3\x87\xb7\xa7\x5f\xd4\x7e\xd7\x70\x82\x14\x70\xe6\xd4\x9c\x1f\x05\xa2\x50\xfa\x51\x24\xeb\x3a\x3d\xca\x4f\x7b\x02\x61\x41\xc8\xb4\xf2\xb7\xd0\x00\xfb\x45\x7b\xf6\x9c\x47\x10\xfe\x10\x9d\x43\x4e\x19\xa7\xf2\xee\x21\x32\x4e\xa9\xb3\xe4\x89\x59\x99\xff\x8c\xfe\xf7\x41\xfc\x9f\x88\x80\x00\xdd\x97\xcb\xc9\x48\xd7\x82\x44\xc8\x39\x5d\x7c\xec\x97\x5b\x5c\x3a\x23\x5c\x57\xdd\xb2\xf7\xf5\xf1\xc7\xa3\xf3\x5f\x87\x27\x68\x22\xa7\x90\x9f\xf4\xe2\x5f\xaa\x2e\x08\xc9\x42\x92\x7d\x4c\x89\x84\x14\x79\x82\xb9\x20\xb2\x6f\x84\x72\x6c\xbe\x4e\x72\x8d\x9e\xae\x01\xaa\xf9\x35\xf7\x2d\xf6\x08\xae\xc0\xd8\x9e\x1d\x13\x14\xe4\x4c\xa4\x0c\x4c\xf2\x67\x48\xaf\xfb\xc6\xbf\xcc\x8b\xb7\xe6\x11\x9b\x06\x58\x52\x48\xb0\x0d\x30\xd8\x57\x6c\x7d\x63\x70\xd2\x27\x90\x7a\x19\x45\x4e\x25\xb9\x6f\x5c\x53\x72\x13\x30\x2e\x0b\xc4\xfa\xfb\x54\xfb\xae\xfe\xac\xbc\xa9\x6f\x7e\x44\xd4\xa7\x92\x62\xcf\x14\x90\x1f\x91\xfe\x9e\xf5\x02\x26\xd7\xd7\xa6\xf9\x1b\xcc\xda\xc1\xc9\xef\x89\x58\xbd\x2a\x71\xe2\xe9\x8a\x24\x97\x4e\x28\x11\x05\xa9\x46\xfa\x1d\xfe\x63\x7c\xad\xee\x2d\xf8\x4f\xb1\xff\x06\x90\xd1\xf1\xef\xa6\x59\x61\x8f\xb9\x04\x38\x15\x0c\xde\xcb\xfd\xdb\x97\xfb\x99\x0c\xc0\xe6\xa3\xc6\xe2\x33\xe1\x82\x32\x3f\x8a\x52\xb1\x22\xbd\x30\x5f\xee\x5b\x81\x7f\x69\x20\x79\x17\x80\x85\xa7\xf8\xd4\xa8\x68\xc0\x41\xe0\x11\x53\xb2\xd0\x99\x98\x25\x6d\x7b\xfb\x2f\x6e\xe1\x67\x29\x7d\x40\xaf\x15\x2e\xa1\xe5\xe0\xe0\x16\x7e\x96\xd3\x72\x70\xb0\xac\x96\x57\xfb\xb7\xf0\xb3\x9c\x96\x57\xfb\xcb\x6a\x79\x0d\x88\xbd\x5e\x12\xb1\xd7\x0d\x88\x09\x79\xe7\x11\x31\x21\x2a\x3b\x8e\x87\x4f\xcd\x74\x1b\x92\xea\xfb\xe4\xc3\x63\x9b\xfa\x2e\xb9\xb5\x14\x61\x3c\x39\xd3\x09\xd7\x1b\x31\xf7\xae\x9a\xf7\x4b\x16\x98\x23\xcc\x6b\x93\xfc\xe4\x59\x52\x34\xcf\xcb\x0f\xe5\x52\x74\xa9\xbc\x36\x57\x91\x53\x13\x7e\x1f\x69\x63\x80\x18\xf3\x4b\xea\x9b\x23\x26\x25\x9b\xbe\x41\x2f\x8c\xfc\x84\x20\xdd\xa2\xf4\xfb\xc6\xf1\x51\x47\xbf\xf2\x67\x30\x52\xf2\x30\x00\x32\x22\xd4\x56\x25\xc9\x34\xf0\xe0\xa6\xfa\x37\x33\x90\x95\xad\x6a\xa8\xa7\x57\x4b\xbd\x9c\x50\x55\xd3\x18\xe9\x47\xba\x0d\xf0\xd9\x2f\x57\x5a\xe6\x4a\x8a\x70\x5b\x5a\x42\xf5\xda\x19\x06\xa5\xd5\xb5\xae\xd7\xc9\x9f\xfe\x28\xb0\xa1\xa4\xdf\x73\x07\x13\xb5\x66\xa4\xdc\x56\x61\x69\x2e\x15\x3e\xb3\xaa\xcf\x5c\x71\xa8\x6e\xf8\x92\x2d\xa6\xf5\xf8\x41\xb4\x54\x1a\x31\x3d\x54\xb1\xd3\xa9\x55\x56\xbc\xb1\xed\x9b\x9b\x1b\x0b\x90\xe6\xf0\x63\x39\x6c\x6a\xc7\xcb\xb2\x0d\xae\x4b\xb0\x20\xc2\x56\xc6\x08\xf9\x57\x67\x1a\xf4\xab\x6e\x6a\xcc\xd7\x45\xb3\x8a\xe8\x84\x79\xfa\x80\x28\x5d\xe5\x71\x3b\xb3\x8b\x97\xca\xfe\xba\xf1\xf0\x70\xd5\x7f\x50\x0d\xf2\x8a\x2e\x86\x7d\xb1\x4c\xf5\x55\xd4\x6d\x9c\x52\xd3\xb5\x94\xe9\x8e\xdb\xf5\x53\xd1\xb5\x95\xa9\x3e\xec\xdb\xa6\x9f\x9a\xae\xa5\x4c\xda\xb2\x9f\x74\x89\x7e\x06\xa2\x9d\x4c\x45\x37\x2f\x53\x38\x9c\x06\xb2\xb8\x56\xfe\x81\xaf\x71\xdc\x6a\x1c\x5e\x63\x8e\x54\x28\x81\xfa\x28\x09\x2a\xa2\xe8\x67\x98\x59\xfa\x71\x1b\x09\xf3\x71\x0a\x12\xdc\xa9\x5f\x83\xff\x10\x76\x1c\xc4\x9f\xbf\xfd\xe5\x97\x93\xe3\x11\x85\xc6\x29\xf5\xed\x51\xa8\x52\x0e\x0b\x2e\xad\x3f\x04\x84\x49\x9e\x80\x78\x06\xa4\xa4\x0f\x74\x63\xf2\xd6\x4a\xa1\x63\x3d\x3b\x5e\xb7\x61\xa1\x52\x21\xd4\xff\x02\x00\x00\xff\xff\xd9\xb4\xe8\x78\x63\x68\x00\x00"

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 26723, mode: os.FileMode(420), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

