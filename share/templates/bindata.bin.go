// Code generated by go-bindata.
// sources:
// index.html
// DO NOT EDIT!

// +build bin

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xe4\x5c\x5b\x73\xdb\x36\x16\x7e\xcf\xaf\x40\xb9\xe9\x3e\x74\x4a\xb1\x76\x9c\x6e\x36\xb5\xb2\xe3\x44\x6e\xcb\x69\xec\x68\x7c\xc9\x6e\xa7\xd3\xe9\x40\x24\x24\xa1\xa6\x48\x16\x80\x64\xab\x8a\xfe\xfb\x1e\x5c\x48\x82\x94\x28\x89\x36\x1d\x6b\x26\x0f\xb1\x44\x00\xe7\x8a\x73\xf0\x01\x47\x60\x8e\xbf\xea\x7d\x78\x77\xf5\x6b\xff\x14\x8d\xc5\x24\x7a\xf6\xe6\x58\x7d\x20\x04\x5f\x08\x0e\xe1\x8b\xfc\x3a\x21\x02\xa3\x60\x8c\x19\x27\xa2\xeb\x4c\xc5\xd0\x7d\xe5\x98\x2e\x41\x45\x44\xd4\x77\x78\x5a\x2c\x3a\x3d\x2c\x70\xe7\xe7\xf3\xe5\x12\x25\x5c\x90\x58\x1c\x7b\xc5\x08\xc3\x68\x2c\x44\xea\x92\xbf\xa6\x74\xd6\x75\xfe\xe7\x5e\x9f\xb8\xef\x92\x49\x8a\x05\x1d\x44\xc4\x41\x41\x12\x4b\xb2\xae\xe3\x9f\x76\x49\x38\x22\x8e\x4d\x19\xe3\x09\xe9\x3a\x33\x4a\x6e\xd3\x84\x09\x6b\xf0\x2d\x0d\xc5\xb8\x1b\x92\x19\x0d\x88\xab\x1e\xbe\x45\x34\xa6\x82\xe2\xc8\xe5\x01\x8e\x48\xf7\xc0\x30\x5a\x2c\x7e\xbe\x3a\x7b\x8f\x9c\xe3\xaf\x9c\xe5\xd2\x75\x7f\xa3\x43\xe4\x9f\xfe\xfe\xe6\x38\xa2\xf1\x0d\x62\x24\xea\x3a\x7c\x0c\xbc\x83\xa9\x40\x14\xd8\x3b\x68\xcc\xc8\xb0\xeb\x78\x43\x3c\x93\xcf\x1d\xf8\xb3\x8e\xd3\x6f\x24\x0e\xe9\xf0\x77\xd7\xb5\x39\x69\x06\x9c\xfe\x4d\x78\xd7\x79\x71\x78\xf7\xe2\xb0\xca\x8e\x67\x5f\xdc\x17\x87\x9d\x34\x1e\x39\x48\xcc\x53\x30\x91\x4e\xf0\x88\x78\xb2\xc1\x98\x5f\x30\xc5\x69\x1a\x11\x57\x24\xd3\x60\xec\x96\x04\x1c\x1c\x7e\x77\x07\xff\xea\x45\x40\x67\xa7\x21\xcb\xa3\xa3\x3b\xf8\xb7\x81\xe5\xd1\x51\x53\x96\x2f\x0f\xef\xe0\xdf\x06\x96\x2f\x0f\x9b\xb2\x7c\x05\x86\xbf\xda\x64\xf8\xab\x1a\xc3\xb9\x98\x47\x84\x8f\x09\x11\x99\xe3\x05\xb9\x13\x5e\xc0\x79\xce\x0c\xbe\x7b\x34\x0e\xc9\x5d\x47\xb6\x1a\x0e\x3c\x60\x34\x15\x36\xc9\x9f\x78\x86\x75\xab\x53\x4d\x14\xc4\x59\x00\x8c\xfe\xe4\x1e\x93\x41\xcf\x08\x7c\x3b\xec\x1c\x74\x0e\x5e\x65\x0d\x9d\x09\x8d\x3b\x7f\x82\xcc\x10\x92\xc7\x9d\x60\x1a\xeb\xf1\x8b\x05\x44\x67\xe7\xea\xe4\xa7\x9f\x4e\x7b\x03\x1a\x2f\x97\x30\xce\x28\xa3\x29\x16\x0b\x12\x71\xb2\x5c\x82\x04\x6f\x42\xa3\x1b\xd3\xa9\x3a\xe2\x70\xb9\x74\xb2\xc4\x3c\xf6\xb4\x72\x46\x7f\xcf\xe4\xf6\x9b\xe3\x41\x12\xce\x4d\x63\x8c\x67\x28\x88\x30\x07\x8f\xc2\xd7\x01\x66\x48\x7f\xb8\x21\x19\xe2\x69\x24\xb2\x47\x2e\x20\x57\x03\x98\x88\xd4\x41\x2c\x81\xd4\x92\xc3\xe9\x08\x1a\x61\x4e\x72\x81\x21\xcd\xb9\xc9\x2c\x05\x9b\x08\x73\x87\xd1\x94\x86\xd9\x98\xca\x28\xc3\x5d\x6a\x46\x18\x64\x76\xe4\x4e\x42\xf7\x00\xa5\x38\x0c\x69\x3c\x72\x23\x32\x84\x65\x24\x9b\x82\x8c\x7e\x30\x15\x22\x89\x2b\x2c\x44\x32\x1a\x45\x44\xb2\x88\x70\xca\x49\x98\xcd\xad\x1e\x6c\xbc\xac\x07\x49\xe5\xf4\xa8\xac\x19\xb3\x91\x9c\xba\x7f\x18\x5e\x79\xb7\x25\x56\x45\x40\x8a\x73\xb1\x9c\xb9\x49\x1c\xcd\xcb\x43\x60\xd0\x95\xd6\xa3\xf0\x0e\xcc\x02\x90\x6d\xe0\xa4\xa2\x15\xc4\xae\xb0\xda\x1b\x4a\x4f\x3b\xb1\x34\x09\x18\xd1\xb0\xeb\x8c\xc1\xb3\xe5\x79\x18\x30\x1c\x87\xd0\x46\xd3\x83\x22\xdf\x61\x32\x24\x1e\xc0\x78\xc0\x07\xb9\x9e\x23\x1b\x34\x2a\x6e\xb6\xbb\x8e\x3d\x5c\x92\xea\x41\xec\x54\x22\x49\xaa\x51\x9d\xb7\x22\x08\x75\x03\xda\x30\xb1\x6f\x8e\xa7\x91\x65\x43\x36\x14\x3e\xaa\xd3\x1f\xd1\x6c\x1c\x0e\x04\x9d\x91\x55\xe7\x61\x63\xb0\x04\x3b\xfe\xda\xf3\x6e\x6f\x6f\x3b\x60\x31\x83\x7f\x9d\x20\x99\x78\x1a\x1d\x61\x05\x88\x08\xe6\x84\x7b\x11\x16\x84\x8b\xff\x04\x93\xb4\x9b\x59\xfd\xf1\xf4\xe2\xd2\xff\xb0\xe2\x15\xc5\x3f\x03\x57\xbc\x3a\x6b\x11\xad\x55\x36\x4b\x10\x58\xb1\x90\xf5\x1d\x96\x1c\x36\xa2\xb1\x4c\x2f\x34\xa4\x8c\x0b\xd5\xba\x6a\x53\x90\x84\xa4\xc2\x4a\x36\xc1\x7a\xba\xe2\x00\xa5\x62\x3e\xb5\x3d\xff\xf2\xea\xc2\x7f\x2b\x27\x51\x12\xb4\xac\xf3\x43\x15\x9d\xa6\xff\x8c\x07\x3c\xfd\x41\xa7\x85\x0c\xa2\x69\xba\x3a\xcc\x0a\xc7\xeb\xbe\xb4\x64\x25\x3b\x8c\x2d\x7b\x68\x61\x84\xab\x16\x46\x78\xa3\x85\xef\x4f\x5a\xb0\xd0\x9b\x46\x9b\x32\xd6\x7a\x84\x07\x30\xc2\xe0\xd0\x76\xe4\x28\x8d\x61\xc9\x6d\x15\x51\xa4\x81\x13\x32\xb1\x73\x5f\x82\xc9\x51\x86\x2a\xc9\x70\x08\xf8\xec\x1e\x94\x72\x7f\xb1\x10\x64\x92\xca\x34\x44\x0e\x20\x1e\x48\xe5\xaf\x5f\xeb\x2f\x7f\x80\x1f\x48\xa4\x38\x76\xa4\x5f\xd6\xaf\x3c\xe1\xb0\x2a\xf0\xfb\x66\x02\x24\x83\x35\xfc\x4b\x7e\xda\x6e\x78\x90\x4e\x5b\x36\x5c\x71\xdc\x60\x38\x7d\xa8\xe1\xb4\x15\xc3\x53\x5e\x55\xe3\xe0\xbb\x87\x19\x2e\x39\x3e\x5c\xaf\xd9\xa8\x6d\xbd\x24\xc7\x6d\x7a\xe5\x0f\x5b\x76\xab\x19\xc1\x0c\xf6\x7b\x32\xf5\x51\x37\x5b\xb5\x97\xcb\x1f\xaa\xdb\x46\xb3\x5b\x94\x1b\x48\x75\x58\x5c\x2c\xbc\x6f\x9e\x7d\xe3\x2d\x97\x8b\x85\xd6\xcf\x52\x18\xcb\x6d\xf6\x1f\x03\x0c\x67\x38\xb9\x77\x83\x33\x52\x86\x89\xc0\xff\x67\xf8\x84\x23\xe2\x62\xa1\x1c\xb3\x5c\xca\xb6\x77\xfa\x2b\x4a\xe2\x77\x11\x0d\x6e\xba\x0b\x31\xa6\xbc\x33\x86\x3d\x44\x44\x54\xcb\x12\xa1\x67\x7a\x8d\x7a\x2b\xb9\x2a\xfa\xce\x15\xd8\xa3\x37\x07\x6f\xcc\xa6\x77\x47\xa5\x18\x1d\x8d\xdb\xd5\x4a\xab\x82\x0a\xfd\x76\xd5\xca\xcc\x2d\xe4\x19\x84\x10\x77\xe4\x98\x5b\x2a\xc6\x48\x3e\x41\x78\xc8\xb9\x06\xa6\xf2\x8f\xde\xee\x2f\x16\xb0\xb3\x1a\x11\xf4\x9c\x7e\x8b\x9e\x03\x15\x7a\xdd\x45\x7a\xdd\x7e\xd7\xbf\xee\xbc\xa7\x5c\x7a\x44\x30\xd0\xe4\x44\x08\xf6\x0b\x99\x23\xb9\x2a\xb8\xc0\x6e\x30\x77\xcf\x1d\x45\xd3\x81\x7d\x85\x9a\x4a\x11\x66\xd1\xa9\x40\x47\xb9\x05\xa9\xaf\x71\x72\xcb\x70\x9a\x9f\x76\x33\x2a\x38\xd1\x87\x19\x65\xe1\x2a\x9b\x7a\x30\x72\xa7\x9c\xa4\x81\x8a\x2e\xb5\xad\xd6\x8f\x5d\xc3\xe4\x9a\x13\xd6\x0f\x84\x52\xa0\x60\x9d\xb7\x7e\xfd\x70\x09\x97\x73\xbe\x2a\x20\x6b\x6c\x81\xff\x7f\x31\x15\xab\x02\xf2\xd6\x26\x12\x5c\x1a\xcf\x08\xd3\x1b\xd1\x35\x92\x7c\x88\xb3\x55\x49\x79\x6b\x21\xc9\x13\xcc\x0a\xb6\xf2\xc7\xd6\xd0\x0b\x87\x0d\x23\x2f\x1c\x16\x41\xd7\xfb\x71\x7d\xcc\x85\x43\x13\x72\x21\x65\x72\xa7\xef\x48\xb2\x4e\x8f\xb2\x73\x78\xd0\xd1\x87\xd0\x3a\x0f\xe9\xc0\xcb\x4f\x0e\xfa\xc0\x00\x96\x4b\x6a\x32\xcb\xa9\xb5\x3b\xec\xc6\xcc\x19\xcd\xd9\x5a\x4a\x15\x6c\xb3\x46\x7b\x36\x77\xc9\x95\xd2\xf9\x6a\x32\x55\x9b\xe9\xec\xd8\xe3\xc7\xb0\x79\x82\x6d\x36\x23\xf9\x46\xcd\x88\xf3\x65\x5b\x69\xdb\xf5\x06\xe9\x9e\x93\x19\xa6\x51\xa3\xc4\x2b\x29\x55\x89\x2a\x60\x08\xa9\x66\xc5\xd4\x0e\xea\x02\xf5\xd7\x55\x75\xa7\x3c\x0f\xc1\x15\x8d\xaf\x79\x35\x3c\xdb\x73\xdd\x54\x1e\xe9\x57\x75\x09\xd7\xba\xee\xda\x74\xb4\xae\x85\x48\x04\x8e\xaa\x6a\xa8\xae\xb5\x7a\x5c\xc9\xe1\x96\x22\x0f\xca\x56\xda\x34\x5b\xa9\x95\xad\x7e\x4d\xb6\xd2\x2c\x5b\x4d\xaa\xd2\x61\xa7\xc8\xd3\x26\xe9\x64\x13\x6a\xd7\xe4\x2d\x1b\xe7\xc1\xb1\xc7\xfb\xfd\x76\x67\x4d\xf9\x1f\xbd\xfd\xf5\xea\xf4\x12\x4d\x92\x70\x1a\x25\xe8\xe8\x27\x7b\xfa\x40\xe6\xdb\x39\x1c\xc1\xfd\x78\xb9\xf4\xac\xe7\x0f\x53\x51\x99\x50\x2d\xc6\xf0\x7d\xeb\x5f\x5d\xa2\x94\x30\xc4\x09\x1c\x56\xc2\x0a\xc7\x1e\x89\x04\x7e\x4b\x85\xcd\x35\x6f\x5b\xe1\xdc\xbe\xbd\x29\x0e\x6e\x88\xe0\xb5\x16\xf7\x75\xbf\xa5\x9d\x69\x59\xb5\xda\x52\x7e\x95\xca\x6e\x36\xa4\x6d\x9b\x12\xb2\x24\xe5\x9f\x08\x63\x09\xab\xb7\xa7\x27\x07\x49\xbd\x16\x8b\x3e\xec\xe5\xe8\xdd\x79\x12\x9f\xd3\x08\xe5\x7d\xa0\x1c\x72\x3c\xc8\x9c\x4f\x9a\xe0\x54\xf1\xb3\x2c\xd1\x0d\x75\x93\xbe\x58\xa8\xed\xe0\x99\x52\xf0\x08\xe5\xa6\x1b\xb9\x95\x06\x29\x2c\x6f\xc9\x24\x55\x5b\x94\xa8\x35\x51\xb3\xd1\x94\x92\x08\xdb\x9e\x92\xa8\xf2\xf4\xd4\x58\xd6\xce\x8a\x04\x67\xe3\x7b\x6c\x5d\x81\xaa\x58\x97\xce\x4e\xcf\xd6\x2f\x4c\x30\xca\xac\x4c\x37\x14\x32\x4c\x91\x75\x7e\xa1\x52\x33\x13\x62\xf9\xc2\x51\xf4\xec\xb8\xd2\x48\x82\x1f\x0d\xec\xee\xbe\x27\xac\x00\xaa\x64\x52\x46\xd4\x4a\xe3\x66\x14\x74\xaa\x34\xcd\xd4\x6f\x15\x59\xf2\xf3\xbe\x1c\xf4\x3c\x2d\x66\xa7\x8f\x19\x9e\x48\x68\x93\xa7\x5a\x93\x06\xfd\x84\x53\x59\xfc\x44\xcf\x53\x79\xf0\x88\x91\xe3\x20\x47\x71\x40\xea\x6f\xf6\xc3\x81\x63\x26\xca\x3a\x2a\x8f\x8f\x4a\x85\x7d\x37\xa2\x37\xc4\xd5\x44\xf2\x07\x00\x5a\xfc\x58\x83\x41\x9a\x3c\x97\x5d\x81\x94\x4c\x50\x91\x30\xf0\x94\xd5\x40\xf3\x23\xaf\xaa\xe2\xd6\xeb\x98\x15\x7e\xdd\x31\x0d\x43\x12\x83\xca\x11\x44\x9d\x3b\x62\xc9\x34\x75\xf2\x2d\x51\x51\x9d\x2b\x7a\x5d\x0a\xe7\x72\x7b\xf1\x42\x62\x5c\x94\xa4\x8a\xd2\xb1\xa2\xa0\x71\xb9\x16\x27\x59\x96\xaa\x61\x6b\x8a\xeb\x83\x6a\x51\x0d\x12\x17\xcf\xe1\xd8\x5d\x1e\x87\x4a\xab\xa5\x3a\xcc\xae\x14\x08\xe5\xec\x49\x83\xc3\xb5\x75\xbc\xd5\xda\x3e\x30\xb5\xa6\x67\x20\x62\xe3\x90\x67\x15\xae\x6b\x2a\x13\xd5\x83\x3e\x7a\x4f\x38\xef\x15\xd3\x15\x22\xc9\x0f\x49\x9e\x45\x40\x6c\xe3\xa4\x03\x1d\x9d\x25\x8c\x6c\x63\x55\x2e\x83\x54\x4b\x91\xf7\xf2\xfb\x05\xac\x5e\x0f\x72\x7b\xdc\x39\x19\xf0\x24\x02\x9c\x78\x22\xff\x9f\x5b\xe9\xf2\x40\xff\x6f\x63\xb5\xcd\xff\x45\x19\xb8\xe8\xc9\x5a\x61\x81\xc3\x83\x88\x64\xd9\x0a\x18\xf7\x37\x61\x49\x21\x4d\xf7\xaa\xbf\xee\x38\x81\x73\xb2\xb3\x9a\xc0\x79\xce\x8a\xfc\xc6\x82\x7a\x62\x96\x0e\x62\x5c\x56\xd0\x7a\x96\x9d\x75\x6b\xac\x19\x21\x2b\x13\x4d\x69\x2e\xe7\xbc\x29\x89\x2c\x1f\x34\xa5\x91\x85\x80\x0a\x8d\x97\x5b\xae\x0c\x2d\x6e\x71\x88\xfc\xc7\xde\x2d\x45\xc6\xac\x10\xa5\x8b\x8c\xc2\xfa\x8d\xd8\x53\x53\xf1\x2c\x5f\x6d\x1b\x54\xb7\xb2\x12\x77\x53\x64\xe9\x0d\x3f\x0f\xb0\x80\x9c\x02\x57\x7a\x94\xdf\xc0\x41\x13\x8f\xc8\xee\xf0\xa2\x14\xfd\x82\xd0\xa5\x37\x7c\x6a\x70\x01\x0d\x5a\xc2\x96\x1a\x4e\x7b\x07\x2d\x10\x63\xfb\x82\x2c\x2a\xdc\x5b\x01\x96\x1a\x4e\x8f\x83\x2b\x4a\xd8\x83\x60\xa5\xb4\x22\xdb\xa7\xd8\x6c\x9a\x98\x5c\xdc\xec\x05\xbb\xc6\x2b\x62\x3c\x93\x7e\x71\xd0\x47\x75\x23\x29\x73\xc6\x0d\x3a\x40\x4e\x4f\x5d\x65\x03\xb5\x1a\x13\x1f\x22\xe7\x2c\x99\xc6\x42\xde\x7b\x69\x4e\xfd\x02\x39\xaa\xda\x08\xc7\x2c\xd6\x94\xf6\x08\x39\xd7\xb2\x4e\x78\x0f\xd2\x97\x8a\x34\xbc\x0f\xe9\xf7\x48\x57\x08\x34\x6d\x0b\xe8\x67\x6a\xe1\xed\x83\x1f\x6d\x0e\x7e\xfe\x67\x02\x3f\xdf\x06\x3f\x1f\x82\x87\x0d\x71\x40\xf8\xee\xe0\xe7\x7f\x61\xe0\xe7\x3f\x39\xf8\xf9\xad\x81\x5f\x0d\xa7\xbd\x03\x3f\x7f\x7f\xc0\xcf\x6f\x0d\xfc\x6a\x38\x3d\x0e\xf8\xf9\x0f\x06\xbf\xda\x33\x55\xbe\x68\x34\x3e\xc1\xf4\x77\xa0\x28\x2d\x0d\xe6\xee\xc4\x8b\xbc\x42\x2c\xab\xe9\xc8\x8f\x3d\x59\x0d\x5d\xad\xc5\x6b\x29\x1f\xd0\x71\xe5\x7e\xd2\xe0\xd8\x2b\x45\x70\xba\xcb\x81\x6d\xb3\x22\xa6\x04\xbe\x45\x97\x7c\xd4\x07\xd4\x82\x4c\x55\x07\xfe\xa4\xab\xbb\x5b\x04\xbf\x4f\xf8\x7a\xa9\x0f\x07\x4d\xfa\x58\xa0\x29\x6f\x5d\x35\x45\xcd\x33\x32\xf9\x3c\xb0\x29\x05\x15\xb8\x09\x4f\x09\x9b\xef\x8e\x99\x5a\xcd\x2f\x08\x34\xc1\xe0\xa7\x46\x4d\xa9\x42\x4b\xb0\x59\xc7\x6a\xef\x70\x53\xc6\xd9\xbe\x00\xa7\x8e\xf9\x56\x90\xb3\x8e\xd5\xe3\x40\xa7\x96\xb6\x1f\xf5\x48\xf9\x8b\xd5\x3d\x6a\x98\x5f\xdf\x83\x26\x6c\x4a\xa3\xce\x62\xad\xc3\x4b\xf6\xfb\x62\xfb\xf8\x92\xf2\xc6\xf0\xd2\xe7\x9f\x07\x5d\x40\x4e\x01\x2e\x7d\x96\xc0\x81\x8c\x37\x39\x93\x29\x3d\xbf\x20\x78\xe9\xf3\xa7\x46\x17\xd0\xa0\x25\x70\xa9\xe1\xb4\x77\xd8\x02\x31\xb6\x2f\xd0\xa2\xc2\xbd\x15\x64\xa9\xe1\xf4\x38\xc0\xa2\x84\x3d\x41\x41\xf2\x79\x50\xb4\x06\x44\x9e\xde\x1a\x15\x0b\xfb\x5c\xd5\x29\xfb\x7e\xaf\x69\xd1\x4e\x52\x1e\x22\xe7\xfa\x7e\x94\x2f\x80\xf2\xf2\xf4\xa2\x69\x6d\x53\x92\x1e\x81\xba\x17\xf7\x91\xf9\x12\x39\xe7\xfe\x7d\x08\xbf\x47\xce\x47\xff\xe2\xea\x3e\xa4\xff\x42\xce\xc5\xe9\xe5\x7d\x28\x5f\x21\xe7\xca\x3f\x3b\x95\xd7\xbc\x9b\x92\xfe\x1b\x39\xef\x3e\x9c\x9d\x9d\x9c\xf7\xb4\x7f\x5b\x40\xee\x94\x3f\x12\x70\xcf\x46\x8d\x81\xfb\xe3\xe8\xf3\x00\x37\xc8\x29\x80\xfb\x23\x1e\x31\x5c\xbc\xaa\xb7\x1d\xb6\x95\x96\x5f\x10\x6c\x7f\x1c\x3d\x35\x6c\x83\x06\x2d\xc1\x76\x0d\xa7\xbd\x83\x6d\x88\xb1\x7d\x81\x6d\x15\xee\xad\xc0\x76\x0d\xa7\xc7\x81\x6d\x25\xec\x91\x4a\xa9\xbd\x95\x43\x97\xdd\x2d\xaf\x52\x6f\x1c\x00\x47\x85\x19\x0d\xd7\x5c\x59\xb1\x07\x5d\x0a\x70\xed\xc6\x11\x3d\xca\x48\x20\x54\x45\xab\xe5\xd3\xdc\x6c\xc4\x6f\xa9\x08\xc6\x2d\xa3\x02\x6f\x78\x05\x35\xe5\x16\x74\x5c\xae\xbf\x7c\x9a\x72\x73\xf7\x34\xa5\xf2\xd7\xc9\x94\x77\x60\xc7\xb3\xe1\xcd\x29\x03\x09\xf2\xba\x74\x36\x76\x97\xbb\x9c\x66\xfc\x75\x65\xfc\x33\xe3\x4a\xd5\xc7\x09\x6b\xc4\xac\xcf\x68\xc2\xa8\x98\x37\x22\x3a\xa7\xc1\x8e\xf7\xf4\x0d\xc1\x25\xfd\xbb\x19\xc1\x05\xe1\x10\x9c\xf1\x86\x4b\xe2\x66\x37\x6a\x1b\x7f\x45\x2b\xaf\x0f\xd8\x9d\x95\x77\x0b\x1e\x74\x01\x76\x36\x52\x57\xcc\x1d\x1d\x08\x37\x64\x2e\xdf\xdf\xd4\x4d\x99\xaa\x8b\x05\xa4\xb8\x5c\x1c\xe5\xfd\xe0\x97\xb9\x9a\xe6\x9d\x7d\x8d\xf6\xaa\x1c\x5f\xab\xd3\x0e\x5a\xe4\xa1\x6c\x62\x75\x36\xb2\xae\x4a\x1b\x21\x67\x38\x18\x4b\xb2\xf5\x91\x3b\xd3\x83\x4c\xf8\x4e\xa7\x2a\x7e\x81\x4d\xe7\xfa\xda\x8a\xe0\xdc\x8f\x45\xcf\x3a\x2f\xcb\xde\x95\x57\x38\x4a\xbd\xd9\xa2\x53\x3f\x42\xad\x38\xf5\xdd\xc6\xa8\x21\x8d\xe4\x06\x4f\x8c\xb7\xcd\xe8\x0e\x4e\x34\xab\xcc\x0e\x2b\x02\x1d\x22\xf2\x17\x5a\x9d\xc2\x10\x09\x36\x25\x35\x68\x54\x09\x19\x54\xe2\xb8\x69\x7c\xbe\x23\x6e\x1c\xa5\xd9\xce\x5d\xce\xf6\xd8\xbe\xa7\x6e\xfe\xdb\x14\x30\xeb\x24\xa2\xa3\xd8\xbc\xb5\xaa\x63\xb6\x78\xc1\xf5\x3d\xd0\xae\x7b\xc9\x55\xb6\xef\xf8\xa2\xab\x8e\x75\x49\x60\xde\xbc\x35\x2f\x46\xd8\xaf\xcc\x62\x46\x84\x61\x57\x20\x85\xfd\xca\x01\x36\xd3\x3a\xce\xa7\xf5\xff\x01\x00\x00\xff\xff\xf9\x1a\x42\xc5\x87\x4a\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 19079, mode: os.FileMode(384), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

