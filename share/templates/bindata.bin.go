// Code generated by go-bindata.
// sources:
// index.html
// DO NOT EDIT!

// +build bin

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x3d\x7b\x73\xdb\x36\xf2\xff\xe7\x53\xa0\x98\xf6\xd7\xa4\x13\x92\xb5\xe3\xf4\x97\x73\x25\xdf\x24\xb6\xaf\xa7\x69\xe2\x68\x62\x3b\x77\xbd\x4e\xe7\x0a\x91\x90\x85\x98\x22\x79\x00\x68\x5b\xa7\xd1\x77\xbf\x05\xc0\xa7\x44\x59\xd4\x5b\xb1\x9d\x19\xc7\x24\xb8\xd8\x37\x16\xbb\x0b\x5a\x1a\x0e\x3d\xda\x65\x01\x45\xd8\xfc\xfe\x77\x1c\x49\xd6\xa7\x78\x34\x6a\x88\x88\x04\x47\xc3\xa1\x7d\x42\x24\xb1\xcd\x30\x8c\x3a\xc9\x30\x0d\xbc\xd1\x68\x62\x76\x2f\x14\x32\x20\x66\x3e\x41\x3d\x4e\xbb\x4d\xec\x60\x34\x1c\x5e\x30\xe9\xd3\x36\xdc\xb3\x3b\xea\x21\x9c\xc2\x21\x8c\x0c\xfe\x74\x60\x34\xca\x48\xe6\x43\x0d\x87\x4c\xa5\xe8\x13\xac\x46\xbf\x8d\xd0\x61\x33\xc1\x15\x11\x4e\xfa\x62\x34\x7a\xd6\xf0\xd8\x0d\x72\x7d\x22\x44\x13\x5f\x71\xe6\x59\x1d\x3f\x74\xaf\x81\x2d\x4b\x86\x11\x3e\x7a\x86\x50\x11\xc2\x0d\x7d\xcb\xe7\xc8\x27\xfc\x8a\x5a\x7b\x48\xd2\x3b\x69\x71\x76\xd5\x93\xf8\x48\x83\x0d\x87\xc7\x0a\xb0\x1d\x0a\x26\xd9\x0d\x45\xdf\x46\xf6\x7b\x12\x80\x2c\xcc\xa3\x96\xe8\x85\xb7\xea\x02\x23\xac\x2e\xf3\x7b\x10\x08\xe8\x00\xa5\xde\x5e\x4a\xa8\x77\x60\x90\x87\x37\x94\x77\xfd\xf0\x16\x1b\x08\x80\x21\x40\xe4\xef\xa0\xa4\x0b\x40\x9e\xe0\x1f\x8d\x90\x54\xba\x6b\xe2\xf7\x21\xf1\x10\xb9\xb9\x42\x1e\x13\x91\x4f\x06\x28\x04\x9b\x84\x81\xc8\xa7\x2b\xd3\x00\x06\x4d\x66\x34\x6a\xe2\x94\x09\x4b\xfd\x87\xe0\x52\x52\x00\x71\xa9\x15\x71\x8a\x80\x32\x91\x96\x4f\xbb\x20\x9f\x6d\xdb\x28\xb1\x6c\x4a\x45\xe9\xdc\x30\xee\xf4\xf6\x8e\x1a\x0e\x68\x40\x2b\x2c\xbb\x98\xaa\xb9\xbd\xd5\xe8\xab\xd2\x76\xb9\xac\xb1\x9f\x3e\xed\xd3\x20\x46\x99\xa8\xea\x22\x83\x02\x38\x9f\xe5\x37\x65\xac\x2c\x88\x62\x69\x5d\xf1\x30\x8e\x70\x11\x66\x2a\x94\xe5\x93\x0e\xf5\x91\xe8\x13\xdf\x37\x16\x0c\xc2\x5b\x4e\x60\xb6\x47\xc1\x1e\x99\x6a\x66\x23\xea\xc4\x52\x86\x01\xe8\x89\xa4\x4f\xcd\x48\x82\x5b\x50\x37\x0c\x3c\xc2\x07\xca\xd4\xa4\xe3\x53\x0f\x1f\x29\x17\x07\xfd\x79\x66\x35\x2c\x40\x6b\x38\xbc\x65\xb2\x87\xde\x53\x21\x4e\x32\xf7\x82\xa5\x58\xa2\x5c\x94\x0a\x16\x10\x2a\xfd\x03\x6e\xc3\xe0\xd8\x67\xee\x75\x73\x28\x7b\x4c\xd8\x3d\x12\x78\x3e\xd5\x23\x23\xb3\xd8\x61\xed\x2a\xff\x05\xa7\xcd\xdd\x10\xc6\x8e\xcd\xe5\x18\x3e\x84\xd4\x5a\x7f\x47\xbc\x2b\xaa\x27\xd8\x17\x40\xbd\xb4\xda\xcb\x02\x2e\x2c\xf3\x87\x90\xd3\x9d\x92\xd9\x08\x8a\x72\xe9\x6b\xcb\x3c\x36\xd0\x70\x8a\xfe\xbd\x19\x67\xe7\xe1\xad\xd8\x88\xaf\x07\xf6\xdb\x8e\x08\xfd\x58\xd2\x55\x38\xfd\x59\x1e\x53\xc7\x1c\x40\xc4\xae\x0b\x00\x0f\xd8\xf9\x77\x52\xf6\xb5\x2c\x82\x86\x13\xfb\xe9\xbe\xa5\x80\x8a\x3b\xd1\x59\x18\xfc\x8b\xf2\x30\x53\x04\x36\x7b\xd1\x8c\x2d\x07\xc1\x2e\x2d\x99\x4b\x40\x57\x92\xb3\x88\xe6\x5b\x50\x35\xb8\xec\x51\x02\x3e\x6c\x36\xe3\xe4\x31\xbd\x83\x1b\x0f\xc1\x3e\x69\xd4\x6e\xc1\x1e\xd9\xa6\x9c\x85\x5e\xb2\xeb\xce\x80\x2e\x25\x23\xe8\x33\xf1\x63\x7a\xff\x44\xa0\x9f\x3c\x2f\xaa\x6a\x38\x64\xdd\x24\x47\x82\xcd\xdf\x83\x5d\x3e\xd3\xf4\x70\xc8\x49\x70\x05\x9b\xb4\x4f\xf2\x44\x2a\x01\xb2\xdf\x33\x21\x0b\x90\x5f\xc4\x1d\xfa\xd3\x38\x82\x7a\xf2\x5c\xc1\xbe\xb0\xfb\x24\x7a\xde\x8d\x03\x57\xe5\x24\xcf\x01\xcd\x4b\xc4\x5e\xa0\x21\xe2\x54\xc6\x3c\x40\xcf\xff\xcc\x10\x24\x26\xf9\x95\x0e\x10\xf6\x89\x05\xe1\xa4\x33\xb0\x22\xad\x0d\xac\xe8\xdb\x46\x33\x25\x57\x2a\xa5\x00\x33\x55\xfb\xac\x6a\x89\xe4\x2a\x44\xb7\xcc\x93\x3d\xeb\x15\xa7\x7d\x1d\x6b\x0a\x24\xfb\x89\xd7\x2c\x60\x15\x83\x48\xdb\x26\x4b\x93\xa7\x20\x80\x64\x49\x11\x36\x7a\xfc\x22\x4c\x26\x2b\xec\x73\x48\x5c\xaf\x7d\xb8\x7c\x3e\x84\xa5\x74\x88\xd8\x4b\x05\x7c\x88\xbe\xd7\x48\xbf\x1f\xbd\x18\xfd\x99\x63\x2e\xdb\x55\xa3\x7a\xf1\xb3\x01\xc9\x46\x8b\x4b\xa9\x78\x97\x0a\x99\xff\x9f\x67\x76\xe6\xd7\xb4\x6c\xbb\x0f\x2a\xdb\x5e\xba\xfd\x81\xf6\xd7\x9b\x6f\x2b\x02\x79\xc2\x0d\x77\xa1\xd9\x97\xd6\x97\x6e\x1b\x1a\x6b\x49\xb6\xe7\xd2\xd6\x53\xb6\x3d\x99\x81\x80\x02\x57\x9a\x6e\x2b\x7c\xdb\xcf\x3d\x37\x9c\x6f\xef\x86\xd0\x4f\x09\x77\x2d\x77\x5f\x4f\xc6\x6d\x02\xd1\xae\xa4\x9d\x1b\x4e\xb9\x77\x4b\xf8\x6d\xe6\xdc\x46\x13\xdb\x4d\xba\xd3\xed\x76\xfe\xf4\xee\x22\x94\xc4\x5f\x64\xe2\xa5\xa0\x0b\x65\xf9\x7f\xe3\x74\x46\x92\x3f\x95\xde\x77\x4b\x16\x07\x7d\xad\xa5\xc9\xda\x00\xc6\xf3\xb4\xcf\x00\x2d\x52\x1b\xc0\xcc\x5a\xc5\x01\xc0\x25\xd5\xc1\x35\x0b\x54\x6d\x00\x03\xf6\xaf\x2c\x58\xa6\x34\x80\x48\x97\x63\x59\x30\xcd\x57\x08\xb4\x3b\x2c\x85\x41\xf9\xc5\x52\x08\x94\x83\x8c\x21\x28\x68\xe5\x5e\x24\xa8\x73\x65\xc5\x82\x46\xae\xc4\xc8\x03\x0b\x25\x37\xcd\x9c\xb5\xb6\x0b\x56\x2d\xf2\xaa\x07\x66\x38\xd6\xbc\x75\x8d\x41\xbb\x13\x85\x8d\xd7\xdd\x62\x5d\x73\xd2\x5d\x6f\x59\x03\xf8\xf3\xaa\xe6\x84\x89\x6b\x14\x0b\x02\x0b\x7a\xad\x95\x4d\x4e\x67\x2d\xd5\xcd\x3c\x3a\x7b\x2a\x6e\x26\xb3\xbd\x93\xee\x4a\x6b\x1b\x40\xb7\xfd\x2c\x7f\xc3\xa5\xcd\x4e\xc8\xfc\x54\xd9\xd4\xf1\xf5\xf5\x14\x36\x3a\x06\xed\x4a\x6a\xbf\xe1\xba\x66\xa7\x64\xdf\x66\x59\xa3\x15\xb1\xd6\xaa\x66\x38\x74\x7e\x40\xde\x20\x20\x7d\xe6\x1a\x28\x2a\x00\x03\x91\xd4\x43\xdd\x90\xa3\x28\xe6\xac\x3b\x70\x85\x38\x2c\x21\xf2\x78\x18\xa9\x25\x5a\xda\x5e\x09\xa4\xdc\x18\x39\xc9\x02\x40\x3f\x38\xc9\x8b\x1e\xb3\x72\xcf\x74\xc5\x26\x9e\xf0\x19\xd2\xb9\xeb\xcc\x13\xae\xd1\x1e\xc2\x27\xf4\x86\xb9\xb4\x6c\xf1\x7a\xd6\x7e\x0f\xb8\xaa\x2c\xae\xc6\xab\xac\x7e\x94\x3c\x4b\xdc\x7c\x2c\x59\x51\xae\xa2\xa4\x4c\x66\xe6\xb5\x4e\xe6\x11\xf3\xe4\xdc\x33\xe4\xde\x47\xf8\x43\x18\x07\x60\x89\x87\x29\x78\x29\x7d\x9d\xa2\x83\x9f\x10\xd6\xd5\xd0\xe3\xd5\xc0\x6b\x84\x55\x35\xf7\x78\x15\xf0\x0a\xe1\xb7\x37\x84\x3d\x62\x17\x38\xd0\x2e\xf0\xdd\xd7\xaf\x80\x99\xcd\x21\xc8\xad\xae\x2f\x55\x59\x37\xd9\x1f\xf2\xba\x79\xf5\x9c\x81\x2d\xd2\x21\xf2\xba\xb5\x1a\x44\x5e\x37\xe9\x0f\x79\x8c\xeb\xb7\x0e\x15\x0b\xf6\x09\xe3\x67\xfa\xb5\xc1\x05\x9b\x44\xe3\x55\x35\xa4\x90\x0a\x2b\xbd\x39\x23\xfd\x99\x47\xbb\xd3\x90\xa0\x04\x4b\xca\xdb\x22\x58\x8a\x0d\x9c\x2b\x4e\x06\x63\x92\x98\x3a\xbc\xd0\x24\x02\x7a\x55\x6d\xaa\xa4\x0f\xd0\x0a\x42\x0f\xf2\x08\xa9\x43\x77\x0a\x6f\x06\x0b\xcd\x98\x8d\x70\x59\xd1\x0a\x2b\x33\x19\xab\xe8\x9a\xf1\x18\x97\xc0\x37\xc3\xa2\x0e\x6f\xf7\xf2\xd8\xe5\x94\xe6\x3c\x76\x4b\xcd\xb9\x39\x7b\x74\xd3\xf8\xbc\xa7\x6d\x67\xb4\x68\xba\x76\x75\xf4\x5d\xd1\xce\x9b\x50\xf9\x77\x25\x95\x97\x67\x3c\xd4\x3e\xa0\x1b\xc5\x5b\x6c\x04\x1e\xb7\x2f\xd7\xdb\x09\x54\x04\xf2\x56\x20\xdc\xad\xb7\x07\x08\x04\xd6\xd2\xfc\x9b\x4b\x4f\x4f\xdd\xbf\xc9\x8e\x08\x28\x70\xa5\xed\x3f\x85\x6f\xfb\xbd\xb0\x0d\xf7\xff\x76\x43\xe8\xa7\x06\x60\x2d\x77\x5f\x4f\x07\xd0\x04\xa2\x5d\x69\x83\x6d\xb8\x05\xb8\x5b\xc2\x6f\xb3\x07\x68\x34\xb1\xdd\x57\x1b\x8e\xc1\x32\x0b\xbe\x2f\xc0\x67\x9c\xeb\x56\x4f\x3c\x1f\x88\x85\xe6\xfd\x83\x30\xb9\xd0\xc4\x16\x38\xc9\xb2\xaf\x36\x40\x7e\x37\x59\xb7\xc2\x60\x9e\xed\xc1\xcd\x22\x25\x2b\x4c\xab\x55\xb3\x02\x5c\x52\xb4\x06\x58\x53\xb6\xcf\x96\xac\x54\xf3\x16\x65\x8a\x6e\xd9\x77\x02\xd2\xa5\x30\x56\x63\x28\xec\xca\x5b\xf2\x77\x03\x4a\x23\xa9\x69\xa6\x25\x90\x2b\xa0\x0e\x2e\x57\x26\x9e\x0e\x6c\x80\xb6\x72\xdb\x32\xf1\x6c\x64\x45\xd4\x2d\x16\x40\x6c\x10\xf4\x3e\x2e\xd4\x1a\x28\x73\x91\x8d\xac\xf8\xe5\x8c\x04\xef\xf7\x2f\x11\x80\x92\xd8\x97\xe7\x51\x28\xc5\x21\x92\x3c\xa6\xbb\x50\xa9\xb1\x6d\xbe\xb1\xd1\x5a\xf3\x1b\x1b\xad\xe2\x1b\x1b\xad\x40\x02\x3c\x94\x5a\x62\xbd\xd5\x5a\x4e\x67\x2d\x45\xdb\x3c\x3a\x7b\xaa\xd9\x26\x93\xd8\xd6\x6a\xdf\xd8\x68\xed\xc2\xdb\x0b\x1b\xae\xd8\x76\x42\xe6\xa7\x82\xad\x8e\xaf\xaf\xa7\x5e\x6b\xed\xd2\x5b\x0b\x1b\x2e\xd7\x76\x4a\xf6\x6d\x56\x6b\xad\xb5\xbf\xb1\x31\xb3\x58\xcb\xb6\xda\x85\xea\xa0\x76\x55\xdf\xfe\x84\x87\x91\x78\x79\xca\x79\xc8\x05\x6a\x05\xce\xc7\x58\xa2\x88\xf2\x64\x8d\xe1\xa9\xc8\xf7\x8b\xb9\x68\x69\xad\xa3\xf7\x21\x38\x47\xeb\x23\x8a\x44\x15\xc1\x36\x71\xaf\xa9\x5c\x15\xad\x0c\xdb\x34\x72\xef\xd8\xca\x68\x01\x8d\x06\x3b\xea\x34\x1c\x76\x34\x46\x6b\xfe\x82\x92\x75\x89\xe7\x71\x31\x59\x54\xb2\xc2\x61\x68\x02\xb4\x48\x5d\xc9\xea\x1d\x85\xb2\xf4\x28\x34\x39\x07\x65\x5d\x7b\xd5\x87\xa0\x19\xca\x25\x8f\xdc\x52\x64\xad\x76\x4d\x54\xd3\x2d\xf9\x7f\x41\x47\x44\x3f\x97\xdc\x44\x9f\x78\x22\x4f\x2f\x06\x6a\x16\x43\x3f\xf4\x62\x3f\x44\x07\xbf\xe0\x7c\xc5\xe6\x87\x7e\x93\xf3\xc0\xcb\x0a\x73\x12\x6e\xf5\xf2\x6a\x05\x13\xc5\x75\x1a\x5c\xce\x98\x8f\x32\x38\xe5\xa3\xc5\x08\xe3\x94\x0b\x44\x6d\xbc\x39\xe6\x57\xf1\xa8\x40\xaa\x99\x84\x27\x19\x97\x05\x82\x2f\x2b\xc4\xa5\x69\xb4\x98\x44\x65\x02\x49\x41\x60\x67\xfa\xfc\x4a\x5e\x0c\x82\x22\x33\xc9\x2f\x63\xb4\x67\x95\x8a\x78\xeb\xfb\x26\x4a\x2b\x61\xa8\x2f\x49\xa2\xf6\xb1\x01\x45\x30\x1b\x49\x39\x1d\x1f\xd1\x4a\xd4\x96\xce\xce\x44\x8b\xa1\x52\x49\x5d\x88\x23\xa9\x06\x0b\x44\x67\xdb\xba\xc4\xd0\xbd\x06\x9f\x1b\x45\x99\xd7\xb1\xa0\x37\xc1\x6c\xa5\xcd\xcb\x16\xcf\x76\x86\x69\x88\x66\x58\xfc\x34\xb7\xf5\xbd\x08\x2a\x2c\xbe\xc2\x55\x3e\x6b\x01\x47\xd9\xa6\x34\xe9\x91\xc9\x16\x33\xc3\xa7\x53\x0c\x95\x4e\x9d\xa0\x98\xea\xd5\x53\x36\xc8\x69\x1a\x9b\xc5\x51\xbb\xc0\xcb\xfd\x28\xaa\xb4\xbe\x01\x75\xbf\xfb\xed\xe2\xf4\xbc\x52\xd9\xef\x06\x92\xce\x52\xb5\x99\x5d\xa9\x68\x3d\xbd\x9e\x9a\xdf\xb5\x2e\xce\xef\xd1\xb1\xca\x1b\xa6\xf2\xa1\xe7\xde\xa3\x5d\x35\xb9\xbe\x6a\xe7\x6d\xb1\x19\x12\x89\xa4\x67\x71\x7f\x27\xde\x80\x88\xc4\x16\xfb\x6a\x6d\xb1\xde\xbe\x1a\xe0\xcf\x43\x6b\x9b\x87\xaa\xfc\x59\x77\x5b\x2d\x23\xb3\x96\xae\xda\x3c\x1a\x7b\xea\xaa\x4d\x76\x1a\xda\x62\xa5\x5d\x35\x40\xb7\xfd\x0e\xd3\x86\xbb\x6a\x3b\x21\xf3\x53\x57\xad\x8e\xaf\xaf\xa7\xab\xa6\x63\xd0\xae\x74\x96\x36\xdc\x55\xdb\x29\xd9\xb7\xd9\x55\xd3\x8a\x78\x24\x7f\x07\x35\xeb\x2f\x02\xda\x42\xff\x49\x54\xbb\x75\xf2\xf5\xff\x41\xc0\xa2\xf2\xef\x23\x7c\xf9\x50\xe5\x9f\x2a\xf4\x2b\x10\xfa\xfc\xf4\xd3\xc3\x94\xba\x8e\xd5\x0f\xc0\xeb\x1f\xb1\xf8\xaf\x11\x3e\x6b\x3d\x5e\xf1\x7f\x42\xf8\x73\xeb\xd3\xc5\xe3\x55\xc0\xff\x23\xfc\xe9\xf4\xfc\x21\xcb\xef\x52\x75\x74\x35\x55\x01\x6f\x10\xbe\x68\x7d\x38\x7d\x98\x1a\x98\x2a\xf5\x5f\x10\x3e\xfe\xf8\xe1\xc3\xdb\xb3\xaf\x6a\xbf\x9b\x72\xa2\x15\xf1\xd0\xad\x38\xcf\x8a\x44\xa1\x21\xa4\x40\x16\x39\xcd\x8a\x44\xad\xd3\xac\x48\xa4\x1f\x0b\xcb\xd4\xe7\x3e\x45\xc2\x86\x54\x6a\xc9\xb3\xac\xfc\xec\x29\x45\xb7\xe0\x67\x2f\xc1\xf4\xcb\xfa\xd3\xf3\x39\x82\xf2\x65\x68\xb6\x39\x0b\x39\x93\x83\x65\x70\x9c\x31\x77\xce\xf3\xbb\xf2\xfc\x73\xf6\xdf\xa5\xe6\x7f\xa2\x02\xaa\x83\x40\xce\x87\x23\x0d\x39\x09\x92\x0b\x36\xfb\x10\x32\x97\xb8\x74\x62\xb9\x91\x8e\x6a\xe3\x9b\x93\x8f\xc7\x17\xbf\xb5\x4f\x51\x4f\xf6\xa1\x72\x6a\x98\x5f\xaa\x63\x09\x65\x4c\x52\x17\xf5\xa9\x84\xe2\xbd\x47\xb8\xa0\xb2\x89\x63\xd9\xb5\xde\x24\x55\x50\x43\x77\x27\xd5\x1a\x1f\xfb\x16\x0c\x04\x57\xa0\x89\x86\x63\x00\x0a\x78\x7a\x52\x46\x16\xfd\x4f\xcc\x6e\x9a\xf8\x9f\xd6\xe5\x5b\xeb\x38\xec\x47\x44\x32\x28\xfd\x31\x68\x23\x50\xd3\x9a\xb8\x75\xda\xa4\x50\x14\xe2\xe2\x4c\x85\xb9\x89\x6f\x18\xbd\x8d\x42\x2e\x0b\xc0\xfa\x23\x92\x9b\x9e\xfe\x4c\x07\x4b\xdf\xc0\xc2\x0d\x98\x64\xc4\xb7\x04\x54\x6e\xb4\xb9\x67\xff\x08\x2b\xef\x1b\xcb\xfa\x1d\x22\x47\xeb\xf4\x8f\x04\xad\x8e\x8c\x9c\xfa\xba\x57\xca\xa5\x1b\x4b\xc4\x00\x2b\x4e\xbf\x0c\xa4\x4b\x6e\xd4\xbd\x0d\xff\xa9\xe9\xbf\x83\xca\x58\xf7\x0f\xcb\x9a\x98\x6e\x66\x09\xf0\x38\xb0\xec\xab\xfd\xbb\x57\xfb\x19\x0e\xd0\xcd\x47\xad\x8b\xcf\x94\x0b\x88\x2b\xa3\x51\x8a\x56\xa4\x17\xd6\xab\x7d\x3b\x0a\xae\x30\x92\x83\x08\x24\x3c\x23\x67\x78\x82\x02\x89\x22\x9f\x5a\x32\x8c\xdd\x9e\x55\xa2\xb6\xb7\xff\xe3\x1d\xfc\xcc\x45\x0f\xe0\x35\xc1\x39\xa8\x1c\x1c\xdc\xc1\xcf\x7c\x54\x0e\x0e\xe6\xa5\xf2\x7a\xff\x0e\x7e\xe6\xa3\xf2\x7a\x7f\x5e\x2a\x6f\x40\x63\x6f\xe6\xd4\xd8\x9b\x29\x1a\x13\x72\xe0\x53\xd1\xa3\xaa\x42\x37\xe6\x53\x61\xc0\x81\xc2\xfe\x3e\xfc\xf0\xd8\x61\x81\x47\xef\x6c\x05\x68\x16\x67\xba\xe0\x1a\x9d\xd0\x1b\x4c\x76\x24\x64\x18\x59\x1d\xc2\x2b\xdb\x0f\xc9\xb3\xa4\x9d\x9f\x37\x46\xca\x4d\xf2\x52\xe3\x6f\xac\x57\xa8\x16\xfc\x3e\xd2\xc2\x00\x30\xe1\x57\x2c\xb0\x3a\xa1\x94\x61\xff\x10\xfd\x88\xf3\xb3\x8b\x74\xff\xd2\x6f\x7b\x9b\x43\x98\xe6\xc4\xf7\xe9\xa4\xe0\x71\x04\x60\x54\xa8\x7d\x4c\xd2\x7e\xe4\xc3\xcd\xe4\x97\xef\x20\x3b\x0b\x79\xa8\xa1\x43\xa9\x0e\x27\x4c\x75\x5b\x3a\xfa\x91\x1e\x03\xfd\xec\x97\x7b\x40\x63\xcd\x4e\xb8\x2d\xc5\x57\x1d\x58\xe3\xa8\x14\x7a\xab\xb8\x4e\xbe\x43\xa8\x30\x0d\x25\x7c\x8f\x1d\x99\x54\x8a\x91\xce\xb6\x0b\x71\xbb\xd4\x92\xcd\xfa\x51\x63\x6d\xab\x2a\xf3\x25\xfb\x4f\x6d\xfb\x41\xc6\x56\xb2\x98\x36\x95\x71\x3a\x15\x65\xc5\xa1\xe3\xdc\xde\xde\xda\xa0\x69\x0e\x3f\xb6\x1b\xf6\x1d\x13\x96\x1d\x70\x5d\x4a\x04\x15\x8e\x12\x46\xc8\xbf\xba\xfd\xa8\x39\xe9\xa6\x78\xbc\x63\x9b\xf5\x6a\x7b\xa1\xaf\x8f\xae\xd2\x28\x4f\xea\x89\x5d\xbc\x54\xf2\x57\xd9\xc3\x27\x93\xfe\x83\x2a\x34\xaf\xe0\x8c\xda\x67\xe3\x54\x9f\x04\x5f\xc7\x29\x35\x5c\x4d\x9c\x5e\xb7\x1e\x9f\x0a\xae\x2e\x4e\xf5\x07\xdd\x75\xf8\xd4\x70\x35\x71\xb2\x9a\x7c\xb2\x39\xf8\x8c\x44\x3d\x9c\x0a\x6e\x1c\xa7\x70\x39\x8b\x64\x31\x56\x7e\x21\x37\xc4\x8c\xe2\xa3\x1b\xc2\x91\x4a\x25\x50\x13\x25\x49\xc5\x68\xf4\x33\xac\x2c\xfd\xb8\x0e\x86\xf1\x3c\x05\x09\xee\x56\xc7\xe0\x2f\xc2\x31\x85\xc4\xc5\xdb\x5f\x7e\x39\x3d\xe9\x30\x18\xec\xb3\xc0\xe9\xc4\xaa\xec\xb1\xe1\xd2\xfe\x22\x20\x4d\xf2\x05\xe4\x33\x80\x25\x7d\xa0\x07\x55\xee\xa4\x5f\xb7\xcb\x18\x6b\x38\x26\x6e\x43\xa0\x52\x29\xd4\xff\x02\x00\x00\xff\xff\x04\x9d\xb5\xfa\xac\x6c\x00\x00"

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 27820, mode: os.FileMode(420), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

