// Code generated by go-bindata.
// sources:
// index.html
// DO NOT EDIT!

// +build bin

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x3d\x7b\x73\xdb\x36\xf2\xff\xe7\x53\xa0\x98\xf6\xd7\x64\x26\xa4\x6a\xc7\xe9\x2f\x97\x4a\xbe\x49\x6c\x5f\x4f\xd3\x44\xd1\xc4\x76\xee\x7a\x9d\xce\x15\x22\x21\x0b\x31\x45\xf2\x00\x50\xb6\x4f\xa3\xef\x7e\x0b\x80\x4f\x89\xb4\xa8\xb7\x6a\x3b\x33\x8e\x49\x70\xb1\x6f\x2c\x76\x17\xb4\x34\x1e\xbb\xb4\xcf\x7c\x8a\xb0\xf9\xfd\xef\x28\x94\x6c\x48\xf1\x64\xd2\x14\x21\xf1\x8f\xc7\x63\xfb\x94\x48\x62\x9b\x61\x18\x6d\xc4\xc3\xd4\x77\x27\x93\x99\xd9\x83\x40\x48\x9f\x98\xf9\x04\x0d\x38\xed\xb7\x70\x03\xa3\xf1\xf8\x82\x49\x8f\x76\xe1\x9e\xdd\x52\x17\xe1\x04\x0e\x61\x64\xf0\x27\x03\x93\x49\x4a\x32\x1b\x6a\x36\x48\x25\x45\x8f\x60\x35\xfa\x6d\x88\xde\xb6\x62\x5c\x21\xe1\x64\x28\x26\x93\x67\x4d\x97\x8d\x90\xe3\x11\x21\x5a\xf8\x8a\x33\xd7\xea\x79\x81\x73\x0d\x6c\x59\x32\x08\xf1\xf1\x33\x84\xf2\x10\x4e\xe0\x59\x1e\x47\x1e\xe1\x57\xd4\x3a\x40\x92\xde\x4a\x8b\xb3\xab\x81\xc4\xc7\x1a\x6c\x3c\x3e\x51\x80\xdd\x40\x30\xc9\x46\x14\x7d\x1b\xda\x1f\x88\x0f\xb2\x30\x97\x5a\x62\x10\xdc\xa8\x0b\x8c\xb0\xba\xcc\xee\x41\x20\xa0\x03\x94\x06\x07\x09\xa1\xc1\x91\x41\x1e\x8c\x28\xef\x7b\xc1\x0d\x36\x10\x00\x43\x80\xc8\xdf\x41\x49\x17\x80\x3c\xc6\x3f\x99\x20\xa9\x74\xd7\xc2\x1f\x02\xe2\x22\x32\xba\x42\x2e\x13\xa1\x47\xee\x50\x00\x36\x09\x7c\x91\x4d\x57\xa6\x01\x0c\x9a\xcc\x64\xd2\xc2\x09\x13\x96\xfa\x0f\xc1\xa5\xa4\x00\xe2\x50\x2b\xe4\x14\x01\x65\x22\x2d\x8f\xf6\x41\x3e\xdb\xb6\x51\x6c\xd9\x84\x8a\xd2\xb9\x61\xbc\x31\x38\x38\x6e\x36\x40\x03\x5a\x61\xe9\x45\xa5\xe6\x0e\xd6\xa3\xaf\x52\xdb\x65\xb2\x46\x5e\xf2\x74\x48\xfd\x08\xa5\xa2\xaa\x8b\x14\x0a\xe0\x3c\x96\xdd\x14\xb1\x32\x3f\x8c\xa4\x75\xc5\x83\x28\xc4\x79\x98\x4a\x28\xcb\x23\x3d\xea\x21\x31\x24\x9e\x67\x2c\xe8\x07\x37\x9c\xc0\x6c\x97\x82\x3d\x52\xd5\xcc\x47\xd4\x8b\xa4\x0c\x7c\xd0\x13\x49\x9e\x9a\x91\x18\xb7\xa0\x4e\xe0\xbb\x84\xdf\x29\x53\x93\x9e\x47\x5d\x7c\xac\x5c\x1c\xf4\xe7\x9a\xd5\xb0\x04\xad\xf1\xf8\x86\xc9\x01\xfa\x40\x85\x38\x4d\xdd\x0b\x96\x62\x81\x72\x5e\x2a\x58\x40\xa8\xf0\x0f\xb8\x0d\xfc\x13\x8f\x39\xd7\xad\xb1\x1c\x30\x61\x0f\x88\xef\x7a\x54\x8f\x4c\xcc\x62\x87\xb5\xab\xfc\x17\x9c\x36\x73\x43\x18\x3b\x31\x97\x53\xf8\x10\x52\x6b\xfd\x3d\x71\xaf\xa8\x9e\x60\x5f\x00\xf5\xc2\x6a\x2f\x0a\xb8\xb4\xcc\x1f\x03\x4e\xf7\x4a\x66\x23\x28\xca\xa4\xaf\x2d\xf3\xd4\x40\xb3\x91\xf7\xef\xed\x38\x3b\x0f\x6e\xc4\x56\x7c\xdd\xb7\xdf\xf5\x44\xe0\x45\x92\xae\xc3\xe9\x3b\x59\x4c\x9d\x72\x00\x11\x39\x0e\x00\x3c\x60\xe7\xdf\x4b\xd9\x37\xb2\x08\x9a\x8d\xc8\x4b\xf6\x2d\x05\x94\xdf\x89\x3a\x81\xff\x2f\xca\x83\x54\x11\xd8\xec\x45\x73\xb6\x1c\x04\xbb\xb4\x64\x0e\x01\x5d\x49\xce\x42\x9a\x6d\x41\xe5\xe0\x72\x40\x09\xf8\xb0\xd9\x8c\xe3\xc7\xf4\x16\x6e\x5c\x04\xfb\xa4\x51\xbb\x05\x7b\x64\x97\x72\x16\xb8\xf1\xae\x3b\x07\xba\x90\x8c\xa0\x2f\xc4\x8b\xe8\xfd\x13\x81\x7e\xfc\x3c\xaf\xaa\xf1\x98\xf5\xe3\x1c\x09\x36\x7f\x17\x76\xf9\x54\xd3\xe3\x31\x27\xfe\x15\x6c\xd2\x1e\xc9\x12\xa9\x18\xc8\xfe\xc0\x84\xcc\x41\x7e\x15\xb7\xe8\x0f\xe3\x08\xea\xc9\x73\x05\xfb\xc2\x1e\x92\xf0\x79\x3f\xf2\x1d\x95\x93\x3c\x07\x34\x2f\x11\x7b\x81\xc6\x88\x53\x19\x71\x1f\x3d\xff\x23\x45\x10\x9b\xe4\x17\x7a\x87\xb0\x47\x2c\x08\x27\xbd\x3b\x2b\xd4\xda\xc0\x8a\xbe\x6d\x34\x53\x70\xa5\x42\x0a\x30\x57\xb5\xcf\xca\x96\x48\xa6\x42\x74\xc3\x5c\x39\xb0\x5e\x71\x3a\xd4\xb1\x26\x47\x72\x18\x7b\xcd\x12\x56\x31\x88\xb4\x6d\xd2\x34\xb9\x02\x01\x24\x4b\x8a\xb0\xd1\xe3\x57\x61\x32\x59\x61\x9f\x43\xe2\x7a\xed\xc1\xe5\xf3\x31\x2c\xa5\xb7\x88\xbd\x54\xc0\x6f\xd1\xf7\x1a\xe9\xf7\x93\x17\x93\x3f\x32\xcc\x45\xbb\x6a\x54\x2f\x7e\x32\x20\xe9\x68\x7e\x29\xe5\xef\x12\x21\xb3\xff\xb3\xcc\xce\xfc\xaa\xca\xb6\x87\xa0\xb2\xdd\xa5\xdb\x1f\xe9\x70\xb3\xf9\xb6\x22\x90\x25\xdc\x70\x17\x98\x7d\x69\x73\xe9\xb6\xa1\xb1\x91\x64\x7b\x21\x6d\x3d\x65\xdb\xb3\x19\x08\x28\x70\xad\xe9\xb6\xc2\xb7\xfb\xdc\x73\xcb\xf9\xf6\x7e\x08\xfd\x94\x70\xd7\x72\xf7\xcd\x64\xdc\x26\x10\xed\x4b\xda\xb9\xe5\x94\x7b\xbf\x84\xdf\x65\xce\x6d\x34\xb1\xdb\xa4\x3b\xd9\x6e\x17\x4f\xef\x2e\x02\x49\xbc\x65\x26\x5e\x0a\xba\x54\x96\xff\x37\x4e\xe7\x24\xf9\x95\xf4\xbe\x5b\xb1\x38\x18\x6a\x2d\xcd\xd6\x06\x30\x9e\xa5\x7d\x06\x68\x99\xda\x00\x66\xd6\x2a\x0e\x00\x2e\xae\x0e\xae\x99\xaf\x6a\x03\x18\xb0\x7f\x61\xfe\x2a\xa5\x01\x44\xba\x0c\xcb\x92\x69\xbe\x42\xa0\xdd\x61\x25\x0c\xca\x2f\x56\x42\xa0\x1c\x64\x0a\x41\x4e\x2b\xf7\x22\x41\xbd\x2b\x2b\x12\x34\x74\x24\x46\x2e\x58\x28\xbe\x69\x65\xac\x75\x1d\xb0\x6a\x9e\x57\x3d\x30\xc7\xb1\x16\xad\x6b\x0c\xda\xbd\x28\x6c\xdc\xfe\x0e\xeb\x9a\xd3\xfe\x66\xcb\x1a\xc0\x9f\x55\x35\xa7\x4c\x5c\xa3\x48\x10\x58\xd0\x1b\xad\x6c\x32\x3a\x1b\xa9\x6e\x16\xd1\xd9\x53\x71\x33\x9b\xed\x9d\xf6\xd7\x5a\xdb\x00\xba\xdd\x67\xf9\x5b\x2e\x6d\xf6\x42\xe6\xa7\xca\xa6\x8e\xaf\x6f\xa6\xb0\xd1\x31\x68\x5f\x52\xfb\x2d\xd7\x35\x7b\x25\xfb\x2e\xcb\x1a\xad\x88\x5d\x56\x35\xc5\x25\x15\x9b\xea\x0b\xe4\x5b\xd7\xa9\xa9\xae\xd1\x01\xc2\xa7\x74\xc4\x1c\x5a\x34\x49\x3d\x73\x7c\x00\x5c\x65\x26\x51\xe3\x65\x66\x39\x8e\x9f\xc5\x7e\x38\x95\x4d\x28\x5b\x12\xc8\xfc\xe3\x99\x59\x31\x92\x9a\x6c\x91\xa4\x78\x8e\xdc\x87\x08\x7f\x0c\x22\x5f\x42\x2c\x78\x90\x82\x17\xf2\xcb\x0a\x1d\xfc\x88\xb0\x2e\x57\x1e\xaf\x06\x5e\x23\xac\xca\xad\xc7\xab\x80\x57\x08\xbf\x1b\x11\xf6\x88\x5d\xe0\x48\xbb\xc0\x77\x7f\x7e\x05\xcc\xed\xde\x40\xf2\x73\x7d\xa9\xea\xae\xd9\x06\x8e\xdb\xcf\xca\xdb\x14\x6c\x99\x16\x8e\xdb\xaf\xd5\xc1\x71\xfb\x71\x03\xc7\x65\x5c\xbf\x16\xa8\x58\xb0\x4f\x19\xef\xe8\xf7\xfa\x96\xec\xe2\x4c\x97\xbd\x90\xe3\x29\xac\x74\xd4\x21\xc3\xb9\x67\xaf\x55\x48\x50\x8c\x25\xe1\x6d\x19\x2c\xf9\x0e\xcb\x15\x27\x77\x53\x92\x98\x42\x39\xd7\xc5\x01\x7a\x65\x7d\xa4\xb8\x50\x6f\xfb\x81\x4b\x21\x9d\xd2\xa1\x3b\x81\x37\x83\xb9\x6e\xc9\x56\xb8\x2c\xe9\x55\x15\x99\x8c\x54\x74\x4d\x79\x8c\x0a\xe0\xdb\x61\x51\x87\xb7\x7b\x79\xec\x73\x4a\x33\x1e\xfb\x85\xee\xd9\x82\x4d\xb4\x2a\x3e\xef\xe9\xab\x19\x2d\x9a\xb6\x5a\x1d\x7d\x97\xf4\xdb\x66\x54\xfe\x5d\x41\xe5\xc5\x19\x0f\xb5\x51\xe7\x84\xd1\x0e\x3b\x75\x27\xdd\xcb\xcd\xb6\xea\x14\x81\xac\x57\x07\x77\x9b\x6d\xd2\x01\x81\x8d\x74\xe7\x16\xd2\xd3\x53\x7b\x6e\xb6\x65\x01\x0a\x5c\x6b\x7f\x4e\xe1\xdb\x7d\xb3\x6a\xcb\x0d\xba\xfd\x10\xfa\xa9\x43\x57\xcb\xdd\x37\xd3\xa2\x33\x81\x68\x5f\xfa\x54\x5b\xee\xd1\xed\x97\xf0\xbb\x6c\xd2\x19\x4d\xec\xf6\xdd\x83\x13\xb0\xcc\x92\x07\xfa\x7c\xce\xc1\x6b\xf9\xc4\xf3\x3b\xb1\xd4\xbc\x7f\x10\x26\x97\x9a\xd8\x06\x27\x59\xf5\xdd\x03\xc8\xef\x66\xeb\x56\x18\xcc\xb2\x3d\xb8\x59\xa6\x64\x85\x69\xb5\x6a\x56\x80\x8b\x8b\x56\x1f\x6b\xca\x76\x67\xc5\x4a\x35\x6b\x51\x26\xe8\x56\x3d\xb4\x4f\x96\xc2\x54\x8d\xa1\xb0\x2b\x6f\xc9\x0e\xef\x0b\x23\x89\x69\xaa\x12\xc8\x35\x50\x07\x97\x2b\x12\x4f\x06\xb6\x40\x5b\xb9\x6d\x91\x78\x3a\xb2\x26\xea\x16\xf3\x21\x36\x08\x7a\x1f\x17\x6a\x0d\x14\xb9\x48\x47\xd6\xfc\xf6\x44\x8c\xf7\xfb\x97\x08\x40\x49\xe4\xc9\xf3\x30\x90\xe2\x2d\x92\x3c\xa2\xfb\x50\xa9\xb1\x5d\xbe\x52\xd1\xde\xf0\x2b\x15\xed\xfc\x2b\x15\x6d\x5f\x02\x3c\x94\x5a\x62\xb3\xd5\x5a\x46\x67\x23\x45\xdb\x22\x3a\x7b\xaa\xd9\x66\x93\xd8\xf6\x7a\x5f\xa9\x68\xef\xc3\xeb\x05\x5b\xae\xd8\xf6\x42\xe6\xa7\x82\xad\x8e\xaf\x6f\xa6\x5e\x6b\xef\xd3\x6b\x05\x5b\x2e\xd7\xf6\x4a\xf6\x5d\x56\x6b\xed\x5d\xbf\x52\x81\xb3\xad\x76\xa9\x3a\xa8\x5b\xd6\xb7\x3f\xe5\x41\x28\x5e\x9e\x71\x1e\x70\x81\xda\x7e\xe3\x53\x24\x51\x48\x79\xbc\xc6\x70\x25\xf2\xc3\x7c\x2e\x5a\x58\xeb\xe8\x43\x00\xce\xd1\xfe\x84\x42\x51\x46\xb0\x4b\x9c\x6b\x2a\xd7\x45\x2b\xc5\x56\x45\xee\x3d\x5b\x1b\x2d\xa0\xd1\x64\xc7\xbd\x66\x83\x1d\x4f\xd1\x5a\xbc\xa0\x64\x7d\xe2\xba\x5c\xcc\x16\x95\x2c\x77\x18\x1a\x03\x2d\x53\x57\xb2\x7a\x47\xa1\x2c\x39\x0a\x8d\xcf\x41\x59\xdf\x5e\xf7\x21\x68\x8a\x72\xc5\x23\xb7\x04\x59\xbb\x5b\x13\x55\xb5\x25\xff\xcf\xef\x89\xf0\xa7\x82\x9b\xe8\x13\x4f\xe4\xea\xc5\x40\xcd\x62\x18\x06\x6e\xe4\x05\xe8\xe8\x67\x9c\xad\xd8\xec\xd0\x6f\x76\x1e\x78\x59\x6e\x4e\xcc\xad\x5e\x5e\x6d\x7f\xa6\xb8\x4e\x82\x4b\x87\x79\x28\x85\x53\x3e\x9a\x8f\x30\x8d\x62\x81\xa8\x8d\xb7\xc0\xfc\x32\x1e\x15\x48\x39\x93\xf0\x24\xe5\x32\x47\xf0\x65\x89\xb8\x34\x89\x16\xb3\xa8\x4c\x20\xc9\x09\xdc\xa8\x9e\x5f\xca\x8b\x41\x90\x67\x26\xfe\x65\x8c\xf6\xac\x54\x11\xef\x3c\xcf\x44\x69\x25\x0c\xf5\x24\x89\xd5\x3e\x35\xa0\x08\xa6\x23\x09\xa7\xd3\x23\x5a\x89\xda\xd2\xe9\x99\x68\x3e\x54\x2a\xa9\x73\x71\x24\xd1\x60\x8e\xe8\x7c\x5b\x17\x18\xba\xd7\xe0\x0b\xa3\x28\xf2\x3a\x15\xf4\x66\x98\x2d\xb5\x79\xd1\xe2\xe9\xce\x50\x85\x68\x8e\xc5\xcf\x32\x5b\xdf\x8b\xa0\xc4\xe2\x6b\x5c\xe5\xf3\x16\x70\x98\x6e\x4a\xb3\x1e\x19\x6f\x31\x73\x7c\x3a\xc1\x50\xea\xd4\x31\x8a\x4a\xaf\xae\xd8\x20\xab\x34\x36\x8f\xa3\x6e\x8e\x97\xfb\x51\x94\x69\x7d\x0b\xea\x7e\xff\xeb\xc5\xd9\x79\xa9\xb2\xdf\xdf\x49\x3a\x4f\xd5\x66\x76\xa9\xa2\xf5\xf4\x7a\x6a\x7e\xdf\xbe\x38\xbf\x47\xc7\x2a\x6f\xa8\xe4\x43\xcf\xbd\x47\xbb\x6a\x72\x7d\xd5\x2e\xda\x62\x33\x24\x62\x49\x3b\xd1\x70\x2f\xde\x80\x08\xc5\x0e\xfb\x6a\x5d\xb1\xd9\xbe\x1a\xe0\xcf\x42\x6b\x97\x07\xaa\xfc\xd9\x74\x5b\x2d\x25\xb3\x91\xae\xda\x22\x1a\x7b\xea\xaa\xcd\x76\x1a\xba\x62\xad\x5d\x35\x40\xb7\xfb\x0e\xd3\x96\xbb\x6a\x7b\x21\xf3\x53\x57\xad\x8e\xaf\x6f\xa6\xab\xa6\x63\xd0\xbe\x74\x96\xb6\xdc\x55\xdb\x2b\xd9\x77\xd9\x55\xd3\x8a\xd8\x97\x3f\x54\x9a\xf7\xca\x7e\x57\xe8\xbf\x59\xea\xb6\x4f\xff\xfc\x6f\xec\x2f\x2b\xff\x21\xc2\x97\x0f\x55\xfe\x4a\xa1\x5f\x81\xd0\xe7\x67\x9f\x1f\xa6\xd4\x75\xac\x7e\x04\x5e\xff\x88\xc5\x7f\x8d\x70\xa7\xfd\x78\xc5\xff\x11\xe1\x2f\xed\xcf\x17\x8f\x57\x01\xff\x8f\xf0\xe7\xb3\xf3\x87\x2c\xbf\x43\xd5\xd9\x52\xa5\x02\xde\x20\x7c\xd1\xfe\x78\xf6\x30\x35\x50\x29\xf5\x5f\x10\x3e\xf9\xf4\xf1\xe3\xbb\xce\x9f\x6a\xbf\xab\x38\x72\x0a\x79\xe0\x94\x1c\x38\x85\x22\xd7\xb1\x51\x20\xcb\x1c\x37\x85\xa2\xd6\x71\x53\x28\x92\x0f\x56\x65\xea\x93\x93\x42\x61\x43\x2a\xb5\xe2\x61\x53\x76\x38\x94\xa0\x5b\xf2\xd3\x8b\x60\xfa\x65\xfd\xe9\xd9\x1c\x41\xf9\x2a\x34\xbb\x9c\x05\x9c\xc9\xbb\x55\x70\x74\x98\xb3\xe0\x01\x5b\x71\xfe\x39\xfb\xef\x4a\xf3\x3f\x53\x01\xe9\xbb\x2f\x17\xc3\x91\x84\x9c\x18\xc9\x05\x9b\x7f\x4a\x98\x49\x5c\x38\x52\xdc\x4a\xcb\xb3\xf9\xcd\xe9\xa7\x93\x8b\x5f\xbb\x67\x68\x20\x87\x50\xda\x34\xcd\x2f\xd5\x52\x84\x3a\x23\x2e\x5c\x86\x54\x42\x75\x3d\x20\x5c\x50\xd9\xc2\x91\xec\x5b\x6f\xe2\x32\xa5\xa9\xdb\x87\x6a\x8d\x4f\x7d\x8f\x04\x82\x2b\xd0\x44\xb3\x61\x00\x72\x78\x06\x52\x86\x16\xfd\x4f\xc4\x46\x2d\xfc\x4f\xeb\xf2\x9d\x75\x12\x0c\x43\x22\x19\xd4\xe6\x18\xb4\xe1\xab\x69\x2d\xdc\x3e\x6b\x51\xa8\xda\x70\x7e\xa6\xc2\xdc\xc2\x23\x46\x6f\xc2\x80\xcb\x1c\xb0\xfe\x90\xe1\x96\xab\x3f\x74\xc1\xd2\x37\xb0\x70\x7d\x26\x19\xf1\x2c\x01\xa5\x15\x6d\x1d\xd8\x3f\xc0\xca\xfb\xc6\xb2\x7e\x83\xc8\xd1\x3e\xfb\x3d\x46\xab\x23\x23\xa7\x9e\x6e\x66\x72\xe9\x44\x12\x31\xc0\x8a\x93\xaf\xd3\xe8\x93\x91\xba\xb7\xe1\x3f\x35\xfd\x37\x50\x19\xeb\xff\x6e\x59\x33\xd3\xcd\x2c\x01\x1e\x07\x96\x7d\x75\x78\xfb\xea\x30\xc5\x01\xba\xf9\xa4\x75\xf1\x85\x72\x01\x71\x65\x32\x49\xd0\x8a\xe4\xc2\x7a\x75\x68\x87\xfe\x15\x46\xf2\x2e\x04\x09\x3b\xa4\x83\x67\x28\x90\x30\xf4\xa8\x25\x83\xc8\x19\x58\x05\x6a\x07\x87\x3f\xdc\xc2\xcf\x42\xf4\x00\x5e\x13\x5c\x80\xca\xd1\xd1\x2d\xfc\x2c\x46\xe5\xe8\x68\x51\x2a\xaf\x0f\x6f\xe1\x67\x31\x2a\xaf\x0f\x17\xa5\xf2\x06\x34\xf6\x66\x41\x8d\xbd\xa9\xd0\x98\x90\x77\x1e\x15\x03\x4a\x65\x62\x3e\x15\x06\x1a\x8e\x10\xf7\xe1\x87\xc7\x0d\xe6\xbb\xf4\xd6\x56\x80\x66\x71\x26\x0b\xae\xd9\x0b\xdc\xbb\xd9\x96\x81\x0c\x42\xab\x47\x78\x69\x7f\x20\x7e\x16\xf7\xdb\xb3\xce\x45\xb1\x8b\x5d\xe8\xcc\x4d\x35\xf3\xd4\x82\x3f\x44\x5a\x18\x00\x26\xfc\x8a\xf9\x56\x2f\x90\x32\x18\xbe\x45\x3f\xe0\xec\x70\x21\xd9\xbf\xf4\xeb\xd8\xe6\x94\xa4\x35\xf3\x8d\x34\x09\x78\x14\x02\x18\x15\x6a\x1f\x93\x74\x18\x7a\x70\x33\xfb\xf5\x35\xc8\x4e\x43\x1e\x6a\xea\x50\xaa\xc3\x09\x53\xed\x90\x9e\x7e\xa4\xc7\x40\x3f\x87\xc5\x26\xcd\x54\x37\x12\x6e\x0b\xf1\x55\x07\xd6\x28\x2c\x84\xde\x32\xae\xe3\x6f\xe1\xc9\x4d\x43\x31\xdf\x53\x67\x1a\xa5\x62\x24\xb3\xed\x5c\xdc\x2e\xf4\x4c\xd3\x86\xd1\x54\x5f\xa9\xcc\x7c\xf1\xfe\x53\xdb\x7e\x90\xb1\x15\x2c\xa6\x4d\x65\x9c\x4e\x45\x59\xf1\xb6\xd1\xb8\xb9\xb9\xb1\x41\xd3\x1c\x7e\x6c\x27\x18\x36\x4c\x58\x6e\x80\xeb\x52\x22\xa8\x68\x28\x61\x84\xfc\xab\x33\x0c\x5b\xb3\x6e\x8a\xa7\x5b\xaa\x69\x33\x75\x10\x78\xfa\x6c\x29\x89\xf2\xa4\x9e\xd8\xf9\x4b\x25\x7f\x99\x3d\x3c\x32\xeb\x3f\xa8\x44\xf3\x0a\xce\xa8\x7d\x3e\x4e\xf5\x59\xea\x75\x9c\x52\xc3\xd5\xc4\xe9\xf6\xeb\xf1\xa9\xe0\xea\xe2\x54\x7f\x71\x5d\x87\x4f\x0d\x57\x13\x27\xab\xc9\x27\x5b\x80\xcf\x50\xd4\xc3\xa9\xe0\xa6\x71\x0a\x87\xb3\x50\xe6\x63\xe5\x57\x32\x22\x66\x14\x1f\x8f\x08\x47\x2a\x95\x40\x2d\x14\x27\x15\x93\xc9\x4f\xb0\xb2\xf4\xe3\x3a\x18\xa6\xf3\x14\x24\xb8\x53\x1e\x83\xbf\x8a\x86\x29\x24\x2e\xde\xfd\xfc\xf3\xd9\x69\x8f\xc1\xe0\x90\xf9\x8d\x5e\xa4\xca\x1e\x1b\x2e\xed\xaf\x02\xd2\x24\x4f\x40\x3e\x03\x58\x92\x07\x7a\x50\xe5\x4e\xfa\x7d\xb8\x94\xb1\x66\xc3\xc4\x6d\x08\x54\x2a\x85\xfa\x5f\x00\x00\x00\xff\xff\x0c\x48\x58\xad\xee\x6b\x00\x00"

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 27630, mode: os.FileMode(420), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

