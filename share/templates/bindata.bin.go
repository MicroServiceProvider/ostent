// Code generated by go-bindata.
// sources:
// index.html
// DO NOT EDIT!

// +build bin

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5d\x7d\x6f\xdb\xb8\x19\xff\xff\x3e\x05\x4f\x58\x87\xbb\x5b\x25\x25\x69\xba\x15\x3d\xdb\x43\x1b\x7b\x9d\xb0\x24\x35\x9a\xa4\xdb\xe1\x70\x18\x68\x8b\xb6\xd9\xca\x92\x4e\xa4\x9c\x64\x86\xbf\xfb\x1e\xea\x85\x92\x2c\xf9\x45\xaf\xd7\xa0\x2d\x90\xd4\xa6\xf8\xbc\x92\x0f\xf9\x3c\x3f\xd2\xce\x7a\x6d\x92\x19\xb5\x09\x52\xc2\xff\xff\xeb\xbb\x9c\x2e\x89\xb2\xd9\xf4\x98\x8b\xed\xc1\x7a\xad\x0d\x31\xc7\x5a\xd8\x0c\xad\x7a\xd4\x4c\x6c\x73\xb3\xc9\x51\x2f\x1c\xc6\x6d\x1c\xd2\x63\xb4\xf0\xc8\xac\xaf\xe8\x0a\xe2\x94\x5b\xa4\xaf\xc4\x4f\x51\xcc\x35\x6e\xd8\x6c\x94\x41\xbe\xad\xa7\xe3\x9d\x82\x2c\x0c\x22\xbe\xeb\x99\x74\x85\xa6\x16\x66\xac\xaf\x78\xce\x3d\x22\x0f\xa0\x9c\x49\x4c\x90\xac\x4e\x1c\xce\x9d\xa5\x32\xf8\x0e\xa1\x74\xb7\xa9\x63\xf9\x4b\x1b\xb1\x25\xb6\x2c\xf5\x14\x71\xf2\xc0\x55\x8f\xce\x17\x5c\x19\xa4\xbb\xad\xd7\x74\x86\x42\x85\x5c\xec\xe1\x25\xd3\x2e\xb1\xad\x5d\x93\x39\xe6\x74\x05\xba\xb1\x85\x73\xaf\x8a\x5f\x0b\x6a\x12\x50\xd2\x62\xd0\x28\x5e\xa7\x1b\x85\xe6\x81\x02\xa0\xc2\xe2\x34\x66\xbd\x38\x0f\xa5\x3a\x2b\xe2\xcd\x2c\xe7\x1e\x04\xe3\xd8\x43\x97\x0e\x36\x11\x5e\xcd\x91\x49\x99\x6b\xe1\x47\xe4\x80\xdf\x1d\x9b\x29\xa1\x2f\x63\x1f\x45\x2a\xdd\x5a\xd4\xfe\x1c\x68\xb6\xd9\x0c\x82\xf1\x8a\x65\xc4\x4a\xa8\xe2\x17\x82\x97\x9c\xc0\xe3\x29\x51\x5d\x8f\x20\x10\x8a\xb9\x6a\x91\x19\xd8\xac\x69\x1a\x8a\xc6\x34\x96\x2d\xdc\x1e\xea\xac\x2f\x4e\x07\x3d\x1d\xbc\x12\x38\x51\xbe\xc8\x7b\xd3\xc2\xde\x9c\xa8\xa7\xa7\x2d\xfb\xd0\xb7\xd2\x83\xbd\x24\xb6\x8f\xa4\xa1\xe2\x45\xd4\x0f\x7a\x5a\x34\x7e\x99\xd5\x97\xda\xae\xcf\xd5\xb9\xe7\xf8\xae\x92\xf4\xd8\xd9\x47\xb5\xf0\x84\x58\xe1\x64\x09\x07\xcd\x76\xee\x3d\x0c\xb4\x26\x81\xd1\x91\x2e\x39\xc4\x66\xe2\xc3\x5c\xb4\x83\x81\x8e\x9e\x86\x2d\x11\x67\x46\xa6\x8e\x6d\x62\xef\x51\x0c\x3b\x9e\x58\xc4\x4c\xc2\x41\x7a\xce\x0c\x03\xa2\xb4\xcc\x54\x57\xe8\x8c\x0b\x27\xd2\x30\x9e\x48\xa6\x76\x49\x18\xd3\xfe\x09\x7d\x20\xbc\x50\xf6\x5f\x24\x24\xe5\x07\x94\x31\xe3\x00\xd3\xd1\x03\xf7\xf0\x85\xe0\x01\x23\xba\xc5\x7b\xa0\x1e\xa2\xbe\x05\xa9\xa1\x07\xd2\xb6\xb7\xec\x8c\x2b\xc7\x23\x8d\x3b\x23\x60\xba\xd7\x19\x07\x68\x43\x57\xa0\xbf\xec\x77\x46\xe6\x6d\x4f\x4f\x22\xa2\xfd\xe0\x80\xe8\x64\x9d\xc6\x86\xad\xbd\x99\x30\x58\x8a\x38\x69\x31\x48\xae\xe5\x6a\x5b\x27\x48\x98\x3f\x9d\x02\xf5\xf6\xfc\xd8\x66\x5e\x2e\x58\xb6\xa9\xbb\x0b\x96\x94\xe4\x1a\xc1\x72\xd8\x29\xa5\x83\x66\x9b\xb6\x56\xd0\xf4\x74\xdf\xca\x6f\x6d\xe4\xf7\xfc\xee\x16\xcf\x43\x74\x12\x6e\x65\x5b\x3b\x58\x8a\x05\xe3\x1e\x75\x49\xb2\x65\x6d\xa5\x32\x7c\x41\x30\x4c\xf5\xcc\xae\x1e\xa6\x37\x08\x36\xdd\x38\x7f\x51\x06\x63\xe2\x51\xc7\x8c\xb6\xf0\x03\xbd\x33\xd9\x0e\xfa\x88\x2d\x9f\xec\x27\x04\xf9\xd1\xf3\xb4\x5f\x52\xfb\xba\x85\xe5\x60\xaf\xd7\x1e\xb6\xe7\x04\xfd\xc9\xc2\xe8\x75\x5f\x3e\xd7\x2e\x29\x13\x73\x31\x6b\xde\x11\x86\x15\x2e\x51\x89\x01\xe8\x9e\x9a\x7c\xa1\xbe\xf0\xc8\x52\x2c\x08\x20\x55\x0b\x5d\xb1\xd9\x2c\x43\x6d\xab\xf8\x24\x64\x14\x78\x46\xe6\xba\x3b\x18\xa8\x96\xb7\xe5\x9e\x68\xac\xa5\x3f\x92\x77\xb1\x42\xc9\xef\x24\xa1\xca\xd0\xe6\xf2\xdc\x25\x98\xd7\x71\xa2\x7b\x45\x96\x1d\x64\xba\x20\xc5\x09\x17\xf5\xa3\xf3\x5c\xa1\x58\x13\x89\x6e\x28\xba\xc5\x34\xb7\xae\x07\xbf\xe2\x3c\x17\x5c\xd7\x41\xa2\x2b\xa4\x34\x9f\xe9\x26\x5c\x2b\xa5\xba\x09\x79\xe7\xb9\x6e\x20\xba\xf1\x64\x37\xe1\x5a\x21\xdb\x4d\x88\xbf\xa5\xbb\xb9\x10\xe9\x32\xdf\x0d\xc4\xb5\x96\xf0\x26\xdc\x2b\x65\xbc\x09\x79\xe7\x29\x6f\x20\xba\xb5\x9c\x37\xe1\x5e\x21\xe9\x4d\x88\x3b\xc8\x7a\x33\xd3\xb1\xb3\xb4\x37\xde\xc3\xcb\xa7\x78\xb7\x0e\xc7\x56\x15\xc2\x3b\x46\x2a\xe5\xd9\xff\xf0\xc8\x81\x34\x7b\xa7\xbc\x67\x35\xd3\x73\xc8\x1e\xf3\xf9\x39\x34\x26\x09\x3a\xbc\xa9\x9c\xa1\x43\xb2\x2c\xc8\xff\x45\x6d\xf3\x50\xb2\xbc\x33\xdb\x16\x0c\x82\x11\xa9\xc5\x41\x0c\x4d\x2d\x06\x62\x8c\x2a\x30\x40\x93\xb9\xea\x33\xe2\x4e\xb9\x82\x4c\x70\x67\xf4\xa6\x9f\xa8\x35\x9e\x82\x6b\xd3\x7a\x06\x0d\x07\xc6\xb5\x9b\xd2\xc2\x9c\x75\x5d\x59\x0c\x67\x1d\x14\x16\x43\xca\x3e\x23\x9f\x61\x98\xea\x65\x8a\x0b\xd0\xad\x89\xda\x22\x91\xde\x62\x7d\x51\xd3\x8f\x5f\x71\x79\x31\x9c\x75\x50\x5d\x80\x90\xe6\x8b\x0b\xc9\xb4\x52\x6d\x21\xa9\x3b\x2f\x2d\x84\xe4\xc6\x2b\x0b\xc9\xb4\x42\x61\x21\x69\xbf\xd5\x15\xdb\xb1\xd1\x65\x59\x21\xa4\xb5\x56\x55\x48\xe6\x95\x8a\x0a\x49\xdd\x79\x4d\x21\x24\xb7\x56\x52\x48\xe6\x15\x2a\x0a\x49\xdb\x41\x41\x91\x9e\x87\x4d\xd5\x13\xeb\xb5\xfe\x13\x72\x9d\xcf\x04\xb9\xbe\x47\x67\x8f\x53\xc6\x5e\x67\xfa\x9a\x9e\xe3\x8a\x78\xcd\xec\xca\xd8\x23\x90\xd8\xe9\x51\x1c\xa0\x9f\xf4\xe8\x56\xc4\xa1\xdc\x30\x0e\xe0\x94\x83\xd6\xeb\x7b\xca\x17\x08\x52\x65\xf2\x90\x35\xf7\x63\xec\xe1\xcf\xc2\xd8\xef\x0a\xa7\xca\x25\x74\x09\xa7\x44\x24\x3a\x6a\x8b\x06\x31\x33\x86\x83\x21\x59\xd1\x29\x49\x2b\x0a\xbd\x2f\x84\x2d\x51\xf7\x24\xb5\xc4\x59\x15\x49\xd9\x44\xbe\xaa\xa1\xa7\x8d\x18\x7a\xe5\xf8\x36\x87\x9a\xac\x3b\x4b\x33\xb9\x6e\x59\xa3\x5f\x36\x62\x74\x58\xbe\x3e\x11\x93\xcf\x1b\x31\x39\x28\xbc\x9f\x88\xc5\x67\x8d\x58\xfc\x66\x85\xe9\x93\x19\xe4\x17\x4d\x0d\xf2\xb3\x96\x2c\x3e\x08\x93\x98\xb3\x3c\x4a\x62\xce\x12\x90\xc4\x9c\x55\xc4\x48\xb6\xab\xd4\xf5\x1a\xf8\x6a\xb0\x40\x5f\xe3\x65\x49\xbc\x21\x61\x82\x22\x2e\xd4\xab\xce\x25\x8d\x61\xcc\x3d\xfc\xb8\x65\x49\x58\xdc\xa6\x30\x12\x90\x57\x84\xd2\x44\x25\xb7\x61\x3b\x26\x61\x88\x8b\x1e\xb2\x7f\xd8\x98\x10\x74\xa3\x65\x01\x12\x94\x55\xd2\x67\x22\xf5\x8d\x75\xf4\x33\xdd\xbb\x51\x31\x08\xee\xbd\x3a\xce\x3c\x42\x12\x1d\x67\x19\x6c\xaa\x01\x1d\xf7\xa0\x56\xa1\x07\x43\xd0\xea\x18\x5f\x17\xa0\x59\x39\x77\x3f\xcb\xb8\x3b\x4b\xf1\x05\xc0\x60\x53\xd7\xef\x1a\x07\xbb\x18\xdf\x75\x00\x84\x81\x94\x52\x08\x98\xd0\xaa\x09\x08\x0c\xf8\xb4\x88\x7d\xd5\xf5\xdd\x57\x0c\x7e\x81\xeb\x3a\x40\xbf\x84\x94\xe6\xe1\xaf\x84\x6b\x25\xfc\x2b\x21\xef\x1c\x00\x0b\x44\x37\x8e\x80\x25\x5c\x2b\x40\x60\x09\xf1\x37\x0c\x2c\x17\x22\x5d\x82\x60\x81\xb8\xd6\x50\xb0\x84\x7b\x25\x18\x2c\x21\xef\x1c\x07\x0b\x44\xb7\x06\x84\x25\xdc\x2b\x20\x61\x09\x71\x07\x50\x58\x66\x3a\x76\x76\xb6\x7e\x01\xd6\x55\x3c\xb0\xf6\x0e\x9c\x6c\x16\x13\xde\x3c\xb2\x4a\x74\xff\xc6\x94\x57\x22\x34\x4c\xab\xf6\xd9\x3a\xe4\x8d\xf9\xaa\x11\x1a\x93\xb2\x11\xde\xd4\xaa\x1b\xe3\x35\x10\x92\x67\xc1\xea\xba\xde\x01\x75\x3c\x23\xb7\x32\x7e\xc1\x59\x0c\x5c\x72\x50\x9d\x69\x89\xbd\x14\x4f\xa9\x86\x25\xc3\xc8\x67\x05\xc7\x0d\x2d\xcb\x15\x33\x27\x2b\x58\xb6\x34\x20\x59\xa5\x36\xe4\xe3\x8c\xec\xd3\x40\x4c\xc1\xac\x06\xb2\xe5\x8b\xb8\x1d\x40\x3b\xbf\x1d\x60\x74\x71\x3b\xc0\xb0\x39\x34\x42\x05\xc3\x4a\xd5\x46\x46\x33\xb7\x03\x12\xe9\x2d\x56\x48\x35\xfd\xf8\x15\x17\x48\x46\x17\xb7\x03\x8c\x36\x6e\x07\x18\xb5\x6e\x07\x18\x7f\xd8\xed\x00\xa3\x8d\xdb\x01\x46\x8d\xdb\x01\xc6\xb7\xdb\x01\xbb\x62\xa3\xcb\xc2\xc8\x68\xf3\x76\x80\x51\xeb\x76\x80\xf1\x87\xdd\x0e\x30\xda\xbc\x1d\x60\xd4\xb8\x1d\x60\x74\x78\x3b\xc0\x68\xe1\x76\xc0\xc1\x8a\x48\xee\xdb\x95\x8a\x8d\x71\x11\x3e\x3e\xf4\x1c\x97\x3d\x1f\x79\x9e\xe3\x31\x64\xd8\xfa\x7b\x9f\x23\x97\x78\x51\x28\x2a\x3b\x99\x9f\xa5\x33\xce\xcc\x82\x80\x2e\x1d\x18\x5d\xe3\x3d\x72\x59\x91\xc0\x31\x9e\x7e\x26\xbc\x29\x59\x92\xdb\x2e\x71\x6f\x69\x63\xb2\x40\x46\x8f\x0e\x26\x3d\x9d\x0e\xb6\x64\x95\xaf\xda\x6c\x02\xc9\x5e\xbe\x6e\xa3\xa9\xd3\xbe\xa0\x4b\x73\x07\x7e\x74\xa6\x35\x72\x4e\x17\x33\x33\xc6\x47\xb2\xda\xed\xd1\x3f\xdb\x13\xe6\xfe\x9c\x19\xae\xe0\x74\x0f\x99\xc1\xa4\x24\xe1\xa4\x5c\x3a\xa6\x6f\x39\xe8\xfc\x9d\x1c\xb4\xf4\x01\x57\x9e\x0e\x46\x3b\x45\x13\x69\x1b\x4c\x73\xc3\x96\x2a\xeb\x3b\xa9\xc5\x44\x29\x26\x87\x27\x92\xfe\x79\x01\x3d\x89\x83\x28\x4f\x1f\xc6\xd7\x01\xf9\x11\x7d\xa1\x02\x21\x83\xb4\x06\xd1\x7f\x69\x1f\xa6\xd7\x2b\x31\x06\x3f\xc0\xa2\x15\x68\x4f\x2c\x8e\x23\x0f\x20\xe5\x44\xf9\xb1\xe0\x89\x90\x9a\x7f\x14\xeb\xbd\xf3\x51\x4c\xb6\xd9\x88\x41\x91\x0b\x60\x7e\x89\x11\x6e\x49\xc5\x5f\xec\xd7\x94\x66\x3b\x7c\x33\x94\xa3\xb2\x8f\x7c\xf7\xd8\xc8\xa5\x6d\x17\xfd\x81\xb1\x19\x25\xa3\xb2\x97\x41\xc1\xd8\x34\x18\x1e\x87\x66\xbe\x2b\x57\xd5\xfc\xdc\x89\xd6\xc8\x03\xb3\x2f\xe6\x50\x38\xfd\x22\x16\x07\xe6\x5f\x6e\x85\xdf\xe5\xb1\x43\x1a\x8d\x53\xba\xec\x67\x51\xe4\xf5\x0e\xdc\xfd\xf6\x97\xdb\xd1\x4d\xa1\xb3\xdf\x3e\x42\xfd\x7d\xc0\xd5\x21\x75\xa1\xa3\x03\xf2\xe3\xdc\xfc\xd6\xb8\xbd\xd9\xe3\x63\xb1\xf1\xed\xd4\x23\xa0\xdd\xe3\x5d\x41\x7c\xbc\x6b\xbb\x41\x82\x5c\xd6\x35\x12\x34\x66\x1d\x20\x41\x63\xcf\x11\xe9\x70\x49\x20\x08\x54\x6b\x02\x08\x92\xc2\x5b\xc4\x81\x6a\x7a\xf1\x2b\xc6\x81\xc6\xac\x03\x1c\x08\x84\x34\x8f\x03\x49\xa6\x95\x70\x20\x49\xdd\x39\x0e\x24\x24\x37\x8e\x03\x49\xa6\x15\x70\x20\x49\xfb\x0d\x07\xda\x8e\x8d\x2e\x71\x20\x21\xad\x35\x1c\x48\x32\xaf\x84\x03\x49\xea\xce\x71\x20\x21\xb9\x35\x1c\x48\x32\xaf\x80\x03\x49\xda\x0e\x70\xa0\xf4\x3c\x7c\xca\x9f\x12\xa9\x7c\xf5\x7a\xcc\x9a\xfa\xc0\xc8\xd8\x18\x3e\x85\xbb\xe6\xc2\xe0\x66\x3e\x38\x72\xd7\xa9\xc1\xe5\xad\x6c\xe6\x43\x04\x77\x37\xa3\x0f\x4f\x65\x5c\x9b\xf9\x0c\xc1\xf8\xc9\xd8\xdb\xcc\x07\x63\xae\x8d\xa7\x62\x6f\x33\x9f\x7d\xfa\x68\x7c\xb8\x7d\x2a\x16\xff\xb5\x11\x8b\x3f\x8c\x6e\x3a\x37\x78\x4a\xc4\x69\x47\x79\x8b\xff\xd6\xcc\xe7\xdb\x8c\xab\xd1\x17\xbd\x38\xbf\x6a\xc4\xcc\x8b\xf7\x57\x57\x6f\xae\xeb\x6f\x43\x3b\x8e\x39\x5c\xcf\x99\xb2\xfc\x31\x87\xcb\x92\x63\x8e\xa0\x4b\xad\x63\x8e\xe4\x58\xc2\x05\xd7\x18\xc3\xca\xdf\xc0\x02\xe4\x77\xc7\x93\x27\x34\x8c\x78\x75\x64\x8e\x3d\xea\x78\x94\x3f\xd6\xe1\x71\x4d\xa7\x55\xbe\x38\x46\xd2\xdf\xd0\xff\xd5\xa2\xff\x40\x18\x24\xbe\x36\x2f\xc7\x23\x0e\xf1\x88\xc9\x2d\x3d\x7c\x3e\x95\x58\x9c\x39\xcc\x6a\x0a\x75\xec\x7d\x3f\x7c\x7f\x71\xfb\xcb\x78\x84\x16\x7c\x69\xc1\xc3\xf0\x3f\x81\xe6\x41\x6a\x1e\x25\xf4\x4b\xc2\xa1\x6e\x5d\x60\x8f\x11\xde\x57\x7c\x3e\x53\x5f\xc5\xb9\x7e\x00\xea\x15\x7c\x87\x3c\x82\x57\x60\x6c\x4f\x0f\x3b\xa4\xf8\x2c\x38\x77\x55\xf2\xbb\x4f\x57\x7d\xe5\x3f\xea\xdd\x1b\xf5\xc2\x59\xba\x98\x53\xa8\x7a\x15\x30\xd8\x16\x64\x7d\xc5\x18\xf5\x89\x39\x8f\x2b\x87\x90\x52\x70\xee\x2b\x2b\x4a\xee\x5d\xc7\xe3\xa9\xce\xc1\x57\x92\xf6\xcd\xe0\xf3\xd7\x6a\xf0\xe6\x39\x2c\x26\x94\x53\x6c\xa9\x6c\x8a\x2d\xd2\x3f\xd5\x4e\x20\xb8\xbe\x57\xd5\x5f\x21\x54\x8d\xd1\x6f\x11\x5b\xb1\xba\x20\x8f\x58\x01\x98\xe8\xf1\xa9\xcf\x11\x05\xae\x4a\xfc\x0d\xfa\x33\xbc\x12\xef\x35\xf8\x25\xc8\x7f\x05\x97\xd1\xd9\x6f\xaa\x9a\x23\x0f\xa9\x18\x4c\x2a\x18\xbc\x17\x67\x0f\x2f\xce\x24\x0f\xf0\xcd\xfb\xc0\x17\x1f\x89\xc7\xa8\x63\x6f\x36\x31\x5b\x16\xbf\x50\x5f\x9c\x69\xae\x3d\x57\x10\x7f\x74\xc1\xc2\x6b\x7c\xad\xe4\x24\x60\xd7\xb5\x88\xca\x1d\x7f\xba\x50\x33\xd2\x4e\xcf\x4e\x1e\xe0\xa7\x94\x3c\xe8\x1f\x08\x2c\x21\xe5\xfc\xfc\x01\x7e\xca\x49\x39\x3f\x2f\x2b\xe5\xe5\xd9\x03\xfc\x94\x93\xf2\xf2\xac\xac\x94\x57\xe0\xb1\x57\x25\x3d\xf6\x6a\x87\xc7\x18\x7f\xb4\x08\x5b\x10\x51\x8b\x86\xc3\x27\x22\x5d\x87\x12\x76\x1f\x7f\x78\xac\x07\xdb\x9d\x26\x3a\x86\xc1\x19\x07\x5c\x6f\xe2\x98\x8f\xf9\x52\x9a\x3b\xae\x3a\xc1\x5e\x61\x2d\x1d\x3d\x8b\xf0\xee\xa4\xd0\x4f\xb0\x64\x81\x23\x67\xf1\xae\x34\x40\x16\x34\x2c\xce\x52\xf0\xfd\x12\x7b\x73\x6a\x47\x27\x0c\xea\x49\xbc\x33\x05\x17\x6a\xc3\xf3\x89\x7e\xee\x6f\x4f\xc4\xe4\xbe\x0b\xdd\x08\x13\x3b\x14\x27\x4b\xd7\x82\x37\xf9\x3f\x54\x81\x34\xb9\x98\xa1\x5e\xb0\x48\x06\xab\x08\x15\x88\xc1\x24\x78\x14\xb4\x81\x5b\xce\xb2\x50\x46\x56\x6f\x61\x46\x66\xe5\x0c\x96\x4c\xdf\xcd\x2c\xaa\x45\x5a\x47\x7f\x6f\x23\x45\x86\x22\xbd\xb7\x8e\x12\x0a\xcd\x88\xa9\xb5\xd4\x8a\x9c\x41\x1c\x05\x96\x22\x11\x96\x34\xdc\x52\x30\x6a\xdb\x99\xee\xa1\x61\x93\x7f\xe1\x43\x2c\xa5\xec\xb5\xae\xdf\xdf\xdf\x6b\xe0\x57\x0f\x7e\xb4\xa9\xb3\xd4\xc3\xb5\x57\x87\xf9\x49\x30\x23\x4c\x17\xaa\x33\xfe\xf7\xe9\xd2\xed\xe7\xe7\xa2\xb2\x8d\x48\x4a\x2c\x72\xe1\x58\xe2\x2a\x44\x34\x15\x60\x0e\xc4\x6b\x3a\x3e\xce\xda\x78\xa3\x81\x25\xd7\x26\xe8\x07\x8b\xd8\x48\x1b\x3d\x88\xb5\x9b\xda\xf3\x1f\x25\x88\x72\xe4\x09\xd7\x76\xd7\xad\x53\x99\x68\xa3\x75\x66\x33\xd8\xa4\x76\x7e\x8f\xf5\x16\x1e\x55\x24\xfe\xa8\xbb\x49\x67\xca\x40\x5a\x82\xb8\x53\x70\x94\x3a\xc1\xb0\x7d\x25\xce\x14\xb3\x28\xeb\x80\x92\x1f\x2d\x06\xf7\x8f\x6c\xd3\x75\xa8\x18\x80\x4c\x0e\x10\xe5\x98\x40\xe2\x04\x59\x66\x4a\xc2\x6e\x33\x8f\x30\x10\xd2\x0e\xc1\xb3\xd4\x2d\x9a\x93\x84\x2c\xd6\x76\x6f\xce\x92\x03\x23\x73\x93\x27\x95\xd3\x08\x0b\x8a\x42\xd9\xc2\xf9\xa5\x07\x15\x04\xad\xe8\x17\x46\x6c\x22\x65\x17\x4f\xf1\xfd\xdf\xc7\xac\x67\x41\xbf\x23\x79\x9a\xb3\xe3\xf4\x14\xfd\x8e\xe5\x29\x3e\x45\x7d\x8c\x9e\x41\xbf\x23\x79\xd2\x23\xf5\xa4\x25\xf4\x74\xd9\x71\x3c\x45\xbf\x6d\x9e\x6c\x0a\x41\xcb\xd3\xbb\xeb\x27\xbc\xc2\x61\xab\x32\x58\x61\x0f\x89\xe4\x13\xf5\x63\x64\x7d\xb3\xf9\x19\xa6\x5c\xf0\xf8\x18\x0e\xdb\x99\x2d\x62\xde\xb4\x78\xd7\xfe\xc4\xf4\xb0\xd6\xbb\x7d\xf3\xee\xdd\x68\x38\xa1\xd0\xb8\xa4\xb6\x3e\xf1\x6d\xd3\x22\x1a\xbc\xd4\x3e\xb1\xf8\x8c\x17\xb8\xc4\x0f\x82\xc6\xe8\xa2\x50\x4a\xb1\x9e\x1e\xee\xf4\xb0\xc7\x89\xa4\xfb\xff\x01\x00\x00\xff\xff\x17\x97\xf8\xdb\x13\x6a\x00\x00"

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 27155, mode: os.FileMode(420), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

