// Code generated by go-bindata.
// sources:
// index.html
// DO NOT EDIT!

// +build bin

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xe4\x5c\x6d\x73\xdb\x36\x12\xfe\x9e\x5f\x81\xf2\xd2\xfb\xd0\x29\xa5\xda\x71\x7a\xb9\x54\xf2\x8d\x63\xb9\x2d\xa7\xb1\xa3\xb1\xe5\xdc\x75\x3a\x9d\x1b\x88\x84\x24\xd4\x14\xc9\x02\x90\x6c\x55\xa7\xff\x7e\x8b\x17\xbe\x4a\xa4\x5e\xc8\x24\x55\xe3\x19\x4b\x24\x80\x7d\xb0\x0b\x60\x9f\x05\x40\x50\x9d\x2f\x7a\xef\x2e\x07\x3f\xf7\xaf\xd0\x44\x4c\xfd\x67\xe7\x1d\xf5\x85\x10\x5c\x10\xec\xc1\x85\xbc\x9c\x12\x81\x91\x3b\xc1\x8c\x13\xd1\xb5\x66\x62\x64\xbf\xb2\x4c\x96\xa0\xc2\x27\xea\x1a\xee\x96\xcb\x56\x0f\x0b\xdc\xfa\xf1\x66\xb5\x42\x21\x17\x24\x10\x9d\x76\x5a\xc2\x00\x4d\x84\x88\x6c\xf2\xfb\x8c\xce\xbb\xd6\x7f\xec\xfb\x0b\xfb\x32\x9c\x46\x58\xd0\xa1\x4f\x2c\xe4\x86\x81\x14\xeb\x5a\xce\x55\x97\x78\x63\x62\x65\x25\x03\x3c\x25\x5d\x6b\x4e\xc9\x63\x14\x32\x91\x29\xfc\x48\x3d\x31\xe9\x7a\x64\x4e\x5d\x62\xab\x9b\xaf\x11\x0d\xa8\xa0\xd8\xb7\xb9\x8b\x7d\xd2\x3d\x31\x40\xcb\xe5\x8f\x83\xeb\xb7\xc8\xea\x7c\x61\xad\x56\xb6\xfd\x0b\x1d\x21\xe7\xea\xd7\xf3\x8e\x4f\x83\x07\xc4\x88\xdf\xb5\xf8\x04\xb0\xdd\x99\x40\x14\xe0\x2d\x34\x61\x64\xd4\xb5\xda\x23\x3c\x97\xf7\x2d\xf8\xd8\x84\xf4\x0b\x09\x3c\x3a\xfa\xd5\xb6\xb3\x48\x1a\x80\xd3\x3f\x08\xef\x5a\x2f\x4e\x9f\x5e\x9c\x16\xe1\x78\x7c\x61\xbf\x38\x6d\x45\xc1\xd8\x42\x62\x11\x81\x89\x74\x8a\xc7\xa4\x2d\x13\x8c\xf9\x29\x28\x8e\x22\x9f\xd8\x22\x9c\xb9\x13\x3b\x57\xc1\xc9\xe9\x37\x4f\xf0\x5f\x5e\x05\x64\xb6\xf6\x84\x3c\x3b\x7b\x82\xff\x0a\xc8\xb3\xb3\x7d\x21\x5f\x9e\x3e\xc1\x7f\x05\xe4\xcb\xd3\x7d\x21\x5f\x81\xe1\xaf\xaa\x0c\x7f\x55\x62\x38\x17\x0b\x9f\xf0\x09\x21\x22\x6e\x78\x41\x9e\x44\xdb\xe5\x3c\x01\x83\xeb\x36\x0d\x3c\xf2\xd4\x92\xa9\x06\x81\xbb\x8c\x46\x22\x2b\xf2\x1b\x9e\x63\x9d\x6a\x15\x1d\x05\x71\xe6\x02\xd0\x6f\xbc\xcd\xe4\xa0\x67\x04\xae\x4e\x5b\x27\xad\x93\x57\x71\x42\x6b\x4a\x83\xd6\x6f\x50\xa7\x07\xce\x63\x4f\x31\x0d\x74\xf9\xe5\x12\x46\x67\x6b\x70\xf1\xc3\x0f\x57\xbd\x21\x0d\x56\x2b\x28\x67\x94\xd1\x12\xcb\x25\xf1\x39\x59\xad\xa0\x86\xf6\x94\xfa\x0f\x26\x53\x65\x04\xde\x6a\x65\xc5\x8e\xd9\x69\x6b\xe5\x8c\xfe\x6d\xe3\xdb\xe7\x9d\x61\xe8\x2d\x4c\x62\x80\xe7\xc8\xf5\x31\x87\x16\x85\xcb\x21\x66\x48\x7f\xd9\x1e\x19\xe1\x99\x2f\xe2\x5b\x2e\xc0\x57\x5d\xe8\x88\xc8\x42\x2c\x04\xd7\x92\xc5\xe9\x18\x12\xa1\x4f\x92\x0a\x3d\x9a\xa0\x49\x2f\x05\x9b\x08\xb3\x47\xfe\x8c\x7a\x71\x99\x42\x29\x83\x2e\x35\x23\x0c\x3c\xdb\xb7\xa7\x9e\x7d\x82\x22\xec\x79\x34\x18\xdb\x3e\x19\x01\x8d\xc4\x5d\x10\xcb\x0f\x67\x42\x84\x41\x01\x42\x84\xe3\xb1\x4f\x24\x84\x8f\x23\x4e\xbc\xb8\x6f\x75\x61\xd3\xca\xba\x90\x54\x4e\x97\x8a\x93\x31\x1b\xcb\xae\xfb\x9b\xc1\x4a\xb2\x33\xd5\xaa\x11\x10\xe1\xa4\x5a\xce\xec\x30\xf0\x17\xf9\x22\x50\x68\xa0\xf5\x48\x5b\x07\x7a\x01\xc4\x2a\x90\xd4\x68\x85\x6a\xd7\xa0\xfe\x34\x92\x6d\xdd\x88\xb9\x4e\xc0\x88\x7a\x5d\x6b\x02\x2d\x9b\xef\x87\x21\xc3\x81\x07\x69\x34\x3a\x49\xfd\x1d\x3a\x43\xc6\x03\x28\x0f\xf1\x41\xf2\x39\xca\x06\x8d\x42\x33\x67\xb3\x3a\x6d\x9c\xab\xb5\x0d\x63\xa7\x30\x92\xa4\x1a\xc5\x7e\x4b\x07\xa1\x4e\x40\x15\x1d\x7b\xde\x99\xf9\x19\x1b\xe2\xa2\xf0\x55\xec\x7e\x9f\xc6\xe5\xb0\x2b\xe8\x9c\xac\x37\x1e\x36\x06\xcb\x60\xc7\x5f\xb7\xdb\x8f\x8f\x8f\x2d\xb0\x98\xc1\x7f\xcb\x0d\xa7\x6d\x1d\x1d\x81\x01\x7c\x82\x39\xe1\x6d\x1f\x0b\xc2\xc5\xbf\xdc\x69\xd4\x8d\xad\x7e\x7f\x75\x7b\xe7\xbc\x5b\x6b\x15\x85\x1f\x07\x57\xbc\xde\x6b\x3e\x2d\x55\x36\x76\x10\x60\x2c\x94\xb9\x06\xca\x61\x63\x1a\x48\xf7\x42\x23\xca\xb8\x50\xa9\xeb\x36\xb9\xa1\x47\x0a\x50\x32\x09\xf8\x74\xad\x01\x94\x8a\x49\xd7\xf6\x9c\xbb\xc1\xad\xf3\x46\x76\xa2\x14\x68\x58\xe7\xba\x8a\xd2\xe8\xef\xc1\x90\x47\xdf\x69\xb7\x90\x83\x88\x46\xeb\xc5\x32\xc3\xd1\xe9\x4b\x4b\xd6\xbc\xc3\xd8\xf2\x27\xb4\x70\xb6\x66\xe1\xac\xda\xc2\xfb\x63\xb3\xd0\xc7\x45\x0b\x7d\x5c\x69\xe1\xdb\x8b\x06\x2c\x6c\xcf\xfc\x2a\x4e\xca\xdc\xc2\x0d\x18\x61\x22\xed\xf6\xd8\x98\x2b\xc3\xc2\xc7\x62\xcc\x94\x06\x4e\xc9\x34\xcb\x6e\x32\x5c\x9e\xc5\x71\x33\x1c\x8d\x60\x06\x62\x9f\xe4\xd8\x6d\xb9\x14\x64\x1a\x49\xa2\x41\x16\xc4\x74\xa8\x95\xbf\x7e\xad\x2f\xfe\x0b\xed\x40\x7c\x85\xd8\x92\xed\xb2\x99\x5b\xbd\x51\xb1\xc2\x97\xf5\x2a\x94\x80\x1b\xea\xcb\xb5\xdb\xf6\x86\x70\xa3\x59\xc3\x0d\xa1\x10\x2b\x1a\x82\x36\xdd\x10\xb4\x91\x86\x88\x78\x51\xad\x93\x6f\xea\xe9\x25\x11\xeb\xeb\x35\x1f\x37\xad\x97\x44\xdc\xa6\x57\x72\xb3\x65\xbe\x1e\x0b\xcc\x61\xc6\x2b\xa9\x01\x75\xe3\xb8\xb5\x5a\x7d\x57\x9c\x38\x9b\xf9\xb2\x9c\x42\xab\xe5\xf2\x72\xd9\xfe\xea\xd9\x57\xed\xd5\x6a\xb9\xd4\xfa\x65\x14\x1e\x62\x58\xbf\x7a\x72\xb5\x21\x27\xaf\xb0\x48\x8c\x27\x05\x00\xff\x23\x7c\xcb\x35\x72\x70\xe9\x53\xf7\xa1\xbb\x14\x13\xca\x5b\x13\x98\x2f\xf9\x44\xa5\xac\x40\x07\xd5\x64\xab\x95\x2c\x7e\xa9\x2f\xa1\xe6\x67\xc9\xfc\x2d\x2d\x60\x3d\xf9\x78\x48\x7c\xa4\xbf\xe2\xf9\x7a\xb2\x4c\x6d\xbd\x91\x8a\x64\xe8\xee\x5c\x1a\x38\x80\x66\xd0\xb3\xaa\x73\xb3\x5a\xd8\xcd\x16\x46\xc7\x93\x26\x8d\x49\x54\x41\xb5\xcd\xda\xd5\x18\x33\x92\xc0\xcb\x61\xc0\x72\x4b\x96\x79\xa4\x62\x82\xe4\x1d\x0c\x46\x39\xb2\x00\x5e\x7e\xe8\xe5\xd5\x72\x09\x33\xd9\x31\x41\xcf\xe9\xd7\xe8\xb9\x1b\x32\x82\x5e\x77\x91\x0e\x23\x97\xfd\xfb\xd6\x5b\xca\x65\x4b\x0a\x06\xba\x5f\x08\xc1\x7e\x22\x0b\x24\x49\xc9\x06\xbc\xe1\xc2\xbe\xb1\xb4\x50\xeb\x46\xd9\x7c\xde\x11\x5e\xec\x0d\x2a\x08\xaa\x06\x45\xea\x32\x08\x1f\x19\x8e\x12\x0b\x13\xb1\x4e\x5b\x78\xa5\xa2\xc9\xa2\xb4\xd0\x7a\x33\x4e\x22\xc2\x5c\x98\x26\xea\xe9\x9c\x5e\xe0\xa4\xa9\xdd\xb8\x82\x7b\x4e\x98\x52\x2d\x57\xad\x4e\xcd\x84\xc8\xf3\x0f\xab\xc5\xdd\x82\xaf\x2b\xa1\x12\x3f\x9e\x0e\xff\xc6\x54\xac\x2b\xa1\x53\x9b\xd6\xc2\xa6\xc1\x9c\xb0\x64\xe1\xb9\x41\x1b\x07\xfc\x67\x5d\x1b\x9d\xba\x51\x9b\xb6\x60\x99\xf1\x9f\xff\xda\xc5\x1b\x04\x96\x5b\x70\xb2\xd0\xf3\x28\x1d\xe2\x7d\xcc\xf0\x54\x76\x83\xca\x06\x8b\x94\xff\xde\x84\xc1\x1f\x84\x85\xe8\x79\x24\x7d\x20\x40\x96\xce\x55\x9f\xf6\x24\x04\xd3\x2c\x94\x2c\xba\xec\x09\xf5\x3c\x12\x58\xb1\x03\x64\xb6\x16\x41\xe5\x98\xb0\xc5\x24\x4b\xe5\xc9\x9d\xcc\x28\x6b\x65\x95\x2f\x47\xea\x97\xfb\x08\xc0\xa8\xda\xab\xbc\x1c\x00\x7b\x09\xc8\x3e\xca\x0b\xb4\x8d\x9d\xca\xb0\x78\xf3\x45\xa4\xbb\x2f\x55\x11\x2f\xe6\x29\x1d\xf1\x44\x1a\x82\x54\x63\xef\xc3\x78\xde\x68\x4f\xc2\xf3\x28\x7f\x48\x47\x42\xef\xfb\xcd\x5c\xe7\x8d\x0c\xd5\x79\x94\xc9\x25\xbd\xa5\x05\x5b\x3d\xca\x6e\xe0\x56\xf7\x3a\x42\xd2\x5b\x32\xfe\x90\x61\xbc\x64\x93\x40\xef\x0d\xc0\xf8\xd3\xf2\x64\x9e\xc8\x6b\x0f\xc8\x27\xc7\x03\xff\x10\xe8\x8c\x6a\x59\xe8\x38\xb9\xd2\xc3\x37\x90\x75\x6e\x4b\x45\x65\x8f\x19\x5e\xf8\xb2\xb4\xf4\x04\xb3\xe7\xe1\x04\xb0\xae\x80\x35\x36\x23\xc9\x1a\x26\xa9\xda\x91\xa9\x79\xc7\x46\x71\xde\xc5\x1c\x53\x3f\xaf\x54\xd1\xda\x35\xc5\xd0\x70\x9c\x21\x95\x8d\x2c\xa3\xb0\xc1\x7b\xfa\x3a\x29\x6e\x8c\xbd\x6c\x01\xc4\x2f\xd7\x6d\x99\x65\x40\xbf\xdc\x68\xd2\x7d\xbe\xc4\x07\x6c\xed\x99\xdc\x02\xdc\xa4\xa1\x57\xd2\xda\xf7\x26\xeb\x03\xea\x24\x42\x81\xfd\x75\xa5\x54\x66\x89\x56\x03\x29\x92\x51\xab\x16\xd9\x7b\xa3\x03\xb9\xbe\x37\x6a\x82\xea\x37\xb2\x9d\xde\xf9\x25\xc1\x6c\x2a\xa7\x99\x16\x7a\xaf\xf6\xe9\x41\x3b\x55\xed\x03\x3a\x41\x56\x4f\x3d\xe0\x81\xda\x94\xe2\x07\x60\x9c\x22\xeb\x3a\x9c\x05\x42\x6e\x0a\x1f\x0c\xf2\x02\x59\xca\x21\x01\x22\xc3\xfe\xb2\xd1\x92\xa8\x60\x76\xb1\xcb\xc2\x55\x36\x34\x1c\xa4\xc2\x19\xb2\xee\xd5\xce\x76\x5e\x83\x83\xb0\x5e\x22\x4b\x8d\xad\x35\x73\xea\xc4\x2c\x13\x69\xea\x87\x2c\xba\x6f\xc8\xa2\xa3\x74\x38\x3b\x25\x01\x8b\xc6\x01\xcb\x44\x2b\x3a\x6a\x1d\x1a\xa8\xb2\xa2\xda\x95\x93\x94\x0f\xc3\x20\xaa\xaf\xd0\x9b\x9f\x07\x57\x77\xc8\xb9\x41\xd3\xd0\x9b\xf9\x21\x3a\xfb\x21\xcb\x26\xa0\xc2\x9b\x85\x20\xdc\x09\x0a\x64\xa2\xab\x30\x48\x6f\xa8\xe0\x12\x02\x22\x02\xe2\xc4\x0d\x03\xaf\x80\xd1\x23\xbe\xc0\xb2\x54\x11\xe7\xc3\x5b\xf6\xee\x7e\x50\x6d\xda\xbb\x99\xd8\x6a\x9b\x04\xd9\x6e\xdc\x1a\xd2\x87\xb4\x2e\xc2\xee\x03\xd1\xcd\x5e\x66\x5e\x5f\x17\xa9\xee\xbb\x7e\x8a\x53\x6d\x61\x09\xda\xc7\xb0\xb1\xaa\x0f\x8d\x5a\x5b\x7a\xb1\x9f\x41\xda\xc9\xcc\x8f\xda\x97\x84\xb1\x90\x55\x76\xe5\x95\x2a\x51\xdd\x93\x57\x09\x4a\xb5\x85\x9b\xb1\x3e\x82\x7d\x55\xdd\xa8\x95\xda\xd2\x8b\x57\x29\xce\x2e\x26\x96\xf7\x61\xad\x29\x0f\x3d\x74\xca\xe3\x34\x32\xe5\xc9\xad\x6e\x1d\x98\x81\xb0\x11\x76\xc9\xd6\x45\x25\x0a\x42\x36\x95\xb1\x19\xe2\x51\xe8\xcb\x36\x91\x11\xe9\xdb\xcc\x74\x42\x31\x5d\x67\xb8\x9d\xd4\x4d\xcd\x9d\xf6\x30\x15\xfe\xba\x28\xb9\xb9\x93\x54\x59\xe8\x97\x9c\x2c\xfa\x1f\x8a\xfd\x33\x05\xa9\xe4\xa5\x6d\x1a\x54\xbb\x7b\x99\x12\x66\x78\xa5\x30\x55\x1e\xb5\x4d\x85\xca\xb1\xba\x51\x83\xc6\x96\xf9\xb4\xa9\x29\xd3\x94\x4c\x0f\xd8\xd7\x04\xa9\xd4\x29\xae\xaf\xae\x37\xcf\x9c\xa0\x94\x99\x3a\x3d\x50\x68\x18\x25\xd6\xfa\x89\x4a\xcd\x0c\x0d\x25\xf3\xa0\x34\x67\x97\xed\x32\x23\xf0\xbd\x59\x04\xef\x22\x50\xde\x94\xd9\x75\xaf\x82\xcd\xae\x36\xf5\x83\x42\x53\xdf\x0e\x6b\xbd\xbc\x82\x8d\x2e\xc3\x00\xf0\x40\x52\xba\x26\xd3\x4f\xba\xe7\x26\xfb\x69\xcf\x3d\x3a\x6f\x9f\xf2\xaa\x99\x1b\x73\xad\xd8\x23\xea\xfb\x56\xf2\x78\xb0\xb4\xc7\xe4\x43\x2f\xf9\x67\xfa\xac\x1f\x72\x2a\x4f\x88\xa4\x1b\xa5\xd0\x47\x0a\x05\xa9\xcf\xe4\xb1\x46\xb2\xf8\xd0\x00\x5b\xc5\xd5\x49\x29\x1a\x8c\xad\x78\xe9\x21\x3f\x3a\x58\x89\xca\x07\x32\x03\xb3\xc4\x93\x52\xab\xec\x13\x18\x23\xae\x08\x0f\x0d\x45\x60\x0f\xfd\xd0\x7d\x48\xe2\xb1\xfe\x02\x46\x2c\xd5\x60\x72\x66\xc9\x0f\xb9\xc1\x44\x83\x51\x68\x25\x7b\xd4\x20\x0d\x25\x52\x76\xd4\x2a\x99\x33\x2a\xd2\x34\xf3\x48\x4e\x2d\xb1\xb2\x03\x7b\xbd\x0e\x9d\x5d\x1c\xcb\x26\x3d\x31\x59\x92\x93\x19\x45\xda\x28\x60\xeb\x11\x1d\xa7\x4f\xd1\x53\x7f\x36\x8f\x1b\x4f\x4b\x4e\x9f\x55\x4d\x9a\x4c\x71\x98\xa2\xe0\x45\xf6\x94\x81\x11\x55\x8f\xc6\xd6\x0e\x2e\x69\x4b\xbc\x0d\x87\x0c\xd6\x8f\x09\x18\xd2\xcc\xf0\xe7\x9a\x7e\xb2\x9f\xc6\x2c\x9c\x45\x48\x6b\xa6\x6f\xe2\x03\x78\xfa\xe6\x59\x4e\x81\x0d\xde\x50\x78\x20\x89\xde\x12\xce\x7b\xe9\x30\xf1\x90\xac\x46\x0d\x89\x74\x50\x6e\x01\xd2\x7e\x8b\xae\x43\x46\xb6\x21\x55\x9b\xbd\xf6\x80\xd8\x2a\x29\x9a\xf2\xc0\xc7\xec\xfc\x5b\xa0\x8f\x3d\xfb\x3e\x68\x5d\x0c\x79\xe8\xcf\x04\xf9\xd3\x0f\x82\x9b\x0c\x57\xd4\x1b\x04\xdb\x90\x9a\x1e\x04\x92\x54\x34\x89\xab\x9b\x2d\x8f\x51\x34\x7b\xa4\x27\x07\xf6\x25\x7e\x6f\x74\x10\xef\xab\x4d\xd3\x83\x69\x3f\x27\xbd\x2b\xeb\x83\x50\x53\xa4\xaf\xea\xaf\xe2\xfc\x9e\x7c\x48\x34\xe3\x78\x4c\x6a\x52\x7f\x66\x73\xf9\xb8\x99\xbf\x37\x3a\x1e\xe2\x07\x5d\x9b\xe1\xfd\x12\xa0\xcf\x8a\xf6\x61\x04\x1f\x1f\xeb\x2b\xb7\x6b\x82\xf4\x4b\x80\x3e\x21\xe7\xc7\xcf\xb9\x0e\xa7\x7c\x7a\x18\xe5\x3b\xb5\x28\xdf\x39\x84\xf2\x9d\xe6\x28\xdf\xd9\x46\xf9\xc9\x06\x16\xaf\x49\xf9\xce\x5f\x85\xf2\x9d\x23\xa2\x7c\xa7\x29\xca\x2f\x01\xfa\xac\x28\xdf\x39\x46\xca\x77\x9a\xa2\xfc\x12\xa0\x4f\x48\xf9\xb4\x36\xe5\xcb\x63\xf0\x87\x70\xbe\xde\x93\x3b\x98\xf4\xf3\xe2\xbb\xb2\xbe\x94\x6a\x8a\xf6\xb5\x06\x55\xbc\x0f\x25\x42\xb6\xa8\xc9\xf9\xd9\xbd\xcb\xe3\x26\x7d\xb0\xe4\x78\x58\x5f\x2a\xdb\x0c\xed\x97\x21\x7d\x56\xbc\x2f\x47\xf1\xf1\x11\xbf\xf6\xbd\x26\x98\xbf\x0c\xe9\x13\x52\x7f\xf2\x38\xe5\x70\xee\x8f\xf8\x41\xd4\xdf\xe7\x75\x98\x3f\x27\xbd\x2b\xf1\x83\x50\x53\xbc\xaf\xea\xaf\xa2\xfd\x3e\x0b\x61\xaa\xcf\x6b\xcf\xf6\x55\x45\x7f\x05\xe2\xef\xf3\xe3\xe1\x7d\xd0\xb5\x19\xda\x2f\x01\xfa\xac\x58\x1f\x46\xf0\xf1\x91\xbe\x72\xbb\x26\x38\xbf\x04\xe8\x13\x52\x7e\xc4\xeb\x32\xfe\x7c\x7c\x10\xe3\xbf\x1f\xd7\x61\xfc\x9c\xf4\xae\x8c\x0f\x42\x4d\x31\xbe\xaa\xbf\x8a\xf1\xdf\xe3\x31\xc3\x81\xa8\xc9\xf7\xaa\x9a\xbf\x02\xdf\xbf\x1f\x1f\x0f\xdf\x83\xae\xcd\xf0\x7d\x09\xd0\x67\xc5\xf7\x30\x82\x8f\x8f\xef\x95\xdb\x35\xc1\xf7\x25\x40\x9f\x90\xef\xe7\xe3\x3a\x7c\xcf\xf7\x3c\x17\x17\xc1\xbc\x37\x13\x16\xee\x36\x9f\x89\x8b\xb8\x39\x12\x17\x51\x79\x22\x4e\x0a\xb5\xfa\x4e\xaf\xe2\x6d\x5f\x73\xa4\x4c\xbe\xdb\x93\x96\xde\xe5\x10\x5a\x22\x71\x5f\x90\x78\x96\x0c\x59\x95\x6b\xde\xdd\xdd\x03\xb0\xcf\x68\xc8\xa8\x58\xec\x29\x76\x43\xdd\x1d\xcf\xeb\x25\x22\x77\xf4\x8f\x7d\x45\x6e\x09\xa7\x9e\x3a\xbc\x57\x26\x26\x8f\xf6\x11\x66\xe5\x9b\x61\x40\x0b\xaf\x61\xe4\xb3\x0b\x6f\x69\xd4\x3a\xc9\x17\xcf\x43\xf6\x3e\xc8\x97\x59\x12\x7d\xcc\x17\xaa\xfa\x5c\xbd\x50\x05\x03\xaf\xf6\x3b\x44\x12\xea\x14\x59\xf7\x0d\x41\xbd\x00\xa8\xbb\xab\xdb\x03\xdf\xcf\x92\x08\x67\x60\xd7\x6d\x23\xba\xbc\x44\xd6\x8d\xd3\x08\xd2\xb7\xc8\x7a\xef\xdc\x0e\x1a\xc1\xfa\x07\xb2\x6e\xaf\xee\x1a\x81\x7a\x85\xac\x81\x73\x7d\x15\x63\x19\x2f\x3a\x10\xec\x9f\xc8\xba\x7c\x77\x7d\x7d\x71\xd3\xd3\x9d\x57\xeb\xc8\xa6\xe1\xea\xfa\x27\x36\x33\x67\x81\x01\xaa\xf8\x52\xbe\xfa\x69\x89\x4d\x2f\xc7\xb6\xb4\xbf\xa9\x8b\xf8\x0d\xd6\x3d\x6a\x9d\x8f\xd5\xdb\x13\x96\x0e\x16\x0f\x64\x21\x7f\x05\x45\x27\xc5\xf4\x95\x3b\xd1\xff\x32\xa1\x2e\xf3\xdb\x5f\x7a\xfe\xad\x8e\xa3\x97\x72\xd4\x0e\x5a\x24\x01\xcf\x44\xb4\x29\x76\x27\x29\x3b\x99\x5a\xae\x21\x51\xca\x6d\x0e\x6f\x73\x5d\xc8\xc4\xb8\xd9\x4c\x05\x39\x89\xd3\xba\xbf\xcf\x44\xb9\x84\x5b\x33\x59\x9b\xa8\x57\x65\xaf\xbd\x20\x97\xcf\xee\xb3\x70\x0e\x84\xcf\x2a\x8a\xdc\x09\x2c\xaa\x20\x8c\x69\x23\xea\xcb\x75\x9e\x98\x6c\x23\xfa\x1d\xda\x92\xc3\xa4\xc1\x9d\xec\x32\x7d\xa0\x23\x44\x7e\x47\xeb\x3d\xe9\x21\xc1\x66\xa4\xc4\xbd\x0a\x23\x07\xe5\x10\xab\xca\x27\x8e\x72\x68\xf0\x8a\x27\x55\x7b\x07\xaf\xcc\xfa\xae\xb1\x57\x63\x7a\x85\x63\xe2\x69\x96\x1c\x34\xa5\x99\xf1\x90\x29\x2d\xa0\x06\x4c\x69\x6e\x8f\x32\xe2\x0a\xf5\x6c\xab\xa1\x33\xe7\xc9\x78\xa9\x41\x61\x09\xd7\xe6\x7e\x6e\xe7\x2d\xa4\x6c\xfd\xc9\x1d\x43\x5e\xb2\xec\x7e\xbf\xf4\x53\x60\x79\xfd\x5a\x73\x86\x31\xcd\xab\xcd\x80\x7d\xe1\xd3\x71\x70\xa9\xd3\x35\xab\x6d\xd4\x31\xf7\xdb\x3f\x32\xdd\x88\xc4\x73\xff\xbc\x96\x05\x82\x96\x3f\x17\x84\x19\x11\x59\x19\xd5\x88\xd9\xd7\xc3\xb0\x69\xd7\x49\x62\xe0\xff\x03\x00\x00\xff\xff\x75\x97\x92\x96\xd6\x58\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 22742, mode: os.FileMode(384), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

