// Code generated by go-bindata.
// sources:
// index.html
// DO NOT EDIT!

// +build bin

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5c\xef\x72\xdb\x36\x12\xff\xee\xa7\x40\x39\xcd\x35\xed\x98\x64\xe2\xd8\xbd\x9c\x6b\xf9\xc6\xb1\xdc\x56\xd3\xd8\xd1\xc4\x72\xef\x7a\x9d\x4e\x03\x91\x90\x84\x98\x22\x79\x00\x28\x5b\xd5\xe8\xdd\x6f\x01\x82\x14\x49\x91\x92\x48\xff\x93\x6f\xf2\xc1\x96\x48\x60\x17\xbb\x8b\xc5\xee\x6f\x01\x8a\x47\x5f\xb5\x3f\x9c\xf6\x7e\xeb\x9e\xa1\x91\x18\x7b\x3b\xc7\xb3\xd9\xd7\x13\x74\xd8\x42\xd6\x07\x2e\x88\x2f\x7e\x25\x8c\xd3\xc0\x9f\xcf\x8f\x54\x33\x42\xc7\x47\x23\x82\x5d\xf8\x22\xbf\x8e\x89\xc0\xc8\x19\x61\xc6\x89\x68\x19\x91\x18\x98\x6f\x0d\xdd\x24\xa8\xf0\x88\xfa\x0e\x57\xb3\x99\xd5\xc6\x02\x5b\xa3\x80\x0b\x1f\x8f\xc9\x7c\x8e\x02\xc5\xfe\xc8\x5e\xf4\xd3\xec\x46\x42\x84\x26\xf9\x6f\x44\x27\x2d\xe3\xdf\xe6\xd5\x89\x79\x1a\x8c\x43\x2c\x68\xdf\x23\x06\x72\x02\x5f\x92\xb5\x8c\xce\x59\x8b\xb8\x43\x62\x64\x29\x25\xe7\x96\x31\xa1\xe4\x26\x0c\x98\xc8\x74\xbe\xa1\xae\x18\xb5\x5c\x32\xa1\x0e\x31\xd5\xc5\x2e\xa2\x3e\x15\x14\x7b\x26\x77\xb0\x47\x5a\xaf\xad\x57\x9a\xd5\x6c\xf6\x73\xef\xfc\x3d\x32\x8e\xbe\x32\xe6\x73\xd3\xfc\x9d\x0e\x50\xe7\xec\x8f\xe3\x23\x8f\xfa\xd7\x88\x11\xaf\x65\xf0\x11\x70\x77\x22\x81\x28\x0c\x60\xa0\x11\x23\x83\x96\x61\x0f\xf0\x44\x5e\x5b\xf0\xaf\x8c\xd3\xef\xc4\x77\xe9\xe0\x0f\xd3\xcc\x72\x8a\x19\x70\xfa\x17\xe1\x2d\xe3\xcd\xde\xed\x9b\xbd\x94\x9d\x9c\x86\xf9\x3c\xe1\xca\x93\x2f\xe6\x9b\x3d\x2b\xf4\x87\x06\x12\xd3\x10\x74\xa5\x63\x3c\x24\xb6\xbc\xa1\xed\xb0\xe0\x8d\xc3\xd0\x23\xa6\x08\x22\x67\x64\xe6\xc6\x79\xbd\xf7\xea\x16\xfe\xd6\x8e\x04\x7d\xac\x9a\x9c\xf7\xf7\x6f\xe1\x6f\x3d\xe7\xfd\xfd\xba\x9c\x0f\xf6\x6e\xe1\x6f\x3d\xe7\x83\xbd\xba\x9c\xdf\x82\x35\xde\x6e\x60\x8d\xb7\x15\xd6\xe0\x62\xea\x11\x3e\x22\x44\x24\x93\x22\xc8\xad\xb0\x1d\xce\x8b\x3c\xe1\x96\x4d\x7d\x97\xdc\x5a\xb2\x51\x33\xb2\xf5\x6a\x3a\x3e\xea\x07\xee\x54\xdf\x74\xe9\x04\x39\x1e\xe6\x20\x9f\x08\x42\xb3\x8f\x99\x91\xac\xa4\x92\x36\xd3\x23\x03\x91\x74\x90\x5d\x22\x2f\xe9\x31\x26\x7e\xb4\x68\x89\x05\xcf\x5c\x16\xf8\x45\xa1\x8b\x05\x01\xb9\xe1\x03\x9b\x2e\x19\x50\x1f\xd4\x89\x3f\xff\x4c\x96\xae\x91\xa3\x57\x6e\x2e\xc8\x38\xf4\x80\x12\xe9\xbe\xfc\xf0\xb0\x48\x84\x2c\x88\x20\x36\x8c\x55\x18\xdd\xce\xc9\x53\x2e\x5e\x71\xc0\xa3\x90\x91\xc2\x3d\xb8\x1b\x70\x24\xa3\x0c\xe5\x82\xd1\xbe\x1c\x6c\xb9\xd7\xf1\xc3\x4a\x10\x85\x7f\xf3\xfb\x3c\xfc\xe1\x88\x87\xd8\xdf\xc8\xa6\x51\x28\xe8\xb2\x45\x15\xb3\x55\x56\xd5\x64\xb1\x4d\xe5\x60\xcb\xb2\x3c\x81\xfa\x1e\xae\xab\xbe\x17\x60\x17\x4f\x86\xb5\xf5\x4f\xe8\x1e\xc4\x00\x76\xe4\xed\x94\x12\x94\x2e\x3d\x46\x87\xa3\xe6\x6b\x0f\xa7\x7d\x31\x1b\x52\xdf\x7c\x85\xfa\x91\x10\x81\x8f\x38\x81\x98\xe3\x62\x36\x45\xa3\xc0\xf3\x82\x9b\x24\x94\xc8\xdc\xc8\x0f\x6d\xfb\xe6\xe6\xc6\x82\xa5\xc5\xe0\xcf\x72\x82\xb1\x1d\x27\x53\x1b\x02\x12\xc1\x9c\x70\x5b\xda\x8d\x8b\x7f\x3a\xe3\xb0\x15\x07\x9f\xa5\x55\x9b\xa4\x5f\xdc\xdc\x1c\xe9\x85\xc4\x0c\xa1\xc2\x0c\x2a\xc9\x87\x98\xe1\x31\x87\xa9\xc9\xd8\x6b\xc8\xa8\x6b\xf6\xbd\xc0\xb9\x46\x21\x76\x5d\xea\x0f\x4d\x69\xc2\x57\x07\xdf\x97\x46\x36\x0f\xec\x41\xcc\xd7\xa0\xb5\xd9\x0f\x98\x4b\x98\xec\x6d\x6c\x30\x2f\x4e\xe0\x45\x63\x1f\x69\xfa\xd7\x68\xa5\xff\x81\xe3\x10\x6f\x4c\xc6\x19\xc6\xab\xdc\x2e\xed\x5e\x0c\x66\x59\x53\x3c\x0f\xa5\xdd\x41\x1d\x9d\xa1\xf7\xf3\x57\xd9\x09\xa3\x3a\x3a\xcb\xee\xcf\x5f\x69\x5a\x6b\x9e\xe9\xff\xc3\x3c\x87\xbc\x8e\xca\xd0\x7b\xa5\xca\xdc\x61\x34\x14\x59\x60\xf7\x19\x4f\x70\x7c\x37\xd5\x74\x82\x19\x92\x91\x0f\xb5\x90\x2e\x74\xe6\xf3\x1f\x20\x31\xa9\x5e\x9b\x30\x2a\x96\x50\x88\x33\x67\x81\x1b\x3f\x73\xf8\x06\x65\x88\xd5\x3b\xf9\xe9\xa7\xb3\x76\x9f\x42\x35\x36\xa6\xbe\xdd\x8f\x7c\xd7\x23\x16\x7c\xb5\x3e\xf3\xd9\x8c\x78\x1c\xea\x2a\xa0\x4c\x1a\xd4\x4d\xdf\x5d\x04\xff\xe3\x82\x4c\xb6\x86\x9c\x12\x85\xea\xda\xcf\xfe\x6e\xe7\x3b\x7b\x3e\x9f\xcd\x62\x23\x65\xac\x86\x25\xe4\xfd\xb3\x8f\xa1\xe8\x52\x78\x13\x8c\x86\xe3\xac\x04\x3a\xff\x0c\x9f\x50\xd3\xcd\x66\x6a\xda\xe6\x73\x79\xef\x34\xfe\x8a\x02\xff\xd4\xa3\xce\x75\x6b\x26\x46\x94\x5b\x23\x2c\x65\x53\x77\xe6\x08\xed\xc4\xb5\xe1\x3b\xc9\x55\xd1\x5b\x3d\x30\x8d\x9c\x0f\x2c\xa5\x51\xd2\x6f\x28\x54\x9c\x89\xef\x53\xaa\x58\x14\xb4\x90\x6f\x53\xa9\x8a\xe0\x57\x09\xb5\x90\xc2\x18\x1d\x18\x70\xd9\x93\x85\x6f\x17\x44\xa4\xb7\xc4\x45\x46\xd2\x1b\x19\x68\xa9\x56\xd6\x75\x84\xb1\x93\x05\x5f\x25\x45\x75\x02\x7a\x8e\x6b\x4a\x9a\x00\x2a\xe0\xa0\xd1\x54\xca\x5c\x37\xa5\x40\xab\x06\xd7\x34\x8e\xca\x4e\x55\x00\x61\x27\x59\xf0\xb3\x99\x9a\x9a\x6e\xc0\xa1\x2e\x9f\x10\xf4\x75\x68\x9d\x76\xaf\x7c\x64\x08\xdc\xe7\x48\xfe\xd3\xa1\x03\xc5\x25\x8f\xac\xaf\x96\xda\x60\xa8\x38\x32\xc8\x7b\xab\xa2\x56\x79\x3d\x25\x19\xa9\xfd\x08\x24\xc1\x9b\x64\x62\xea\xe8\x96\x8d\x55\x72\x2e\xa5\x6b\xf5\x40\xc6\x44\xcc\xf9\x3c\x87\x9a\x46\x07\x05\x64\xd7\x0f\x00\xd7\x8d\xcd\x57\x79\x1c\x76\x0c\xa4\xb0\xf6\x0e\xf2\x88\x0b\x6f\x10\x17\xc1\xf1\x87\xbe\xc9\x89\x37\x30\x1d\xc0\x71\x84\x95\x63\x50\x30\x15\xaa\x57\x03\x52\x3f\x8c\x84\x39\x64\x41\x14\xa2\x95\xb2\x57\xd3\x99\x1e\xee\x13\x0f\xf1\x31\xf6\x3c\x24\x43\x9d\xe9\x07\x37\x0c\x87\xcb\x38\xff\xd8\x25\x1e\x9e\x1e\x22\xe9\x1e\xd2\x8c\x6e\x59\x91\xb8\x62\xa0\x18\x2d\x97\xf0\x2d\x8d\xfb\xc5\x08\x86\xde\x83\x13\xb5\x17\x93\x08\x8b\x30\x81\xdf\x4b\xa2\x3f\x96\x60\x71\x14\x43\xe7\x01\x23\x77\x94\xac\x61\xad\xf7\x34\x7e\xc0\x82\x1b\xbe\x70\x03\xdf\x3a\xe9\x73\x48\xfc\x82\x3c\xbe\x3f\x5c\x64\x16\x75\xc1\xea\x3c\x72\x1c\xe8\xf1\xd4\x7e\x71\x4f\x12\xde\xad\x14\xce\x40\x24\x3b\x89\xe2\x10\x2e\x21\x72\xea\x38\x7e\x11\xf8\xff\x21\x2c\x58\x08\x3a\x0a\x26\x10\xbb\x8b\xae\x04\xf7\xa9\x2b\x33\xa4\x66\x26\xd2\xcd\x65\x75\xc5\x32\xe3\x8b\x51\x5e\xb8\xcc\xb5\x6c\x4c\x83\xb8\xd4\xbd\x50\x96\x43\x8f\x2b\x4e\xd8\x8b\xba\x44\x97\x53\x5e\x9b\xe6\x5f\x98\x8a\xda\x44\x1d\x40\x1f\xcb\x44\x2b\xf4\xb5\x53\xd3\xa8\x96\xc5\x8e\xbc\x48\xb7\x11\x95\x57\x49\xd8\xa8\x72\x2e\xe4\x61\x99\x86\x19\xf6\x87\x90\x5b\xe1\x6a\x91\x8e\xe1\xc2\x7a\x4f\xb9\x90\xed\x9f\xf9\x2d\xfa\x14\x63\x22\x79\xeb\xa5\xec\xf0\xad\x35\xc6\xe1\xcb\x41\xe4\x3b\x82\x06\xfe\x4b\x49\xbc\x8b\xe8\xb7\x68\x86\x18\x11\x11\xf3\x3f\x81\x8b\x09\x06\x13\xff\x0b\x99\x22\x03\x5a\x4d\x58\xce\xfd\xa9\x79\x61\xa8\x81\xac\x8b\x4c\x72\x04\x01\xdd\x65\x5b\x54\x45\x07\xb9\xb1\xa0\x39\x80\x96\x6e\x9e\x4b\x06\x50\x65\x38\xf5\x87\x66\xc4\x49\xe8\x28\xfb\x2a\x28\x10\x5f\xb6\x34\x2b\xe9\x07\x5d\x47\xe4\xf3\x75\xb1\xed\xc5\x7d\x8d\x06\x0e\x54\x35\x58\xd2\x74\x6f\x63\x49\xc7\xab\x1a\x2c\x6d\xab\x3f\x9a\x49\x7d\x58\xb8\x9c\x54\x8c\x2a\x3d\xb7\x6a\xd4\xb4\xad\x64\x54\xed\x03\x83\xc8\xf3\x0a\x33\x1e\xbb\xe0\x67\xae\xc3\xa0\x75\x09\x70\xf1\x1a\x22\x21\x79\x39\x03\xd0\x75\x88\xe8\x2e\x82\xaa\xf0\x10\x7d\xa3\xd9\x7f\xb3\x8b\xa0\x2b\x8e\x3c\x71\x19\x06\x02\xd2\x88\x60\x11\x99\x7f\x3b\xff\xb4\xe4\x34\x99\x45\xa3\x87\x89\xbb\xa5\x90\x56\x7d\x40\xb7\xcc\x56\xbc\xad\xa2\xda\x4e\x1a\xe8\xea\xe2\x5f\x77\xd0\x18\xfe\xb6\x07\xcf\x01\xfd\x82\x94\x0d\xc1\x6f\x9b\xf2\x6b\x14\x71\x3c\x24\x5f\x30\xb0\x06\x3f\xed\xc1\x13\x42\x60\x18\x7c\x3b\x11\x70\x33\xc1\x9e\x2b\x00\x86\x05\xb5\x05\xf8\x57\x05\x9f\x6d\x86\xbf\x77\x13\xf0\xf1\xd0\xaf\x92\xb3\x19\xf8\xcd\x01\xa5\xa2\xeb\xc8\x24\xcb\x64\x52\xc9\x62\x4a\x99\x6a\x4a\x2c\x29\x46\x13\x69\x4b\x03\xfd\xaa\xce\xad\x13\x03\x5e\xa3\xd7\xc8\x68\xab\xa7\x22\x40\x96\xda\xc4\x7b\xc8\x38\x0f\x22\x08\xbc\x6e\x13\xea\xef\x91\xd1\x0b\x04\xf6\x00\x24\xb2\xba\xb4\x07\xc8\x00\xac\xe6\x36\x21\x7d\x83\x8c\x93\x09\xa6\x8d\x86\xdd\x57\xc3\xbe\x88\x49\xef\x19\x9f\xbb\x90\x0c\xaf\x64\x2e\xcc\xa0\x74\x77\xb0\x00\x0d\x69\x7b\x2d\xa8\xee\x0e\x56\x20\x75\x77\xa0\x81\xba\x4b\x59\x7c\x48\x0f\xfd\xad\x36\x65\x17\x6a\x33\x71\xa1\x0d\x42\x65\x38\xb1\x1c\xae\x4b\x0e\x64\x72\xa1\xb7\x23\xb3\xf0\xab\x2e\x97\x44\x8e\x4a\xec\xb8\x41\xfd\x90\x3b\x8b\x1e\x47\xb2\x9b\x81\x14\xc6\x69\x19\x1d\x3f\x70\x09\x44\x0b\xe5\x84\xf9\x58\x10\x4b\x10\x77\x28\x39\x62\x3e\x46\x71\x07\xe5\xbf\x0f\x2e\x60\x24\x3d\xbd\x54\x3e\xd9\xb2\x42\xbc\x2b\xdd\xfc\xa0\xd2\x0d\x18\x21\xe5\xd2\xc9\x96\x15\xd2\xa9\x55\xd8\xa0\xae\xcb\x09\x5b\xac\x48\x62\xad\x97\xea\x91\xcd\xac\xfc\xa2\xd2\xca\x49\x11\x53\x6d\xe8\x07\x2c\x73\x62\xee\xdf\x6c\x4d\x45\x43\x9b\x57\x34\x9d\x67\x51\xd1\x74\x1a\x57\x34\x1d\x59\x85\x0c\x30\xa0\x90\x2f\x15\x8d\x46\xb3\x9d\xa7\xac\x68\x3a\xdb\x5a\xd1\x34\x13\xec\xb9\x56\x34\x9d\xad\xa8\x68\x3a\xdb\x5e\xd1\xdc\x4d\xc0\xc7\xab\x68\x3a\xcd\x2b\x9a\x6c\x72\xcc\xc1\xe7\x34\x72\xd6\xde\x39\xef\x6e\x40\x91\x35\xa0\xcc\xaa\xe6\xd8\x35\xdf\xa4\x08\xe0\x1d\x15\x1c\x75\x7c\xfb\x43\x24\x50\x08\x4a\xc5\x0f\xdf\xe5\x47\xf9\x80\x8e\x0a\x2b\xab\x7f\x64\xe7\xac\x1b\xf2\x3b\x0b\xd2\xc5\xce\x35\x59\x2b\x4b\xda\xeb\x03\xba\x87\x31\xdb\x2c\x08\xf9\xee\x19\x63\x01\x5b\x37\xf0\xfb\x80\x97\x8f\x5a\xbb\xd8\xa1\x03\xc8\xc2\x8c\x67\x4a\x1d\x9a\x29\x75\x74\x6b\xad\x42\x87\x0e\xaa\xaa\x1c\x9a\x54\x39\xba\xc4\xa1\x03\xab\x58\xdf\x6c\x5e\x97\xa4\xc4\x1b\xa0\xea\x12\xda\x4e\xf7\xfe\xf1\x78\x61\xcd\xab\x1e\x7a\x6e\x55\x7d\x82\xde\xfd\xd6\x3b\xbb\x84\xa9\x45\xe3\xc0\x8d\xbc\x00\xed\xff\x54\xf2\x08\xb7\x94\xee\xdd\x54\x10\xde\xf1\x4b\x9f\xa9\x3d\xb6\x2b\x39\x4b\x8f\xd9\x88\x35\x74\x2c\xe7\x5d\x02\xac\x73\xa3\xbd\xeb\xf4\x94\x02\xe5\x7e\x99\x0e\xd2\x26\x9e\xc0\x72\x31\x97\xea\x50\xd0\x40\xf1\xac\x76\xf6\x65\xa6\xe5\xd2\x1f\x3f\xfa\x74\x86\x69\x90\x58\x6b\x75\x1d\x29\xea\x4c\x69\xc2\x7d\x93\x49\xd5\xec\x1b\x4f\xeb\x22\xdc\x6d\x34\x09\xab\xb4\x29\xe8\xd2\xcd\x68\x51\x83\xf5\x23\x4d\x71\xde\xe2\xae\x0a\xc0\x24\x0e\xc0\x15\x26\x2f\xf3\x03\x45\xb7\x89\x17\xa8\x08\x5f\xe5\x03\x31\xe3\x45\x8e\xbf\xa0\x1e\x4a\x89\xa4\xf9\x8c\x42\x4e\xcf\xd9\xfc\x8e\x0c\xcb\x14\xda\xc4\xf1\x12\x5e\xe5\x2a\xed\x96\x18\x8b\x24\xf9\x6d\x2d\xef\x38\x13\xd6\x59\x32\x9a\xf7\x26\x82\xc7\xcc\xeb\x2f\x18\x6d\xce\x13\xcf\x8b\x31\x58\xe2\xb7\x7a\x6a\x0b\x37\xa4\x24\xe9\x9d\x44\x9f\xe2\x1d\x35\x15\xda\x21\x0b\x53\x9b\xf7\xb6\x76\xe2\x67\x55\x0b\x29\xbf\x94\x9a\x79\x5b\x4e\xf6\x7b\x73\xb9\x2a\xae\x79\xd5\x56\x05\x89\x12\xdd\x36\xf4\xbb\x14\x51\x6d\xc8\xbb\x8e\xdf\x9d\x2d\x3c\xae\x0e\xf3\x1a\x7e\xb7\x05\xdb\x4c\xf2\x87\x16\x4d\xf7\x99\xce\xc9\xf8\x39\x6c\x34\x49\x31\x1b\xee\x34\x01\x69\xc0\xa6\x5f\x76\x99\xf4\x0e\x03\x98\xe3\x09\xb7\x99\xe4\xe8\xdb\xb9\xcf\xd4\x50\xb2\xe7\xba\xd1\x24\x17\xd4\x16\xec\x34\xc5\xe1\x67\x9b\xb7\x9a\xee\x28\xe1\xfd\xef\x35\x65\x74\x96\x3f\xe0\x0d\xd3\x1f\xf6\x97\xff\xe6\x48\x6d\x32\x2c\x42\x71\x16\x64\x3b\x81\x76\x1b\xf3\x75\x26\xae\xfd\x42\x7d\x37\x97\xe6\xaa\x38\xab\x5d\x12\x3f\xe0\x0e\x0b\xb2\x47\x36\x95\x63\xa0\x8a\x82\x1f\x29\x70\x58\xc8\xac\xf5\xb9\xc8\x33\xbc\x3b\x33\xf9\x91\x11\x72\x1f\x92\x14\x4f\xc0\x96\x98\xe4\x53\x45\xb1\x73\xe5\x8f\x47\xf5\x1e\x10\x64\xfc\x45\xaa\x1f\xab\x04\x57\x6b\x0f\x08\x48\x96\x4e\xbb\xd7\xe4\xf0\xf5\x8e\x03\x71\x05\xf8\x5a\xd2\x7f\x0a\xe0\x29\x41\x1f\x6a\x97\x09\xfa\xe8\x6d\xa6\x6b\xe8\x69\xa0\x0c\x51\x76\x6b\xe9\x21\x1c\x4d\x4b\x98\x1e\x46\xdf\x71\x9e\x35\xbb\xab\xb2\xb3\xe5\xc6\xdc\x7e\x2c\x3b\x0b\x4e\x81\x7b\x6a\x9e\x35\xdc\x96\xfa\x4b\x09\x5c\xca\x21\xf6\x4d\xb5\x55\x17\x0f\xc9\x16\x8f\x86\xb5\x52\xc5\xb3\xe1\xbc\xca\x55\x07\xbd\xeb\xed\x90\x9c\xde\x22\x72\x0b\x4d\xee\x1d\x0f\x7b\x77\xd1\x88\x48\xf5\x0f\xd1\xfe\x5e\x72\xf0\xbb\xe9\x6a\x5a\xc6\xe7\x8b\x30\xdb\x08\x89\x87\xbc\x31\x10\xef\xf2\xe7\x80\xc3\x41\xca\x86\x30\xbc\xcb\x02\x99\x34\xbf\x9c\xf7\xa6\x48\xbc\xcb\x9f\x10\x88\xc3\xe0\xdb\x89\xc3\x9b\x09\xf6\x5c\x61\x38\xac\xa7\x2d\x40\xe1\x2a\xf6\x6c\x33\x08\xbf\x9b\x80\x8f\x77\xde\xab\xe4\x7c\xcc\x27\x58\xbf\x76\x16\x77\x75\x5c\xac\xf3\xa8\x66\x97\xab\x07\x5b\xbb\x9d\x76\xdd\x87\x3c\x25\xe5\x1e\x32\xae\x9a\x51\xbe\x01\xca\xcb\xb3\x8f\x75\x1f\x86\x95\xa4\xfb\x20\xee\xc7\x26\x63\x1e\x20\xe3\xa2\xd3\x84\xf0\x7b\x64\xfc\xda\xf9\xd8\x6b\x42\xfa\x77\x64\x7c\x3c\xbb\x6c\x42\xf9\x16\x19\xbd\xce\xf9\x99\xfc\x5d\x58\x5d\xd2\x7f\x20\xe3\xf4\xc3\xf9\xf9\xc9\x45\x3b\xb6\x6f\xfd\x43\xe7\x10\x72\x75\xf6\xc8\x39\xe4\x19\x3c\x23\xdb\x6a\x15\x1b\x21\xaf\x3a\x70\x0e\xb9\xae\x04\x42\x2a\x0b\x81\x90\x5b\xe0\x89\x6b\x7f\x02\xb7\x04\x9b\x13\xba\xba\x27\xcd\x9a\xf6\xaa\x94\x36\x8f\x4a\x55\x3f\x4e\x58\xe3\x41\xba\x8c\x06\x8c\x8a\x69\x63\x06\x17\xd4\x69\x70\x98\xae\x89\x2f\xe9\x5f\xcd\x89\x3f\x12\x0e\x91\xcb\x17\xeb\x18\x14\x71\x59\x6a\xb8\x1e\x2d\x7d\x0e\x60\xb9\x63\xe9\x03\x03\x8f\xbc\xa3\xae\xdf\x18\x56\xf2\x7e\x87\xb8\xa5\xd6\xeb\x1d\x92\x35\xaa\x9e\x81\xcf\xbd\xd7\x02\x16\x21\x91\xeb\xc0\x3a\x91\xc0\xf6\x34\xbe\x6f\xec\xc4\x98\x3b\x79\x2b\xc7\x7b\xa0\x2d\x7b\x33\x87\xbc\xaf\x49\xd6\xbd\x9d\x23\x96\x5f\x12\xe8\xd7\x85\x14\x0a\x43\xf9\x9e\x0f\x0c\x6b\x53\xb3\x5b\xc4\x89\xb4\x86\xd2\x00\x3d\x7e\x6c\x3f\x51\xfa\x7f\x01\x00\x00\xff\xff\x80\x9e\xfd\x8e\x0b\x53\x00\x00"

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 21259, mode: os.FileMode(420), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

