// Code generated by go-bindata.
// sources:
// index.html
// DO NOT EDIT!

// +build bin

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5d\x6d\x53\xe3\xb6\xf6\x7f\xcf\xa7\x50\x3d\xed\x74\xdb\xc1\x76\x61\xd9\xfe\xf7\xcf\x25\xdc\x61\x09\x6d\x33\x05\x36\xb3\x84\xbd\xb7\xb7\xd3\x69\x15\x5b\x21\x5a\x1c\xdb\xd7\x92\x03\x34\x93\xef\x7e\x8f\xe4\xc7\xf8\x21\xd8\xb1\x13\xfc\x82\x17\x2c\xb6\x25\x9d\xf3\xd3\xd1\xd1\xd1\xef\x1c\xe2\xec\xc9\x57\xfd\x8f\xe7\xa3\xdf\x86\x17\x68\xca\x67\xd6\xde\xe9\x62\xf1\xf5\x1c\x1d\xf7\x90\xf6\x91\x71\x62\xf3\xcf\xc4\x63\xd4\xb1\x97\xcb\x13\xd9\x8c\xd0\xe9\xc9\x94\x60\x13\x2e\xc4\xe5\x8c\x70\x8c\x8c\x29\xf6\x18\xe1\x3d\xc5\xe7\x13\xf5\xbd\x12\x36\x71\xca\x2d\x22\xaf\xe1\x6e\xb1\xd0\xfa\x98\x63\x6d\xea\x30\x6e\xe3\x19\x59\x2e\x91\x23\xc5\x9f\xe8\x49\xbf\x50\xdc\x94\x73\x57\x25\xff\xf5\xe9\xbc\xa7\xfc\x5b\xbd\x3d\x53\xcf\x9d\x99\x8b\x39\x1d\x5b\x44\x41\x86\x63\x8b\x61\x3d\x65\x70\xd1\x23\xe6\x1d\x51\xd2\x23\x85\xe4\x9e\x32\xa7\xe4\xc1\x75\x3c\x9e\xea\xfc\x40\x4d\x3e\xed\x99\x64\x4e\x0d\xa2\xca\x9b\x7d\x44\x6d\xca\x29\xb6\x54\x66\x60\x8b\xf4\x0e\xb4\x1f\x42\x51\x8b\xc5\x2f\xa3\xab\x4b\xa4\x9c\x7c\xa5\x2c\x97\xaa\xfa\x3b\x9d\xa0\xc1\xc5\x1f\xa7\x27\x16\xb5\xef\x91\x47\xac\x9e\xc2\xa6\x20\xdd\xf0\x39\xa2\xa0\x40\x41\x53\x8f\x4c\x7a\x8a\x3e\xc1\x73\x71\xaf\xc1\x3f\x45\x92\x7e\x27\xb6\x49\x27\x7f\xa8\x6a\x5a\x52\x20\x80\xd1\xbf\x09\xeb\x29\x6f\x0f\x1f\xdf\x1e\xc6\xe2\xc4\x32\x2c\x97\x91\x54\x16\x5d\xa8\x6f\x0f\x35\xd7\xbe\x53\x10\x7f\x72\x61\xae\x74\x86\xef\x88\x2e\x1e\x84\x76\x48\x64\x63\xd7\xb5\x88\xca\x1d\xdf\x98\xaa\x2b\x7a\x0e\x0e\x7f\x78\x84\x9f\x67\x35\x41\x1f\xad\xa6\xe4\xa3\xa3\x47\xf8\x79\x5e\xf2\xd1\x51\x5d\xc9\xef\x0e\x1f\xe1\xe7\x79\xc9\xef\x0e\xeb\x4a\x7e\x0f\xd6\x78\x5f\xc1\x1a\xef\x4b\xac\xc1\xf8\x93\x45\xd8\x94\x10\x1e\x2d\x0a\x27\x8f\x5c\x37\x18\xcb\xca\x84\x47\x3a\xb5\x4d\xf2\xa8\x89\xc6\x50\x90\x1e\xee\xa6\xd3\x93\xb1\x63\x3e\x85\x0f\x4d\x3a\x47\x86\x85\x19\xe0\xe3\x8e\xab\x8e\xb1\xa7\x44\x3b\xa9\xa0\x4d\xb5\xc8\x84\x47\x1d\x44\x17\xdf\x8a\x7a\xcc\x88\xed\x27\x2d\x01\xf0\xd4\xad\xdc\xcd\x87\x51\xe7\x29\xac\x9c\x9c\x0d\x8c\xc3\xde\x1d\xb5\xd5\xb1\xc3\xb9\x33\x3b\x46\x3f\x28\x2b\x83\xc4\x30\xe6\x62\x3b\x1a\xe8\xbb\x26\xe6\x04\xe6\x0b\xbf\xb0\x6a\x92\x09\xb5\x41\x46\xf0\xfb\xcf\x68\xcb\x67\x45\xc8\x0d\xc2\xc9\xcc\xb5\x60\x2c\x0a\x7b\xb3\xe3\xe3\xec\x30\xa4\x41\xec\xd1\x85\xba\x2c\x06\x74\xc2\x66\xd8\xb2\x8a\xe4\x6a\x7d\xca\xb8\x47\xc7\x72\x68\x41\x27\x61\xf7\xc3\x8c\x21\xf4\x15\xd3\x14\x58\x2a\x3d\x65\xc3\xb1\x72\x36\xf1\xdd\x02\x9c\xb9\x61\x28\xb4\x16\x7a\x98\x52\xf8\xe5\x62\x08\x49\xae\x47\x8a\x8d\xe7\xbb\x9c\xe6\x4d\xb7\xd6\x70\xe1\x90\x12\xb3\xe5\xa7\xa9\xfb\x56\xca\x75\x74\x70\xaf\x75\xae\xe6\xd1\xbb\xe9\xe6\xbe\x86\xa3\xbe\x63\x1f\x1c\xcb\x46\x8c\xc0\xd6\x32\xb1\xf7\x84\xa6\x8e\x65\x39\x0f\x19\xff\x13\x8e\x17\xee\x21\x71\x28\xb0\x63\x5d\x7f\x78\x78\xd0\xc0\x33\x3c\xf8\xd1\x0c\x67\xa6\x07\xa7\x88\x0e\x3b\x91\x60\x46\x98\x2e\x6c\xc2\xf8\x3f\x8d\x99\xdb\x0b\x76\x5d\xce\x76\xd1\xb9\x83\x37\xb7\x4b\x7c\xb3\x62\xa2\xb5\xbb\x00\xd6\x81\x58\x16\x56\xf6\x2a\xac\x60\xd4\x37\x58\xc2\x0d\x75\xcd\xc8\xac\xba\x32\xd1\xb9\x91\x36\x73\x52\x5d\x19\xf4\x6d\xa4\xcb\x70\xfd\xea\xca\x44\xe7\x46\xda\x68\x8d\x99\xd1\x86\x33\x73\x59\x75\x5d\xd0\x37\xab\x8b\x19\x1e\x75\x79\xfa\x10\xfa\x82\xe7\x38\x78\x1a\x0b\x9e\x63\x0f\x09\x2a\x86\x7a\x28\x24\x65\xcb\xe5\x3f\x20\x50\xc8\x5e\x55\x04\x65\xe9\x1e\x62\x9e\x91\x9c\x71\x5f\x18\x5c\x01\x65\xd2\x46\x67\x3f\xff\x7c\xd1\x1f\x53\x60\x8e\x33\x6a\xeb\x63\xdf\x36\x2d\xa2\xc1\xa5\xf6\x85\x2d\x16\xc4\x62\xc0\x01\x61\x64\xd4\x20\x1f\xda\x66\xb2\x5f\x4f\x33\x98\xf4\xf0\x78\x14\x91\x3b\xe4\xa9\xfa\xf7\x7b\xdf\xeb\xcb\xe5\x62\x11\xd8\x25\x65\x28\x2c\x8e\xe7\x3f\xc7\x18\x08\xa2\x3c\x1b\xc1\x4e\x38\x08\x24\x30\xe7\x5f\xe0\x37\xf0\xcf\xc5\x42\xae\xcb\x72\x29\x9e\x9d\x07\x97\xc8\xb1\xcf\x2d\x6a\xdc\xf7\x16\x7c\x4a\x99\x36\xc5\x02\x9b\x7c\xb2\x44\x68\x2f\x38\x59\x3e\x08\xa9\x72\xbc\x36\x02\xd3\x88\x25\xc0\x02\x8d\x44\x5f\x11\x54\x10\x45\xdb\x44\x15\x40\x41\x09\xbe\xca\xa8\xe6\x02\xd6\x2a\x96\x4b\x78\x52\x84\x47\x3c\xaf\x81\x49\x74\x0f\x4d\x24\xcf\xc0\xd5\xb9\x61\x8f\xf0\x50\x58\xb4\xc4\xe1\x69\x75\x5a\x15\x7b\x96\x2a\x24\x93\x50\x74\x05\xd4\x8d\x44\x6a\x31\x84\x7b\xfa\x48\x4c\xa4\x44\xfd\x10\xec\x9c\x4c\x36\xb2\x57\x98\xa3\xd4\xc4\x11\x07\x1c\xd1\xe9\x6b\x57\x26\x51\x52\xa2\x8b\x3d\x3c\x83\x79\xca\x68\x90\x58\x41\xb9\xf3\xa8\xa9\x8e\x2d\xc7\xb8\x07\xd4\x40\x4e\x5d\x65\x2f\x13\x33\x80\x2f\xa8\x96\x87\x2c\x38\x0e\x89\x7a\x80\xc4\x5e\x4c\x1f\xc1\xa7\xa1\x44\x69\xc7\xa1\xc3\x20\xa3\x99\x13\xf4\xb5\xab\x9d\x0f\x6f\x6d\x98\x30\x35\x89\x0a\xd9\xca\x83\xb8\x50\x90\x48\x5c\x1e\x92\xfb\xd0\xee\x92\x03\x1e\x24\x1c\x30\x50\xe2\xcc\x89\x37\x11\x27\xf2\x5e\xfa\xf4\x86\x8c\x06\xac\x39\x02\x0d\x91\x12\xf0\x04\x99\xc0\xf5\x14\xb8\x43\x26\x65\x10\xb3\x9e\x90\x03\x1c\x04\xc8\xf3\x2a\x1b\xc8\xf8\x80\x12\x01\x51\xc5\x3f\x19\x36\x84\x40\x37\xe6\x19\x62\x2b\xc5\x68\x9a\x86\x72\xbc\xe6\x14\x94\xa7\x4f\x74\x11\x24\x0e\x8a\x8e\xeb\xf0\x72\x8d\x8d\x0f\xda\xb5\x6c\x4a\x4f\xb2\xda\xe5\xfc\x09\xc5\x46\x11\x17\xcf\xb0\xa9\x94\x6c\x6a\xbb\x3e\x57\xef\x3c\xc7\x77\xf3\x54\xbd\xb8\x9f\x6a\xe1\x31\xb1\x90\x64\xc7\xc1\x9a\xdb\xce\x83\x87\x73\xe3\x41\x82\x49\x60\x51\xd3\x14\xe8\x59\xd9\x01\xbf\x2b\x10\x95\xa7\x80\x52\x7f\x42\x04\xc1\x85\x30\x64\xfa\x66\x7e\xac\xdc\xa2\xc1\x0a\x98\xc1\xde\xcc\x4b\x6f\x05\x63\xe1\xd9\x9b\x3d\x52\xd0\x25\x61\xac\x9f\xec\x04\x88\x2f\x2b\x33\x4a\x5b\x34\x7d\x4c\x6f\x13\x58\x10\x19\xd0\x95\xe3\x91\x86\xc8\x72\x0f\x2b\xa4\x47\x3b\x73\x47\xcf\x79\x60\x5d\xf2\x46\x5b\x3b\x1b\x33\xc7\xf2\x39\xe9\x88\x5b\x5e\xa7\x02\x74\x66\xf1\x99\x6f\x18\xd0\xe3\xa5\xdd\xb3\x25\x84\x15\xdc\xb4\x7a\x1a\x17\x06\xfb\x6b\xc7\xfe\x0f\xf1\x9c\x04\x9d\x12\x84\xfb\x67\xa3\x3a\x82\x23\x93\x53\x03\xc3\x14\x38\x10\x57\x92\x8e\xf2\xc5\x03\xb8\xa8\xfd\x14\x1c\x92\x61\x4f\xf2\x08\x37\x26\x12\x35\x03\x69\x1a\xf5\x20\x73\x16\x9e\x83\x25\xf3\x67\xe1\x33\x32\x72\x24\x22\x1e\x88\x6e\x19\xf1\xbe\x69\x53\xe0\xcd\x13\x6b\x55\xde\xbf\x30\xe5\xad\x0a\x1c\x00\x6b\xad\x2e\x50\xc9\xfa\x5a\x6e\xdc\x8a\x43\x9e\x06\x99\x90\xa4\x80\x40\x0b\x05\x2b\xf4\xb0\x7d\x07\x34\x02\xee\x12\x76\x08\x37\x40\x95\x19\x17\xed\x5f\xd8\x23\xfa\x2b\xa0\xd4\xe2\xd1\x1b\xd1\xe1\x3b\x6d\x86\xdd\x37\x13\xdf\x36\x04\xa9\x7a\x23\x06\xef\x23\xfa\x1d\x5a\x20\x60\xd0\xbe\x67\xff\x15\x13\xcb\x5f\xc9\x13\x52\xa0\x59\x85\x08\x39\x7e\x52\xaf\x15\xa9\x49\xbb\x5e\xe1\xf1\x85\x3c\xa4\xaa\x11\x8b\x62\xb2\x88\x83\xa1\x9a\x32\x4b\xa6\xb4\xaf\x5d\x1e\x34\xbe\x53\x7d\x46\x5c\x03\x16\x4a\x66\xc9\xc1\x4d\x2f\xd4\x20\xfc\x73\x68\xf0\x78\x23\x46\xab\x98\x6d\x2e\x5d\xd1\x96\x70\x80\x5b\xaf\x81\x11\xb5\x6e\x1b\x85\xd8\x0c\x6b\x60\xc4\xcd\x2d\xe2\x50\xa9\x0d\x41\x8e\x91\x42\x3c\x62\x2f\xad\xc1\x13\x37\x57\xdf\x6f\x40\xcb\x73\xae\x16\xec\x90\x2f\x2c\x3c\x60\xb4\x1b\x48\xae\xee\xe1\x8c\x21\x6f\x16\x90\x9a\x1c\x23\xba\x2f\x46\x1e\xa3\x6f\x43\x7d\xdf\xee\x23\xe8\x8a\x7d\x8b\xdf\xb8\x0e\x67\xc7\x88\x7b\x3e\x59\x7e\xb7\xfc\xab\xd0\x5b\xb3\xfb\x57\x6a\x0b\x7a\xc7\x79\xa0\xfc\x55\x7a\x92\xc4\x19\x86\xbc\xa8\x9b\x3d\x9a\x93\x0e\x24\x8f\xfd\xc9\xf6\x73\x47\xd0\x91\xa4\x8e\x7d\xca\xee\x91\xcf\x30\x84\xc6\x17\xcb\x20\x13\x0c\x3b\x4a\x24\xeb\x59\xf9\x35\x8f\xcc\x0c\x68\xce\xdc\xfb\x93\xae\xa5\x91\x80\xa8\x9b\x59\xe4\x66\xc0\x5e\x93\xc8\xea\xae\xd8\xd9\x1c\x52\x86\xa9\x2e\xa7\x90\xcd\x00\x6e\x39\x83\x94\xe0\x3a\x94\x40\xae\x65\xf1\x45\xa6\x0f\xfe\x3a\x80\x3e\xcb\xcf\x3b\x44\x06\xbf\x47\x07\x48\xe9\xcb\x4f\xd3\x28\xe5\xa4\x7f\xeb\x20\x0e\x91\x72\xe5\xf8\x36\x87\x9d\xd5\x10\x45\x79\x86\x58\x0b\xd0\x8f\x48\x19\x39\x1c\x5b\x1d\x81\xf3\x0e\x29\x90\x12\x75\xc5\x38\x6f\x91\x72\x36\xc7\xb4\x2b\xc6\x39\x92\xc6\xf9\xa6\x0e\x9a\x06\xe9\x3f\x1c\x01\xf7\xb7\x82\x5c\xa6\x8a\x00\xe6\x24\x21\xf9\x71\x7b\xad\x4a\x80\x39\x59\x57\x08\x30\x27\x61\x1d\xc0\xa4\x5e\xf0\x49\x1a\x18\xa0\xf5\xa9\x77\x1d\x7c\x00\xaf\xa5\x92\x40\x9e\xed\x87\x93\x97\xda\xc8\xfc\x3a\xfc\x53\xda\x46\x4b\x5e\x22\x1c\x85\xd2\xa3\xb9\x34\x94\x9e\xce\x75\xef\x3c\xfc\x94\x5d\xe8\xb4\xac\x20\xad\x28\x70\xbf\x04\x96\x8c\x01\x25\x9f\xbe\x91\xa2\xc2\xb4\x67\x60\x3b\x26\x81\x63\x4a\x86\x8c\x12\x59\x41\x9f\xb2\x8f\xf2\x74\x69\xd6\x22\xd4\x54\x9f\xb4\xcf\xf2\x7c\x28\x9e\xb3\x5f\x2e\xaa\x53\x53\x96\xf1\xac\xfa\x9c\x27\x1e\xc9\x7f\x94\x2b\x9a\xb3\x68\xac\x37\xe7\x0a\xe5\x9b\xb2\x79\xa7\x2a\x4b\x28\x53\xc9\x09\x56\xb2\xa0\x8e\xb3\x81\x3f\x94\x94\x7b\xca\x5d\xe2\x9b\x75\x2e\xb1\x46\xda\x4e\x0a\x4a\xc1\x84\xbe\xed\x6c\xed\x88\x76\xa1\x76\x34\xd8\x41\xed\x68\x90\xae\x1d\x0d\x80\xff\x79\x13\x0c\x84\xff\xe5\x6a\x47\x09\x86\x1d\xd5\x8e\xea\x59\xf9\xb5\x76\x94\x19\xd0\x3c\x61\x1f\x74\xae\x76\x34\xe8\x6a\xed\x68\x33\x60\xaf\xb5\xa3\xea\xae\xd8\xd9\xda\xd1\xa0\xeb\xb5\xa3\x66\x00\xb7\x5c\x3b\x1a\x74\xac\x76\x94\x39\x0a\xe3\x43\xaf\xd5\xbf\xc7\x0f\xeb\x4a\x3b\x4c\x73\xdb\xf4\xaa\xc5\x7f\x5c\xf2\x1c\x97\xed\x5f\x78\x9e\xe3\x31\x34\xb0\xf5\x8f\x3e\x47\x2e\xf1\xc2\x3d\x96\x05\x70\xe9\xc0\xe2\x0f\x3e\x22\x97\xb5\x0e\x64\x88\x8d\x7b\xc2\x2b\x60\x88\x3b\x6e\x05\xc6\x07\x5a\x05\x03\xe8\x3e\xa1\x59\x8f\x1f\x9f\xe8\x99\x98\x5b\x03\x5f\x83\xea\x09\x9d\x60\xd3\xf4\x58\xaa\x76\x42\x53\xb5\x93\xb0\xb5\x56\xe5\x84\xae\xad\x9c\xd0\xa8\x72\x12\x96\x4d\xe8\x44\xdb\x55\xcd\x24\x56\xd5\x5e\xa6\x5b\xa8\x64\x30\xac\xaf\xa2\xd4\xb5\x32\xbe\xb3\x22\x45\xa6\xd9\x91\xef\xc9\xca\x08\x32\xe5\x8e\x24\xc1\x8e\x9c\x39\xa6\x6f\x39\xe8\xe8\xe7\x92\x57\xcc\xf2\x23\xc1\x79\xcb\x47\xc5\x13\x94\xdb\x7e\x60\x97\xbd\x3b\x16\xe5\x03\x51\xd0\xbd\xa6\x16\x8a\x87\x89\xad\x91\x8f\xbc\xa9\xd1\x7a\x73\xa1\x45\x13\x13\x5d\x2a\xce\x0c\xba\x96\x4d\x6d\xbf\xc0\x70\x24\x0a\x7f\x15\xe4\x07\xa1\xb2\xdc\x74\x7a\xb9\xfc\x6a\x13\x08\x14\xac\x99\x41\x51\x8e\x8f\x56\x8c\x7b\x66\x59\xc1\x31\x29\xec\x41\x2c\x8e\xc3\xe5\xce\x3c\x10\x78\xe2\x27\xd1\xbc\xb2\x4f\xe4\xc2\x48\x37\xcd\x2d\xf5\xaa\x0f\xf6\x23\xef\x2b\x0b\x9b\xe9\x45\x4a\x81\xaa\xed\x83\x2b\xf8\x5b\x75\xc4\x32\xc9\xab\x53\x5c\x77\x34\x14\xce\xb1\xb2\x37\xc6\xc7\x70\x65\xf9\xf5\xbc\xf1\x22\xf1\xc3\x7a\x0a\x6a\x7a\xe3\xee\x42\x67\x85\xa8\xe8\xc6\xc4\xa2\xc2\xe6\x0b\xc9\x45\xbd\xed\x1d\x69\xa8\xb6\xbf\x43\x15\x9b\x6d\xf0\x1c\x59\x5a\xb3\x90\xe9\x65\x5c\x3f\xaf\xcc\xac\x86\xa9\xf9\xd4\x12\x5f\x36\xa7\x6e\x39\xc4\x87\xdf\x46\x17\x37\xd5\xdc\xe1\xc3\x13\x27\x35\x9d\x21\x90\x5e\xcd\x15\xa4\xf8\x46\x8e\xf0\x61\x30\xba\xa9\xee\x05\x82\xdc\x56\x73\x01\x29\xb7\xfa\xfa\x0b\xc1\xcd\x17\xbf\x51\xfd\x39\xc0\x11\x1a\xf4\xda\x9f\x75\xb7\x12\x6d\xe1\x0e\x54\xa2\x2f\xf1\xf6\x2b\xd1\xa0\x23\x39\x3b\x2f\x1d\x6c\x22\x3c\xbf\x7b\xb9\x3a\x74\x84\x60\x47\x55\xe8\x7a\x16\x7e\xad\x42\x67\x06\x34\x2f\xfd\x5d\xe2\xae\x55\xa1\x01\x51\x37\xab\xd0\x9b\x01\x7b\xad\x42\x57\x77\xc5\xce\x56\xa1\x65\x98\xea\x72\x15\xba\x19\xc0\x2d\x57\xa1\x25\xb8\xee\x56\xa1\x87\x60\x50\xc7\x6c\xb3\x04\xfd\x19\x5b\x7e\xf5\x9a\x76\x83\xaa\x26\x9c\xed\x26\x1c\xd6\xa9\xaa\xa6\x85\x13\xc2\x14\xb6\xd6\xaa\x6a\x5a\x78\x5d\x55\xd3\xc2\x61\x55\xd3\x95\x36\x53\x84\x3e\x2d\xb0\x5f\x1b\x95\xcd\x7c\x99\x31\x25\x7e\xd6\xe6\x0a\x05\xa2\xe5\x3a\xd5\x28\x62\x36\xe2\xde\x52\x59\x77\x09\xb7\xf8\xfe\x9e\x97\x67\xdc\x57\x64\xb6\x7d\xca\x2d\x94\x24\x9c\x1b\xee\x9c\xe0\x7c\x7a\x19\xc6\x1d\xe8\xdf\x11\xdf\xae\x69\xdf\x57\xc2\x9d\x19\xd0\x9c\xe5\xc0\x0a\x74\x8d\x71\x0b\x48\xdd\xa4\xdc\x1b\x22\x7b\xe5\xdc\x35\xbc\xb1\xb3\xa4\x3b\x88\x55\x5d\x66\xdd\x0d\x11\x6e\x99\x76\x07\xe8\xba\xcb\xbb\xa3\x83\xaf\x3d\x56\x27\x8b\xcb\x2d\x7f\x9b\x45\xab\x89\xc1\x4f\x1e\x69\xfb\xdb\x36\x76\xf2\xd5\x13\x33\xb9\x54\xa9\x34\x03\x1e\x24\x34\x31\x68\xad\x95\x66\xc0\x90\x75\x79\x06\x34\x87\x89\xc6\x3d\xb5\x45\x9a\x01\x0f\xb4\x5f\xa9\xbd\xa5\x2c\x23\x91\xde\x72\x8e\x21\x04\x97\xbd\xca\xd1\x5c\x72\xc9\xeb\x12\xcd\x05\xff\x54\xfc\x22\xc1\xe6\xdf\x3d\x91\x7d\x43\x20\x44\x5f\xf2\x55\x0f\xe9\xd6\x1d\x7d\xd3\x43\xd7\x3f\x98\xef\xb2\x0e\x24\x67\x43\xb6\xfd\xdc\x0c\x74\x24\xa9\xd9\xd0\x73\xc4\x61\xfa\x92\x9f\xcb\x8f\x21\xec\x28\x41\xab\x67\xe3\xd7\xfc\x2c\x33\xa0\x39\x23\x1e\xb2\xae\xa5\x67\x80\xa8\x9b\xd9\xd9\x66\xc0\x5e\x93\xb3\xea\xae\xd8\xd9\xdc\x4c\x86\xa9\x2e\xa7\x66\xcd\x00\x6e\x39\x33\x93\xe0\x3a\x94\x98\xb5\xfc\x6e\xfc\x90\xc9\x6f\x77\x18\x0e\xfa\xdb\x7b\x51\x1f\xd5\x42\x73\x88\x94\xdb\xe6\x68\x1a\x41\x78\x0b\x10\x6e\x2e\x3e\x75\xc5\x22\x47\xb0\x3e\x9d\x01\xf3\x0e\x29\xd7\x83\xae\x80\xf9\x11\x29\x9f\x07\x9f\x46\x5d\x81\xf3\x7f\x48\xf9\x74\x71\xd3\x0e\x1a\x83\x88\x17\x6e\x1a\xc1\x79\x8f\x94\xd1\xe0\xea\xe2\x45\xb7\xd2\xff\x23\xe5\xfc\xe3\xd5\xd5\xd9\x75\xc9\x8e\x2e\x2d\x63\xb8\x40\xe6\xd3\xaf\x80\xb8\x2c\x95\x4e\x89\xb6\x5a\x35\x0c\x97\x95\xd6\x2f\x5c\x16\xfd\x9d\x94\x8a\xea\x85\xcb\x34\x08\x86\xed\xbd\xfb\x51\xf2\x4e\x46\xa4\xa6\xe5\x8a\x00\x88\xbd\xdd\x48\x6c\x89\x2c\x46\xbc\x6d\x60\x1c\x7a\xd4\xf1\x28\x7f\xda\x86\xec\x6b\x6a\x6c\xfe\x3e\xcd\x1a\xb9\x37\xf4\xef\xad\xc8\xfd\x44\x18\x50\x0b\xbb\xe8\xb3\xa6\xd5\x64\x97\x45\x0a\x21\x7c\x44\x6b\xbd\x5c\x54\x62\xd1\xb2\x37\x94\x5e\xb0\xd2\x12\xfe\xb7\x47\xe1\xff\x35\xb1\x87\x92\xff\xcf\x21\x68\x89\xf1\x46\x32\xff\x17\x00\x00\xff\xff\x00\x03\xbe\x36\xf8\x6e\x00\x00"

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 28408, mode: os.FileMode(420), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

