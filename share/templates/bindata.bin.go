// Code generated by go-bindata.
// sources:
// index.html
// DO NOT EDIT!

// +build bin

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5c\xeb\x73\xdb\x36\x12\xff\xee\xbf\x02\xc7\x6b\x6f\xda\x4e\x25\xd5\x79\xdc\xf5\x52\xcb\x37\x8e\xe5\x24\x9a\xc6\x8e\xc6\x8f\xcc\xf5\xbe\x74\x20\x12\x94\x10\x53\x24\x0b\x40\x72\x7c\x1a\xfd\xef\xb7\x78\xf1\xad\x07\x45\xda\xf1\xb5\xfd\x90\x98\x04\x16\xbb\x8b\x05\xf0\xdb\x05\xb0\xe2\xd1\x5f\x06\x1f\x4e\xaf\x7f\x19\x9d\xa1\xa9\x98\x05\x07\xc7\x47\xea\x0f\x42\xf0\x40\xb0\x07\x0f\xf2\x71\x46\x04\x46\xee\x14\x33\x4e\x44\xdf\x99\x0b\xbf\xf3\xa3\x93\xad\x9a\x0a\x11\x77\xc8\x6f\x73\xba\xe8\x3b\xff\xee\xdc\x9c\x74\x4e\xa3\x59\x8c\x05\x1d\x07\xc4\x41\x6e\x14\x0a\x12\x42\xbb\xe1\x59\x9f\x78\x13\x92\x6b\x19\xe2\x19\xe9\x3b\x0b\x4a\xee\xe2\x88\x89\x0c\xf1\x1d\xf5\xc4\xb4\xef\x91\x05\x75\x49\x47\xbd\x7c\x8f\x68\x48\x05\xc5\x41\x87\xbb\x38\x20\xfd\x43\xcb\x48\x50\x11\x10\xf5\x0c\x6f\xcb\x65\x77\x80\x05\xee\xbe\x8b\xb8\x90\xcc\x57\x2b\x04\x4f\xc0\xf2\xa8\x97\xd2\x1d\x1f\x05\x34\xbc\x45\x8c\x04\x7d\x87\x82\x48\x07\x89\xfb\x18\xf4\xa0\x33\x3c\x21\xbd\x38\x9c\x38\x68\xca\x88\xdf\x77\x7a\x3e\x5e\x48\x82\xae\x2c\x2b\x35\xe5\xe2\x3e\x20\x7c\x4a\x88\xb0\x0c\x04\xf9\x2c\x7a\x2e\xe7\x49\x7b\x78\xee\xd1\xd0\x23\x9f\xbb\xb2\xd4\x70\xe0\x2e\xa3\xb1\xc8\x36\xf9\x84\x17\x58\x97\x3a\x45\x3b\x23\xce\x5c\x60\xf4\x89\xf7\x98\xb4\x30\x23\xf0\xf4\xac\x7b\xd8\x3d\xfc\xd1\x16\x74\x67\x34\xec\x7e\x02\x99\x1e\x74\xbc\x33\xc3\x34\xd4\xf4\xcb\x25\xf5\x51\xf7\xfa\xe4\xed\xdb\xb3\xc1\x98\x86\xab\x15\xd0\x19\x65\x74\x8b\xe5\x92\x04\x1c\x2c\x04\x12\x7a\x33\x1a\xdc\x9a\x4a\x55\x11\x7a\xab\x95\x63\x8d\x7a\xd4\xd3\xca\x19\xfd\x7b\x66\x6a\x1c\x1f\x8d\x23\xef\xde\x14\x86\x78\x81\xdc\x00\x73\xde\x77\xe0\x71\x8c\x19\xd2\x7f\x3a\x1e\xf1\xf1\x3c\x10\xf6\x95\x0b\x98\x18\x6e\x47\x44\xb1\x83\x58\x04\xe3\x28\xc9\xe9\x04\x0a\x61\x1c\x12\x81\x1e\x4d\xb8\xc9\x29\x01\x7d\x22\xac\xe3\x07\x73\xea\x59\x9a\x02\x95\xe1\x2e\x35\x23\x0c\xa6\x51\xd0\x99\x79\x9d\x43\x14\x63\xcf\xa3\xe1\xa4\x13\x10\x1f\x06\xdf\x0e\x81\x6d\x3f\x9e\x0b\x11\x85\x05\x16\x22\x9a\x4c\x02\x22\x59\x04\x38\xe6\xc4\xb3\x63\xab\x89\x8d\x95\x35\x91\x54\x4e\x53\xd9\x62\xcc\x26\x72\xe8\xfe\x6a\x78\x25\xd5\x19\xb1\x6a\x06\xc4\x38\x11\xcb\x59\x27\x0a\x83\xfb\x3c\x09\x10\x5d\x6b\x3d\x52\xeb\xc0\x28\x40\xb3\x0d\x9c\xe4\x4c\xed\x80\xd8\x12\xab\x27\xd3\xb2\xa7\x8d\x98\x1b\x04\x8c\xa8\xd7\x77\xa6\x60\xd9\xfc\x38\x8c\x19\x0e\x3d\x28\xa3\x30\x51\xd4\x4a\xeb\x3b\x33\xfc\x59\x63\xc1\x2b\x74\xf8\xcc\x9d\x26\xab\x0c\x86\x48\xae\x6d\xe0\x62\x56\x3d\x2a\xc3\x40\x61\x08\xca\x04\x47\x3d\x9c\xd3\xab\x07\xb3\xab\x30\xd7\xa4\xa2\xc5\x91\x4d\xa7\xa9\x2e\x40\x1b\x86\xfe\xf8\x68\x1e\x64\x7a\x69\x49\xe1\x4f\x71\x82\x04\xd4\xd2\x61\x57\xd0\x05\x29\x9b\x17\x9b\xce\x4b\xec\xe5\xaf\x7a\xbd\xbb\xbb\xbb\x2e\xf4\x85\xc1\xbf\xae\x1b\xcd\x7a\x1a\xf5\x00\x23\x02\x82\x39\xe1\xbd\x00\x0b\xc2\xc5\xbf\xdc\x59\xdc\xb7\x7d\xff\x78\x76\x79\x35\xfc\x70\x51\xb4\x8d\xe2\x6f\x41\x13\x97\xc7\x35\xa0\x6b\x95\xb5\x4b\x08\x30\x0d\x65\x9e\x01\x94\xd8\x84\x86\x72\x01\x22\x9f\x32\x2e\x54\x69\xb9\x4f\x6e\xe4\x91\x02\x2b\x59\x04\x88\x5b\x32\x80\x52\x31\x19\xe6\xc1\xf0\xea\xfa\x72\xf8\x5a\x0e\xa2\x6c\xd0\xb2\xce\x4d\x15\xa5\xf1\xdf\xc2\x31\x8f\x7f\xd2\x0b\x47\x4e\x22\x98\xd3\x25\xb2\xcc\xa4\x1c\x8e\x64\x4f\x4a\xeb\xc7\xf4\xe5\x09\xf6\x70\x5e\xea\xe1\x7c\x73\x0f\x6f\x62\x41\xf5\xa2\xfb\x3f\xea\x65\x80\x8b\xbd\x0c\xf0\xc6\x5e\xbe\x3f\x69\xa1\x87\xbd\x79\xb0\x09\x97\x32\xaf\xf0\x02\x9d\x30\xfe\x78\xbb\x07\xcd\xd1\xb0\xe8\xae\xe8\x59\x65\x07\x67\x64\x06\x4e\x4d\xc7\x71\x09\xce\x49\xd7\xfa\xc2\xfa\xd8\xc8\xf7\x21\x5a\xe9\x1c\xe6\x70\x6e\xb9\x14\x64\x16\x4b\xc8\x41\x0e\xf8\x7f\x90\xcd\x5f\xbd\xd2\x0f\xbf\x82\x35\x48\x00\x7c\x1d\xd4\x95\xd6\xa9\x46\x59\xcf\xaf\x16\xfb\xb2\x99\x58\xcf\xaf\x94\x9a\xb3\xe1\x76\xa3\xb8\xf1\xfc\x41\x8c\x02\x7c\x37\x1a\x85\x3e\x8c\x51\x68\x2b\x46\x89\x79\xb5\x72\x87\x3f\x34\xd3\x2e\xe6\x6d\x68\xb7\x98\x3c\x8c\x76\x8b\xc9\x76\xed\x92\x97\x2d\x91\xbf\x6d\xb0\x80\xd8\x59\xc2\x07\xea\x5b\xff\xb6\x5a\xfd\x54\x0c\xc1\x4d\xe4\x2d\x83\x71\xb5\x6f\x5b\x2e\x7b\xdf\x1d\x7c\xd7\x5b\xad\x96\x4b\xad\x5f\x59\x61\x98\x5e\x60\x1d\xee\x48\x9a\x3b\x2a\xa6\x48\xbe\x41\x9f\x65\x07\x40\x90\xfc\x4f\xef\x07\x96\x4b\x08\xbd\x26\x04\x7d\x45\xbf\x47\x5f\xb9\x11\x23\xe8\x55\x1f\x69\x44\x3b\x1d\xdd\x74\xdf\x53\x2e\xa0\xcb\x82\x81\x7a\xaa\xba\x7b\xd1\x3d\x11\x82\xfd\x4c\xee\x91\x5a\x1b\xc0\x77\x7c\xdf\xb9\x00\x41\x4a\x43\xe1\x59\xa3\x2b\x3c\x66\x74\x32\x05\x84\x8e\xee\x18\x36\x3e\xe2\x38\xe1\x23\x2d\x29\xbc\xb5\xad\x92\x0d\x94\xc4\xdf\xe5\x52\xd5\xaf\x56\xe0\x6c\x38\x89\x09\x73\x21\x60\xd1\x81\x85\x0e\xc6\xd3\xd2\xbe\x15\x70\xc3\x09\x53\x5a\xe5\xc4\xea\xd2\x0c\x50\x1f\x3f\xac\x16\x57\xf7\xbc\xac\x84\x2a\x6c\x5b\x87\x0e\x0d\x17\x84\x25\xdb\x93\x0a\x5d\x86\x5e\x40\xca\xca\xe8\xd2\x4a\x6d\x7a\x82\xc9\xd9\xa6\x36\x88\xc5\x3f\xbb\x4c\x41\xbd\x0c\xe5\xfc\x91\x0f\x49\xcf\xd4\x8b\xfa\xbf\x33\x8d\x40\x67\x47\x77\x3d\x73\x08\x01\x72\xed\x8a\x12\xd3\xec\x5a\x4b\xde\x64\xc5\x96\xa9\xa6\xc8\xe4\x78\xe7\x36\x31\xf3\x90\xe6\xa2\xd1\xe3\xaf\x0b\x5e\x7b\x1f\x29\x30\xa0\x0f\x2f\x44\x0e\x54\x13\x29\x3d\x63\x55\x55\x6a\x77\xf5\x22\xdd\xd6\x6f\x02\x40\x8b\x27\x1a\x00\x45\x8a\x48\x6a\x18\x33\x93\x64\xeb\xb4\xf0\xfc\xf1\x3d\xec\x4e\x7e\xad\x09\x4f\x1e\xe5\xb7\x29\x34\x0d\xde\x28\x26\x79\x78\x92\x24\xdd\x01\x65\x17\xb0\xc5\x4b\x41\xca\xc8\x33\x40\xe5\x51\x26\x77\x80\x29\x5c\x25\xa0\xa4\x5b\x93\xc5\x85\xd9\x20\x26\x0b\xb2\x40\xa1\xf9\xef\x06\x5e\xb6\xd1\xc9\x02\xd3\x60\xd7\x26\xeb\x07\x21\x5d\xd2\x8e\x36\x88\x44\xb3\x91\x2e\x59\xad\x74\xbc\x6a\x45\x42\x8d\x57\x4f\xc9\xeb\x48\xe0\xac\x92\x8d\x16\xbf\x1d\x65\x8b\x00\x20\x24\x4e\x87\x6f\x84\x19\x9e\xf1\x46\xb8\x50\x69\x27\x7d\x22\x44\xc2\xf9\x4c\x1e\xdc\x81\x91\xe2\xee\x47\xcc\xa8\x24\x82\xc7\x81\x7f\x8b\x0e\x91\x33\x50\xe7\x8c\x0e\x72\x94\x5a\x7b\x71\x79\x86\x9c\xf3\x68\x1e\x0a\x79\x60\xd4\x80\xcd\x73\xe4\xa8\x99\x01\x4c\x32\xa3\xb2\x37\xbb\x17\xc8\xb9\x51\x67\x58\xad\x70\x7b\x89\x1c\x35\x23\x8a\xec\x1a\xc1\x48\x6e\xf1\xb7\x81\x25\x34\x84\x8d\x55\x63\x30\xd1\x5c\x76\x43\x13\x4d\xfb\x45\xe1\x64\xe8\x33\xb2\x73\x93\x3a\x70\x32\x9c\xaf\xc5\x13\x59\x55\x13\x50\x86\xca\x52\xed\x21\x8a\x19\xeb\x76\x82\x0a\xdb\x4e\x2f\x84\x8c\x97\xd5\xf0\xb0\xc6\x3d\x97\xa8\x0d\x0c\x6c\x24\x47\x45\x0b\x29\x32\xb5\xf2\xf7\x68\x27\x97\xf8\x1e\xcd\xd4\x5a\x6e\x2d\x1c\xc8\x2f\xbc\xe6\x0b\x99\xee\x17\x14\x50\x3f\x5d\xc5\xc3\xaa\x90\x80\xfa\xdd\xfc\xfa\xa5\xb9\x68\x60\xcd\xda\x35\xad\x76\x9e\xed\x40\x3f\x20\x81\xc0\xc3\xb0\x76\x93\x0f\x73\x51\xa7\x4d\x3d\x09\x79\xe6\x8d\x56\x1f\x2d\xf8\xf3\xb6\x22\xfa\x21\xac\x1e\xe6\xe3\xb5\x0b\xae\x1c\x0f\xdb\xe3\xff\xd7\xc3\xeb\x2b\x04\xf8\x85\x38\x71\xa3\x30\x7b\x55\x34\x0c\x37\x47\xc9\x47\x85\x53\xb7\xf1\x51\x2f\x5b\x72\x1c\xf3\xbd\x83\xf5\xed\xca\xc1\x98\x7c\x71\xed\x84\xc4\x02\xf4\xfa\x97\xeb\xb3\x2b\x34\x8b\xbc\x79\x10\xa1\x17\x6f\x1b\x18\xf0\x75\x41\xc5\xaf\x5f\xbc\x7d\x70\x1d\x6b\xdb\xb1\xae\x92\x4d\xe0\x91\xb6\x1b\xe6\x50\x9f\x30\x16\xb1\x86\xf0\xa8\x79\x6c\xc5\x47\x4d\xf6\x27\x40\xd6\x06\x48\x33\x46\x4f\x07\x21\xd7\x80\x63\xf6\x5e\x63\xdd\xe2\x69\x01\x64\xd6\xa1\xdf\x23\x89\xaf\xc6\xb5\x5d\x84\xb7\x81\x5e\x6b\x10\xab\x0d\xf1\xcd\x70\x29\x0b\x24\x6d\x00\x53\x8c\xdd\x5b\x22\x1a\x22\x93\x61\xb2\x15\x9a\x0c\xdd\x9f\xd8\x54\x1b\x9b\xec\x30\xfd\x09\x4e\x4f\x02\x9c\x74\x70\xf3\x65\x21\x6a\xbd\x0e\x4f\x02\xa8\x72\xc0\xd2\x1c\xa9\x66\x64\xb6\xc7\x7d\x18\xb4\x4a\x71\xea\xfc\xec\x3c\x8f\x50\x50\xdb\xfd\x99\x86\x5e\x0a\x51\xf2\x06\x5d\x83\xd3\x2d\x94\x57\x80\x93\x6d\xb2\x33\x10\xc8\x06\x6f\xda\x3f\xed\x91\x6c\x2b\xcf\x8e\x4d\x45\x3d\x05\x5b\x3d\x39\x06\x86\x8f\x7e\x6d\x94\x99\xfc\xd2\xd8\x75\xe8\x37\x1c\xc7\x3c\xc2\x39\x8c\x9d\xd6\xcd\x17\x48\x92\x94\xb0\xf6\xac\x5e\xdf\x6c\x1f\x1f\xa5\x37\xdc\x58\x77\x41\xd2\xab\x35\xf0\x8e\x11\xdf\x64\x32\x42\xc9\x69\x14\xfa\x74\x02\x2c\x57\xab\xec\xad\xe5\x58\x84\x9d\x71\x10\xb9\xb7\xc9\x1d\x38\x42\xf6\x6a\xd3\xf0\x39\x95\xb4\x17\x39\x1e\xc8\x99\xbe\x40\xe3\x49\x87\x86\x7e\xe4\xc8\x17\x27\xb9\xc8\x04\x0e\xa7\xa3\x9b\x1c\x14\x1d\xdb\x5c\xb6\xe4\x42\x3e\xab\xb6\xcc\x13\xd8\x2c\xcb\x55\x8f\x26\x9b\x48\x65\xaf\x96\x8a\x92\x9c\xd1\xce\x94\x7a\x1e\x09\x41\x1f\x9b\x2f\xa2\x49\xd3\xcc\x1b\x3f\x62\xb3\x54\xe0\x89\x2b\xf3\x3b\xdf\x40\x59\xde\x2e\x92\x0a\xba\x97\x4f\x47\x82\x5d\x6c\x18\xcf\x45\x72\xc0\xa7\x44\x75\xf8\x7c\x3c\xa3\x49\x1e\xb2\x79\xcb\xb4\xc9\xa4\x48\x48\x6b\x8b\x28\x0a\x0a\x59\x9b\x25\x9a\x09\x8b\xe6\x31\x4a\x9e\x3a\x7c\x66\x33\x76\xd5\x7b\x31\x65\x11\x57\x19\xf0\x1d\xf5\x88\x32\x1f\xb0\x51\xac\x6c\x36\xb0\x49\x6b\x2c\x55\x98\x31\x5c\x33\x7f\x0c\xbb\xcc\x38\x1b\xe9\xef\x94\x15\x8a\xe9\x8a\x55\x4a\xa5\x79\x0c\x67\x9f\x61\x76\x78\x72\x51\xc0\x5b\x59\x91\xb2\xce\x1e\xe5\x92\xda\xdb\xac\xa3\x66\x5b\xa9\xa5\xcd\x0b\x4b\xa5\x4b\x3c\x80\xb7\x62\xf6\x69\x66\x96\xb6\x34\x3c\x9b\x10\x03\xd4\x67\x84\x4f\x1d\xf4\xcd\xe9\x14\xd3\x50\x9b\x08\x39\x97\xba\x58\x02\xc0\xb7\xc5\x14\x97\x92\x82\xf0\x2a\x67\xeb\x41\xa9\xb2\xce\x72\x4b\x66\x4b\x71\x21\xa9\x1b\xb5\x83\x1d\xba\x92\x24\x18\xe4\xb3\x72\x32\x4a\xa8\x87\xba\x20\xe8\xf9\xb5\x31\x70\x23\x02\x7a\xfe\x36\x00\xdc\x02\x7f\x9e\xbf\x19\xfd\x06\xf2\x36\x6b\xce\xf1\x84\xb4\x05\x82\x52\x62\x03\x0c\xf4\xfc\x3f\x32\x04\x4a\xe3\xb5\x87\x80\x72\xf6\x34\x05\xc0\x14\xfc\x06\x6f\xda\xc6\xbe\x2a\xfd\x2c\xf4\xa5\xb0\x37\x78\xf3\x94\x51\x0f\x56\x7c\x7d\xd0\x2b\x65\xf7\xcb\xa4\x43\x8e\x4a\xcb\x26\xc3\x20\xa0\x85\x01\xba\xd6\x97\xed\x42\xa6\x25\x24\x53\xc4\xc9\x19\xb4\xba\x5b\xeb\x2f\xee\x15\x2f\x7d\xf3\xaa\x79\xe5\xb2\x8c\x37\xe9\xf0\xac\x45\x1d\x80\xd7\x6b\x79\x02\x5e\xa9\x42\x9a\xe4\xdc\xc0\x75\x68\x88\xda\xe0\x39\x2a\x1a\x67\xcd\xed\x94\x9b\x67\x31\x75\xa7\xcb\xcf\x2a\xef\xb3\x45\xf2\xb3\x86\x92\xb3\xb7\x70\x65\xc1\xad\xf9\x40\x5a\xdf\x07\x6e\xf1\x82\x74\xab\x17\xdc\xba\x0d\xa0\x5b\xfc\x60\x72\x18\xc5\xdb\xf2\x83\xb4\x99\x1f\xa4\x7f\x68\x3f\x48\x5b\xf5\x83\xb4\x55\x3f\x38\x6c\xdd\x0f\x56\xe9\x57\xf6\x83\xc3\x27\xed\x07\xe9\x17\xf5\x83\xc3\x16\xfd\xa0\xe1\x35\xd2\x87\x88\x35\x1c\xe1\xb0\x45\x47\x68\x78\x9d\xa9\x2b\x97\x9a\x3a\x3c\x6f\x51\x87\xe7\x0f\xee\x8c\xe9\xbe\xce\x78\xd8\xd8\x19\x17\xef\x36\x76\xf6\xc6\xc3\xc6\xde\xb8\x70\xe5\x5b\x4b\xf2\xf3\x86\x92\x1f\x29\x0e\x90\x3f\xdd\x6a\x39\x10\x00\x96\x8d\x23\x01\x79\x2e\xbf\x31\x14\x38\x27\xb3\x88\xdd\xb7\x15\x06\x28\x71\x0d\xe2\x00\x68\xff\x47\x0e\x04\x94\xf9\xda\x8b\x04\xf4\x04\xda\x3f\x16\x30\x6c\xf8\x1d\x8e\xdb\x54\x4b\xf2\xab\x0c\x51\x08\x92\x55\x4f\xd7\xeb\xcb\x35\xfe\x88\x67\x7e\x66\x31\xed\x79\xe6\x97\xdc\x0e\xb5\x7b\xe6\x17\xf3\x36\xce\xfc\xde\x11\xec\xc9\x6e\x8e\x78\xb8\xcf\x91\xdf\xc8\xb4\x55\x68\x96\xc3\xb7\x2c\xb4\x8d\x58\x04\x3b\x1c\xde\x70\x93\x93\xca\xda\x0a\x62\x15\xd0\x67\x70\x2d\xe6\xbf\x7f\x58\xab\x9c\x8c\xd9\x60\xeb\x3f\x84\x45\x17\xc9\xa8\x6f\x25\x7f\x4f\xcc\x5a\xd8\x8d\xfc\x3c\x62\x24\x25\x7f\x0c\xcc\x28\x2a\x3b\xd0\xd2\xbd\x1d\x95\x4d\xc9\x1f\x0b\x50\x62\xde\x00\x4f\x62\xfe\x10\x70\xb2\x98\xb4\x1d\x35\x2d\x26\x8d\x83\xa6\xc5\x64\x73\xcc\xf4\x11\x4f\x18\x96\x9f\x01\x69\x27\x68\x92\xe2\x1a\xc4\x4c\x8b\xc9\xef\x1f\x5b\xd6\x07\x27\xd2\x78\xed\x85\x26\x72\xf2\xec\x1a\x2f\x3d\x95\xa8\x04\x96\xd0\x23\x06\x25\x7a\xb2\xee\x89\x21\x8b\x49\xdb\x18\xc2\x6b\xe6\x2a\xc5\x10\x13\x64\xa0\xe6\x4a\xe9\x93\x4f\x56\x92\x24\xdd\xd1\x70\x90\x26\x2b\xc5\x36\x91\x32\xa6\xde\xa6\x9f\xef\x9b\x5c\x9f\x2c\x93\xdd\xb2\x83\x92\x16\x37\x85\x16\x07\xc6\xa4\xa6\xd6\xfc\x22\xbf\x06\xc3\x11\xa3\x11\xa3\xe2\xbe\x66\xb3\x0b\xea\xee\x98\x48\x95\x34\xb9\xa2\xff\xad\xdb\xe4\x92\x70\x98\x51\xe1\x86\xd4\x50\x99\x73\x65\x7f\x45\x96\x98\xe1\x9a\xae\xfb\xa1\xa0\xd6\x3d\x9f\xd3\xda\x28\xc5\xca\x3a\xbd\xa7\xf1\xb3\xdc\x11\x57\x3f\xcb\x85\x69\xd5\xc2\x2f\x57\x25\xb3\x1f\x91\x73\xd3\x1a\xb3\x7f\x02\xb3\xab\xb3\xcb\xbd\x7f\xe7\x2b\x79\x3c\x83\xde\x5d\xb6\xa4\xcf\x73\xe4\x5c\x0c\x5b\xe2\xf5\x02\x39\x1f\x87\x97\xd7\x2d\x71\x7b\x09\xd8\x7d\x76\xd5\x12\xb3\xbf\x23\xe7\x7a\x78\x7e\x66\xb9\x99\x15\xb3\x37\xbb\x7f\x20\xe7\xf4\xc3\xf9\xf9\xc9\xc5\xc0\x1e\x82\x36\x48\xba\x33\xf0\xdc\x3c\xe7\xce\x7a\x40\xb5\x0e\xe5\x47\x3b\xe4\x52\xfc\x46\x7d\x98\x11\x75\xd1\x0f\xdf\xaa\xf2\x30\x57\x78\xf8\x6d\xba\x68\x55\x93\x5c\x60\x59\xdc\xe4\xa9\x2a\x75\xfe\x9c\x23\xee\xea\x23\x69\x04\xbc\x1d\x15\x18\x19\xaf\x9e\x79\x06\xbf\x8e\x8c\x7a\xa6\x72\x8a\x79\xe7\x0e\xb3\x90\xca\x2f\x66\xee\xdc\xcc\x3a\x96\xdc\x67\x04\x33\xf4\xd8\xf3\xec\xa7\x20\x8f\x8d\xe7\x4f\x02\x50\x19\xd2\xea\xb8\xad\x18\xdf\xc9\x8f\x5c\x41\xd0\x91\x88\xd2\x54\xea\x6b\x81\x1d\x3f\x9a\x33\xf9\xc1\xa9\xf4\xbb\x3b\x0e\x82\x81\x74\xc9\x34\x0a\x60\x96\xf4\x8d\xa9\xbb\xe7\x34\x34\x02\x55\x00\x69\xec\x26\x61\xd6\x14\x83\x79\xb2\x35\x1f\x71\x30\xcf\x55\x1d\xa8\x69\xf2\x89\x7f\x3e\x0d\x22\x4e\x8c\x49\x1c\x1b\x02\xd4\x98\x06\x99\xcc\x5c\x68\x5d\xfc\xca\x4b\x80\xc7\x24\xa8\xfa\xa6\x4b\xd7\xaa\x00\x0f\xf6\xc3\x1f\x35\xa4\x2e\x26\xea\xf4\xda\xd1\x11\xc2\x2d\xb9\x97\x31\xb7\x2e\xb2\x3e\x0b\xb4\x88\x02\xc9\x57\xea\xf1\x32\xf1\x57\xe6\x83\x82\x7a\xbb\xa0\xa6\xd2\x5a\xc7\xb4\x83\x16\x49\xa8\x63\x62\x99\x19\x76\xa7\xa9\x4b\x32\x52\xce\xa1\x50\xb6\x2b\x24\x60\x43\x69\xf7\xe6\x26\x1b\xd4\x2c\x34\xbd\x89\x6c\xe6\x73\x5a\x99\x85\x6d\xdb\x55\xfb\x5b\x55\xbd\xfe\x77\xfb\xaa\x7a\xc4\xa2\x05\x78\x79\xb6\x81\x04\xa2\x30\xb1\x89\x85\xe9\x9a\x4f\x03\xb9\x6b\x14\xd3\x6d\xde\x7d\x07\x5b\x72\x08\x17\xdd\xe9\x2e\x81\x23\xf5\x11\xf9\x0d\x95\x47\xd2\x43\x82\xcd\xc9\x1a\x9c\x2d\xcc\x1c\x94\xe3\xb8\x89\x3e\xc1\xcb\x7d\x23\x16\x1b\x62\xb7\xf8\xcb\x95\x41\x21\x6b\x3b\xad\x92\x43\xbf\xb6\xd2\x0e\xfc\x5a\x02\x35\xec\x6b\x6b\x07\x94\x11\x57\xa8\xbb\x89\x96\x52\xc0\x93\x51\x6f\xe0\x8f\x12\xd7\x09\x1c\xcc\xb7\x46\x61\xbe\xbc\x87\x12\xb9\x99\x94\x9f\x55\x0e\x4f\x03\xea\xde\xf6\x97\x62\x4a\x79\x77\x8a\x43\x2f\x20\xaa\xc4\x42\x90\xa4\xbd\x06\xac\xd5\xd7\xdb\xbb\xc8\x2c\x38\x6d\x39\xb2\xd3\x2c\xee\x99\x8f\x19\x00\xef\x93\x80\x4e\xc2\x53\x5d\xae\xc7\xb7\x52\xc7\xb4\xad\x29\x37\x4d\x12\xd8\x4a\x75\x3c\x48\x0f\x4b\x32\x6d\x4e\x31\x23\x22\xdb\x48\x59\x31\xfb\x59\x2c\x6c\x0c\x3b\xdd\xa9\x87\x95\x46\xdd\x6a\xd0\x82\x4e\xf2\x71\xcd\x96\x5f\xf6\xa9\x6c\xf3\xff\x05\x00\x00\xff\xff\xf1\x83\x52\x6b\xe5\x5b\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 23525, mode: os.FileMode(384), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

