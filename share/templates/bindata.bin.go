// Code generated by go-bindata.
// sources:
// index.html
// DO NOT EDIT!

// +build bin

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xe4\x5b\x69\x73\xe3\x36\xd2\xfe\xee\x5f\x81\xf0\x75\xde\x0f\xa9\x21\x19\x1f\x93\xf5\x4e\x24\x6f\xd9\x96\x32\xc3\x8a\x0f\x95\x2d\xcf\x6e\x36\x95\x4a\x41\x24\x24\x61\x4c\x91\x5c\x00\x92\xad\xa8\xf4\xdf\xb7\x01\x82\xa7\x4e\xca\xf4\xd8\x35\xfb\xc1\x96\x08\xa2\x1f\x34\xba\x1b\x78\x1a\x87\x1a\xdf\xb5\x6e\x2e\xba\xbf\x75\xda\x68\x28\x46\xfe\xde\xe9\x6c\xb6\x3f\x41\x1f\x9a\xc8\xba\xe1\x82\x04\xe2\x33\x61\x9c\x86\xc1\x7c\xde\x50\xaf\x11\x3a\x6d\x0c\x09\xf6\xe0\x8b\xfc\x3a\x22\x02\x23\x77\x88\x19\x27\xa2\x69\x8c\x45\xdf\x3c\x31\xf4\x2b\x41\x85\x4f\xd4\x77\x78\x9a\xcd\xac\x16\x16\xd8\xfa\x74\x3d\x9f\xa3\x50\x01\x37\xec\xac\x86\x06\x1a\x0a\x11\x99\xe4\x3f\x63\x3a\x69\x1a\xff\x32\xef\xcf\xcc\x8b\x70\x14\x61\x41\x7b\x3e\x31\x90\x1b\x06\x52\xac\x69\x38\xed\x26\xf1\x06\xc4\xc8\x4b\x06\x78\x44\x9a\xc6\x84\x92\xc7\x28\x64\x22\x57\xf9\x91\x7a\x62\xd8\xf4\xc8\x84\xba\xc4\x54\x0f\xef\x10\x0d\xa8\xa0\xd8\x37\xb9\x8b\x7d\xd2\x3c\xd0\x40\xb3\xd9\xa7\xee\xd5\x25\x32\x1a\xdf\x19\xf3\xb9\x69\xfe\x4e\xfb\xc8\x69\xff\x71\xda\xf0\x69\xf0\x80\x18\xf1\x9b\x06\x1f\x02\xb6\x3b\x16\x88\x02\xbc\x81\x86\x8c\xf4\x9b\x86\xdd\xc7\x13\xf9\x6c\xc1\xbf\x65\x48\xbf\x93\xc0\xa3\xfd\x3f\x4c\x33\x8f\x14\x03\x70\xfa\x17\xe1\x4d\xe3\xe8\xf0\xe9\xe8\x30\x85\x93\xe6\x9f\xcf\x35\x28\x4f\xd0\xcd\xa3\x43\x2b\x0a\x06\x06\x12\xd3\x08\x3a\x4a\x47\x78\x40\x6c\x59\xa0\x8d\x90\x41\xe3\x28\xf2\x89\x29\xc2\xb1\x3b\x34\x0b\xcd\x1c\x1c\xfe\xf8\x04\x7f\xa5\x86\xec\x85\x96\xa0\x8e\x55\x11\xf9\xf8\xf8\x09\xfe\x36\x23\x1f\x1f\x57\x45\x7e\x7f\xf8\x04\x7f\x9b\x91\xdf\x1f\x56\x45\x3e\x01\x6b\x9c\x6c\x61\x8d\x93\x15\xd6\xe0\x62\xea\x13\x3e\x24\x44\x24\x4e\x11\xe4\x49\xd8\x2e\xe7\x65\x4c\x28\xb2\x69\xe0\x91\x27\x4b\xbe\xd4\x40\xdc\x65\x34\x12\x79\xc9\x2f\x78\x82\xe3\x52\xa3\x3c\xa2\x10\x67\x6e\x86\xf7\x85\xdb\x4c\x0e\x12\x46\xe0\xdb\xa1\x75\x60\x1d\x9c\x24\x05\xd6\x88\x06\xd6\x17\xd0\xc0\x83\xc1\x66\x8e\x30\x0d\x0a\x62\xb3\x19\x04\xb5\xd5\x3d\xfb\xf8\xb1\xdd\xea\x51\x18\xd3\x50\x5d\xab\x16\x0b\xce\x66\xc4\xe7\x64\x3e\x87\xf6\x74\xb9\x2a\x0b\xbc\xf9\xdc\x48\x86\x72\xc3\x8e\xb5\xd4\x1d\xb1\xf5\x6c\x70\xda\xe8\x85\xde\x54\x17\x06\x78\x82\x5c\x1f\x73\x30\x34\x7c\xed\x61\x86\xe2\x0f\xd3\x23\x7d\x3c\xf6\x45\xf2\xc8\x05\x8c\x6e\x17\xfc\x13\x19\x88\x85\x30\x18\x65\x75\x3a\x80\x42\x70\x55\xda\xa0\x47\x53\x34\x39\xae\xa1\x57\x84\x99\x7d\x7f\x4c\xbd\xa4\x4e\xa9\x96\x46\x97\x9a\x11\x06\x73\x81\x6f\x8e\x3c\xf3\x00\x45\xd8\xf3\x68\x30\x30\x7d\xd2\x87\x89\x27\xf1\x45\x22\xdf\x1b\x0b\x11\x06\x25\x08\x11\x0e\x06\x3e\x91\x10\x3e\x8e\x38\xf1\x12\x5f\xc7\x95\xb5\x9d\xe3\x4a\x52\xb9\xb8\x56\x52\x8c\xd9\x40\xfa\xf0\xff\x34\x56\xfa\x3a\xd7\xac\x0a\x85\x08\xa7\xcd\x72\x66\x86\x81\x3f\x2d\x56\x81\x4a\xdd\x58\x8f\xcc\x3a\xe0\x05\x10\x5b\x83\xa4\xa2\x17\x9a\x5d\x80\x7a\x33\x92\x76\x6c\xc4\x82\x13\x30\xa2\x5e\xd3\x18\x82\x65\x8b\x7e\xe8\x31\x1c\x78\x50\x46\xa3\x83\x6c\x36\x00\x67\x48\x06\x81\xfa\xc0\x28\x92\x01\x50\x9e\x66\x4a\x66\xce\xbf\x6a\xd8\xb8\xd0\xaa\x0d\xb1\x53\x8a\x24\xa9\x46\xd9\x6f\x59\x10\xc6\x05\x68\x8d\x63\x4f\x1b\x63\x3f\xd7\x87\xa4\x2a\x7c\x94\xdd\xef\xd3\xa4\x1e\x76\x05\x9d\x90\x45\xe3\x61\xdd\x61\x49\x8f\xfc\x83\x6d\x3f\x3e\x3e\x5a\xd0\x63\x06\x7f\x96\x1b\x8e\xec\x98\x4f\x61\x0e\xf0\x09\xe6\x84\xdb\x3e\x16\x84\x8b\x7f\xb8\xa3\xa8\x19\x8f\xfd\x32\x24\x80\x26\x1c\x8c\x17\x5d\xe5\xd3\x95\x1a\x26\xa3\x02\xe6\x2b\x94\xfb\x0e\x33\x0d\x1b\xd0\x40\x8e\x29\xd4\xa7\x8c\x0b\x55\xba\xd8\x11\x37\xf4\x48\x09\x4a\x16\xc1\xa4\xba\xd0\x6b\xa5\x62\xea\xcf\x96\x73\xd7\xbd\x75\xce\xa5\xe7\xa4\x40\xcd\x3a\x3f\x57\xd1\x71\xf4\xff\x41\x8f\x47\x3f\xc7\x63\x41\x46\xce\x38\x5a\xac\x96\x8b\xc1\xfb\x8e\xec\xc9\xc2\x90\xd0\x7d\x79\x83\x3d\xf4\x71\xb9\x87\x3e\x5e\xdb\xc3\xcb\xb3\x1a\x7a\x68\x8f\xfd\x75\xc3\x34\xf7\x08\x0f\xd0\x09\x4d\x3e\x9b\xe9\xa2\x50\x87\x85\x8f\x65\x1a\x91\x1d\x1c\x91\x51\x7e\xc0\x4b\x06\x39\x4e\xa8\x24\xec\xf7\x81\x9d\xcd\x83\xc2\x80\x9f\xcd\x04\x19\x45\x72\xec\x21\x03\x68\x0e\x5a\xe5\x1f\x3e\xc4\x5f\xfe\x04\x3b\x10\x5f\x21\x5a\xd2\x2e\xcb\xa7\x1b\xaf\x5f\x6e\xf0\xa7\x6a\x0d\x48\x80\x25\xf8\x05\x3b\x6d\xee\xb8\x1b\x8d\x6b\xee\xb8\x42\x5c\xd3\x71\xfa\xdc\x8e\xd3\x5a\x3a\x1e\xf1\xb2\x1a\x07\x3f\x3e\xaf\xe3\x12\x71\x93\x5e\xe9\xc3\x86\x9c\x30\x11\x98\x40\x32\x25\x87\x18\x6a\x26\xb3\xe3\x7c\xfe\x73\x39\x27\xd3\xa9\x98\xcc\xce\xf4\x9a\xce\xfe\x61\xef\x07\x7b\x3e\x9f\xcd\x62\xfd\x72\x0a\x63\x99\xd3\xfe\xd9\xc3\xb0\xa4\x92\x89\x11\x2c\x59\x12\xc2\x01\xfc\x4f\xf0\x09\x2b\xb6\xd9\x4c\x19\x66\x3e\x97\x65\x17\xf1\x57\x14\x06\x17\x3e\x75\x1f\x9a\x33\x31\xa4\xdc\x1a\x02\x41\xfb\x44\x95\xcc\x11\xda\x8b\xe7\x82\x73\x89\xaa\xe4\xad\x2e\xf4\x27\x66\xde\x53\x9d\x51\x6e\xa9\x14\xa3\x83\x61\xbd\x5a\xc5\xaa\xa0\x4c\xbf\x6d\xb5\xd2\xbe\x85\x78\x86\x10\xe2\x86\xac\xf3\x48\xc5\x10\xc9\x27\x08\x0f\xe9\x6b\x00\x95\xff\xe2\x34\x7a\x36\x83\xb4\x65\x40\xd0\x3e\x7d\x87\xf6\x41\x4a\x2d\xab\xd5\xfc\x78\xd1\xb9\xb7\x2e\x29\x97\x16\x11\x0c\x34\xf9\x95\x4c\x91\x1c\x79\x26\x40\xf5\xa6\xe6\xb5\xa1\xea\x5b\x90\xab\x28\x37\x0a\x2f\x89\x4c\x35\xb1\x2b\x93\x20\xf5\x35\x08\x1f\x19\x8e\xd2\x85\x67\x22\x05\x8b\x6b\x2f\x91\xcc\xcc\x94\x97\xee\x0d\xcc\x31\x27\x91\xab\x22\x4b\xe5\xab\xf1\x63\x53\x83\xdc\x73\xc2\x3a\xae\x50\x0a\x64\xd0\x69\xe9\xf7\xcf\x6f\xe1\x6e\xca\x17\x1b\x48\x0a\x6b\xc0\xff\x27\xa6\x62\xb1\x81\xb4\xb4\x4a\x0b\x26\x0d\x26\x84\xc5\x19\xde\x92\x96\x1c\x88\xb1\xc5\x96\xd2\xd2\xac\x25\x5b\xb0\x5c\xa0\x15\x3f\x36\x86\x9d\xd7\xaf\x18\x75\x5e\x3f\x0b\xb8\xd6\x2f\x8b\xf1\xe6\xf5\x75\xb8\x79\x94\xc9\xf4\xd9\x90\x22\x56\x8b\xb2\x6b\x78\x88\x23\x0f\xa1\x65\xd6\x89\x83\x2e\x4d\xc7\xe3\x2c\x1c\x7a\x2d\xa5\xc9\x24\x95\x8e\x4d\x91\x2f\x4c\x0c\x51\x1d\x36\xa7\x54\x06\x9b\x14\xe6\x3d\xb9\xcd\x38\x29\x2c\x5a\x46\x63\x95\xac\x26\x6b\x09\x27\x80\xe4\x04\xd2\x58\x46\xd2\x44\x48\x37\xe7\xc8\xb2\x42\x5a\x73\x8a\xe2\x37\x67\x13\x4c\xfd\x4a\x83\xae\xa0\x54\x29\xa2\x00\x10\x86\x59\x2e\x9e\xb6\x50\x17\xa4\xbf\x2f\xab\x3b\xe6\x69\xf8\x2d\x68\x7c\xcf\xcb\xa1\x59\x9f\xe9\xc6\x72\x9d\xbc\xa8\x8b\xb7\xd4\x74\xf7\xfa\x45\xed\x5a\x88\x50\x60\xbf\xac\x86\x7a\xb5\x54\x8f\xae\xac\x9e\x53\xe4\x59\x23\x95\x56\x1d\xa9\x34\x37\x52\x9d\x25\x23\x95\x26\x23\x55\x0f\x53\xda\xb7\xb2\x31\x5a\x65\x28\xe5\x05\x63\xb3\xa4\x25\x6b\x7d\x60\xe4\xeb\x3b\x9d\x7a\x3c\x96\xe6\x40\xea\x9d\x76\x9f\x72\x04\x3a\xff\xad\xdb\xbe\x43\x4e\x80\x46\xa1\x37\xf6\x43\x74\xfc\x31\x97\xb1\xc5\x5a\x9c\x4f\x61\x95\xeb\x04\xa5\x75\xc6\xa9\xbd\x12\xed\x66\x2c\x36\xc1\x41\x95\x32\x5e\x21\x56\x0a\xd8\xe7\x4e\x57\xa9\x18\x11\x86\x38\x81\xa5\x46\x21\xea\xa9\x9c\xf6\x7c\x81\xcf\xa9\x28\x6b\x59\xd2\x51\xe1\x48\xe5\x36\x03\x95\xf5\x3b\x7d\x61\x37\x44\xd8\x7d\x20\x82\xaf\x77\x44\x27\xae\xb4\x9d\x2b\x12\xc4\xf5\xce\xd0\x90\x95\xdc\xd1\xc9\x74\x5d\x6f\xc8\xe5\xfa\x96\xb4\xed\xe4\xf4\xdc\x0a\xee\x45\x5c\x53\xb4\x9d\xc7\xc2\x88\xbf\x23\x8c\x85\x8c\x2f\x1a\x6f\x99\xff\x94\xc4\x7a\xef\xb5\x64\x95\x45\xdf\xc5\x60\xb3\x99\x4a\xab\xaf\xc3\xe0\x9a\xfa\x28\xad\x2e\x8d\x62\x18\xc8\x18\x52\xcf\x23\x81\xa1\x67\x13\x6d\xc5\x67\xc0\x2c\x53\x7e\x7d\xa0\x24\x38\x65\xf5\xdf\x2d\x31\x86\x36\xdc\x5a\x6b\xb4\x55\x9d\xed\x42\x59\xe3\xad\x57\x30\x06\xdc\x2e\x90\xb5\x99\xce\x7c\xff\xdf\x84\x85\x28\x8d\x30\xed\xa2\x52\x81\x6c\x37\x2d\x49\xf4\x2e\x97\x28\x13\xeb\x60\x4a\xdd\x54\x8c\x94\x56\x12\x23\x8b\x61\x5e\x0c\xf4\xaa\x91\x52\xd0\xf4\x99\xe1\xb2\x1a\xab\xd8\x8d\xe5\xc3\x75\x49\x3f\x36\xc6\x4c\x3b\x8d\x96\x4d\x78\xdb\xc5\x4c\x3b\x8b\x96\xed\x00\x37\xc4\x4c\x3d\x99\xca\x88\x8c\x76\x58\xca\x82\x54\x96\xaf\x5c\xb5\xaf\x16\x13\x16\xa8\xa1\x33\x96\x07\x0a\xdd\x54\x22\xd6\xaf\x54\x6a\xa5\xe7\xc4\x34\xa1\xc8\xde\x6c\x99\x81\x48\x81\x5f\x74\x2a\xbe\xfd\x1a\xb1\x94\x64\x4b\x90\x62\x96\x5d\x2a\x5c\x9f\x19\x1b\x65\x99\x6a\xea\xd7\x9a\x6d\xa6\x7b\x6c\xb2\xd2\x7e\x94\x79\xa6\x83\x19\x1e\xc9\x74\x57\xee\x70\xe9\x41\xd5\x09\x39\x95\xa7\x0c\x68\x3f\x92\x9b\x10\x81\x1a\x4c\x0a\x01\xa9\xff\xc9\x09\x9d\xa1\x1d\x95\xdb\x36\x1b\x1e\x17\x4e\xd0\x4c\x9f\x3e\x10\x33\x16\x92\x27\x6d\x34\x3b\x25\xc5\xd0\x9a\xdc\xa3\xe9\x42\x2b\x49\x43\xd9\xec\x03\x4f\xc9\xb9\x43\xba\xfd\xa5\x8e\x4b\x56\xeb\xa8\x47\x3b\x32\x7c\x08\x34\x73\xc0\xc2\x71\x64\xa4\xab\xa3\x6c\x23\x3c\x7b\x6b\x52\x01\x31\x9a\x4f\x85\xc5\x30\x23\xca\xec\x68\x46\x49\xd0\xa0\xb8\xed\x2d\x21\xf3\xfb\x7c\x8d\x25\x87\x57\xbd\xc2\x33\x94\xc0\xc8\xc5\xd3\x86\x5d\x2c\x4f\x66\x76\xdd\x9a\xda\xcf\x5a\xd8\x8b\x97\x4e\x93\xfd\xf4\x96\x6e\x99\x2f\x9e\x9d\x01\x68\xce\x2b\x3d\x11\x68\x83\xec\x95\x50\x97\x6c\x4e\x96\xf7\xfa\xd0\x25\xe1\xbc\x95\x79\xc9\x43\x12\x0f\x49\xcc\x2c\x0e\x36\x21\xc5\xf1\x8d\xae\x42\x46\x36\x41\x15\x77\x42\x51\x69\xd7\x7f\x27\xbb\xdf\xc2\x84\xf5\x2c\xb3\x07\xd6\x59\x8f\x87\x3e\x70\xe4\x2b\xd9\xff\x3a\x37\x4a\x9e\x69\xff\x4d\x50\x9b\xec\x9f\x9d\xb8\x64\x6f\x92\x52\x98\xd7\x70\xcf\x27\x39\x76\x8e\xb3\x94\xa4\xb5\xf8\xad\xfa\x6f\x0e\xc3\x09\x61\x0b\x8c\x0f\x08\xe9\xd5\x21\xf5\xc4\x72\x4d\x8b\x61\x51\xaf\xdc\xb3\x7c\xb9\x6a\x46\xd5\x35\xe4\xbe\x64\x55\x99\xbb\x29\xaf\x2a\x22\x37\x0f\xab\xca\xc8\x6d\xc0\x92\x8c\x9d\xf6\x5c\x75\x34\xbb\x4e\x25\xd2\x3b\x14\xab\x22\xa8\xb4\x05\x1d\x1f\x2f\x88\xdc\xd5\x0b\x5b\x79\x60\x2f\x9d\x5b\x2b\xec\x6b\x27\x87\x48\x55\x79\xa4\xd5\xff\x3a\x34\x02\xed\x64\x2c\xd2\xa2\xfc\x01\x8d\x39\x1e\x90\xed\xc9\x44\x29\xfa\xed\x73\x49\xab\xff\xda\x54\x02\x1a\xd4\xc4\x24\x2b\x90\xde\x1c\x91\x40\x68\xbd\x15\x1e\x51\x51\x5e\x0b\x8d\xac\x40\x7a\x19\x16\x51\x8d\xed\x42\x22\x85\xf9\x37\xbf\xa5\x92\x78\x87\xc9\xa9\x2c\x3f\x3d\xaf\x30\x86\x18\x4e\xa4\x39\x0c\xf4\x59\x5d\xf3\x4b\x6c\xf0\x80\x0e\x90\xd1\x52\x37\x48\x41\x9b\xca\xc2\x87\xc8\xb8\x0a\xc7\x81\x90\x97\xc7\xaa\x4b\x1f\x21\x43\x9d\x2e\xc0\x12\x8a\x55\x95\x3d\x46\xc6\xbd\x3c\x17\xd8\x41\xf4\xbd\x12\xf5\x76\x11\xfd\x09\xc5\xfb\x23\xb1\x6c\x0d\x5c\xa7\xcf\xbd\xea\xa7\x3a\x5a\x9d\xea\x9c\xaf\x44\x75\x4e\x9e\xea\x1c\x08\x1e\xd6\xc7\x2e\xe1\xdb\x53\x9d\xf3\xbf\x41\x75\xce\xab\x53\x9d\x53\x1b\xd5\xad\x40\x7a\x73\x54\xe7\xbc\x1d\xaa\x73\x6a\xa3\xba\x15\x48\x2f\x43\x75\xce\xae\x54\xb7\x72\xbd\x94\x4e\x11\x95\x57\x27\x9d\x2d\x24\x0a\x33\x82\xbe\x11\x75\x94\x1e\x4e\xc8\x83\x29\xe4\x04\xf6\xaa\xad\x4d\xd9\xca\x0d\x6a\x94\x6e\xf7\xf5\x1a\x76\x21\x70\xa3\x6d\x16\x63\xeb\x15\xc9\x4e\x80\xd6\xe9\x92\xd6\xba\x41\x35\xb4\xa9\x36\x93\xdf\xa5\x9b\xc5\xeb\x1a\xbe\x0c\xf9\xf2\x56\x9f\x4f\x91\xf4\xa5\x28\x52\xde\x59\xac\xca\x91\x57\x64\xf4\x75\x48\x52\x36\x94\xb1\x24\x3c\x85\x6c\xba\x3d\x43\xc6\x6a\x7e\xfb\x14\x09\xfd\x7c\x6d\x8e\x94\x2a\xd4\x44\x92\xab\xa0\xde\x1c\x4b\xca\xf0\x7a\x2b\x34\x19\x87\x7a\x2d\x3c\xb9\x0a\xea\x65\x88\x32\x6e\xed\x55\x77\x16\xe5\x49\xd3\x0e\xbb\x91\xdf\xef\x20\xe3\x55\x95\x51\xeb\xac\xda\xc9\x24\x39\x13\xac\x9f\x4d\x22\x5e\x99\x4c\x3a\xfc\xeb\x70\x09\xb4\x93\x51\x49\x87\x85\xb0\xd8\xe2\x55\xd6\x5b\x4a\xcf\x6f\x9f\x4c\x3a\xfc\xb5\xb9\x04\x34\xa8\x89\x4a\x56\x20\xbd\x39\x26\x81\xd0\x7a\x2b\x44\xa2\xa2\xbc\x16\x1e\x59\x81\xf4\x32\x34\xa2\x1a\xfb\x7a\x5b\x8b\xfb\x6e\x56\xea\x12\xb9\x32\xab\xb4\xed\xd7\xe1\x6a\xc7\xb1\xe3\xb4\xaa\x6e\xbf\x49\xc9\x43\x64\xdc\xef\x26\x79\x04\x92\x77\xed\xdb\xaa\xbb\x94\x52\xf4\x18\xd4\xbd\xdd\xa5\xcd\xf7\xc8\xb8\x76\x76\x11\xfc\x09\x19\x9f\x9d\xdb\xee\x2e\xa2\x7f\x43\xc6\x6d\xfb\x6e\x17\xc9\x13\x64\x74\x9d\xab\xb6\xfc\x71\x46\x55\xd1\xbf\x23\xe3\xe2\xe6\xea\xea\xec\xba\x15\xdb\xb7\x06\x9e\x8e\xf8\x0b\xd0\x34\xaf\x78\x1d\x28\xe2\x39\x2e\xbf\x5b\xbc\x08\x14\x71\x7d\x0f\x28\xa2\x72\x37\x39\xe2\x16\xc4\xf5\x9a\x5f\xb5\x68\x7e\x96\xb7\xb2\x93\xba\xdb\xdc\xab\xd1\xf5\xef\x4b\xf5\xf7\xd2\x59\x94\xab\x9f\xae\x54\x02\xeb\x30\x1a\x32\x2a\xa6\x95\x84\xae\xa9\xbb\xe5\x5d\x6a\x2d\x70\x47\xff\xaa\x26\x70\x4b\x38\x85\x49\x4b\xac\x16\xd2\x73\x4e\xbe\xf3\x5d\x5a\xba\xe2\x9d\x7f\x59\xba\xff\xbd\xdb\x65\xa4\x24\xf2\xa5\xf7\x87\xf9\xdb\x58\xfa\x57\xf8\x10\x3e\x67\x3e\x1d\x04\xfa\x77\x5a\xc6\x5e\x9c\x85\x25\x3f\xe9\xba\x04\xd9\x65\x3f\xeb\x92\xe5\x5b\xfe\xb4\x4b\xf5\x47\x09\xe8\xdf\x9a\xe9\xcb\x84\xf9\x1f\x89\x61\x46\x84\x86\xdb\x5b\x24\xcf\xd3\x38\xdf\x8b\xd7\x08\x89\x09\xfe\x1b\x00\x00\xff\xff\xd0\x18\x54\x9b\x20\x45\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 17696, mode: os.FileMode(384), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

