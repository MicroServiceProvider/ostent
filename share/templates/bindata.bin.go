// Code generated by go-bindata.
// sources:
// index.html
// DO NOT EDIT!

// +build bin

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5d\xfb\x6e\xdb\xc8\xd5\xff\x3f\x4f\x31\x4b\x7c\xf9\xb0\xbb\x0d\x49\xdb\x71\xda\x20\x2b\xa9\x48\x2c\x35\x25\x6a\x3b\x42\x6c\xa7\x5d\x2c\x16\xc5\x48\x1c\x49\x93\x50\x24\x97\x33\xf4\xa5\x86\xde\xbd\x67\x78\x9b\xa1\x44\x49\x24\x45\x32\x2e\x92\x00\xb6\xc5\xe1\x9c\xeb\xdc\xce\xf9\x1d\x52\x79\x7c\xb4\xc9\x8c\xba\x04\x69\xf1\xdf\x7f\x87\x3e\xa7\x4b\xa2\xad\x56\x3d\xe6\x63\x77\xf0\xf8\x68\x0c\x31\xc7\x46\xdc\x0c\xad\x66\xd2\x4c\x5c\x7b\xb5\xda\xa0\x5e\x78\x8c\xbb\x38\xa6\xc7\x68\x11\x90\x59\x5f\x33\x35\xc4\x29\x77\x48\x5f\x4b\xef\xa2\x94\x6b\xda\xb0\x5a\x69\x83\xcd\xb6\x9e\x89\xb7\x0a\x72\x30\x88\x78\xd6\xb3\xe9\x2d\x9a\x3a\x98\xb1\xbe\x16\x78\x77\x88\xdc\x83\x72\x36\xb1\x41\xb2\x3e\xf1\x38\xf7\x96\xda\xe0\x19\x42\x6a\xb7\xa9\xe7\x84\x4b\x17\xb1\x25\x76\x1c\xfd\x18\x71\x72\xcf\xf5\x80\xce\x17\x5c\x1b\xa8\xdd\x1e\x1f\xe9\x0c\xc5\x0a\xf9\x38\xc0\x4b\x66\x9c\x63\xd7\xb8\x24\x73\xcc\xe9\x2d\xe8\xc6\x16\xde\x9d\x2e\x7e\x2d\xa8\x4d\x40\x49\x87\x41\xa3\xf8\xac\x36\x0a\xcd\x23\x05\x40\x85\xc5\x71\xca\x7a\xf1\x2a\x96\xea\xdd\x92\x60\xe6\x78\x77\x20\x18\xa7\x1e\x3a\xf7\xb0\x8d\xf0\xed\x1c\xd9\x94\xf9\x0e\x7e\x40\x1e\xf8\xdd\x73\x99\x16\xfb\x32\xf5\x51\xa2\xd2\xb5\x43\xdd\x2f\x91\x66\xab\xd5\x20\x1a\xaf\x54\x46\xaa\x84\x2e\x7e\x21\xf8\xc8\x09\xdc\x9e\x12\xdd\x0f\x08\x02\xa1\x98\xeb\x0e\x99\x81\xcd\x86\x61\xa0\x64\x4c\x53\xd9\xc2\xed\xb1\xce\xe6\xe2\x78\xd0\x33\xc1\x2b\x91\x13\xb3\x0f\x9b\xde\x74\x70\x30\x27\xfa\xf1\x71\xcb\x3e\x0c\x1d\x75\xb0\x97\xc4\x0d\x51\x66\xa8\xf8\x90\xf4\x83\x9e\x0e\x4d\x3f\xe6\xf5\xa5\xae\x1f\x72\x7d\x1e\x78\xa1\xaf\xc9\x1e\x5b\xfb\xe8\x0e\x9e\x10\x27\x1e\x2e\xd7\xbb\x0b\x30\x50\xd9\x04\xc6\x25\x73\xc6\x3e\x06\x93\x10\x66\xa1\x1b\x0d\x71\x72\x37\x6e\x89\x27\x20\x62\x64\xea\xb9\x36\x0e\x1e\xc4\x80\xe3\x89\x43\x6c\xb9\x10\x32\x9f\xd9\xf1\x52\xa8\x2c\x53\xe9\x0a\x9d\x71\xe1\x14\x1a\xa6\x53\xc8\x36\xce\x09\x63\xc6\xdf\xa1\x0f\x2c\x2c\x94\xff\x97\x08\x51\xfc\x80\x72\x66\xec\x61\x3a\xba\xe7\x01\x3e\x13\x3c\x60\x2c\xd7\x78\x0f\xf4\x7d\xd4\xd7\x20\x35\xf6\x80\x6a\x7b\xcb\xce\xb8\xf0\x02\xd2\xb8\x33\x22\xa6\x3b\x9d\xb1\x87\x36\x76\x05\xfa\xd3\x6e\x67\xe4\x2e\x7b\xa6\x5c\x0b\x6d\x2e\x0b\x58\x91\xac\xd3\x55\xe1\x1a\x6f\x27\x0c\xb6\x1f\x4e\x5a\x5c\x1e\x97\xd9\x0e\x7b\xc8\xf2\x60\xe1\x74\x0a\xd4\xeb\x33\x63\x9d\x79\xb5\x65\xb2\x4e\xdd\xdd\x32\x51\x24\x1f\xb0\x4c\xf6\x3b\xa5\xf2\x72\x59\xa7\x3d\x68\xb9\xf4\xcc\xd0\xd9\x3c\xce\xc8\x1f\x9b\x27\x5a\x3a\x0f\xd1\x51\x7c\x7c\xad\x9d\x5a\x0a\x0b\xc6\x03\xea\x13\x79\x4c\xad\x85\x2f\x7c\x41\x30\x4c\xf5\xdc\x49\x1e\x87\x34\x08\x0e\xda\x34\x66\xd1\x06\x63\x12\x50\xcf\x4e\x8e\xed\x3d\xbd\x73\x11\x0e\xfa\x84\x9d\x90\xec\x26\x04\xf9\xc9\xfd\xc8\x2f\xca\x21\xee\x60\x11\x88\x05\xd8\x9d\x13\xf4\x7f\x0e\x46\x6f\xfa\xd9\x0d\xe3\x9c\x32\x31\xfb\xf2\x06\x95\x30\xa5\x70\x3b\x92\x2a\xa3\x3b\x6a\xf3\x85\xfe\x32\x20\x4b\xb1\x05\x80\x54\x23\x36\x7e\xb5\x5a\xc6\xfa\xd5\xf1\x42\xcc\x28\xf2\x45\x16\xd1\x6e\x61\xa0\x3b\xc1\x86\x43\x92\x88\x34\xfa\xf3\x4c\xce\x20\xf5\xb7\x8c\x97\xd6\x88\xd6\xc2\xd8\x25\xd8\xd5\x71\x1c\x7b\x41\x96\x1d\x04\xb2\x20\xc5\x8b\xf7\xef\xd2\x61\xac\x50\xac\x89\x38\x36\x16\xdd\x62\x14\x7b\xa8\x07\xbf\xc9\x30\x16\x9c\xd6\x41\x1c\x2b\xa4\x34\x1f\xc8\x4a\xae\xb5\x22\x59\x49\xde\x79\x28\x1b\x89\x6e\x3c\x96\x95\x5c\x6b\x04\xb3\x92\xf8\x7b\x34\x9b\xdb\x51\xba\x0b\x67\x23\x71\xad\xc5\xb3\x92\x7b\xad\x80\x56\x92\x77\x1e\xd1\x46\xa2\x5b\x0b\x69\x25\xf7\x1a\x31\xad\x24\xee\x20\xa8\xcd\x4d\xc7\xce\xa2\xda\xf4\xdc\xae\x1e\xcf\x5d\x7b\x1c\x3b\x75\x08\x6f\x18\xa9\x15\x46\xff\x2d\x20\x7b\xa2\xe8\xad\xf2\x9e\xd7\x8d\xbe\x21\x54\x54\xc2\x6f\xb8\x92\xf1\x37\x5c\xd4\x0e\xc0\x21\x16\x16\xe4\xff\xa0\xae\xbd\x2f\x16\xde\x1a\x4c\x0b\x06\xd1\x18\x1c\xc4\x41\x0c\xc6\x41\x0c\xc4\xa8\xd4\x60\x80\x26\x73\x3d\x64\xc4\x9f\x72\x0d\xd9\xe0\xce\xe4\xa2\x2f\xd5\x1a\x4f\xc1\xb5\xaa\x9e\x51\xc3\x9e\x91\x6c\x39\x73\xb0\x67\x5d\x27\x0e\xc3\x59\x07\x79\xc3\x90\xb2\x2f\x28\x64\x18\xe6\x78\x95\xdc\x01\x74\x6b\x22\x75\x90\xd2\x5b\x4c\x1f\x0e\xf4\xe3\x37\x99\x3d\x0c\x67\x1d\x24\x0f\x20\xa4\xf9\xdc\x21\x63\x5a\x2b\x75\xc8\xa8\x3b\xcf\x1c\x84\xe4\xc6\x13\x87\x8c\x69\x8d\xbc\x21\xa3\xfd\x9e\x36\xa8\x3b\x49\x77\x59\x83\x90\xd6\x5a\xd2\x90\x31\xaf\x95\x33\x64\xd4\x9d\xa7\x0c\x42\x72\x6b\x19\x43\xc6\xbc\x46\xc2\x90\xd1\x76\x90\x2f\xa8\xf3\xb0\xa9\x74\xe1\xf1\xd1\xfc\x19\xf9\xde\x17\x82\xfc\x30\xa0\xb3\x87\x29\x63\x6f\x72\x7d\xed\xc0\xf3\xc5\x4a\xcd\x9d\xc4\x38\x20\x10\xc5\x99\xc9\x3a\x40\x3f\x9b\xc9\x73\x0c\xfb\x02\xc1\x74\x01\x3f\x3e\xde\x51\xbe\x40\x10\x0c\x93\xfb\xbc\x8d\x9f\x52\xb7\x7e\x11\x16\x3e\x2b\x9c\x1f\xe7\xd0\x25\x9e\x07\x89\xbc\xa4\x2d\x19\xb9\xdc\xc0\x0d\x86\xe4\x96\x4e\x89\xaa\x1d\xf4\x3e\x13\x06\x24\xdd\x65\xf0\x98\x3d\x06\x51\x25\xb6\xad\x64\xd2\x71\x23\x26\x5d\x78\xa1\xcb\x21\xa3\x6a\xd9\xa6\x5c\xcc\x5a\xca\xbc\x57\x8d\x98\x17\xa7\x99\x4f\xce\xb8\xd3\x46\x8c\x8b\x52\xe1\x27\x67\xdb\x49\x23\xb6\xbd\xbd\xc5\xf4\x09\x0e\xdc\xcb\xa6\x06\xee\x79\x93\xb6\x6d\x47\x20\xec\x99\x02\x40\xd8\x33\x89\x3f\xd8\xb3\x9a\xf0\xc3\x7a\x1e\x08\x19\x36\xf0\x82\x9d\xf1\x12\x2f\x2b\xa6\xf2\x92\x09\x4a\xb8\xd0\xa0\x3e\x17\x15\x1e\x98\x07\xf8\x61\xcd\x92\x38\x7d\x54\xe0\x07\x90\x57\x04\x80\x24\x49\xad\xe5\x7a\x36\x61\x88\x8b\x1e\x59\xff\xb8\x51\x12\x74\xa3\x65\x01\xc8\x92\x57\x32\x64\x22\xd0\x4c\x75\x0c\x73\xdd\xbb\x51\x31\x5a\xad\x3b\x75\x9c\x05\x84\x48\x1d\x67\x39\xd8\xa7\x01\x1d\x77\x00\x42\xb1\x07\x63\x3c\xa8\x8c\xaf\x0b\x80\xa2\x0d\x77\x3f\xcf\xb9\x3b\x4f\xf1\x35\x11\xa6\xa9\x1f\x76\x0d\x31\x9d\x8d\x6f\x3a\xc0\x98\x40\x4a\x25\x70\x49\x68\xd5\x04\xba\x04\x7c\x5a\x84\x95\x0e\xf5\xdd\x37\x89\x2b\x81\xd3\x3a\x00\x96\x84\x94\xe6\x91\x25\xc9\xb5\x16\xb4\x24\xc9\x3b\xc7\x96\x22\xd1\x8d\x83\x4b\x92\x6b\x0d\x74\x49\x12\x7f\x87\x97\x72\x3b\x4a\x77\xf8\x52\x24\xae\x35\x80\x49\x72\xaf\x85\x30\x49\xf2\xce\x21\xa6\x48\x74\x6b\x18\x93\xe4\x5e\x03\x64\x92\xc4\x1d\xa0\x4c\xb9\xe9\xd8\x59\x55\xfa\x0c\xac\xab\x59\xea\x0d\xf6\x54\x08\x8b\x09\xaf\x1e\x58\x2d\xba\x7f\x62\xca\x6b\x11\x5a\xb6\x53\xbf\x2a\x0d\x41\xa2\x92\x14\xc2\x95\xcc\x0a\xe1\xe2\xa0\xb4\x50\x02\x58\x82\xaf\x71\x79\x58\x69\x37\x9d\x83\x6b\x01\xbd\xe0\x2c\x86\x4a\x96\x78\x73\x2d\xa9\x5f\xd2\x49\xd4\xb0\x64\x18\xeb\xbc\xe0\xb4\xa1\x65\xb9\x62\xae\xe4\x05\x67\x2d\x0d\x48\xd6\xa9\x0b\x51\x37\x23\xbb\x34\x10\x93\x2e\xaf\x41\xd6\xf2\x75\xeb\xea\xb4\xf3\xba\xba\xd5\x45\x5d\xdd\x72\x39\x34\x42\x82\xc2\x2a\xa5\x3e\x56\x33\x75\x75\x29\xbd\xc5\x04\xe8\x40\x3f\x7e\x93\xf9\x8f\xd5\x45\x5d\xdd\x6a\xa3\xae\x6e\x1d\x54\x57\xb7\xbe\x5a\x5d\xdd\x6a\xa3\xae\x6e\x1d\x50\x57\xb7\xbe\xd7\xd5\x37\x57\x45\x97\x79\x8f\xd5\x66\x5d\xdd\x3a\xa8\xae\x6e\x7d\xb5\xba\xba\xd5\x66\x5d\xdd\x3a\xa0\xae\x6e\x75\x58\x57\xb7\x5a\xa8\xab\xef\x4d\x78\xb2\xb3\xba\x56\x2e\x31\x2e\xc2\xba\x87\x81\xe7\xb3\x17\xa3\x20\xf0\x02\x86\x2c\xd7\xfc\x10\x72\xe4\x93\x20\x59\x8a\xda\x56\xe6\x27\x6a\x78\x99\xdb\x10\xd0\xb9\x07\xa3\x6b\x7d\x40\x3e\x2b\x12\x38\xc6\xd3\x2f\x84\x37\x25\x2b\xe3\xb6\x4d\xdc\x3b\xda\x98\x2c\x90\xd1\xa3\x83\x49\xcf\xa4\x83\x35\x59\x15\x92\x32\x97\x40\x64\xa7\xa4\x65\x54\xa9\xd5\x45\xf7\x9a\x2b\xd7\xd1\x99\xd1\x48\x95\x2d\x65\x66\x8d\x4b\xb2\xda\xee\xc3\xff\x77\x27\xcc\xff\x25\x37\x40\x51\x6d\x0e\xd9\xd1\x34\x24\xf1\x34\x5c\x7a\x76\xe8\x78\xe8\xf4\x7d\x36\x4c\x6a\x79\x6a\x93\x0e\xc6\x57\xa1\x49\xb4\x8d\x26\xb6\xe5\x66\x2a\x9b\x5b\xa9\xc5\xd4\x28\x26\x87\x3b\x19\xfd\x8b\x02\x7a\x92\x2e\x9b\x4d\xfa\x78\x45\xed\x91\x9f\xd0\x17\x2a\x10\x33\x50\x35\x48\xfe\xa8\x3e\x54\x77\x28\x31\x06\x3f\xc2\x36\x15\x69\x4f\x1c\x8e\x13\x0f\x20\xed\x48\xfb\xa9\xe0\x8e\x90\xba\x79\x2b\xd5\x7b\xeb\xad\x94\x6c\xb5\x12\x83\x92\x6d\x79\x9b\x9b\x8a\x70\x8b\xb2\xe2\x52\xbf\x2a\x9a\x6d\xf1\xcd\x30\x1b\x95\x5d\xe4\xdb\xc7\x26\xdb\xcc\xb6\xd1\xef\x19\x9b\x91\x1c\x95\x9d\x0c\x0a\xc6\xa6\xc1\xe5\xb1\x6f\xe6\xfb\xd9\x3e\xba\x39\x77\x92\x5d\x71\xcf\xec\x4b\x39\x14\x4e\xbf\x84\xc5\x9e\xf9\xb7\xb1\xa7\x6f\xf3\xd8\x3e\x8d\xc6\x8a\x2e\xbb\x59\x14\x79\xbd\x03\x77\xbf\xfb\xf5\x7a\x74\x55\xe8\xec\x77\x0f\x90\x65\xef\x71\x75\x4c\x5d\xe8\xe8\x88\xbc\x9c\x9b\xdf\x59\xd7\x57\x3b\x7c\x2c\x8e\xba\xad\x7a\x44\xb4\x3b\xbc\x2b\x88\xcb\xbb\xb6\x65\xa0\xc7\x67\x5d\x03\x3d\x63\xd6\x01\xd0\x33\x0e\x3c\x11\xf9\x56\xc4\x79\x40\xb5\x26\x70\x9e\x4c\x78\x8b\x30\xcf\x81\x5e\xfc\x26\x61\x9e\x31\xeb\x00\xe6\x01\x21\xcd\xc3\x3c\x19\xd3\x5a\x30\x4f\x46\xdd\x39\xcc\x23\x24\x37\x0e\xf3\x64\x4c\x6b\xc0\x3c\x19\xed\x77\x98\x47\xdd\x49\xba\x83\x79\x84\xb4\xd6\x60\x9e\x8c\x79\x2d\x98\x27\xa3\xee\x1c\xe6\x11\x92\x5b\x83\x79\x32\xe6\x35\x60\x9e\x8c\xb6\x03\x98\x47\x9d\x87\xff\xcb\xaf\x4f\x54\x7b\x02\x7a\xcc\x9a\x7a\x93\x62\x6c\x0d\x9f\xd6\xc3\xdd\xc2\xb4\x66\xde\xa8\xb8\x69\xdf\xb4\x92\xf6\x34\xf3\x24\xfe\xcd\xd5\xe8\xe3\xd3\x1b\xab\x66\x1e\xc4\x1f\x3f\x41\xcb\x9a\x79\x37\xe4\xd2\x7a\x7a\x96\x35\xf3\x4a\xcf\x27\xeb\xe3\xf5\xd3\xb3\xed\xcf\x8d\xd8\xf6\x71\x74\xd5\x8d\x69\x53\x22\x4a\x06\x25\x6d\xfb\x4b\x33\xaf\x62\x59\x17\xa3\x27\xb2\x31\xbe\x6e\xc4\xa0\xb3\x0f\x17\x17\x6f\x2f\x6b\x6e\xf6\xeb\xf8\xbf\x0f\x69\x38\x53\xf0\x7f\x9f\x49\xfc\x3f\xba\x77\x10\xfe\x2f\xf1\x7a\x1f\x3c\x60\x0d\x6b\x7f\x67\x07\x90\xdf\x94\x27\x97\x34\x8c\x04\x87\xc8\x1c\x07\xd4\x0b\x28\x7f\x38\x84\xc7\x25\x9d\xd6\xf9\xaa\x91\x8c\xfe\x8a\xfe\xe7\x20\xfa\x8f\x84\x41\x90\xe8\xf2\x6a\x3c\xd2\x85\x9a\x30\xb9\xa6\xfb\x0b\x37\xd2\xe2\x5c\x95\xe7\x60\x38\xae\xf7\xc3\xf0\xc3\xd9\xf5\xaf\xe3\x11\x5a\xf0\xa5\x03\x37\xe3\x3f\x02\xe6\x82\xf8\x35\x89\x7a\x97\x84\x43\x72\xb7\xc0\x01\x23\xbc\xaf\x85\x7c\xa6\xbf\x4e\x03\xe2\x08\xed\x2a\xf8\xce\x70\x04\x9f\xc0\xca\x9e\x19\x77\x50\xf8\x2c\x38\xf7\x75\xf2\x47\x48\x6f\xfb\xda\xbf\xf4\x9b\xb7\xfa\x99\xb7\xf4\x31\xa7\x90\x1a\x6a\x60\xa9\x2b\xc8\xfa\x9a\x35\xea\x13\x7b\x9e\x86\xd7\x31\xa5\xe0\xdc\xd7\x6e\x29\xb9\xf3\xbd\x80\x2b\x9d\xa3\x2f\xa7\xec\xdb\xd1\x8b\xbc\x7a\x74\xf1\x02\x36\x0b\xca\x29\x76\x74\x36\xc5\x0e\xe9\x1f\x1b\x47\xb0\xaa\x7e\xd0\xf5\xdf\x60\x71\x5a\xa3\xdf\x13\xb6\x62\xf7\x40\x01\x71\x22\x94\x2d\xe0\xd3\x90\x23\x0a\x5c\xb5\xf4\x1b\xd3\x67\xf8\x56\x5c\x1b\xf0\x4b\x90\xff\x06\x2e\xa3\xb3\xdf\x75\x7d\x83\x3c\xa6\x62\x30\x9b\x60\xd4\x5e\x9e\xdc\xbf\x3c\xc9\x78\x80\x6f\x3e\x44\xbe\xf8\x44\x02\x46\x3d\x77\xb5\x4a\xd9\xb2\xf4\x83\xfe\xf2\xc4\xf0\xdd\xb9\x86\xf8\x83\x0f\x16\x5e\xe2\x4b\x6d\x43\x02\xf6\x7d\x87\xe8\xdc\x0b\xa7\x0b\x3d\x27\xed\xf8\xe4\xe8\x1e\x7e\x2a\xc9\x83\xfe\x91\xc0\x0a\x52\x4e\x4f\xef\xe1\xa7\x9a\x94\xd3\xd3\xaa\x52\x5e\x9d\xdc\xc3\x4f\x35\x29\xaf\x4e\xaa\x4a\x79\x0d\x1e\x7b\x5d\xd1\x63\xaf\xb7\x78\x8c\xf1\x07\x87\xb0\x05\x11\x09\x5b\x3c\x7c\x62\x89\x9b\x90\xe7\xed\xe2\x0f\xb7\xcd\xe8\x38\x33\x44\xc7\x78\x71\xa6\x0b\xae\x37\xf1\xec\x87\xcd\x7c\x93\x7b\x90\xd9\xe3\xa0\x30\xe1\x4c\xee\xe9\xd1\x62\x53\xbf\xcc\x75\x71\xa2\x60\xd5\x4b\x1c\xcc\xa9\x9b\xc0\xe9\xfa\x51\x7a\xcc\x44\x4f\x85\xc6\x60\x7c\x7f\xe3\xff\x0f\x48\xc9\x43\x1f\xba\x11\x26\x8e\x1b\x4e\x96\xbe\x03\x17\x9b\xff\xd9\x00\x32\xb2\x9d\x29\x3b\x80\x35\xb1\xde\xd9\x1b\xd3\xbc\xbb\xbb\x33\xa0\x63\x00\x3f\xc6\xd4\x5b\x9a\xf1\x06\x61\x82\x13\x09\x66\x84\x99\x82\x25\xe3\x7f\x9d\x2e\xfd\xfe\xa6\xc3\xb4\x41\xba\x9f\x08\x70\x68\x71\x22\x53\x7c\x35\xdf\x97\xc7\x6f\x4c\x7e\xe3\xcf\x03\x6c\x13\xe5\x8c\x2f\x72\x5a\x8c\x9e\x37\xad\x6f\xd6\x96\x29\x21\x81\x2d\x75\xa7\xde\xa6\x55\x72\xce\xa8\x21\xcd\xbe\xc1\x14\x47\x4c\xb4\x15\x53\x81\x4d\x4c\x60\x13\x0e\x7d\xb4\x7d\x8c\x93\xff\x61\x62\x6d\x84\xd7\x2a\x0c\x85\x03\x9e\x52\x1a\x6a\x05\x29\x92\xae\x8e\xcd\x06\x1a\x93\x5d\x28\x81\x92\x4b\xd0\x8f\x0e\x71\x91\x31\xba\x17\x9b\x3a\x75\xe7\x3f\x65\x68\x44\xc9\x9a\xd0\x7a\xd7\xb5\x3a\x46\x72\xf4\x7a\xb3\x19\x9c\x5e\x5b\xbf\xea\x78\x0d\xcd\x29\x12\x5f\xea\xc1\x9d\x13\x6d\x90\x59\x82\xb8\x57\x50\x75\x9c\x60\x38\xd7\x24\x2c\x2a\x1c\x9c\x77\x40\xc5\x77\x68\x61\xe8\x47\xae\xed\x7b\x54\xac\x8e\x5c\x54\x90\x44\x9d\x40\xe2\x45\x71\xa7\x22\x61\xbb\x99\x25\x0c\x84\x40\x44\xf0\xac\xf4\xc0\xc9\x91\x24\x4b\xb5\x2d\x8e\x62\x4a\x4f\x1e\x25\xd8\x11\x16\x14\xcd\x70\x07\x6f\xee\x5f\xa8\x60\x3e\x8b\x7e\xf1\x64\x96\x52\xb6\xf1\x14\xdf\x14\x5d\x66\x53\x8c\xfa\x95\xe4\x69\xcf\xca\xe9\x29\xfa\x95\xe5\x29\xde\x1a\x2e\xa3\x67\xd4\xaf\x24\x4f\x5a\x52\x4f\x5a\x41\x4f\x9f\x95\xe3\x29\xfa\xad\xf3\x64\x53\x58\xb4\x5c\x3d\x76\x3f\xe3\x5b\x1c\xb7\x6a\x83\x5b\x1c\x20\x11\x95\xa2\x7e\x8a\x4b\xaf\x56\xbf\xc0\x94\x8b\x6e\x97\xe1\xb0\x1e\xf2\x22\x16\x4c\x8b\x8f\xf3\xcf\xcc\x8c\xcf\x9d\xeb\xb7\xef\xdf\x8f\x86\x13\x0a\x8d\x4b\xea\x9a\x93\xd0\xb5\x1d\x62\xc0\x47\xe3\x33\x4b\xab\xa2\xc0\x25\xbd\x11\x35\x26\xcf\xd4\x28\x8a\xf5\xcc\x38\x04\x80\xdd\x54\x44\xe3\xff\x0d\x00\x00\xff\xff\x18\xb5\xf3\xcc\x1c\x68\x00\x00"

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 26652, mode: os.FileMode(420), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

