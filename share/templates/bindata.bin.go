// Code generated by go-bindata.
// sources:
// index.html
// DO NOT EDIT!

// +build bin

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x1d\xfd\x73\xda\x38\xf6\xf7\xfd\x2b\xb4\x9e\xdd\x9b\xed\x4e\x6d\x27\x24\xdd\xeb\x75\x81\x9b\x36\xe1\x7a\xcc\x25\x29\xd3\x24\xbd\xdb\xd9\xd9\xb9\x11\xb6\x00\x35\xc6\xf6\x4a\x72\x3e\x8e\xe1\x7f\xbf\x27\x7f\x1b\xdb\xd8\x80\x03\x34\x49\x67\x92\x62\x49\xef\x53\xef\x49\xef\x83\xc0\x6c\x66\x92\x11\xb5\x09\x52\x82\xff\xff\xeb\xb9\x82\x4e\x89\x32\x9f\xb7\xb9\x8b\xed\xee\x6c\xa6\x9d\x62\x81\xb5\x60\x18\x46\xf5\x70\x98\xd8\xe6\x7c\x9e\x83\x9e\x38\x5c\xd8\x38\x80\xc7\x68\xc2\xc8\xa8\xa3\xe8\x0a\x12\x54\x58\xa4\xa3\x44\xb3\x28\xc2\x1a\x0d\xcc\xe7\x4a\x37\x3f\xd6\xd6\x71\x29\x21\x0b\x2b\x72\xf4\x07\x17\xbd\xeb\xa0\x00\xd0\xc5\x0c\x4f\xf9\x7c\xfe\x5d\xdb\xa4\xb7\xc8\xb0\x30\xe7\x1d\x65\xcc\xa8\xa9\x0e\x2d\xc7\xb8\x01\x6e\x54\xe1\xb8\x4a\xf7\x3b\x84\xd2\x2b\x0c\xc7\x52\x2d\x86\x2c\xcc\xc6\x44\x3d\x44\x82\xdc\x0b\x95\xd1\xf1\x44\x28\xdd\xf4\xb2\xd9\x8c\x8e\xd0\x0f\xae\x76\x86\x6d\xed\x82\x8c\xb1\xa0\xb7\xc0\x22\x9f\x38\x77\xaa\xfc\x35\xa1\x26\x01\x5e\x2d\x0e\x83\xf2\x75\x7a\x50\x0a\xe0\x93\x05\xc2\x93\xc3\x08\xe1\xe4\x38\xa0\xe5\xdc\x12\x36\xb2\x9c\x3b\x20\x87\x23\x45\x9d\x39\xd8\x44\xf8\x76\x8c\x4c\xca\x5d\x0b\x3f\x20\x07\xd4\xef\xd8\x5c\x01\xcd\xfd\x13\x94\x7a\x05\x9c\x84\xcc\xcc\xe7\x5d\x7f\xa7\x22\xb4\x11\x5d\x55\xfe\x42\xf0\x52\x10\x98\x36\x88\xea\x32\x82\x80\x0e\x16\xaa\x45\x46\x20\x9c\xa6\x69\x28\xdc\xcd\x88\x9c\x54\x78\xc0\xa6\x3e\x39\xec\xb6\x75\x10\xdf\xd7\x56\xfc\xa2\x54\x6d\x87\x8f\xa2\xac\xc2\x7d\x0c\x27\x61\xda\xb3\xa2\xd9\x29\xb1\x3d\x14\x4b\x2e\x5f\xc4\xab\x60\x9d\x45\x93\x87\x2c\x56\x6a\xbb\x9e\x50\xc7\xcc\xf1\x5c\x25\xbd\xa6\x74\x95\x6a\xe1\x21\xb1\x10\x9f\x62\xcb\x0a\xb6\xcf\x76\xee\x18\x06\x68\x93\xc0\x3e\xc5\x9a\xaa\x46\x34\xf4\x84\x70\x6c\x7f\xd3\xc3\xd9\x60\x24\xc4\xcd\x89\xe1\xd8\x26\x66\x0f\xd2\x04\xf0\xd0\x22\xa6\xf4\x10\x5f\xa5\x66\xe0\x19\x6b\xd0\x9a\xcd\xee\xa8\x98\xa0\x33\xc2\xf9\x69\x6c\x41\x26\xca\x52\x4e\x4b\x05\xce\x84\x32\xff\x80\x5b\xc7\x3e\xb1\xa8\x71\xd3\x99\x89\x09\xe5\xda\x04\xdb\xa6\x45\xfc\x91\x79\xe0\xef\xe0\xc7\xd2\x44\xe7\xf3\x90\x13\x78\x3e\x91\x2f\x72\xb8\x10\x92\x3e\xff\x01\x9b\x63\x30\x03\x79\x24\x5c\x01\xe5\x8c\xd7\x67\x85\x5b\x5b\xde\x73\x87\x91\xbd\x91\x37\x10\x12\x25\x92\xd7\x96\x77\x61\xa0\xad\xa7\xed\x7a\x3b\x46\xce\x9c\x3b\xbe\x15\x1b\xb7\xb5\xf7\x43\xee\x58\x9e\x20\x4d\x18\xfb\x45\x72\x5c\x2e\x6c\x3e\xf7\x0c\x03\x16\x3c\x51\xa3\xdf\x3b\xb9\x1f\xc5\xf8\xdb\xba\x67\x45\xd7\x96\x5c\x94\xbb\x88\xc8\x9f\x68\xc1\xa8\xd0\x41\x70\xf1\xd4\xb9\x6f\x10\xdc\xcf\x82\x1a\x18\x94\x26\x18\x75\x49\x72\xff\x14\x2f\x17\x13\x82\xc1\x90\x33\x97\x32\xb9\x87\x07\x13\xc1\x9d\x19\xe8\x5f\x85\xfb\x72\x40\x18\x75\xcc\xf0\x06\xae\x58\x9d\x89\x4a\xd0\x17\x6c\x79\x64\x39\x20\xd0\x0f\xe7\xd3\x7a\xf3\xb5\x11\x04\x4b\x10\x08\x98\x70\xe3\xc7\x6a\x9f\xcd\x18\xb6\xc7\x04\xfd\x60\xe1\x24\xa2\x0a\x17\x69\x67\x94\x4b\x1b\x2d\xb9\x8e\x2b\x25\xfd\xae\xc8\x74\x13\x89\xd0\x1d\x35\xc5\x44\x3d\x62\x64\xea\xfb\xbf\x85\xb5\x40\x37\xf3\xf9\x34\xdc\xd1\x35\x94\x14\x20\xf2\x55\x15\x47\xad\x25\x08\x20\x8e\x59\xd0\x57\xd6\x24\xd3\x4f\x11\x43\xc9\xef\x24\x40\xca\xc0\xe6\x22\xd6\x29\x88\xb7\x9b\x90\xf5\x9c\x4c\xb7\x10\xb3\x02\x15\x27\x38\xca\x97\x45\xac\x92\x97\x26\x42\xd6\x80\x5a\xe3\x01\xeb\xa6\xaa\x7a\x89\x58\xf3\xb7\x39\xe8\xb4\xd1\x90\x55\xe2\x7b\x56\x31\xeb\xee\x05\x7e\x09\x5a\x6b\x99\xf9\xe3\x44\xad\x12\xf1\x7e\x84\x6f\x5b\x0e\x5b\xf7\x47\xf0\x5d\xc6\xad\x19\xbb\xda\x87\xc0\x35\xba\x7a\x57\x8f\xc9\xae\x1c\x81\xad\x75\x00\xaf\x39\x59\x2b\x52\xfe\x07\x23\x15\x81\x72\x29\xbd\x1f\x37\x0c\xb0\xa7\xbe\x96\xf2\xf1\x35\x8c\x27\xf1\x5f\xb0\x68\xd3\xf8\x1a\x8e\x1f\x40\xa4\xfd\x8b\xda\x66\x55\xa8\x5b\x1a\x2b\x4b\x04\xfe\xf6\x6c\x84\x41\xee\xd3\x46\x08\xe4\x86\xad\x81\x00\x0d\xc7\xaa\xc7\x89\x6b\x08\x05\x99\xa0\xd8\xf0\xa1\x93\xb0\x35\x30\x40\xc3\x69\x3e\xfd\x81\x8a\x4d\xde\x4e\x62\x60\x8e\x76\x94\x17\x9c\x8e\xb6\x90\x16\x9c\x52\x7e\x83\x3c\x8e\xc1\xf6\x2b\x52\x03\x60\xa7\x89\xcc\x20\x21\xd8\x78\x76\xb0\xa1\xc2\x5e\x92\x83\x7c\xd4\x74\x3a\x6a\x34\x37\x00\x74\xcf\x2a\x35\xd8\xb9\xbc\x2f\x99\x41\x1d\x1b\x7f\x9c\xc4\x00\xf0\xee\x47\x78\xbc\xe5\xbc\x60\x6f\xe4\xde\x65\x5a\x90\x36\xaa\x2d\x64\x05\xb3\x99\xfe\x33\x72\x9d\x1b\x82\x5c\x8f\xd1\xd1\x83\xc1\xf9\xbb\x0c\x88\xc9\x1c\x57\x7a\x64\xe6\x52\xc5\x8c\x40\x44\xa6\x87\xf6\x8e\x7e\xd6\xc3\xb7\x15\x54\x05\x75\x91\x83\x86\x9b\xff\xc5\xa2\xf6\x4d\xbc\xf9\x37\xe8\x10\x29\xa7\xe4\x96\x1a\x24\xbb\xc9\xf5\x36\xf8\x0c\x70\x2d\x6e\xb2\x1c\x2b\xda\xe8\x6e\x38\x17\x5a\x75\x8a\x75\x69\x19\x52\xba\x10\x2a\x89\x12\x63\x03\x58\x25\x88\xad\x90\xb7\x85\x94\x73\xc7\xb3\x05\x9c\x28\x4f\x4a\xe0\x4c\x84\x5a\x22\xfb\x2f\x48\xf1\xf3\x92\xe7\x27\xf9\x1b\xa4\xc8\x7c\xea\xf9\x09\x7e\x84\x94\xf7\xb7\x98\x3e\xc3\x2d\x3f\xf6\xb7\xfc\xc7\x6f\x57\xf0\xca\xb2\x08\x84\x46\x37\xd7\x32\x39\xcb\x57\x46\xcc\x51\x92\x00\xc7\xcb\x36\xab\x8d\x2c\xa6\xa5\x10\x8e\x99\x23\x0d\xee\x8e\x0b\x3c\x5d\xb1\xce\x90\x20\x41\x21\x16\xca\xd6\xc7\x92\xae\x5d\x8c\x19\x7e\x58\x90\x24\x48\x6d\x53\xb5\x11\xa0\x57\x54\x9d\x09\x73\xec\xbe\xed\x98\x04\xa2\x1f\xff\x9c\x8c\xd6\x07\x83\x09\xc0\x76\xb8\x2c\xa8\x00\x65\x99\xf4\xe4\x91\x16\xf3\xe8\x65\x96\x6f\x87\x45\xff\x6c\x59\xca\xe3\x88\x11\x92\xf0\x38\xca\xd4\xa4\x1a\xe0\x71\x49\xb5\x2a\xd0\x60\x50\xac\xaa\xa3\xeb\x82\x2a\x56\x4e\xdd\x3f\x66\xd4\x9d\x85\xd8\x83\xf2\x97\xe1\x7a\x3b\xaa\x7f\x9d\x0c\xae\xb7\x50\x00\x03\x2a\x55\x95\x2f\xc9\x48\x13\xa5\x2f\xc0\xd3\x78\xcd\x6b\x53\x25\xbd\x14\xbd\xf2\x05\x01\xd0\x69\xa3\x55\x2f\x89\xef\x59\x95\xbd\x76\x2f\xf0\x4b\xdd\xab\x96\x99\x3f\x4e\xe1\x4b\x22\xde\x8f\x0a\xd0\x96\x2b\x5f\xfb\x23\xf8\x2e\x4b\x5f\x19\xbb\xda\x87\x8e\xf8\x09\x6c\xd1\x9a\x6d\x66\x56\xd1\x82\x2c\x06\xbc\x7c\xe0\x6b\xc1\xfd\x1b\x53\xb1\x16\x60\x1f\xac\x65\xd3\x8e\x38\x04\x7a\xf9\xa4\x0f\x06\x93\xb0\x0f\x1e\x9a\xc8\xf7\x92\x6a\x9a\x44\xaf\x5d\x6c\xd6\x50\x8e\x2c\x75\x21\x52\x97\x98\xe5\xfe\x25\x8d\xe5\xcc\x48\xa4\xac\xc8\xc0\x1a\xa6\x0c\x06\x90\x25\x1c\x0d\x3c\x32\x5d\x69\x40\x59\xc2\xf1\x48\x03\x94\x55\x6a\x83\x87\x72\xb2\x8c\x03\x69\x89\x59\x0e\xe2\x91\xbd\xe8\xe6\xd3\x5d\x75\xf3\xfb\xdb\xe8\xe6\xf7\x6d\x01\x83\x90\x86\xf0\xaa\x9c\xa6\xdf\x4c\x37\x3f\x21\xd8\x78\x66\xb3\xa1\xc2\x5e\x12\x9b\x7c\xc4\xd7\x6f\xb6\x9b\xdf\xdf\x75\x77\x7b\xcb\x69\xcd\xce\xe5\x7d\xc9\x6a\xea\xd8\xf8\xe3\x24\x35\xfd\x7d\xe9\x6a\x6f\x39\xa7\xd9\x1b\xb9\x77\x99\xd2\xf4\xb7\xdb\xcd\xaf\xcc\x68\xe2\x6b\x77\xad\x64\x61\x50\x54\x90\x3e\x65\x8e\xcb\x5f\xf7\x18\x73\x18\x47\x7d\x5b\xff\xe4\x09\xe4\x12\x16\x3a\x9a\x52\x8a\xbc\x95\x0e\x15\x33\x0e\x8f\xce\x1c\xb0\x92\xfe\x27\xe4\xf2\x22\x82\x03\x6c\xdc\x10\xd1\x14\xad\x18\x5b\x19\xb9\x0f\xb4\x31\x5a\x40\xa3\x4d\xbb\xc3\xb6\x4e\xbb\x0b\xb4\x56\xcf\xba\xe8\x08\x9b\x26\xe3\xf9\xcc\x8b\xa6\xda\x6d\xe1\xa2\xc6\x9b\x6d\x74\xa4\x35\xd2\x23\x8b\x90\xf5\x07\x35\x51\x95\x2b\xf7\x2f\xf6\x90\xbb\xbf\x66\x76\xce\xef\xac\x21\xd3\xb7\x4f\x12\xd8\xe7\xd4\x31\x3d\xcb\x41\xc7\x1f\x95\x44\x11\x49\x73\x29\x0f\x07\x1b\x9f\x82\x09\xb9\xf5\x2d\xbe\x6f\x17\xb3\x1c\x3b\x7f\xb4\x50\xda\x8d\x02\xbe\xb7\xe0\xfc\xfa\x06\xc0\x45\x8c\xca\x95\xc5\x9c\xc2\x4c\xcc\xea\xeb\x02\x41\x49\xe4\xba\x79\xf8\xc0\xab\x53\xa2\xea\xe5\xf0\x85\x0c\x04\x08\xd2\x1c\x84\xff\xa5\xb7\x2b\x2d\xbc\xdc\xee\x9f\x22\x0d\x10\x4b\xe0\x50\xd9\x48\x39\x50\x5e\xa1\x9f\x1c\x56\x30\x1b\x29\xe9\x55\xd9\x1c\x80\x2e\xcc\x45\x82\x85\x68\xf3\x53\x11\xdc\x7c\x2e\x0d\x24\xde\xb5\xfc\xc9\x27\xf5\x96\x3a\x16\x22\xc5\xa7\x58\xaf\x61\x27\x39\x51\x56\x36\x96\x0a\x0c\x59\x96\x17\x8e\xb2\x1c\xcf\xe5\x16\x13\x1f\xf3\x65\xf0\x15\x16\xd3\x4b\x6c\x65\x29\x82\x02\x8b\x69\xf0\x7c\xa8\x72\x7d\x37\xbe\x61\xf2\x16\x1d\xde\x17\x15\x3e\x11\x61\x28\x74\x8a\x10\x45\x85\x57\xe4\x6e\xbb\x32\x8d\x55\x71\x34\x48\xf1\xb2\x1c\x45\x91\xd6\xb7\xa0\xee\x0f\xbf\x5d\xf5\x2e\x0b\x95\xfd\xe1\x41\x90\x2a\x55\x07\xd0\x85\x8a\xf6\xc1\xeb\xa9\xf9\x43\xff\xea\x72\x89\x8e\x65\x10\x50\xca\x87\x0f\xbb\x44\xbb\x12\xb8\xbe\x6a\xb7\x53\xce\x72\xf9\x8e\xca\x59\x03\xbe\x85\x72\xd6\x80\x39\x32\xd3\xa8\xae\x66\x01\x37\x4d\x54\xb3\x62\x7a\x8d\x17\xb3\x36\x54\xd7\x4b\x31\x2b\x9f\xe8\x0f\x78\xa3\xc5\x2c\x40\xf7\xac\x8a\x59\x3b\x97\xf7\xa5\x98\x55\xc7\xc6\x1f\xa7\x98\x05\x78\xf7\xa3\xa8\xb3\xe5\x62\xd6\xde\xc8\xbd\xcb\x62\x56\xda\xa8\x9e\xe8\x9f\xa6\x54\xbd\x99\x7b\xc0\xfd\xbf\x52\x19\xf4\x4f\xbf\xdd\xf7\x72\xaf\x2b\x77\x0b\x29\xd7\x4f\x4d\xee\x52\x61\x8f\x40\xd8\xcb\xde\xe7\xa7\x25\x6d\x9d\x5d\x3e\x06\xeb\x7e\x86\x62\xbf\x41\xca\x45\xff\xf9\x89\xfd\x0b\x52\xbe\xf4\x3f\x5f\x3d\x3f\xc1\xff\x8a\x94\xcf\xbd\xcb\xa7\x28\xb7\x41\x64\x8f\xa7\x54\xf0\xb7\x48\xb9\xea\x9f\xf7\x9e\x96\xe4\xa5\xd2\xfe\x0d\x29\x27\x9f\xce\xcf\xdf\x5f\x7c\x13\xf7\x56\x49\xab\xc7\x65\x8e\x51\xd0\xe8\x71\x79\xaa\x76\x23\x97\x34\xd1\xe6\x49\xda\x32\x2e\xd7\x20\xcc\x59\xfb\x53\x5f\x00\xfc\xba\x3e\x78\x02\xc3\x09\xdb\x84\xe6\x80\x51\x87\x51\xf1\xb0\x09\x8e\x0b\x6a\xac\xf3\x61\x35\x31\xfc\x25\xfd\xdf\x46\xf0\x9f\x09\x87\xc8\xda\x16\xab\xe1\x88\xfc\x3e\x44\x72\x45\xab\xfb\x73\x89\xc4\x99\x66\x5e\x53\x45\xc7\xf6\xf7\xa7\x9f\x4e\xae\x7e\x1b\xf4\xd0\x44\x4c\x21\xc1\x68\x07\xff\xc9\x2a\x1e\x04\xf8\x61\xc6\x30\x25\x02\x72\xdb\x09\x66\x9c\x88\x8e\xe2\x89\x91\xfa\x36\x4a\x26\xfc\x62\x9e\xf4\xab\x85\xcf\x8f\x47\xf0\x0a\x84\x6d\xeb\xc1\x82\x14\x9e\x89\x10\xae\x4a\xfe\xf4\xe8\x6d\x47\xf9\x8f\x7a\xfd\x5e\x3d\x71\xa6\x2e\x16\x14\x32\x63\x05\x04\xb6\x25\x58\x47\xe9\xf7\x3a\x04\x72\x27\x25\x0d\x29\x31\x77\x94\x5b\x4a\xee\x5c\x87\x89\xd4\x62\xff\x43\x4c\x3b\xa6\xff\x67\xe9\xaa\xff\xf0\x1a\x51\x9b\x0a\x8a\x2d\x95\x43\x4e\x43\x3a\x87\xda\x01\x38\xd7\xf7\xaa\xfa\x3b\x78\x6c\xbf\xf7\x47\x88\xd6\x3f\x89\x18\xb1\xfc\x8a\x22\x13\x86\x27\x10\x05\xac\x4a\xf4\xe9\xf9\x23\x7c\x2b\x9f\x35\xf8\x25\xc1\x7f\x07\x95\xd1\xd1\x1f\xaa\x9a\x03\x0f\xa0\x38\x18\x15\x6c\xde\x51\xeb\xfe\xa8\x15\xe3\x00\xdd\x7c\xf2\x75\xf1\x85\x30\x4e\x1d\x7b\x3e\x8f\xd0\xf2\xe8\x85\x7a\xd4\xd2\x5c\x7b\xac\x20\xf1\xe0\x82\x84\x17\xf8\x42\xc9\x51\xc0\xae\x6b\x11\x55\x38\x9e\x31\x51\x33\xd4\x0e\x5b\x07\xf7\xf0\xb3\x12\x3d\x58\xef\x13\x5c\x81\xca\xf1\xf1\x3d\xfc\xac\x46\xe5\xf8\x78\x55\x2a\x6f\x5a\xf7\xf0\xb3\x1a\x95\x37\xad\x55\xa9\xbc\x05\x8d\xbd\x5d\x51\x63\x6f\x4b\x34\xc6\xc5\x83\x45\xf8\x84\xc8\x8c\x36\xd8\x3e\xe9\xe9\x3a\x24\xc2\xcb\xf0\xc3\xb4\x4e\x6d\x93\xdc\x6b\x72\x61\xe0\x9c\x91\xc3\xb5\x87\x8e\xf9\x90\xcf\xd5\x85\xe3\xaa\x43\xcc\x0a\x13\xf3\x70\x2e\x2c\x7a\x27\xf5\x83\x6c\xed\x38\x53\x17\x5b\x28\xa5\x49\x87\x6f\xa5\xca\xf6\x53\xcc\xc6\xd4\x56\x87\x8e\x10\xce\x54\x3d\x88\x6e\x26\xff\x4d\xc1\x41\x7b\xa2\x93\xfb\xde\x89\x08\xdc\x73\x61\x19\xe1\xf2\x86\x12\x64\xea\x5a\xf0\x90\xff\x92\x0a\xa4\xc5\x87\x19\x6a\xfb\x87\xa4\x7f\x8a\x50\x59\x7e\x18\xfa\x53\xfe\x18\xa8\xa5\x95\xad\x90\x2c\x94\x00\xe1\x31\x73\x72\xfa\x47\xa6\xe7\x66\x0e\xd5\x22\xae\xc3\xef\xda\x48\x81\xa1\x90\xef\x85\x7e\x42\xa1\x18\x11\xb4\x96\x3a\x91\x33\x85\xca\xb8\x5a\xb3\x50\xd4\x29\xda\xb5\xf0\x66\xa9\xbd\x6d\xf1\xb7\x7b\xc8\xa3\x94\xbf\xd3\xf5\xbb\xbb\x3b\x0d\xf4\xca\xe0\x47\x33\x9c\xa9\x1e\x9c\xbd\x3a\xd8\x27\xc1\x9c\x70\x5d\xb2\xce\xc5\xdf\x8d\xa9\xdb\xc9\xdb\xa2\xb2\x58\xb5\x8c\xeb\x95\x13\xc7\x92\x6f\x05\x09\x4d\x01\x6c\x20\x3a\xd3\x71\x3d\x69\xa3\x8b\x06\x8e\x5c\x9b\xa0\x9f\x2c\x62\x23\xad\x77\x2f\xcf\x6e\x6a\x8f\x5f\xc9\xea\xd4\xb2\x82\x54\xaa\x95\xb5\xb8\x2a\x6c\xc7\x28\xdd\x52\xd5\x46\x0d\x9b\xb8\x59\x97\xf0\xba\x5a\xf9\x6b\x09\x48\xad\xf7\x73\xb5\x94\x6e\x2c\x32\x12\x4e\x41\xcb\x75\x28\x6b\x84\x89\xd6\xa5\xb9\x65\x35\xb5\xe2\xdf\x3f\xc3\x3e\xf5\x6c\xd3\x75\xa8\xdc\xa9\x4c\xb0\x10\xc6\xa4\x00\xe2\xf8\x51\x69\x8a\x42\xa5\xb4\x35\xe4\x84\x30\x45\xa2\x5e\xe9\x5d\x47\x07\x09\x58\xc4\xf4\xd2\x18\x67\xd1\x9b\xf2\xc6\x96\x8a\x81\xa4\x20\x45\xae\x6f\xe1\xfc\x51\x85\x0a\x9c\x5c\xae\x0b\x3c\x3c\xa1\x52\x86\x53\x7e\xc2\x78\x9d\xf3\xcf\x5f\x57\x13\xa7\x39\xaa\xc7\xa7\x5c\x57\x17\xa7\xfc\x8b\xef\x3a\x7c\xfa\xeb\x6a\xe2\xa4\x35\xf9\xa4\x2b\xf0\xe9\xf2\x7a\x38\xe5\xba\x45\x9c\xdc\x00\x17\x16\xe9\xdb\xf8\x2b\xbe\xc5\xc1\xa8\xd2\xbd\xc5\x0c\xc9\x60\x15\x75\xa2\xaf\x42\x9a\xcf\x7f\x05\x93\xf3\xa7\xeb\x60\x58\x8c\x84\x11\x67\x46\xf1\x2d\xff\x95\xeb\x41\x8a\x78\xf5\xfe\xe3\xc7\xde\xe9\x90\xc2\xe0\x94\xda\xfa\xd0\x93\x89\xac\x06\x2f\xb5\xaf\x3c\x6a\x11\x03\x96\x68\xc2\x1f\x0c\xdf\xcc\x94\x62\xac\xad\x07\x91\x01\xdc\x89\x32\x48\xff\x7f\x00\x00\x00\xff\xff\xf4\xb8\x65\xa3\x3f\x6a\x00\x00"

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 27199, mode: os.FileMode(420), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

