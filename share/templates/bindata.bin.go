// Code generated by go-bindata.
// sources:
// index.html
// DO NOT EDIT!

// +build bin

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5c\x6d\x73\xdb\x36\xf2\x7f\x9f\x4f\x81\x3f\xff\xed\xbd\xe8\x54\xd2\x39\x0f\x77\xbd\x54\xf2\x8d\x63\xb9\x29\xa7\xb1\xa3\xf1\xd3\x5d\xef\x4d\x07\x22\x21\x09\x31\x45\xb2\x24\x24\xc7\xd5\xe8\xbb\xdf\x2e\x00\x52\x24\x45\xea\x81\x84\x5d\xeb\x92\xcc\xc4\x22\x01\xec\x62\x01\xec\xfe\x76\x41\x3c\x74\xff\xaf\xff\xf1\xf4\xfa\xd7\xc1\x19\x99\x88\xa9\xf7\xe2\xb8\x2b\x7f\x08\x81\x07\x46\x5d\x78\xc0\xc7\x29\x13\x94\x38\x13\x1a\xc5\x4c\xf4\xac\x99\x18\xb5\x7e\xb0\xb2\x59\x13\x21\xc2\x16\xfb\x7d\xc6\xe7\x3d\xeb\xdf\xad\x9b\x93\xd6\x69\x30\x0d\xa9\xe0\x43\x8f\x59\xc4\x09\x7c\xc1\x7c\xa0\xb3\xcf\x7a\xcc\x1d\xb3\x1c\xa5\x4f\xa7\xac\x67\xcd\x39\xbb\x0f\x83\x48\x64\x0a\xdf\x73\x57\x4c\x7a\x2e\x9b\x73\x87\xb5\xe4\xcb\xf7\x84\xfb\x5c\x70\xea\xb5\x62\x87\x7a\xac\x77\x94\x30\x12\x5c\x78\x4c\x3e\xc3\xdb\x62\xd1\xee\x53\x41\xdb\x3f\x07\xb1\x40\xe6\xcb\x25\x81\x27\x60\xd9\xed\xac\xca\x1d\x77\x3d\xee\xdf\x91\x88\x79\x3d\x8b\x43\x95\x16\x11\x0f\x21\xc8\xc1\xa7\x74\xcc\x3a\xa1\x3f\xb6\xc8\x24\x62\xa3\x9e\xd5\x19\xd1\x39\x16\x68\x63\xda\x1a\x69\x2c\x1e\x3c\x16\x4f\x18\x13\x09\x03\xc1\x3e\x8b\x8e\x13\xc7\x29\x3d\x3c\x77\xb8\xef\xb2\xcf\x6d\x4c\xd5\x1c\x62\x27\xe2\xa1\xc8\x92\x7c\xa2\x73\xaa\x52\xad\x62\x3f\x93\x38\x72\x80\xd1\xa7\xb8\x13\x61\x0f\x47\x0c\x9e\x5e\xb6\x8f\xda\x47\x3f\x24\x09\xed\x29\xf7\xdb\x9f\xa0\x4e\x17\x1a\xde\x9a\x52\xee\xab\xf2\x8b\x05\x1f\x91\xf6\xf5\xc9\xfb\xf7\x67\xfd\x21\xf7\x97\x4b\x28\xa7\x85\x51\x14\x8b\x05\xf3\x62\xe8\x21\xa8\xa1\x33\xe5\xde\x9d\xce\x94\x19\xbe\xbb\x5c\x5a\x49\xa7\x76\x3b\x4a\x38\x2d\x7f\x47\xab\xc6\x71\x77\x18\xb8\x0f\x3a\xd1\xa7\x73\xe2\x78\x34\x8e\x7b\x16\x3c\x0e\x69\x44\xd4\x4f\xcb\x65\x23\x3a\xf3\x44\xf2\x1a\x0b\x50\x0c\xa7\x25\x82\xd0\x22\x51\x00\xe3\x88\xc5\xf9\x18\x12\x61\x1c\xd2\x0a\x5d\x9e\x72\x43\x95\x80\x36\xb1\xa8\x35\xf2\x66\xdc\x4d\xca\x14\x4a\x69\xee\x28\x19\x8b\x40\x8d\xbc\xd6\xd4\x6d\x1d\x91\x90\xba\x2e\xf7\xc7\x2d\x8f\x8d\x60\xf0\x93\x21\x48\xe8\x87\x33\x21\x02\xbf\xc0\x42\x04\xe3\xb1\xc7\x90\x85\x47\xc3\x98\xb9\xc9\xd8\xaa\xc2\xba\x97\x55\x21\x14\x4e\x95\x4a\x92\x69\x34\xc6\xa1\xfb\x7f\xcd\x2b\xcd\xce\x54\x2b\x35\x20\xa4\x69\xb5\x71\xd4\x0a\x7c\xef\x21\x5f\x04\x0a\x5d\x2b\x39\x56\xbd\x03\xa3\x00\x64\x1b\x38\xa1\xa6\xb6\xa0\xda\x35\x56\xcf\x86\xb2\xa3\x3a\x31\x37\x08\x94\x70\xb7\x67\x4d\xa0\x67\xf3\xe3\x30\x8c\xa8\xef\x42\x1a\x07\x45\x91\x96\xd6\xb3\xa6\xf4\xb3\xc2\x82\xb7\xe4\xe8\xa5\x33\x49\xad\x0c\x86\x08\x6d\x1b\xb8\x68\xab\x27\xeb\x30\x50\x18\x82\xf5\x02\xdd\x0e\xcd\xc9\xd5\x01\xed\x2a\xe8\x1a\x0a\x5a\x1c\xd9\x95\x9a\xaa\x04\xb2\x61\xe8\x8f\xbb\x33\x2f\xd3\xca\xa4\x28\xfc\x14\x15\xc4\xe3\x49\x39\xea\x08\x3e\x67\xeb\xdd\x4b\x75\xe3\x11\x7b\xe3\xb7\x9d\xce\xfd\xfd\x7d\x1b\xda\x12\xc1\xff\xb6\x13\x4c\x3b\x0a\xf5\x00\x23\x3c\x46\x63\x16\x77\x3c\x2a\x58\x2c\xfe\xe9\x4c\xc3\x5e\xd2\xf6\xdb\xb3\xcb\x2b\xfb\xe3\x45\xb1\x6f\x24\xff\x04\x34\xe9\xfa\xb8\x7a\xbc\x52\xd8\xc4\x84\x00\xd3\x48\xe6\x19\x40\x29\x1a\x73\x1f\x0d\x90\x8c\x78\x14\x0b\x99\xba\xde\x26\x27\x70\x59\x81\x15\x26\x01\xe2\xae\x75\x80\x14\x31\x1d\xe6\xbe\x7d\x75\x7d\x69\xbf\xc3\x41\x44\x02\xc3\x32\x37\x15\x94\x87\x7f\xf1\x87\x71\xf8\xa3\x32\x1c\x54\x22\xd0\xe9\xb5\x62\x19\xa5\xb4\x07\xd8\x92\x35\xfb\xd1\x6d\x79\x86\x2d\x9c\xad\xb5\x70\xb6\xb9\x85\x37\xa1\xe0\xca\xe8\x0e\xa8\x95\x1e\x2d\xb6\xd2\xa3\x1b\x5b\xf9\xe1\xc4\x40\x0b\x3b\x33\x6f\x13\x2e\x65\x5e\xe1\x05\x1a\xa1\xfd\xf1\x76\x0f\x9a\x2b\x13\x05\xf7\x45\xcf\x8a\x0d\x9c\xb2\x29\x38\x35\x15\xc7\xa5\x38\x87\xae\xf5\x75\xe2\x63\x83\xd1\x08\xa2\x95\xd6\x51\x0e\xe7\x16\x0b\xc1\xa6\x21\x42\x0e\xb1\xc0\xff\x43\xdd\xf1\xdb\xb7\xea\xe1\x37\xe8\x0d\xe6\x01\x5f\x8b\xb4\xb1\x77\xca\x51\xd6\x1d\x95\x57\xfb\xa6\x59\xb5\xee\xa8\xb4\xd6\x5c\x1f\x6e\xef\x14\x27\x9c\x3d\x4a\xa7\x00\xdf\x8d\x9d\xc2\x1f\xa7\x53\xb8\x91\x4e\x09\xe3\x72\xe1\x8e\xfe\xda\x4c\xba\x30\x36\x21\xdd\x7c\xfc\x38\xd2\xcd\xc7\xdb\xa5\x4b\x5f\xb6\x44\xfe\x09\xc1\x1c\x62\x67\x84\x0f\xd2\x4b\xfc\xdb\x72\xf9\x63\x31\x04\xd7\x91\x37\x06\xe3\x72\xde\xb6\x58\x74\xbe\x7b\xf1\x5d\x67\xb9\x5c\x2c\x94\x7c\x19\x81\x87\x14\xa6\x5d\x2e\xce\x5b\x30\x0c\xb6\x40\x5c\x1d\x3c\x00\xfb\x9f\xe1\x17\xe7\x48\xfe\xa9\xc7\x9d\xbb\xde\x42\x4c\x78\xdc\x9e\x40\xe4\xe5\x31\x99\xb2\x04\x19\x64\x97\x2d\x97\x58\xfc\x54\x3d\x42\xcd\x2f\xd2\x48\x70\x55\xc0\xfa\xec\xd1\x21\xf3\x88\xfa\x49\x22\x7f\x3d\xed\x01\xea\x77\x28\x48\x06\x12\x8f\xb1\x81\xd7\xd0\x0d\x2a\xfa\x3a\xd6\xf3\x8e\xdd\xda\x12\xf1\xf1\xc4\x64\x63\x52\x51\x48\xe3\x66\xed\xda\x18\xad\x49\x60\xf7\xa0\xb6\xb1\x85\x65\xee\xb9\x98\x10\x7c\x03\x65\x44\xcd\x02\xf6\xf8\x47\x4d\xd4\x16\x0b\x88\x89\xc7\x8c\x7c\xc3\xbf\x27\xdf\x38\x41\xc4\xc8\xdb\x1e\x51\xae\xe6\x74\x70\xd3\xfe\xc0\x63\xec\x49\x11\x81\xec\x27\x42\x44\xbf\xb0\x07\x22\xc1\x0a\xf8\x0d\x1f\x5a\x17\x96\x22\x6a\x5f\xc8\x36\xc3\xc4\xd9\x4d\xac\x41\x3a\x4a\xd9\xa1\xc4\x0f\xee\x23\x1a\xa6\x8d\x4b\x29\x60\xfe\xec\x56\x52\xa5\x33\xdb\x42\xc7\xcd\x62\x16\xb2\xc8\x81\x48\x52\x45\x7c\x6a\x96\xb4\x4a\xed\x25\x15\xdc\xc4\x2c\x92\x52\xe5\xaa\x55\xa9\x19\x0f\x7a\xfc\xb8\x52\x5c\x3d\xc4\xeb\x42\xc8\xc4\xa7\x93\xe1\x5f\x94\x8b\x75\x21\x54\xaa\x69\x29\x5a\xdc\x9f\xb3\x28\x9d\xbd\x96\x48\x63\x83\xe9\xac\x4b\xa3\x52\x4b\xa5\xe9\x88\x28\xa3\xfa\xf9\x9f\x5d\x0c\x41\xa1\x34\x16\xfa\x26\x5c\x69\xf7\x80\x46\x74\x8a\xc3\x20\xb3\x09\x66\xb6\x51\xc3\xa5\x05\x5f\x04\xfe\x1f\x2c\x0a\x08\xa4\x81\x15\xf8\xc4\x52\x85\xe4\xdf\xd6\x24\x80\x16\x5a\x24\x9d\x9e\xb5\x26\xdc\x75\x99\x6f\x25\x26\x90\xf9\xca\x05\x92\x27\x90\x2d\x26\x59\x30\x4f\xdf\x30\x63\x8b\xc9\xc8\x62\xa8\xb7\xb9\x59\xf2\xcc\xe7\xb9\xe9\xce\xf1\xb7\x85\xb0\xb0\x4e\x2d\xa0\x98\x8f\x5f\x09\x2a\xde\xe3\xd7\x82\x0a\xd5\xa4\x96\x8e\x1e\x3b\x99\x9a\x7c\x9c\x12\xab\xaf\x53\x9b\xfc\x78\x82\xbe\xca\x8f\x8b\x95\x63\x95\x0a\xb4\x0f\x8e\xbb\xa3\xe1\x03\x4c\xb2\x7f\xdb\x13\xcc\x5d\x1e\xdf\xad\x54\xbd\xff\x93\x64\x52\x0e\xe6\xba\x06\x0d\xe8\x2e\x8f\xf0\xd3\x85\xa5\x58\xb4\xfb\x3c\xba\x90\x5f\x32\x34\x2c\xa4\x10\xae\x72\xd9\xfc\x42\x7f\xe7\x48\x81\xa3\x50\x22\xa1\xdf\x05\x5a\x12\xa2\x93\x39\xe5\xde\xae\x24\xd5\x83\xb0\x82\x9e\xa4\x35\x60\x43\x03\x95\xb2\x5c\xaa\x69\x57\x52\x25\xe4\xb8\xfb\x09\x79\x1d\x08\x9a\x15\xb2\x11\x48\x25\xa3\x5c\x03\xa9\xae\xe9\x10\x51\xaa\x3f\xf2\xd5\x8f\x20\x2f\x0d\xa0\x55\x69\xbf\xaa\x0f\xa1\xcc\x9f\x4d\x31\x56\xb2\xb0\xbe\x5b\xf9\xe5\x5a\x56\x7c\x47\x8e\x88\xd5\x97\x1f\xd7\xa1\x36\xd9\x88\x1a\x3c\x40\xf8\xf3\x60\xe6\x0b\xfc\x46\x5a\x9b\xc9\x2b\x62\x49\x1d\x02\x16\x99\xf1\xab\xc9\xec\x35\xb1\x6e\xe4\x27\x5b\x03\xbc\xde\x10\x4b\xea\x4d\x91\x59\x23\xb0\xc9\x41\x84\x09\xc4\xe1\x7e\xe0\x36\x87\x1c\xc5\xa5\x0a\x73\x54\xee\x33\x02\x1d\x7b\x14\xb1\x9d\x49\xf6\x01\x1d\x7b\x56\x89\x3a\x98\xb5\x27\xec\xd8\xb2\xdf\xcc\xe1\x8e\x1e\x6b\x23\xc0\x73\x64\x26\x4c\x4a\xfa\x40\x19\x53\xc6\xa3\x2b\x70\xa9\x08\x05\xd6\x4a\x6b\x18\xd9\x58\x9c\x14\xfb\x59\x16\x93\xd8\x51\x83\x0e\x61\xa2\x06\x99\x44\x04\x63\xa1\x47\xde\x7c\x9b\xc3\x01\xaf\x17\x80\xf0\xd1\x4a\x8d\xec\x4d\xe1\x07\xcf\x85\x1f\x1a\x06\xf8\xa8\x5d\x8e\x00\x69\xc6\x8e\x36\x03\xe5\xfb\xcc\x13\xd4\xf6\xf7\x26\xf9\x38\x13\xfb\xd0\xec\x57\x43\x9e\x79\x23\x1b\xe6\x8d\x63\x07\x5b\x99\xb0\x0d\x26\xfc\xca\xf4\x4c\xc7\x06\x1b\x8c\x46\xb4\xd2\x6c\xd7\x23\xf8\x64\xdd\xed\x9d\x7d\x7d\x45\x00\x4b\x49\xcc\x9c\xc0\xcf\xae\xd1\xda\xfe\xe6\xb8\xbe\x5b\xf8\xdc\x3d\xec\x76\xb2\x29\xc7\x61\x5c\x7b\x7a\xb1\x5d\x38\x18\xd9\x3f\x5d\x3a\x81\x88\x42\xde\xfd\x7a\x7d\x76\x45\xa6\x81\x3b\xf3\x02\xf2\xfa\x7d\x83\x0e\x7c\x57\x10\xf1\xdb\xd7\xef\x1f\x5d\xc6\xbd\xfb\x71\x5f\x21\x9b\x80\x2c\x37\x1b\x72\xf1\x11\x8b\xa2\x20\x6a\x08\xb2\x8a\x47\x15\xca\xaa\xdc\xaf\x30\x5b\x1f\x66\xf5\x18\x19\xc1\x59\x13\x73\x34\x43\x38\x5b\x01\xb1\xd9\x65\xc9\x2a\x13\x34\x00\x55\x55\x18\xfa\x44\xd5\x97\xa3\xe3\x2e\x95\x9b\xc0\xc0\x0a\xdc\x33\x51\x7d\x33\x74\xcb\xc2\x91\x09\x78\x0b\xa9\x73\xc7\x44\x43\x7c\xd3\x4c\xaa\x00\x4e\x67\x7f\x45\xb8\xfa\x08\x97\x0c\x93\x11\x88\x33\x34\x1b\xfc\x0a\x71\x46\x02\xad\x3f\x17\xe8\xaa\x65\x78\x16\x70\x97\x83\xa7\xe6\x78\x37\x65\xd3\x1a\x6b\xaf\x40\xb5\xb2\xb5\xf3\xb3\xf3\x72\x9c\xc3\xcd\x33\x0a\xe1\xee\x38\x28\x94\x24\x6b\xff\xc2\x51\xb2\x22\xc4\xad\x72\x76\x84\x13\x24\xf8\xc9\xfc\x57\x30\x64\x5b\xfa\xe5\x5d\x67\xec\x27\xa0\xd1\xef\xee\xc0\xb0\xd9\xe2\xe0\x39\x9b\x3e\xfd\xe2\x60\xc6\x7c\x70\xb8\xf6\x29\xbf\xe1\x13\xd5\x13\x7c\x9b\x4a\x0c\xa3\xb9\x89\xa5\x7b\x9b\x2a\x07\x0e\x77\xe9\xe0\xbf\xfc\xd0\x0d\x56\x2b\xba\x30\x46\x92\x0b\x91\x7f\xd3\x1d\x18\x6a\x9c\x08\xd1\x0c\xb6\x92\xcb\xed\xe1\xdc\x1f\x5b\x7a\x49\xfb\x18\xff\x74\x69\x96\x14\xb7\x90\xa8\x9d\xd7\x17\x0c\xb7\x5d\xcf\x59\xc2\x66\x99\xdd\x3d\xa2\xf9\x49\xc8\x24\x43\xe1\xb7\x86\x5e\xe0\xdc\xa5\x5b\x78\xd4\x4f\x77\x58\x2d\xd2\xe4\xb5\x85\x7f\xc8\x70\xdc\xe2\xfe\x28\xb0\xd2\x45\x76\xa0\x86\x12\xdd\xce\x30\xcb\x2b\xd9\x87\x8b\x6d\xd5\xdb\x89\xf0\xb1\x4c\xe1\x07\xc5\x75\xf0\xa2\x72\xeb\xf4\xb4\x0f\x10\xb4\xb4\x5a\xa9\x46\x81\xf7\x1b\xf1\xf1\x6a\x97\xe0\xca\xce\xf5\x56\xa9\x97\x55\x7b\xf0\xa5\x23\x29\xfd\x70\x4a\xf0\x8b\xb0\x47\x1f\x4a\xfc\x87\xdc\xd1\xb3\xb6\x3b\x5b\x35\xc2\x2d\xd9\x3f\xb9\xbe\x03\x52\xe3\x68\x06\x52\xd7\x44\xc3\x21\x1a\x47\xc1\x2c\xd4\xde\x4e\xbd\x24\x27\x10\xd4\xcb\x8b\x9c\x00\x25\x96\x51\xd8\x47\x85\x1d\xfd\x81\xc5\x71\x5f\xf7\xb8\x4b\xb0\x1a\xa9\x0d\x2b\x05\xdd\xc2\x48\x75\x93\x44\xa7\x20\x62\x1b\x39\x6d\x6e\xf6\xda\xbe\x36\x0b\xb5\x35\xf0\xb0\xf3\x50\x5f\x73\x63\x96\x25\x5d\x61\xc4\x13\xe9\xc1\x25\xa0\xca\x9e\x6a\xe0\xb7\x4f\x86\x71\xe0\xcd\x44\xd9\x8e\xe1\x67\xa7\x0f\x17\x2b\x0b\x6c\xa8\x0f\x1b\x39\x3d\x83\x66\xaf\xa4\xfd\x0f\xf8\xd8\x06\xd2\xae\x6b\xef\x36\x6d\x45\x20\x54\x9e\x48\xbe\x6c\xd9\xe0\xa1\xf7\x7e\xa6\x3b\x35\xf7\xf5\x5e\xee\xa8\x96\xf3\xc2\xf5\xb6\xfa\xbe\x2b\x47\x5d\xdb\x75\x01\x17\x53\x9e\x4b\x0a\xb4\xc9\x71\xf5\x71\x59\x79\x16\xd3\x31\x6b\xe8\xbf\x64\x4d\x07\xee\xbe\xfa\xa3\xc3\xf1\x5e\x20\xab\x19\xe7\x55\xc1\xe8\x4b\xf5\x5d\xa0\xc7\x87\xe7\xba\xa4\xf1\x99\xf0\x5c\x15\x8c\x9e\x41\xa3\x4b\x1c\x57\x2d\x61\xf7\xf7\x5b\xe6\x34\xb5\x42\x45\xaf\x98\xc7\x1c\xb1\x45\xec\x9c\x79\xbd\xca\x56\xb0\x76\x40\xb1\x15\x72\xcf\x2b\x9c\x9b\xf5\xf8\x2e\xfb\x4b\xf4\xc9\x45\xb9\x35\xac\x68\x1b\x25\xa3\x53\xb5\x13\x4b\xf2\x52\x5b\x69\x14\xaf\xc2\x19\xa9\x9d\xc4\x79\x69\x50\x1c\xe0\xf5\x0e\x57\x14\x2b\xa4\xc9\x9e\xd7\x6a\x1e\xbc\x14\x76\xfd\x60\x08\xf3\x62\x1b\x45\x76\x8f\x41\xfd\x98\x87\xd7\x8b\x79\xec\x46\x31\x8f\x6d\x24\xe6\xb1\xcd\xc5\x3c\xf6\xb6\x98\x27\xfd\xd2\x1d\x37\x8c\x79\xec\xff\x81\x98\xc7\x3e\xa0\x98\xc7\x36\x15\xf3\x54\x30\xfa\x52\x63\x1e\xfb\x10\x63\x1e\xdb\x54\xcc\x53\xc1\xe8\x19\x34\xba\x24\xe6\xa9\x25\xec\xd7\x98\x67\xc3\x2a\xaa\x91\x20\x43\xf3\x1a\xa8\x95\xae\x3d\x83\x9e\xfc\xc6\x15\x63\xf2\x00\xaf\x33\xb9\xd1\xa0\xbe\x38\xaf\x0c\x8a\xf3\xea\x29\x63\xb0\xe2\x62\xfb\x0e\x41\x58\x61\x07\xd2\x4e\x14\x66\xc2\x36\x3c\x59\x5f\x27\x6e\x53\xab\x63\xb5\x03\xb7\x3c\x79\xed\xc8\x0d\xd9\x98\x0a\xdd\x94\x48\x9b\x62\x37\x28\x11\x44\x0f\x0d\xe3\xb6\xec\xb2\xe2\xc1\x06\x6e\xd0\x88\xc3\x89\xdc\x50\x58\x33\xa1\x5b\x15\xa7\x2f\x35\x76\x43\x5d\x3e\xbc\xe0\x4d\x59\xa0\x89\xe8\xad\x8a\xd3\x33\x68\x76\x49\xf8\x56\x4f\xda\x47\x5d\x6b\x49\x37\x69\xd4\x77\x60\x61\x5c\xcb\x7f\x0d\xe2\x26\xee\x2b\x47\x5d\xdb\x7b\x01\x17\x53\xce\x4b\x0a\xb4\xc9\x77\x0d\xa2\xc0\x01\x03\x68\xfc\xd9\x41\x56\x74\xe0\xde\x6b\x10\x1f\x8e\xf3\x02\x59\xcd\xf8\xae\x0a\x46\x5f\xaa\xeb\x02\x3d\x3e\x3c\xcf\x25\x8d\xcf\x84\xe3\xaa\x60\xf4\x0c\x1a\x5d\xe2\xb7\x6a\x09\xfb\xa8\x6e\x2b\x8c\x9b\x7a\xad\xf9\xb8\x96\xd7\xba\x1d\x37\xf1\x5a\x39\xea\xda\x5e\x0b\xb8\x98\xf2\x5a\x52\xa0\x4d\x5e\xeb\x96\x8e\x23\x8a\xf7\x4a\x36\xf2\x59\xb2\x9a\x03\xf7\x59\xb7\xe3\xc3\xf1\x59\x20\xab\x19\x9f\x55\xc1\xe8\x4b\xf5\x59\xa0\xc7\x87\xe7\xb3\xa4\xf1\x99\xf0\x59\x15\x8c\x9e\x41\xa3\x4b\x7c\x56\x2d\x61\x1f\xd5\x67\xcd\xc7\x4d\x7c\x56\xbc\xe7\xa9\x87\x10\xa6\x1b\x19\xd7\x76\x25\xeb\x2e\x3f\xf6\x10\x26\xe7\xba\x42\x8e\x87\x1e\x90\xb2\x3d\xb0\xfb\x1b\x2e\x9d\xd3\xa7\x06\x24\xd4\xa7\xa5\x77\x39\x67\x90\x52\xdc\x14\x28\x5e\xa4\x46\x26\x73\xf5\x3d\x72\x7b\x30\x1c\x44\x3c\x88\xb8\x78\xd8\x93\xec\x82\x3b\x3b\x1e\xc9\x48\x49\xae\xf8\x1f\xfb\x92\x5c\xb2\x98\xbb\xf2\x7c\x46\x15\x19\x9e\xde\x48\x6e\xd8\x48\xbb\xe1\x9a\x57\x5d\xc5\xa2\x64\xcf\x9f\xb1\x6b\x74\x58\x23\x09\xa8\xea\x9e\xd5\xc8\xcc\x4a\x9f\xf2\x66\xa4\x41\x2c\x6f\x46\x02\xfd\x6b\x7c\x85\x10\xb2\xfa\x81\x58\x37\x86\x58\xfd\x03\x58\x5d\x9d\x5d\xd6\xbc\x68\x09\x39\xbc\x84\x76\x5d\x1a\x91\xe5\x15\xb1\x2e\x6c\x23\x9c\x5e\x13\xeb\xd6\xbe\xbc\x36\xc2\xeb\x0d\xb1\x2e\xcf\xae\x8c\xb0\xfa\x1b\xb1\xae\xed\xf3\xb3\x84\x97\x36\xa6\x9a\xcc\xfe\x4e\xac\xd3\x8f\xe7\xe7\x27\x17\xfd\x64\xb1\xaa\xc1\xa9\x1c\x8d\xdb\xcd\x0f\xe5\x64\x4e\x7d\x01\xab\xe2\x3d\x91\xf2\xa2\xd3\xb2\x5b\x21\xd5\x3a\xd6\xb1\x7c\x48\xae\xe4\xdb\xa3\xd6\xf9\x58\x2e\x8b\x59\xca\x67\xdc\xb1\x07\xbc\x99\x57\x25\x25\x28\x96\x0b\xed\xde\xa4\x08\xa6\x6f\xac\x57\xd3\x07\xb9\x12\x59\x09\x55\x3b\x48\x91\x3a\x3f\xed\xdd\xa6\xd4\x99\xac\x40\x4a\xd7\x72\x0e\x89\x48\x57\xee\xe5\xe6\xaa\x90\x76\x75\xb3\x99\xf4\x75\xc8\xa7\x7d\x73\x93\x71\x76\x29\xc4\x66\xb2\xca\x10\x58\x66\x57\xdf\x95\x25\xb3\x07\x51\x30\x07\xdc\x8f\x36\x14\x01\xbf\x2c\x36\xb1\xd0\x4d\x1b\x71\x0f\xe7\xad\x62\xb2\x0d\xef\x77\xe8\xcb\x18\x02\x08\x67\xb2\x4b\x28\xc1\x47\x84\xfd\x4e\xd6\x47\xd2\x25\x22\x9a\xb1\x0a\xf3\x2a\x68\x0e\xc9\x71\xdc\x54\x3e\x35\x94\xba\x3e\x2c\x09\xb0\xea\xfa\xb0\xcc\x2c\xd5\xd8\xb1\xea\x7e\xe1\x40\xe0\x2a\x0b\x75\xa7\x32\x33\xd1\x9c\xca\x02\x52\x6f\x2a\x73\xfb\x3c\x62\x8e\x90\x4b\xa5\x86\x4e\x17\xa6\x6a\xd3\x00\xc9\x52\xc8\x5d\x66\xef\x80\xfe\x00\x29\x5b\xef\x81\xd6\x18\x86\x65\xf7\xbb\x7e\xba\x00\xf6\xa8\x04\x93\x2c\x70\xea\xbb\xc3\x80\xf7\x89\xc7\xc7\xfe\xa9\x4a\x57\xe0\x56\x2a\x63\xee\x42\x6a\x4c\xd7\x24\xc9\x74\x20\x2f\x65\x01\xa7\xf1\x0e\x6b\x1a\x31\x91\xa5\x91\x9d\x98\xbd\x98\x97\xea\x7e\x9d\xa4\x0d\xfc\x6f\x00\x00\x00\xff\xff\xf2\x9a\x28\xf4\xf4\x69\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 27124, mode: os.FileMode(384), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

