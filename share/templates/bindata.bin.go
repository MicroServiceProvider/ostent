// Code generated by go-bindata.
// sources:
// index.html
// DO NOT EDIT!

// +build bin

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xe4\x5c\x5f\x73\xdb\x36\x12\x7f\xcf\xa7\x40\x79\xe9\x3d\x74\x4a\xa9\x76\x9c\x5e\x2e\xb5\x72\xe3\x44\x6e\xcb\x69\x6c\x6b\x6c\x39\x77\x9d\x4e\xa7\x03\x91\x90\x84\x9a\x22\x59\x00\x92\xad\x6a\xf4\xdd\x6f\xf1\x87\x24\x48\x89\x92\x68\xd1\xb1\x66\xf2\x10\x4b\x04\xb0\x7f\xb1\xc0\x0f\xbb\x02\x73\xfa\x55\xf7\xea\x43\xff\xd7\xde\x39\x1a\x8b\x49\xf8\xe2\xdd\xa9\xfa\x40\x08\xbe\x10\x1c\xc0\x17\xf9\x75\x42\x04\x46\xfe\x18\x33\x4e\x44\xc7\x99\x8a\xa1\xfb\xc6\x31\x5d\x82\x8a\x90\xa8\xef\xf0\xb4\x58\xb4\xba\x58\xe0\xd6\xcf\x97\xcb\x25\x8a\xb9\x20\x91\x38\x6d\xe7\x23\x0c\xa3\xb1\x10\x89\x4b\xfe\x9a\xd2\x59\xc7\xf9\x9f\x7b\x7b\xe6\x7e\x88\x27\x09\x16\x74\x10\x12\x07\xf9\x71\x24\xc9\x3a\x8e\x77\xde\x21\xc1\x88\x38\x36\x65\x84\x27\xa4\xe3\xcc\x28\xb9\x4f\x62\x26\xac\xc1\xf7\x34\x10\xe3\x4e\x40\x66\xd4\x27\xae\x7a\xf8\x16\xd1\x88\x0a\x8a\x43\x97\xfb\x38\x24\x9d\x23\xc3\x68\xb1\xf8\xb9\x7f\xf1\x11\x39\xa7\x5f\x39\xcb\xa5\xeb\xfe\x46\x87\xc8\x3b\xff\xfd\xdd\x69\x48\xa3\x3b\xc4\x48\xd8\x71\xf8\x18\x78\xfb\x53\x81\x28\xb0\x77\xd0\x98\x91\x61\xc7\x69\x0f\xf1\x4c\x3e\xb7\xe0\xcf\x3a\x4e\xbf\x91\x28\xa0\xc3\xdf\x5d\xd7\xe6\xa4\x19\x70\xfa\x37\xe1\x1d\xe7\xd5\xf1\xc3\xab\xe3\x32\x3b\x9e\x7e\x71\x5f\x1d\xb7\x92\x68\xe4\x20\x31\x4f\xc0\x44\x3a\xc1\x23\xd2\x96\x0d\xc6\xfc\x9c\x29\x4e\x92\x90\xb8\x22\x9e\xfa\x63\xb7\x20\xe0\xe8\xf8\xbb\x07\xf8\x57\x2d\x02\x3a\x5b\x35\x59\x9e\x9c\x3c\xc0\xbf\x0d\x2c\x4f\x4e\xea\xb2\x7c\x7d\xfc\x00\xff\x36\xb0\x7c\x7d\x5c\x97\xe5\x1b\x30\xfc\xcd\x26\xc3\xdf\x54\x18\xce\xc5\x3c\x24\x7c\x4c\x88\x48\x1d\x2f\xc8\x83\x68\xfb\x9c\x67\xcc\xe0\x7b\x9b\x46\x01\x79\x68\xc9\x56\xc3\x81\xfb\x8c\x26\xc2\x26\xf9\x13\xcf\xb0\x6e\x75\xca\x0b\x05\x71\xe6\x03\xa3\x3f\x79\x9b\xc9\xa0\x67\x04\xbe\x1d\xb7\x8e\x5a\x47\x6f\xd2\x86\xd6\x84\x46\xad\x3f\x41\x66\x00\x8b\xc7\x9d\x60\x1a\xe9\xf1\x8b\x05\x44\x67\xab\x7f\xf6\xd3\x4f\xe7\xdd\x01\x8d\x96\x4b\x18\x67\x94\xd1\x14\x8b\x05\x09\x39\x59\x2e\x41\x42\x7b\x42\xc3\x3b\xd3\xa9\x3a\xa2\x60\xb9\x74\xd2\x85\x79\xda\xd6\xca\x19\xfd\xdb\x66\x6d\xbf\x3b\x1d\xc4\xc1\xdc\x34\x46\x78\x86\xfc\x10\x73\xf0\x28\x7c\x1d\x60\x86\xf4\x87\x1b\x90\x21\x9e\x86\x22\x7d\xe4\x02\xd6\xaa\x0f\x13\x91\x38\x88\xc5\xb0\xb4\xe4\x70\x3a\x82\x46\x98\x93\x4c\x60\x40\x33\x6e\x72\x95\x82\x4d\x84\xb9\xc3\x70\x4a\x83\x74\x4c\x69\x94\xe1\x2e\x35\x23\x0c\x56\x76\xe8\x4e\x02\xf7\x08\x25\x38\x08\x68\x34\x72\x43\x32\x84\x6d\x24\x9d\x82\x94\x7e\x30\x15\x22\x8e\x4a\x2c\x44\x3c\x1a\x85\x44\xb2\x08\x71\xc2\x49\x90\xce\xad\x1e\x6c\xbc\xac\x07\x49\xe5\xf4\xa8\xb4\x19\xb3\x91\x9c\xba\x7f\x18\x5e\x59\xb7\x25\x56\x45\x40\x82\x33\xb1\x9c\xb9\x71\x14\xce\x8b\x43\x60\x50\x5f\xeb\x91\x7b\x07\x66\x01\xc8\x36\x70\x52\xd1\x0a\x62\x57\x58\x1d\x0c\x65\x5b\x3b\xb1\x30\x09\x18\xd1\xa0\xe3\x8c\xc1\xb3\xc5\x79\x18\x30\x1c\x05\xd0\x46\x93\xa3\x7c\xbd\xc3\x64\x48\x3c\x80\xf1\x80\x0f\x72\x3f\x47\x36\x68\x94\xdc\x6c\x77\x9d\xb6\x71\x41\x6a\x1b\x62\xa7\x14\x49\x52\x8d\xf2\xbc\xe5\x41\xa8\x1b\xd0\x86\x89\x7d\x77\x3a\x0d\x2d\x1b\xd2\xa1\xf0\x51\x9e\xfe\x90\xa6\xe3\xb0\x2f\xe8\x8c\xac\x3a\x0f\x1b\x83\x25\xd8\xf1\xb7\xed\xf6\xfd\xfd\x7d\x0b\x2c\x66\xf0\xaf\xe5\xc7\x93\xb6\x46\x47\xd8\x01\x42\x82\x39\xe1\xed\x10\x0b\xc2\xc5\x7f\xfc\x49\xd2\x49\xad\xfe\x74\x7e\x7d\xe3\x5d\xad\x78\x45\xf1\x4f\xc1\x15\xaf\xce\x5a\x48\x2b\x95\x4d\x17\x08\xec\x58\xc8\xfa\x0e\x5b\x0e\x1b\xd1\x48\x2e\x2f\x34\xa4\x8c\x0b\xd5\xba\x6a\x93\x1f\x07\xa4\xc4\x4a\x36\xc1\x7e\xba\xe2\x00\xa5\x62\x36\xb5\x5d\xef\xa6\x7f\xed\xbd\x97\x93\x28\x09\x1a\xd6\x79\x5f\x45\xa7\xc9\x3f\xa3\x01\x4f\x7e\xd0\xcb\x42\x06\xd1\x34\x59\x1d\x66\x85\xe3\x6d\x4f\x5a\xb2\xb2\x3a\x8c\x2d\x07\x68\x61\x88\xcb\x16\x86\x78\xa3\x85\x1f\xcf\x1a\xb0\xb0\x3d\x0d\x37\xad\x58\xeb\x11\x1e\xc0\x08\x83\x43\xdb\x91\xa3\x30\x86\xc5\xf7\x65\x44\x91\x06\x4e\xc8\xc4\x5e\xfb\x12\x4c\x4e\x52\x54\x89\x87\x43\xc0\x67\xf7\xa8\xb0\xf6\x17\x0b\x41\x26\x89\x5c\x86\xc8\x01\xc4\x03\xa9\xfc\xed\x5b\xfd\xe5\x0f\xf0\x03\x09\x15\xc7\x96\xf4\xcb\xfa\x9d\x27\x18\x96\x05\x7e\x5f\x4f\x80\x64\xb0\x86\x7f\xc1\x4f\xdb\x0d\xf7\x93\x69\xc3\x86\x2b\x8e\x1b\x0c\xa7\xfb\x1a\x4e\x1b\x31\x3c\xe1\x65\x35\x8e\xbe\xdb\xcf\x70\xc9\x71\x7f\xbd\x66\xa3\xa6\xf5\x92\x1c\xb7\xe9\x95\x3d\x6c\x39\xad\xa6\x04\x33\x38\xef\xc9\xa5\x8f\x3a\xe9\xae\xbd\x5c\xfe\x50\x3e\x36\x9a\xd3\xa2\x3c\x40\xaa\x64\x71\xb1\x68\x7f\xf3\xe2\x9b\xf6\x72\xb9\x58\x68\xfd\x2c\x85\xb1\x3c\x66\xff\x31\xc0\x90\xc3\xc9\xb3\x1b\xe4\x48\x29\x26\x02\xff\x9f\xe1\x13\x52\xc4\xc5\x42\x39\x66\xb9\x94\x6d\x1f\xf4\x57\x14\x47\x1f\x42\xea\xdf\x75\x16\x62\x4c\x79\x6b\x0c\x67\x88\x90\xa8\x96\x25\x42\x2f\xf4\x1e\xf5\x5e\x72\x55\xf4\xad\x3e\xd8\xa3\x0f\x07\xef\xcc\xa1\x77\x47\xa5\x18\x1d\x8d\x9b\xd5\x4a\xab\x82\x72\xfd\x76\xd5\xca\xcc\x2d\xac\x33\x08\x21\xee\xc8\x31\xf7\x54\x8c\x91\x7c\x82\xf0\x90\x73\x0d\x4c\xe5\x1f\x7d\xdc\x5f\x2c\xe0\x64\x35\x22\xe8\x25\xfd\x16\xbd\x04\x2a\xf4\xb6\x83\xf4\xbe\xfd\xa1\x77\xdb\xfa\x48\xb9\xf4\x88\x60\xa0\xc9\x99\x10\xec\x17\x32\x47\x72\x57\x70\x81\xdd\x60\xee\x5e\x3a\x8a\xa6\x05\xe7\x0a\x35\x95\x22\x48\xa3\x53\x81\x8e\x72\x0b\x52\x5f\xa3\xf8\x9e\xe1\x24\xcb\x76\x53\x2a\xc8\xe8\x83\x94\x32\x77\x95\x4d\x3d\x18\xb9\x53\x4e\x12\x5f\x45\x97\x3a\x56\xeb\xc7\x8e\x61\x72\xcb\x09\xeb\xf9\x42\x29\x90\xb3\xce\x5a\xbf\xde\x5f\xc2\xcd\x9c\xaf\x0a\x48\x1b\x1b\xe0\xff\x5f\x4c\xc5\xaa\x80\xac\xb5\x8e\x04\x97\x46\x33\xc2\xf4\x41\x74\x8d\x24\x0f\xe2\x6c\x55\x52\xd6\x9a\x4b\x6a\x0b\x66\x05\x5b\xf1\x63\x6b\xe8\x05\xc3\x9a\x91\x17\x0c\xf3\xa0\xeb\xfe\xb8\x3e\xe6\x82\xa1\x09\xb9\x80\x32\x79\xd2\x77\x24\x59\xab\x4b\xd9\x25\x3c\xe8\xe8\x43\x68\x9d\x87\x74\xe0\x65\x99\x83\x4e\x18\xc0\x72\x49\x4d\x66\x19\xb5\x76\x87\xdd\x98\x3a\xa3\x3e\x5b\x4b\xa9\x9c\x6d\xda\x68\xcf\xe6\x2e\x6b\xa5\x90\x5f\x4d\xa6\xea\x30\x9d\xa6\x3d\x5e\x04\x87\x27\x38\x66\x33\x92\x1d\xd4\x8c\x38\x4f\xb6\x15\x8e\x5d\xef\x90\xee\x39\x9b\x61\x1a\xd6\x5a\x78\x05\xa5\x4a\x51\x05\x0c\x61\xa9\x59\x31\xb5\x83\xba\x40\xfd\x75\x59\xdd\x29\xcf\x42\x70\x45\xe3\x5b\x5e\x0e\xcf\xe6\x5c\x37\x95\x29\xfd\xaa\x2e\xc1\x5a\xd7\xdd\x9a\x8e\xc6\xb5\x10\xb1\xc0\x61\x59\x0d\xd5\xb5\x56\x8f\xbe\x1c\x6e\x29\xb2\xd7\x6a\xa5\x75\x57\x2b\xb5\x56\xab\x57\xb1\x5a\x69\xba\x5a\xcd\x52\xa5\xc3\x56\xbe\x4e\xeb\x2c\x27\x9b\x50\xbb\x26\x6b\xd9\x38\x0f\x8e\x3d\xde\xeb\x35\x3b\x6b\xca\xff\xe8\xfd\xaf\xfd\xf3\x1b\x34\x89\x83\x69\x18\xa3\x93\x9f\xec\xe9\x03\x99\xef\xe7\x90\x82\x7b\xd1\x72\xd9\xb6\x9e\xaf\xa6\xa2\x34\xa1\x5a\x8c\xe1\xfb\xde\xeb\xdf\xa0\x84\x30\xc4\x09\x24\x2b\x41\x89\x63\x97\x84\x02\xbf\xa7\xc2\xe6\x9a\xb5\xad\x70\x6e\xde\xde\x04\xfb\x77\x44\xf0\x4a\x8b\x7b\xba\xdf\xd2\xce\xb4\xac\x5a\x6d\x29\xbf\x4a\x65\x37\x1b\xd2\xa6\x4d\x09\x58\x9c\x54\x1b\xd2\x95\xbd\xb6\x42\xf2\x79\xa3\x11\x2b\x14\x59\xe3\x13\x19\x40\x18\x8b\x59\xb5\x05\xe7\xaa\xdb\x52\x48\x37\x6c\xb4\x61\x85\xc6\x6a\x2d\x5a\xb1\xd7\x76\x03\x89\xef\x23\xce\xa5\x40\x95\x6f\x3a\x17\xe7\x17\xeb\x77\x1d\x18\x65\xb6\x9d\x3b\x0a\xcb\x47\x91\xb5\x7e\xa1\x52\x33\xe3\xfe\x6c\x57\xc8\x7b\x76\xdc\x46\x24\xc1\x8f\x06\x53\x77\x3f\xf0\x95\xd0\x52\x32\x29\xc2\x65\xa9\x71\x33\xc4\x39\x65\x9a\x7a\xea\x37\x0a\x1b\x59\x32\x2f\x07\xbd\x4c\xf2\xd9\xe9\x61\x86\x27\x12\xb7\x64\xca\xba\x58\xa8\x94\xa7\x17\x73\x2a\x2b\x9b\xe8\x65\x22\xb3\x8a\x08\x39\x0e\x72\x14\x07\xa4\xfe\xa6\xbf\x0a\x38\x66\xa2\xac\x3c\x78\x7c\x52\xa8\xda\xbb\x21\xbd\x23\xae\x26\x92\xd5\x7d\x9a\xff\x12\x83\x41\x9a\x4c\xba\xfa\x20\x25\x15\x64\xdc\x0c\xdd\xf0\x94\x16\x38\xb3\x7c\x56\x95\x68\xab\x75\x4c\xab\xba\xee\x98\x06\x01\x89\x40\xe5\x10\xa2\xce\x1d\xb1\x78\x9a\x38\xd9\x79\x27\x2f\xbd\xe5\xbd\x2e\x85\xa4\xdb\x5e\xd8\x48\x8c\xf3\x7a\x53\x5e\x17\x56\x14\x34\x2a\x16\xda\x24\xcb\x42\xa9\x6b\x4d\xe5\x7c\x50\xae\x98\xc1\x62\xc5\x73\xc8\xa9\x8b\xe3\x50\x61\x27\x51\x99\xea\x4a\xf5\x4f\xce\x9e\x34\x38\x58\x5b\xa4\x5b\x2d\xdc\x03\x53\x6b\x7a\x06\x22\x32\x0e\x79\x51\xe2\xba\xa6\xec\x50\xce\xe2\xd1\x47\xc2\x79\x37\x9f\xae\x00\x49\x7e\x48\xf2\xcc\x03\x62\x1b\x27\x1d\xe8\xe8\x22\x66\x64\x1b\xab\x62\x8d\xa3\x5c\x67\x7c\x94\xdf\xaf\x61\xf7\xda\xcb\xed\x51\xeb\x6c\xc0\xe3\x10\x36\xf9\x67\xf2\xff\xa5\xb5\x5c\xf6\xf4\xff\x36\x56\xdb\xfc\x9f\xd7\x78\xf3\x9e\xb4\x15\x36\x38\x3c\x08\x49\xba\x5a\x2f\xe3\xe8\x6f\xc2\xe2\x5c\x9a\xee\x55\x7f\xdd\x71\x0c\x49\xb0\xb3\xba\x80\xb3\x35\x2b\xb2\xeb\x08\xea\x89\x59\x3a\x88\x71\x51\x41\xeb\x59\x76\x56\xed\xb1\x66\x84\x2c\x3b\xd4\xa5\xb9\x99\xf3\xba\x24\xb2\x36\x50\x97\x46\x66\xf9\x25\x9a\x76\x66\xb9\x32\x34\xbf\xa2\x21\xb2\x5f\x72\xb7\x54\x10\xd3\x2a\x93\xae\x20\x0a\xeb\x07\xe0\xb6\x9a\x8a\x17\xd9\x6e\x5b\xa3\x74\x95\xd6\xaf\xeb\x22\x4b\x77\xf8\x79\x80\x05\xe4\xe4\xb8\xd2\xa5\xfc\x0e\xb2\x48\x3c\x22\xbb\xc3\x8b\x52\xf4\x0b\x42\x97\xee\xf0\xb9\xc1\x05\x34\x68\x08\x5b\x2a\x38\x1d\x1c\xb4\x40\x8c\x1d\x0a\xb2\xa8\x70\x6f\x04\x58\x2a\x38\x3d\x0d\xae\x28\x61\x7b\xc1\x4a\x61\x47\xb6\x33\xbc\x74\x9a\x98\xdc\xdc\xec\x0d\xbb\xc2\x2b\x62\x3c\x93\x7e\x71\xd0\x27\x75\xdd\x28\x75\xc6\x1d\x3a\x42\x4e\x57\xdd\x53\x03\xb5\x6a\x13\x1f\x23\xe7\x22\x9e\x46\x42\x5e\x6a\xa9\x4f\xfd\x0a\x39\xaa\x94\x08\x69\x16\xab\x4b\x7b\x82\x9c\x5b\x59\x04\x7c\x04\xe9\x6b\x45\x1a\x3c\x86\xf4\x7b\xa4\xb3\x67\x4d\xdb\x00\xfa\x99\x42\x77\xf3\xe0\x47\xeb\x83\x9f\xf7\x99\xc0\xcf\xb3\xc1\xcf\x83\xe0\x61\x43\xec\x13\xbe\x3b\xf8\x79\x5f\x18\xf8\x79\xcf\x0e\x7e\x5e\x63\xe0\x57\xc1\xe9\xe0\xc0\xcf\x3b\x1c\xf0\xf3\x1a\x03\xbf\x0a\x4e\x4f\x03\x7e\xde\xde\xe0\x57\x99\x53\x65\x9b\x46\xed\x0c\xa6\xb7\x03\x45\x61\x6b\x30\x17\x23\xb2\x1f\x14\x1c\x59\x2a\x47\x5e\xd4\xbe\x9a\x8a\x35\x85\x76\x2d\xe5\x0a\x9d\x96\x2e\x1f\x0d\x4e\xdb\x85\x08\x4e\x76\x49\xd8\x36\x2b\x62\xea\xdb\x5b\x74\xc9\x46\x5d\xed\x2d\x50\x55\xa3\xb7\x88\x33\x63\xf6\x17\xa6\xab\xc6\x5b\xa4\xa5\x83\xca\xe2\xf6\xc7\x65\xfa\x54\xb8\x2c\x6f\x6d\xd5\x05\xe6\x0b\x32\xf9\x3c\xc8\x2c\x05\xe5\xd0\x0c\x4f\x31\x9b\xef\x0e\xcb\x5a\xcd\x2f\x08\x97\xc1\xe0\xe7\x06\x66\xa9\x42\x43\xc8\x5c\xc5\xea\xe0\xa0\x59\xc6\xd9\xa1\x60\xb3\x8e\xf9\x46\xc0\xb9\x8a\xd5\xd3\xa0\xb3\x96\x76\x18\x25\x4f\xf9\xa3\xd8\x23\xca\xa4\x5f\x3f\x82\x26\xa8\x4b\xa3\xd2\xbd\xc6\xe1\x25\xfd\x09\xb3\x79\x7c\x49\x78\x6d\x78\xe9\xf1\xcf\x83\x2e\x20\x27\x07\x97\x1e\x8b\x21\xe7\xe3\x75\xd2\x3e\xa5\xe7\x17\x04\x2f\x3d\xfe\xdc\xe8\x02\x1a\x34\x04\x2e\x15\x9c\x0e\x0e\x5b\x20\xc6\x0e\x05\x5a\x54\xb8\x37\x82\x2c\x15\x9c\x9e\x06\x58\x94\xb0\x67\xa8\x79\xbe\xf4\xf3\x56\x9f\xc8\x04\xb1\x56\x3d\xb2\xc7\x55\x29\xb4\xe7\x75\xeb\xd6\x05\x25\xe5\x31\x72\x6e\x1f\x47\xf9\x0a\x28\x6f\xce\xaf\xeb\x96\x4f\x25\xe9\x09\xa8\x7b\xfd\x18\x99\xaf\x91\x73\xe9\x3d\x86\xf0\x7b\xe4\x7c\xf2\xae\xfb\x8f\x21\xfd\x17\x72\xae\xcf\x6f\x1e\x43\xf9\x06\x39\x7d\xef\xe2\x5c\x5e\x13\xaf\x4b\xfa\x6f\xe4\x7c\xb8\xba\xb8\x38\xbb\xec\x6a\xff\x36\x80\xdc\x09\x7f\x22\xe0\x9e\x8d\x6a\x03\xf7\xa7\xd1\xe7\x01\x6e\x90\x93\x03\xf7\x27\x3c\x62\x38\x7f\xd5\x6f\x3b\x6c\x2b\x2d\xbf\x20\xd8\xfe\x34\x7a\x6e\xd8\x06\x0d\x1a\x82\xed\x0a\x4e\x07\x07\xdb\x10\x63\x87\x02\xdb\x2a\xdc\x1b\x81\xed\x0a\x4e\x4f\x03\xdb\x4a\xd8\x13\x55\x6b\xbb\x2b\x49\x97\xdd\x2d\xaf\x62\x6f\x1c\x00\xa9\xc2\x8c\x06\x6b\x6e\xc5\xd8\x83\x6e\x04\xb8\x76\xe3\x88\x2e\x65\xc4\x17\xaa\xa2\xd5\x70\x36\x37\x1b\xf1\x7b\x2a\xfc\x71\xc3\xa8\xc0\x6b\xde\x72\x4d\xb8\x05\x1d\x37\xeb\xef\xb7\x26\xdc\x5c\x6f\x4d\xa8\xfc\x01\x34\xe1\x2d\x38\xf1\x6c\x78\xf3\xca\x40\x82\xbc\xe5\x9b\x8e\xdd\xe5\xba\xa8\x19\x7f\x5b\x1a\xff\xc2\xb8\x52\xf5\x71\xc2\x6a\x31\xeb\x31\x1a\x33\x2a\xe6\xb5\x88\x2e\xa9\xbf\xe3\x3d\x7f\x43\x70\x43\xff\xae\x47\x70\x4d\x38\x04\x67\xb4\xe1\x8e\xb6\x39\x8d\xda\xc6\xf7\x69\xe9\xf5\x03\xbb\xb3\xf4\x6e\xc2\x5e\x77\x6c\x67\x23\x75\xcf\xdb\xd1\x81\x70\x47\xe6\xf2\xfd\x4f\xdd\x94\xaa\xba\x58\xc0\x12\x97\x9b\xa3\xbc\x82\xfc\x3a\x53\xd3\xbc\xf3\xaf\xd1\x5e\x15\xda\x2b\x75\xda\x41\x8b\x2c\x94\x4d\xac\xce\x46\xd6\x6d\x6c\x23\xe4\x02\xfb\x63\x49\xb6\x3e\x72\x67\x7a\x90\x09\xdf\xe9\x54\xc5\x2f\xb0\x69\xdd\xde\x5a\x11\x9c\xf9\x31\xef\x59\xe7\x65\xd9\xbb\xf2\x0a\x48\xa1\x37\xdd\x74\xaa\x47\xa8\x1d\xa7\xba\xdb\x18\x35\xa4\xa1\x3c\xe0\x89\xf1\xb6\x19\xdd\xc1\x89\x66\x97\xd9\x61\x47\xa0\x43\x44\xfe\x42\xab\x53\x18\x20\xc1\xa6\xa4\x02\x8d\x4a\x21\x83\x0a\x1c\x37\x8d\xcf\x4e\xc4\xb5\xa3\x34\x3d\xb9\xcb\xd9\x1e\xdb\x57\xe1\xcd\x7f\xbb\x02\x66\x9d\x85\x74\x14\x99\xb7\x5e\x75\xcc\xe6\x2f\xc8\x7e\x04\xda\x75\x2f\xc9\xca\xf6\x1d\x5f\x94\xd5\xb1\x2e\x09\xcc\x9b\xbb\xea\xc4\x51\x7c\xe5\x16\x33\x22\x0c\xbb\x1c\x29\xec\xf7\x64\xb0\x99\xd6\x71\x36\xad\xff\x0f\x00\x00\xff\xff\x1c\x83\x24\xff\xc7\x4a\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 19143, mode: os.FileMode(384), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

