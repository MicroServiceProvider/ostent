// Code generated by go-bindata.
// sources:
// index.html
// DO NOT EDIT!

// +build bin

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5c\x6d\x73\xdb\x36\xf2\x7f\xef\x4f\x81\x3f\xff\xed\x4d\xdb\xa9\xa4\x3a\x0f\x77\xbd\xd4\xf2\x8d\x63\x39\x89\xa6\xb1\xa3\xf1\x43\xe6\x7a\x6f\x3a\x90\x08\x4a\x88\x29\x92\x25\x21\x39\x3e\x8d\xbe\xfb\xed\xe2\x81\xcf\xa2\x44\x91\x76\xdc\x49\x5f\xd8\x22\xc1\xc5\x62\xb1\x58\xfc\x76\x41\x2c\x71\xf4\x7f\x83\x0f\xa7\xd7\xbf\x8d\xce\xc8\x4c\xcc\xdd\x83\xe3\x23\xf9\x43\x08\x5c\x30\x6a\xc3\x05\x5e\xce\x99\xa0\x64\x32\xa3\x61\xc4\x44\xdf\x5a\x08\xa7\xf3\xb3\x95\x7e\x34\x13\x22\xe8\xb0\x3f\x16\x7c\xd9\xb7\xfe\xdd\xb9\x39\xe9\x9c\xfa\xf3\x80\x0a\x3e\x76\x99\x45\x26\xbe\x27\x98\x07\xf5\x86\x67\x7d\x66\x4f\x59\xa6\xa6\x47\xe7\xac\x6f\x2d\x39\xbb\x0b\xfc\x50\xa4\x88\xef\xb8\x2d\x66\x7d\x9b\x2d\xf9\x84\x75\xe4\xcd\x8f\x84\x7b\x5c\x70\xea\x76\xa2\x09\x75\x59\xff\xd0\x30\x12\x5c\xb8\x4c\x5e\xc3\xdd\x6a\xd5\x1d\x50\x41\xbb\xef\xfc\x48\x20\xf3\xf5\x9a\xc0\x15\xb0\x3c\xea\x25\x74\xc7\x47\x2e\xf7\x6e\x49\xc8\xdc\xbe\xc5\xa1\x49\x8b\x88\xfb\x00\xe4\xe0\x73\x3a\x65\xbd\xc0\x9b\x5a\x64\x16\x32\xa7\x6f\xf5\x1c\xba\x44\x82\x2e\x96\x15\xaa\x46\xe2\xde\x65\xd1\x8c\x31\x61\x18\x08\xf6\x59\xf4\x26\x51\x14\xd7\x87\xeb\x1e\xf7\x6c\xf6\xb9\x8b\xa5\x9a\x43\x34\x09\x79\x20\xd2\x55\x3e\xd1\x25\x55\xa5\x56\x5e\xcf\x24\x0a\x27\xc0\xe8\x53\xd4\x0b\x51\xc3\x21\x83\xab\x67\xdd\xc3\xee\xe1\xcf\xa6\xa0\x3b\xe7\x5e\xf7\x13\xb4\x69\x43\xc7\x3b\x73\xca\x3d\x45\xbf\x5a\x71\x87\x74\xaf\x4f\xde\xbe\x3d\x1b\x8c\xb9\xb7\x5e\x03\x9d\x16\x46\xd5\x58\xad\x98\x1b\x81\x86\xa0\x85\xde\x9c\xbb\xb7\xfa\xa1\x7c\xe0\xd9\xeb\xb5\x65\x94\x7a\xd4\x53\xc2\x69\xf9\x7b\xda\x34\x8e\x8f\xc6\xbe\x7d\xaf\x0b\x3d\xba\x24\x13\x97\x46\x51\xdf\x82\xcb\x31\x0d\x89\xfa\xe9\xd8\xcc\xa1\x0b\x57\x98\xdb\x48\x80\x61\x4c\x3a\xc2\x0f\x2c\x12\xfa\x30\x8e\x48\xce\xa7\x50\x08\xe3\x10\x37\x68\xf3\x98\x1b\x9a\x04\xf4\x89\x85\x1d\xc7\x5d\x70\xdb\xd0\xe4\xa8\x34\x77\x94\x8c\x85\x60\x46\x6e\x67\x6e\x77\x0e\x49\x40\x6d\x9b\x7b\xd3\x8e\xcb\x1c\x18\x7c\x33\x04\xa6\xfe\x78\x21\x84\xef\xe5\x58\x08\x7f\x3a\x75\x19\xb2\x70\x69\x10\x31\xdb\x8c\xad\x22\xd6\x5a\x56\x44\x28\x9c\xa2\x32\xc5\x34\x9c\xe2\xd0\xfd\xbf\xe6\x15\x3f\x4e\x35\x2b\x2d\x20\xa0\x71\xb3\x51\xd8\xf1\x3d\xf7\x3e\x4b\x02\x44\xd7\x4a\x8e\x44\x3b\x30\x0a\x50\xad\x82\x13\x5a\x6a\x07\x9a\x2d\xb0\x7a\x32\x35\x7b\x4a\x89\x99\x41\xa0\x84\xdb\x7d\x6b\x06\x9a\xcd\x8e\xc3\x38\xa4\x9e\x0d\x65\x1c\x0c\x45\xce\xb4\xbe\x35\xa7\x9f\x15\x16\xbc\x22\x87\xcf\x26\xb3\x78\x96\xc1\x10\xe1\xdc\x06\x2e\x7a\xd6\x93\x22\x0c\xe4\x86\xa0\x48\x70\xd4\xa3\x19\xb9\x7a\x60\x5d\x39\x5b\x43\x41\xf3\x23\x9b\x98\xa9\x2a\x20\x15\x43\x7f\x7c\xb4\x70\x53\xbd\x34\xa4\xf0\x93\x37\x10\x97\x1b\x3a\x3a\x11\x7c\xc9\x8a\xea\xa5\xba\xf3\x88\xbd\xd1\xab\x5e\xef\xee\xee\xae\x0b\x7d\x09\xe1\xaf\x3b\xf1\xe7\x3d\x85\x7a\x80\x11\x2e\xa3\x11\x8b\x7a\x2e\x15\x2c\x12\xff\x9a\xcc\x83\xbe\xe9\xfb\xc7\xb3\xcb\xab\xe1\x87\x8b\xbc\x6e\x24\x7f\x03\x9a\xb4\x38\xae\x2e\xdf\x28\xac\x99\x42\x80\x69\x24\x75\x0d\xa0\x14\x4e\xb9\x87\x13\x90\x38\x3c\x8c\x84\x2c\x2d\xf6\x69\xe2\xdb\x2c\xc7\x0a\x8b\x00\x71\x0b\x0a\x90\x22\xc6\xc3\x3c\x18\x5e\x5d\x5f\x0e\x5f\xe3\x20\x62\x85\x96\x65\x6e\x2a\x28\x0f\xfe\xe6\x8d\xa3\xe0\x17\x35\x71\xd0\x88\xc0\xa6\x0b\x64\x29\xa3\x1c\x8e\xb0\x27\x85\xf9\xa3\xfb\xf2\x04\x7b\xb8\x28\xf4\x70\x51\xdd\xc3\x9b\x40\x70\x35\xe9\xfe\x44\xbd\x74\x69\xbe\x97\x2e\xad\xec\xe5\xfb\x93\x16\x7a\xd8\x5b\xb8\x55\xb8\x94\xba\x85\x1b\xe8\x84\xf6\xc7\xdb\x3d\x68\x86\x26\xf4\xef\xf2\x9e\x15\x3b\x38\x67\x73\x70\x6a\x2a\x8e\x8b\x71\x0e\x5d\xeb\x0b\xe3\x63\x7d\xc7\x81\x68\xa5\x73\x98\xc1\xb9\xd5\x4a\xb0\x79\x80\x90\x43\x2c\xf0\xff\xd0\x76\xf4\xea\x95\xba\xf8\x1d\xb4\xc1\x5c\xe0\x6b\x91\x2e\x6a\xa7\x1c\x65\x6d\xa7\xbc\xd9\x97\xcd\x9a\xb5\x9d\xd2\x56\x33\x3a\xdc\xae\x94\x49\xb0\x78\x10\xa5\x00\xdf\x4a\xa5\xf0\x87\x51\x0a\x6f\x45\x29\x41\x54\x2e\xdc\xe1\x4f\xcd\xa4\x0b\xa2\x36\xa4\x5b\x4e\x1f\x46\xba\xe5\x74\xbb\x74\xf1\xcd\x96\xc8\xdf\x54\x58\x42\xec\x8c\xf0\x41\xfa\xc6\xbf\xad\xd7\xbf\xe4\x43\x70\x1d\x79\x63\x30\x2e\xd7\x6d\xab\x55\xef\x87\x83\x1f\x7a\xeb\xf5\x6a\xa5\xe4\x4b\x09\x3c\xa6\xb0\xec\xb2\x71\xdd\x82\x61\xb0\x05\xe2\xea\xe0\x01\xd8\xbf\x83\x5f\x5c\x23\x79\xa7\x2e\x9f\xdc\xf6\x57\x62\xc6\xa3\xee\x0c\x22\x2f\x97\xc9\x92\x35\xc8\x20\x55\xb6\x5e\x23\xf9\x29\x5e\x12\x6b\x2c\x3c\x02\x7f\x26\xb6\x07\x96\x20\xcb\x41\x1c\x1b\x26\x55\xac\xcf\x2e\x1d\x33\x97\xa8\x9f\x98\xfe\x40\x6b\xb7\xfb\x1a\x45\x4b\x81\xe4\x31\x76\xf9\x1a\x14\xa3\xe2\xb1\x63\xbd\x12\xd9\xad\x77\x21\x9f\xce\x1e\xb6\x7b\xb1\x70\xa4\x71\x47\x77\xed\x9e\xb6\x36\xc0\x06\x30\xed\xc8\x42\x9a\x3b\x2e\x66\x04\xef\xc0\x60\xd1\xfa\x80\x3d\xfe\x53\x8b\xb9\xd5\x0a\xe2\xe6\x29\x23\xdf\xf0\x1f\xc9\x37\x13\x3f\x64\xe4\x55\x9f\x28\x77\x74\x3a\xba\xe9\xbe\xe7\x11\xea\x56\x84\x20\xbb\x7c\xdc\xbd\xe8\x9e\x08\x11\xfe\xca\xee\x89\x04\x36\xe0\x3b\xbe\xef\x5c\xa8\x3e\xc3\xe2\xda\x36\x33\x46\x3a\x53\xa9\x62\xe2\xf9\x77\x21\x0d\xe2\xce\x69\x3e\xd8\x3b\x61\x6f\xac\x15\xaf\x7e\x73\x8a\x5b\x44\x2c\x60\xe1\x04\xa2\x4d\x15\x15\xaa\x95\x54\x52\xda\x37\x0d\xdc\x44\x2c\x94\x52\x65\x9a\x55\xa5\x29\x2f\x7b\xfc\xb0\x52\x5c\xdd\x47\x45\x21\x64\x61\xdb\x32\x74\xb8\xb7\x64\x61\xbc\xb6\x2c\x91\x65\x08\x66\x5c\x14\x46\x95\x96\x4a\xd3\x13\x61\xca\xe8\xb2\x3f\xbb\x98\xa0\xc2\x50\xb4\x1f\xbc\x88\x7b\x26\x6f\xe4\xff\xce\xcc\x07\x99\x2d\xd5\xf5\xd4\x1b\x24\x68\xd7\xc0\xa1\x98\xa5\x81\x32\xbe\xc3\x07\x5b\x4c\x4d\x92\xe1\x78\x67\x56\xa0\x0b\x8f\x67\x96\x12\xc7\xdf\xe6\x42\xae\x7d\x5a\x81\x01\x7d\xf8\x46\x70\xa0\x9a\xb4\xd2\xd3\x5a\x95\xa5\xe6\x95\x8c\x48\xde\xc9\x54\x79\x2f\x83\x27\xca\x7b\x89\xc4\x9d\xc8\x61\xac\x83\x4c\xb6\x33\xbe\x87\xa5\xe5\xef\x35\xe1\xc9\xe6\xd1\x6d\x02\x4d\x83\x37\x92\x49\x16\x9e\x90\xa4\x3b\xe0\xe1\x05\xac\xcf\x13\x90\xd2\xed\x69\xa0\xb2\x79\x88\xcb\xf7\x04\xae\x62\x50\x52\xb5\xd9\xf2\x42\xaf\xee\xe3\x09\x99\xa3\x50\xfc\x77\x03\x2f\x53\xe9\x64\x49\xb9\xbb\x6b\x95\xcd\x83\x90\x4c\x69\x4b\x29\x04\xd1\x6c\xa4\x4a\xd6\x6b\xb5\xd8\x30\x4d\xc2\x13\xbb\x9e\x90\xd7\xbe\xa0\x69\x21\x1b\x4d\x7e\x33\xca\x06\x01\xa0\x91\x20\x19\xbe\x11\x0d\xe9\x3c\x6a\x84\x0b\xa5\x7a\x52\xaf\xf3\x98\xb7\x98\xa3\x7f\x07\x25\x05\xdd\x8f\x34\xe4\x48\x04\x97\x03\xe7\x96\x1c\x12\x6b\x20\x5f\x12\x5b\xc4\x92\x62\xed\xc5\xe5\x19\xb1\xce\xfd\x85\x27\xf0\x6d\x5f\x03\x36\xcf\x89\x25\x2d\x03\x98\xa4\x46\x65\x6f\x76\x2f\x88\x75\x23\x5f\x40\xb6\xc2\xed\x25\xb1\xa4\x45\xe4\xd9\x35\x82\x91\xcc\xe4\x6f\x03\x4b\xb8\x07\xab\xe2\xc6\x60\xa2\xb8\xec\x86\x26\x8a\xf6\x8b\xc2\xc9\xd0\x09\xd9\xce\x55\xea\xc0\xc9\x70\xb1\x11\x4f\xf0\x51\x4d\x40\x19\x4a\x4d\xb5\x87\x28\x7a\xac\xdb\x09\x2a\x4c\x3d\x35\x11\x52\x5e\x56\xc1\xc3\x06\xf7\x5c\xa0\xd6\x30\x50\x49\x4e\xf2\x1a\x92\x64\x72\xe6\xef\x51\x0f\xa7\xf8\x1e\xd5\xe4\x5c\x6e\x2d\x1c\xc8\x4e\xbc\xe6\x13\x99\xef\x17\x14\x70\x27\x99\xc5\xc3\xb2\x90\x80\x3b\xdd\xec\xfc\xe5\x99\x68\x60\xc3\xdc\xd5\xb5\x76\xb6\x76\xa0\x1f\x30\x57\xd0\xa1\x57\xbb\xca\x87\x85\xa8\x53\xa7\x5e\x0b\x59\xe6\x8d\x66\x1f\xcf\xf9\xf3\xb6\x22\xfa\x21\xcc\x9e\xd0\xa1\x1b\x27\x5c\x31\x1e\x36\x7b\x37\xaf\x87\xd7\x57\x04\xf0\x8b\x44\x6c\xe2\x7b\xe9\x7d\xbe\xa1\x57\x1d\x25\x1f\xe5\x5e\x99\x8e\x8f\x7a\xe9\x92\xe3\x20\xda\x3b\x58\xdf\x2e\x1c\x8c\xc9\x17\x97\x4e\x20\x16\x90\xd7\xbf\x5d\x9f\x5d\x91\xb9\x6f\x2f\x5c\x9f\xbc\x78\xdb\x40\x81\xaf\x73\x22\x7e\xfb\xe2\xed\x83\xcb\x58\x5b\x8f\x75\x85\x6c\x02\x8f\xbc\xdd\x30\x87\x3b\x2c\x0c\xfd\xb0\x21\x3c\x2a\x1e\x5b\xf1\x51\x91\xfd\x05\x90\xb5\x01\x52\x8f\xd1\xd3\x41\xc8\x0d\xe0\x98\xde\x94\xda\x34\x79\x5a\x00\x99\x4d\xe8\xf7\x48\xcd\x97\xe3\xda\x2e\x8d\xb7\x81\x5e\x1b\x10\xab\x8d\xe6\x9b\xe1\x52\x1a\x48\xda\x00\xa6\x80\x4e\x6e\x99\x68\x88\x4c\x9a\xc9\x56\x68\xd2\x74\x7f\x61\x53\x6d\x6c\x32\xc3\xf4\x17\x38\x3d\x09\x70\x52\xc1\xcd\x97\x85\xa8\xcd\x32\x3c\x09\xa0\xca\x00\x4b\x73\xa4\x9a\xb3\xf9\x1e\xfb\x61\x50\x2b\xc1\xa9\xf3\xb3\xf3\x2c\x42\xc1\xd3\xee\xaf\xdc\xb3\x13\x88\xc2\xf4\x07\x05\x4e\xb7\x50\x5e\x02\x4e\xa6\xca\xce\x40\x80\x15\xde\xb4\xff\xb6\x07\xd9\x96\xbe\x3b\xd6\x0f\xea\x09\xd8\xea\x9b\x63\x60\xf8\xe8\xdb\x46\x29\xe3\x47\x65\xd7\xa1\xaf\x78\x1d\xf3\x08\xef\x61\x8c\x59\x37\x9f\x20\x71\x46\xc9\xc6\x77\xf5\x2a\x2d\xe1\xf8\x28\x49\x4f\xa0\xaa\x0b\x48\x2f\xe7\x00\xee\x9e\xeb\x34\x54\x28\x39\xf5\x3d\x87\x4f\x81\xe5\x3a\xbd\x6b\x8e\x9b\xe5\x9d\xb1\xeb\x4f\x6e\xe3\x04\x06\x12\xef\x8e\x6b\x3e\x72\x5b\xfd\x22\xc3\x83\x58\xb3\x17\x64\x3c\xed\x70\xcf\xf1\x2d\xbc\xb1\xe2\x8d\x4c\xe0\x70\x3a\xba\xc9\x40\xd1\xb1\x49\x44\x8c\xb3\x29\xd2\x62\x63\x92\x47\x75\x5b\x13\x79\xa9\x53\xc1\x64\xea\x71\xa1\x28\x4e\xf8\xed\xcc\xb8\x6d\x33\x0f\xe4\x31\xc9\x3e\x8a\x34\x49\x9b\x72\xfc\x70\x9e\x34\x78\x32\xc1\xe4\xdc\x37\x50\x96\xd5\x0b\x52\x41\xf7\xb2\xb9\x64\xb0\x8a\xf5\x82\x85\x88\x5f\xf0\xc9\xa6\x3a\xd1\x62\x3c\xe7\x71\x12\xb9\xbe\x4b\xd5\x49\xe5\xb7\xa0\xb6\x85\xef\xbb\xb9\x94\xdb\x02\xcd\x34\xf4\x17\x01\x89\xaf\x3a\xd1\xdc\xa4\x5b\xcb\xfb\x7c\xbe\x29\x2d\x53\xe0\x3b\x6e\x33\xa9\xbe\x5c\x3e\x04\xd1\x39\xa9\x1b\x12\x25\x36\xd9\x8f\x66\x97\x1a\x67\xdd\xfa\x3b\xa9\x85\x7c\xae\x69\x99\x50\x49\x1e\xc3\xd9\x67\xb0\x0e\x1b\x27\x05\xdc\x15\x05\x29\xca\x6c\xf3\x08\xa9\xed\x6a\x19\x15\xdb\x52\x29\x4d\x52\x5f\xd2\x3a\xe2\x01\xdc\xe5\x53\x87\x53\x56\xda\xd2\xf0\x54\x21\x06\x88\x1f\xb2\x68\x66\x91\xef\x4e\x67\x94\x7b\x4a\x45\xc4\xba\x54\xc5\x08\x00\xdf\xe7\xf3\x93\x0a\x02\xc2\x2d\x5a\xeb\x41\xe1\x61\x9d\xe9\x16\x5b\x4b\x7e\x22\xc9\x1d\xb5\x83\x1d\xba\x12\x27\x18\x64\x53\xaa\x52\x42\xc8\x8b\xba\x20\x68\x3b\xb5\x31\xb0\x12\x01\x6d\x67\x1b\x00\x6e\x81\x3f\xdb\xa9\x46\xbf\x01\xee\x66\x2d\x22\x3a\x65\x6d\x81\x20\xb6\xd8\x00\x03\x6d\xe7\x6b\x86\x40\x54\x5e\x7b\x08\x88\xd6\xd3\x14\x00\x13\xf0\x1b\xbc\x69\x1b\xfb\xca\xe4\x33\xd0\x97\xc0\xde\xe0\xcd\x53\x46\x3d\x98\xf1\xf5\x41\xaf\xf0\x69\x06\x66\x8c\x46\xa4\x30\x6d\x52\x0c\x5c\x9e\x1b\xa0\x6b\xb5\xd9\x2e\x30\x2d\x21\x36\x11\x2b\xa3\xd0\xf2\x6e\x6d\xde\xb8\x97\xbc\xd4\xce\xab\xe2\x95\x49\x11\xaf\x92\xe1\x59\x8b\x32\x00\xaf\xd7\xf8\x06\xbc\x54\x84\x24\x43\xbd\x81\xeb\x50\x10\x55\xe1\x39\x4a\x2a\xa7\xd5\x6d\x15\xab\xa7\x31\x75\xa7\xcd\xcf\x32\xef\xb3\xa5\xe5\x67\x0d\x5b\x4e\xef\xc2\x15\x1b\x6e\xcd\x07\xf2\xfa\x3e\x70\x8b\x17\xe4\x5b\xbd\xe0\xd6\x65\x00\xdf\xe2\x07\xe3\x97\x51\x51\x5b\x7e\x90\x37\xf3\x83\xfc\xab\xf6\x83\xbc\x55\x3f\xc8\x5b\xf5\x83\xc3\xd6\xfd\x60\x99\x7c\x45\x3f\x38\x7c\xd2\x7e\x90\x7f\x51\x3f\x38\x6c\xd1\x0f\x6a\x5e\x23\xf5\x12\xb1\x86\x23\x1c\xb6\xe8\x08\x35\xaf\x33\xb9\xe5\x52\x53\x86\xe7\x2d\xca\xf0\xfc\xc1\x9d\x31\xdf\xd7\x19\x0f\x1b\x3b\xe3\xfc\xde\xc6\xce\xde\x78\xd8\xd8\x1b\xe7\xb6\x7c\x6b\xb5\xfc\xbc\x61\xcb\x8f\x14\x07\xe0\x77\x77\x2d\x07\x02\xc0\xb2\x71\x24\x80\xef\xe5\x2b\x43\x81\x73\x36\xf7\xc3\xfb\xb6\xc2\x00\xd9\x5c\x83\x38\x00\xea\x7f\xcd\x81\x80\x54\x5f\x7b\x91\x80\x32\xa0\xfd\x63\x01\xcd\x26\xba\xa3\x41\x9b\x62\x21\xbf\xd2\x10\x85\x11\x7c\xf4\x74\xbd\x3e\xce\xf1\x47\x7c\xe7\xa7\x27\xd3\x9e\xef\xfc\xe2\xdd\xa1\x76\xdf\xf9\x05\x51\x25\xcc\x49\xb9\xb2\xfd\x19\x61\x7f\x46\x91\x27\x71\x5c\xf2\x20\xf2\x7f\xd6\x60\x10\xca\x54\xfd\x6d\xb5\xe5\x51\x24\xdc\x9b\x1a\x3d\x1c\xe3\x3f\x09\xa8\x25\x36\xf7\x0e\x68\x35\x87\x2c\x60\x28\x56\x72\x87\x97\x94\xe1\xaa\x64\x3a\xde\x28\x0c\xa0\x68\x06\x57\xd3\x90\x3a\x0a\x7d\x58\x59\x45\xb8\xb8\x1a\xa7\x19\xc6\xb0\x8a\x97\x7a\x10\xe0\x52\xed\xd6\x6d\x6a\x48\x6f\xec\x15\xac\xc0\xec\xfc\xe9\x4f\x84\xd3\xa8\x89\xbb\x7b\x66\x7a\xa8\x6e\xe6\x31\x35\xd9\xa8\xd4\xdf\xe8\x3e\xdb\x00\x80\x6a\x27\xbc\x34\x4f\x1a\x5f\xa7\x32\x97\xde\x97\x6c\x80\xcb\x0f\x47\x0b\xb3\x4e\xf6\xc8\x2e\xf9\x6e\xbf\x38\x7f\xf4\x3e\x30\x49\xb6\x84\x2b\xe6\xbd\x92\x51\xdd\x6c\x9c\xf7\xe5\x53\x25\xf7\xfd\x2e\x2a\xfd\x3d\x8c\xdc\x80\x18\x59\xb7\xd4\x52\x2a\x41\xea\x73\x3f\x64\x49\xb5\xea\x0e\x15\xbe\x94\xb6\xd0\x30\x7d\x17\xd5\x82\xa6\x99\x19\x8c\x74\xd5\x64\xff\xf3\x91\x06\xf8\xd2\xbf\x8b\xea\x8d\xaf\xd7\x7d\xed\xdb\xf7\x7f\x86\x41\xbe\x88\x61\xa1\xd6\x20\x27\xd5\x9e\x40\x87\x12\xd1\xfe\xc3\x42\x7f\x57\xd1\x8a\xf6\xb7\xcd\xde\x10\xb0\xd4\x3e\xb9\xbc\xa9\xfc\x78\x3f\xca\x7b\x9d\xba\x1e\x66\x39\x6d\x3b\x90\x5e\x4e\x1b\xc7\xd1\xcb\x69\x75\x18\xfd\x91\x4e\x43\x8a\xc7\xfa\xb4\x13\x47\x63\x73\x0d\xc2\xe8\xe5\xf4\x6b\x8e\xa2\x51\x79\xed\x45\xab\x68\x3c\xbb\x86\xd0\x4f\x25\x50\x85\x29\xf4\x88\x71\xaa\x32\xd6\x3d\xc3\xd4\xe5\xb4\xed\x28\x35\xaa\x99\xbe\x16\x40\xb8\x96\x82\x9a\x2b\x29\x4f\x36\x7f\x0d\x49\xba\xa3\xe1\x20\xc9\x5f\x0b\x4c\x6e\x6d\xc0\xed\xaa\x13\x1d\x74\x44\x96\x66\xb2\x5b\xc2\x58\x5c\xe3\x26\x57\xe3\x40\xab\x54\x3f\xd5\x87\x34\xd4\x60\x38\x0a\xb9\x1f\x72\x71\x5f\xb3\xda\x05\x9f\xec\x98\x5b\x17\x57\xb9\xe2\xff\xad\x5b\xe5\x92\x45\x60\x51\x5e\x45\xb6\x30\xa6\xe1\x99\x0f\x0b\x63\x35\x5c\xf3\x4d\xdf\x8e\x2a\xd9\xb3\x69\xce\x8d\xb2\xee\x8c\x83\xdb\xf2\xa5\x76\x76\xae\xa0\x7b\x8e\x43\xfa\x0d\xc1\x7c\x26\x61\xcf\x98\x54\x5b\x5f\x74\x8f\x22\xf9\x45\x37\x98\x5f\x0b\x1f\x3d\x23\xb3\x9f\x89\x75\xd3\x1a\xb3\x7f\x02\xb3\xab\xb3\xcb\xbd\x3f\x11\x47\x1e\xcf\xa0\x77\x97\x2d\xc9\xf3\x9c\x58\x17\xc3\x96\x78\xbd\x20\xd6\xc7\xe1\xe5\x75\x4b\xdc\x5e\x02\xc6\x9f\x5d\xb5\xc4\xec\xef\xc4\xba\x1e\x9e\x9f\x19\x6e\x7a\x66\xed\xcd\xee\x1f\xc4\x3a\xfd\x70\x7e\x7e\x72\x31\x30\xef\xcf\x1b\xe4\x6b\x6a\x18\x6f\x9e\xae\x69\x3c\xa5\x9c\xaf\x78\xde\x0b\x4e\xd9\xef\xe4\x81\xac\xa4\x4b\x7e\xfa\x5e\x96\x7b\x99\xc2\xc3\xef\x93\xc9\x2d\xab\x64\x5f\x71\xe4\x96\xea\xf2\x91\xdc\xba\xc8\x10\x77\xd5\x6e\x06\x01\xde\x96\x0c\xa0\xb4\xf7\x4f\x5d\x83\xff\x27\x5a\x3c\xfd\x70\x46\xa3\xce\x1d\x0d\x3d\x7c\xbd\xb1\x7b\x35\x83\x16\x99\xe3\x43\x53\xf4\xd4\xb6\xcd\x11\xb0\xc7\x3a\x42\x48\x9d\x0b\x45\x74\x7c\x97\x8f\x03\xf1\x70\x3b\x08\x4e\xe2\xa6\x14\x95\x3c\x25\xb4\xe3\xf8\x8b\x10\x0f\x9a\x4b\xce\xdb\xb2\x08\x0c\xe4\x84\xcd\x7c\x17\xac\xa4\xaf\x55\xdd\x3d\xe7\x9e\x6e\x50\x06\x9a\x5a\x6f\x08\xc7\xba\x18\xd4\x93\x7e\xf2\x91\xba\x8b\xcc\xa3\x03\x69\x26\x9f\xa2\xcf\xa7\xae\x1f\x31\xad\x12\x6b\x8f\xa5\x45\x2a\xa9\x1b\x6a\xe7\x0f\x08\x92\x67\x4b\x95\x1d\x07\xd4\x35\x22\xc0\x85\x39\x33\xa6\x46\xab\xcb\xa9\xdc\xf8\xb0\x54\x24\x71\xcb\xee\x31\x36\x57\x45\xc6\xb7\x65\x96\xfe\x2f\x63\xbf\xa6\x0f\x12\x55\xcb\x0a\x69\x4a\x1b\x1d\xd8\x0e\x52\xc4\x21\x91\x8e\x79\xe6\x74\x32\x4b\x5c\x97\x6e\xe5\x1c\x0a\xb1\x5e\x2e\x77\x1f\x4a\xbb\x37\x37\xe9\xe0\x67\xa9\xe8\x75\x04\xb4\x58\xf0\xd2\x04\x7e\x53\xaf\xdc\x2f\xcb\xc7\x9b\x8f\x7c\x90\x8f\x47\xa1\xbf\x84\x68\x20\xac\x20\x81\x68\x4d\x54\xb1\xd0\x5d\x73\xb8\x8b\xab\x4b\x31\xdb\x16\x05\xec\xa0\xcb\x08\xc2\xca\xc9\x6c\x97\x00\x93\x3b\x84\xfd\x41\x8a\x23\x69\x13\x11\x2e\xd8\x06\x9c\xcd\x59\x0e\xc9\x70\xac\xa2\x8f\xf1\x72\xdf\xc8\xc6\x84\xe2\x2d\x7e\xf4\x34\xc8\x25\xfc\x27\x8f\x70\xe8\x37\x3e\x34\x03\xbf\x91\x40\x0e\xfb\xc6\xa7\x03\x1e\xb2\x89\x90\xdb\x5a\x2d\x7d\x3d\x10\x8f\x7a\x03\x7f\x14\xbb\xce\xcc\x39\x7a\xef\xa1\x64\xeb\x59\x7a\x1a\x82\x90\xb6\xde\x11\x7e\x39\xa7\x8d\x23\x3b\x4b\xe3\x9e\x3e\x07\x03\x78\x9f\xb8\x7c\xea\x9d\xaa\x72\x35\xbe\xa5\x32\x66\x0e\xf5\xc3\x72\x5d\x25\x86\xad\x44\xc6\x03\x52\x38\xcb\x0f\x0f\x02\xa4\x21\x13\xe9\x4a\x52\x8b\xe9\x13\xd5\xa8\x56\xec\x2c\xee\xe1\xff\x02\x00\x00\xff\xff\xfd\xeb\x45\xb1\x4b\x5f\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 24395, mode: os.FileMode(384), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

