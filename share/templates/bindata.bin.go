// Code generated by go-bindata.
// sources:
// index.html
// DO NOT EDIT!

// +build bin

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5d\x7b\x73\xdb\xb8\x11\xff\x3f\x9f\x02\xc7\xb9\xeb\x1f\x37\x47\xf2\xfc\xc8\x35\xcd\x49\xee\x38\xb6\x9b\x6a\x6a\x3b\x9a\xd8\x4e\x7b\xbd\xb9\xe9\x40\x24\x64\x21\xa6\x48\x16\x00\xfd\xa8\x46\xdf\xbd\x0b\x80\x4f\x91\xb4\x28\x59\x94\x14\xdb\x99\x71\x4c\x82\xc0\x3e\x7e\xbb\x00\x76\x17\x94\x3c\x99\xb8\x64\x48\x7d\x82\x0c\xfd\xfb\x3f\x51\x28\xe8\x98\x18\xd3\x69\x87\x87\xd8\x3f\x98\x4c\xac\x63\x2c\xb0\xa5\x9b\xa1\xd5\x8e\x9b\x89\xef\x4e\xa7\xa5\xd1\xa3\x80\x0b\x1f\xeb\xf1\x18\x8d\x18\x19\x76\x0d\xdb\x40\x82\x0a\x8f\x74\x8d\xe4\x29\x4a\xa8\x26\x0d\xd3\xa9\x71\x50\x6e\xeb\xd8\xb8\x96\x91\x87\x0d\xd9\xfa\x7d\x88\xde\x77\x91\x1e\x18\x62\x86\xc7\x7c\x3a\x7d\xd3\x71\xe9\x2d\x72\x3c\xcc\x79\xd7\xb8\x66\xd4\x35\x07\x5e\xe0\xdc\x80\x34\xa6\x08\x42\xe3\xe0\x0d\x42\xf9\x1e\x4e\xe0\x99\x1e\x43\x1e\x66\xd7\xc4\xdc\x41\x82\xdc\x0b\x93\xd1\xeb\x91\x30\x0e\x54\xb7\xc9\xe4\x48\x76\xec\x07\x9c\x0a\x7a\x4b\xd0\xf7\xa1\x75\x8a\x7d\x64\x8c\xa8\x4b\x4c\x3e\x0a\xee\xe4\x85\x81\x0c\x79\x99\xdd\x4f\xa7\x92\x0f\x70\x1a\xed\x24\x8c\x46\xfb\x9a\x78\x70\x4b\xd8\xd0\x0b\xee\x0c\xdd\x03\xfa\x60\x60\xf2\x77\xc0\xea\x12\x88\xc7\xf4\xa7\xd3\x04\xb4\xd3\x00\xbb\x08\xdf\x5e\x23\x97\xf2\xd0\xc3\x0f\x28\x00\x53\x04\x3e\xcf\x86\x4b\x8b\x00\x05\xc5\x66\x3a\xed\x1a\x89\x10\xa6\xfc\x0f\xc1\xa5\x20\xd0\xc5\x21\x66\xc8\x08\x02\xce\x58\x98\x1e\x19\x82\x7e\x96\x65\xa1\xd8\xa0\x09\x17\x89\xb9\x16\xdc\x1e\xed\x1c\x74\x6c\x40\x40\x01\x96\x5e\xd4\x22\xb7\xb3\x1a\xbc\x2a\x6d\x97\xe9\x1a\x79\xc9\xd3\x31\xf1\x23\x94\xaa\x2a\x2f\xd2\x5e\xd0\xcf\xa3\xd9\x4d\x91\x2a\xf5\xc3\x48\x98\xd7\x2c\x88\x42\x23\xdf\xa7\xb6\x97\xe9\xe1\x01\xf1\x10\x1f\x63\xcf\xd3\x16\xf4\x83\x3b\x86\x61\xb4\x4b\xc0\x1e\x29\x34\xf3\x09\x0d\x22\x21\x02\x1f\x70\xc2\xc9\x53\xdd\x12\xd3\xe6\xc4\x09\x7c\x17\xb3\x07\x69\x6a\x3c\xf0\x88\x2b\x67\x85\xc2\xcf\xd5\xb3\x61\x09\x5e\x93\xc9\x1d\x15\x23\x74\x4a\x38\x3f\x4e\xdd\xcb\x45\x45\xce\x79\xad\x60\x02\xa1\xc2\x3f\x90\x36\xf0\x8f\x3c\xea\xdc\x74\x27\x62\x44\xb9\x35\xc2\xbe\xeb\x11\xd5\x32\xd5\x73\x1c\xe6\xae\xf4\x5f\x70\xda\xcc\x0d\xa1\xed\x48\x5f\xce\xd0\x43\x48\xce\xf5\x0f\xd8\xbd\x26\x6a\x80\x75\x09\xdc\x0b\xb3\xbd\xa8\xe0\xd2\x3a\x9f\x05\x8c\x6c\x95\xce\x5a\x51\x94\x69\xdf\x58\xe7\x99\x86\x8e\x9d\xf7\xef\xf5\x38\x3b\x0b\xee\xf8\x5a\x7c\xdd\xb7\x0e\x07\x3c\xf0\x22\x41\x56\xe1\xf4\xe7\xd9\x9a\x3a\xe3\x00\x3c\x72\x1c\xe8\xf0\x8c\x9d\x7f\x2b\x75\x6f\x65\x12\x74\xec\xc8\x4b\xf6\x2d\xd9\x29\xbf\x13\x9d\x07\xfe\xbf\x09\x0b\x52\x20\x0c\xbd\x17\xcd\xd9\x72\x10\xec\xd2\x82\x3a\x18\xb0\x12\x8c\x86\x24\xdb\x82\xaa\xbb\x8b\x11\xc1\xe0\xc3\x7a\x33\x8e\x1f\x93\x7b\xb8\x71\x11\xec\x93\x1a\x76\x13\xf6\xc8\x3e\x61\x34\x70\xe3\x5d\x77\x4e\xef\x42\x30\x82\xbe\x60\x2f\x22\x8f\x0f\x04\xfe\xf1\xf3\x3c\x54\x93\x09\x1d\xc6\x31\x12\x6c\xfe\x2e\xec\xf2\x29\xd2\x93\x09\xc3\xfe\x35\x6c\xd2\x1e\xce\x02\xa9\xb8\x93\x75\x4a\xb9\x74\x4d\x0d\x65\x1a\x5d\xe4\x77\xe5\xb9\xda\xbe\xa9\xf2\xda\x4c\x2b\x74\x47\x5d\x31\x32\xf7\x18\x19\xab\xe9\xef\x61\x4b\xe3\x33\x9d\x8e\x63\x43\x2e\x01\x94\x26\xa4\xe0\x4a\x03\xd6\x1a\x02\x10\xbf\xcc\x60\x56\xf4\xc4\xfc\x5d\x22\x50\xf6\x7f\x16\x18\x15\xc6\x96\x82\xd5\x31\xa8\xb7\xb9\x68\xf5\x8c\x8c\xdb\x0d\x57\x25\x83\x2c\x5e\x85\xbb\x40\x2f\xeb\xed\x45\xab\x9a\x47\x2b\xb1\xea\x42\x68\xbd\x06\xab\xe5\x0d\x1c\x00\x5c\x69\xb4\x2a\xe9\x6d\x3e\x74\x5b\x73\xb8\xba\x1d\x4a\xbf\xc6\xab\x8d\xdc\xbd\x9d\x80\x55\x2f\x44\xdb\x12\xb5\xad\x39\x62\xdd\x2e\xe5\x37\x19\xb2\x6a\x24\x36\x1b\xb3\x26\xdb\xed\xe2\xa1\xd8\x65\x20\xb0\xb7\xcc\xc0\x2b\x4e\x96\x0a\x92\xff\xc6\xc8\x9c\x18\xb9\x96\xdf\x0f\x4f\x8c\xad\xc7\x0a\xa5\x72\x68\x0d\xed\x59\xd8\xa7\x3b\xad\x22\xb4\x86\xd5\x07\x88\x59\xff\xa0\xbe\x3b\x2f\xca\xad\x0d\x93\x25\x01\x65\xa2\x27\x51\x90\xb6\x7a\x12\x01\x69\xb4\x19\x02\x39\x54\x1e\x25\x82\x06\xd7\x66\xc4\x49\xe8\x08\x03\xb9\x00\x70\x7c\xd3\xcd\x44\xeb\x3b\x80\x74\x5e\x56\xd5\x30\xc7\xd8\xeb\xc9\x0b\xdc\xe1\x06\xd3\x82\xe3\x61\xbb\x59\x01\xd0\xcf\x92\x82\x63\xca\x6f\x50\xc4\x31\xcc\x87\x56\x13\x83\x8c\x4f\x2b\xc9\xc1\x22\x98\xbd\xe6\x06\xe5\x60\xe9\x78\xb8\xd2\xd4\x00\xc8\x6d\x3e\x48\x5e\x73\x66\xb0\x15\x3a\xbf\x26\x06\x4d\x7c\xbd\x9d\xbc\x40\xad\x41\xdb\x12\x19\xaf\x39\x2d\xd8\x2a\xdd\x37\x99\x15\x28\x20\x5a\x4d\x0a\x26\x13\xfb\x47\x14\x06\x37\x04\x85\x11\xa3\xc3\x07\x87\xf3\xf7\x85\x21\x2e\x0b\x42\x39\x19\x0b\x1b\x29\x66\x04\x02\x31\x3b\x76\x75\xf4\xa3\x1d\xbf\x47\x30\x2f\x20\x4c\xe6\x66\x6c\xf3\x2f\x1e\xf5\x6f\x52\x9b\xdf\xa0\x1d\x64\x1c\x93\x5b\xea\x90\xa2\x6d\x9b\xd9\xf5\x14\x68\x55\xd9\x56\xb6\x57\xd9\xf7\x20\x7e\x16\x3b\xf4\x4c\x58\x22\x9d\x42\x6a\x19\x8f\xcc\x82\xc4\xd4\xf6\x8b\x04\xc2\x73\xf4\xde\x45\xc6\x59\x10\xf9\x02\x16\x95\x67\xa9\x78\x21\x50\xad\xc1\xe0\x17\x64\xa8\x14\xe5\xe5\x22\xf0\x16\x19\x32\xc5\x7a\xb9\x00\xec\x21\xe3\xf0\x16\xd3\x17\xec\x02\xfb\xca\x05\x7e\xf8\xf6\x01\x98\x5b\x45\x81\x28\xea\xe6\x4a\x26\x70\xe5\x42\x8a\x3b\xcc\xf2\xe4\xb4\xdb\xd3\x4b\x29\xb3\x09\x2d\x44\x6f\xee\xd0\x82\xfd\xe6\x1c\x8f\xe7\x1e\x20\xd6\x11\x41\x31\x15\xca\x96\xa7\x92\x2f\x73\x5c\x33\xfc\x30\xa3\x89\x4e\x81\x73\xa5\x14\xe0\x57\x55\xcc\x89\x53\xf0\x9e\x1f\xb8\x04\x02\x25\xb5\x96\x26\xfd\x75\x63\x36\x60\x3d\x52\x56\x14\x8c\x8a\x42\x46\x72\xb9\x4b\x65\x8c\x0a\xdd\xd7\x23\xa2\x5a\x6f\x1e\x95\x71\xc8\x08\xc9\x64\x1c\x16\x4a\x58\x0b\x56\xb2\xea\xe4\x7c\xa4\xb8\xa5\x51\xd4\xb5\xad\x26\x78\x57\x14\xbd\x4a\x90\xff\x50\x80\xbc\x38\x62\x0b\xaa\x65\x4e\x18\x6d\xb0\x5c\x76\xd4\xbf\x6a\xb7\x5e\x26\x19\x64\x05\x33\xb8\x6b\xb7\x52\x06\x0c\x5a\x29\x91\x2d\x84\xd3\x6b\x8d\xac\x5c\x37\x00\x00\x57\x5a\x24\x93\xf4\x36\x5f\x31\x5a\x73\x95\x6c\x3b\x94\x7e\x2d\x93\x35\x72\xf7\x76\xea\x64\x7a\x21\xda\x96\x62\xd1\x9a\x0b\x65\xdb\xa5\xfc\x26\x2b\x65\x1a\x89\xcd\x9e\x9f\x1f\x81\x65\x96\x3c\x94\x66\x73\x0e\x2a\xab\x07\x5e\x3c\xf0\xa5\xc6\xfd\x13\x53\xb1\xd4\xc0\x1e\x38\xc9\x53\xcf\xcf\x21\xbe\x2b\xe7\x7c\xd0\x98\x45\x7b\x70\xb3\xaa\x74\x2f\x2b\xbc\x49\x16\xd6\xf9\xd3\x8f\x9f\x13\x27\x9d\x09\xd4\x25\x75\x69\xc7\xec\x18\xba\xd0\x92\x80\x56\x17\xda\xad\x80\x3b\x38\x43\x91\x79\xd2\xb0\x06\xde\xd2\xa1\x8a\xcc\xd3\x96\x15\x71\x37\xa9\x0f\xb3\x96\x93\xc7\xa4\x90\xde\x59\x94\x22\x6d\xd9\x8a\xf7\x00\xe8\x26\xdf\x03\xe8\xb5\xfc\x1e\x40\x2f\xff\x1e\x40\xcf\x17\xd0\x1f\x52\x13\xde\x6e\x76\x93\xf1\x69\x25\xc9\x59\x04\xb3\xd7\x1c\xa7\x1c\xf4\xf5\x56\xfb\x1e\x40\x6f\x1b\xce\xc4\xd7\x9c\xe1\x6c\x85\xce\xaf\x09\x4e\x13\x5f\x6f\x27\xbf\xe9\x6d\xd3\x59\xf8\x9a\xd3\x9b\xad\xd2\x7d\x93\xd9\x4d\xaf\xf5\xf7\x00\xe6\x26\x37\xe9\x56\xbb\x54\xde\xd0\xaf\x2a\x49\x1f\xb3\x20\xe4\x3f\x9d\x30\x16\x30\x8e\x7a\xbe\xfd\x29\x12\x28\x24\x2c\x9e\x63\x46\x2d\xf1\xdd\x7c\x84\x58\x98\xeb\xe8\x34\x00\xe7\xe8\x7d\x42\x21\xaf\x62\xd8\xc7\xce\x0d\x11\xab\xe2\x95\x52\xab\x63\xf7\x81\xae\x8c\x17\xf0\xe8\xd0\x83\x41\xc7\xa6\x07\x33\xbc\x16\x4f\xc0\xe8\x10\xbb\x2e\xe3\xe5\x24\x8c\xe6\x0e\xde\xe2\x4e\xad\x1c\xbb\xd1\xa1\xb5\x92\xd3\xb2\x84\x58\xaf\xdf\x90\x54\x3d\xc0\x7f\xf2\x07\x3c\xfc\xb5\x60\x3d\x75\xc6\x86\x5c\xe5\xa3\x44\xfb\xe8\x38\x70\x23\x2f\x40\xfb\x1f\x8d\x6c\x22\x65\xc7\x4c\xe5\x71\x60\xfc\xdc\x98\x58\x5a\xe5\xf5\x3d\xbf\x94\x89\x26\x73\xfe\x9c\x7a\x28\xed\x27\x5d\x27\x3f\xf1\xed\x62\x36\xa5\xe6\xf5\x02\xe3\xab\x64\x94\x5d\xaa\x85\x84\x27\xa9\x94\x39\x86\x3f\x55\xa8\x4b\x92\x49\x5c\x26\xa5\xe7\x77\x4e\x61\xbb\x7e\x7c\xa5\x2c\x9a\x40\x5e\x98\xf8\x97\x36\xda\x9b\x4a\x20\x0e\x3d\x4f\x2f\x9e\x52\x19\xe2\x09\x1c\xc3\x3e\xd3\x20\x19\xa6\x2d\x89\xa4\xb3\x2d\x0a\x44\x65\xe9\xf4\x14\x2e\xbf\x82\x49\xad\x73\xd3\x3b\x41\x30\xc7\x74\xbe\xad\x0b\x02\x3d\x6a\xf0\x85\x49\x14\x65\x9d\x59\x8b\x4a\xc2\x56\xda\xbc\x68\xf1\x74\xc1\xae\x23\x34\xc7\xe2\x27\x99\xad\x1f\x25\x50\x61\xf1\x15\xce\xf2\x79\x13\x38\x4c\xf7\x8a\xb2\x47\xc6\x2b\xff\x1c\x9f\x4e\x28\x54\x3a\x75\x4c\xa2\xd6\xab\x6b\xf6\xad\x3a\xc4\xe6\x49\xd4\xcf\xc9\xf2\x38\x89\x2a\xd4\xd7\x00\xf7\x87\xdf\x2e\x4f\x2e\x2a\xc1\xfe\xf0\x20\xc8\x3c\xa8\xf5\xe8\x4a\xa0\xd5\xf0\x66\x30\x7f\xe8\x5d\x5e\x3c\x82\xb1\xdc\xce\x6b\xe5\x50\x63\x1f\x41\x57\x0e\x6e\x0e\xed\x7a\xea\x51\x21\xdf\x60\x3d\xaa\xcf\xdb\xad\x47\x01\xfd\x6c\xed\xeb\xb3\x40\xa6\x0d\x6d\x97\xa3\x52\x36\xad\x54\xa3\x16\x41\xec\xb5\x1a\x55\xce\xd0\xfb\x7c\xa5\xd5\x28\x20\xb7\xf9\xca\xcc\x9a\xab\x51\x5b\xa1\xf3\x6b\x35\xaa\x89\xaf\xb7\x53\x8d\x52\x6b\xd0\xb6\x54\x64\xd6\x5c\x8d\xda\x2a\xdd\x37\x59\x8d\x52\x40\x3c\xbb\x4f\xa5\xcc\x7b\x3f\xbb\xcf\xd5\x07\x54\xfa\xbd\xe3\x6f\xff\xf5\xec\x65\xf5\xdf\x45\xc6\xd5\x73\xd5\xbf\x56\xe9\x3d\x50\xfa\xe2\xe4\xf3\xf3\xd4\xba\x89\xd5\xf7\xc1\xeb\x5f\xb0\xfa\x6f\x91\x71\xde\x7b\xb9\xea\xff\x82\x8c\x2f\xbd\xcf\x97\x2f\x17\x80\x3f\x23\xe3\xf3\xc9\xc5\x73\xd6\xdf\x21\xf2\x70\xa7\x16\x80\x77\xc8\xb8\xec\x9d\x9d\x3c\x4f\x04\x6a\xb5\xfe\x0b\x32\x8e\x3e\x9d\x9d\x1d\x9e\x7f\x53\xfb\x5d\xcd\x99\x4f\xc8\x02\xa7\xe2\xc4\x27\xe4\xb9\xd2\x8f\xec\xb2\xaa\xf3\x9e\xec\x7c\x26\xe4\x16\x84\x4c\x4b\x7f\x6f\x0c\x0c\xbf\x6a\x3e\x3c\x1b\xc3\x09\x7b\x0a\xcf\x3e\xa3\x01\xa3\xe2\xe1\x29\x34\xce\xa9\xb3\xe0\x19\x57\x71\xfc\x05\xfd\xdf\x93\xc6\x7f\x26\x1c\x02\x74\x5f\x2c\x46\x23\x59\x0b\x62\x22\x97\x74\xfe\x41\x5d\xa6\x71\xe1\x54\x6f\x55\x75\xcb\xce\x77\xc7\x9f\x8e\x2e\x7f\xeb\x9f\xa0\x91\x18\x43\x7e\xd2\xd1\xbf\x64\x5d\x10\x92\x85\x38\xfb\x18\x13\x01\x29\xf2\x08\x33\x4e\x44\xd7\x88\xc4\xd0\x7c\x17\xe7\x1a\x1d\x55\x03\x94\xf3\x6b\xe6\x7b\xe7\x11\x5c\x81\xb2\x1d\x5b\x77\xc8\xd1\x19\x09\x11\x9a\xe4\xbf\x11\xbd\xed\x1a\xff\x32\xaf\x0e\xcd\xa3\x60\x1c\x62\x41\x21\xc1\x36\x40\x61\x5f\x0e\xeb\x1a\xbd\x93\x2e\x81\xd4\xcb\xc8\x8f\x94\x94\xbb\xc6\x2d\x25\x77\x61\xc0\x44\xae\xb3\xfa\x06\xd4\xae\xab\x3e\xdd\x6e\xaa\x9b\x9f\x10\xf5\xa9\xa0\xd8\x33\x39\xe4\x47\xa4\xbb\x63\xfd\x0c\x93\xeb\x3b\xd3\xfc\x1d\x66\x6d\xef\xe4\x8f\x98\xac\x5a\x95\x18\xf1\x54\x45\x92\x09\x27\x12\x88\x02\x55\x23\xf9\xd6\xfd\x21\xbe\x95\xf7\x16\xfc\x27\x87\xff\x0e\x90\xd1\xe1\x1f\xa6\x59\x1a\xae\x47\x71\x70\x2a\x30\xde\xde\xee\xfd\xde\x6e\x4a\x03\xb0\xf9\xa4\xb0\xf8\x42\x18\xa7\x81\x3f\x9d\x26\x64\x79\x72\x61\xee\xed\x5a\xa1\x7f\x6d\x20\xf1\x10\x82\x86\xe7\xf8\xdc\x28\x71\xc0\x61\xe8\x11\x53\x04\x91\x33\x32\x0b\xdc\x76\x76\x7f\xbe\x87\x9f\x85\xf8\x41\x7f\xc5\x70\x01\x2e\xfb\xfb\xf7\xf0\xb3\x18\x97\xfd\xfd\x45\xb9\xbc\xdd\xbd\x87\x9f\xc5\xb8\xbc\xdd\x5d\x94\xcb\x3b\x40\xec\xdd\x82\x88\xbd\xab\x41\x8c\x8b\x07\x8f\xf0\x11\x91\xd9\xb1\x36\x9f\x9c\xe9\x36\x24\xd5\x8f\xd1\x87\xc7\x36\xf5\x5d\x72\x6f\xc9\x8e\x7a\x72\x26\x13\xae\x33\x08\xdc\x87\x72\xde\x2f\x82\xd0\x1c\x60\x56\x99\xe4\xc7\xcf\xe2\xa2\x79\x56\x7e\x28\x96\xa2\x0b\xe5\xb5\x99\x8a\x9c\x9c\xf0\xbb\x48\x29\x03\x9d\x31\xbb\xa6\xbe\x39\x08\x84\x08\xc6\xef\xd1\xcf\x46\x76\x42\x90\x6c\x51\xea\x0d\x61\x7d\xd4\xd1\x2d\xfd\xe1\x8a\xa4\x7b\x14\x42\x37\xc2\xe5\x56\x25\xc8\x38\xf4\xe0\xa6\xfc\x57\x2e\x90\x95\xae\x6a\xa8\xa3\x56\x4b\xb5\x9c\x50\x59\xd3\x18\xa8\x47\xaa\x0d\xf0\xd9\x2d\x56\x5a\x66\x4a\x8a\x70\x5b\x58\x42\xd5\xda\x19\x85\x85\xd5\xb5\x4a\xea\xf8\x8f\x75\xe4\x86\xa1\x58\xee\x99\x83\x89\x4a\x35\x92\xd1\x56\x6e\x69\x2e\x14\x3e\xd3\xaa\xcf\x4c\x71\xa8\xca\x7c\xf1\x16\xd3\xd8\x7e\x10\x2d\x15\x2c\xa6\x4c\xa5\x9d\x4e\xae\xb2\xfc\xbd\x6d\xdf\xdd\xdd\x59\x80\x34\x83\x1f\xcb\x09\xc6\xb6\x5e\x96\x6d\x70\x5d\x82\x39\xe1\xb6\x54\x86\x8b\xbf\x3a\xe3\xb0\x5b\x76\x53\x63\xb6\x2e\x9a\x56\x44\x47\x81\xa7\x0e\x88\x92\x55\x1e\x37\x53\x3b\x7f\x29\xf5\xaf\xb2\x87\x87\xcb\xfe\x83\x2a\x90\x97\xfd\x34\xec\xf3\x69\xca\x2f\x8f\x6e\xe2\x94\xaa\x5f\x43\x9a\xee\xb0\x99\x9c\xb2\x5f\x53\x9a\xf2\xe3\xb9\x4d\xe4\x54\xfd\x1a\xd2\xa4\x0d\xe5\xa4\x0b\xc8\x19\xf2\x66\x34\x65\xbf\x59\x9a\xdc\x61\x34\x14\xf9\xb5\xf2\x2b\xbe\xc5\xba\xd5\x38\xb8\xc5\x0c\xc9\x50\x02\x75\x51\x1c\x54\x4c\xa7\xbf\xc2\xcc\x52\x8f\x9b\x50\x98\x8d\x53\x10\x67\x4e\xf5\x1a\xfc\x95\xdb\x3a\x88\xbf\x3c\xfc\xf8\xf1\xe4\x78\x40\xa1\x71\x4c\x7d\x7b\x10\xc9\x94\xc3\x82\x4b\xeb\x2b\x87\x30\xc9\xe3\x10\xcf\x00\x95\xe4\x81\x6a\x94\xb1\x93\x3a\x45\x4e\x05\xeb\xd8\x7a\xdd\x86\x85\x4a\x86\x50\xff\x0f\x00\x00\xff\xff\xbc\x0e\xc9\x0c\x15\x68\x00\x00"

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 26645, mode: os.FileMode(420), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

