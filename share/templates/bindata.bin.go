// Code generated by go-bindata.
// sources:
// index.html
// DO NOT EDIT!

// +build bin

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xdc\x5c\x6b\x73\xdb\x36\xd6\xfe\xee\x5f\x81\x72\xd2\x77\xda\x4e\x49\xc5\xb7\x36\x6f\x2a\x79\xc7\xb1\xdc\x56\xd3\xd8\xd6\x38\x72\x77\xbb\x9d\x4e\x0b\x91\x90\x85\x98\x22\xb9\x04\x28\xdb\xd5\xe8\xbf\xef\xc1\x85\x57\x91\x12\x49\x2b\x8e\xbc\x1f\x52\x8b\x00\xce\x15\xe7\x1c\x3c\x00\xc8\x76\xbf\xe8\x5f\x9d\x8d\x7e\x1b\x9e\xa3\x29\x9f\xb9\x7b\x27\x8b\xc5\xab\x39\x7a\xdb\x43\xd6\x15\xe3\xc4\xe3\xbf\x92\x90\x51\xdf\x5b\x2e\xbb\xb2\x1b\xa1\x93\xee\x94\x60\x07\x7e\x88\x9f\x33\xc2\x31\xb2\xa7\x38\x64\x84\xf7\x8c\x88\x4f\xcc\x37\x86\xee\xe2\x94\xbb\x44\xfe\x86\xa7\xc5\xc2\xea\x63\x8e\xad\xa9\xcf\xb8\x87\x67\x64\xb9\x44\xbe\x64\xdf\xed\xa4\xe3\x34\xbb\x29\xe7\x81\x49\xfe\x13\xd1\x79\xcf\xf8\x97\x79\x73\x6a\x9e\xf9\xb3\x00\x73\x3a\x76\x89\x81\x6c\xdf\x13\x64\x3d\x63\x70\xde\x23\xce\x2d\x31\xb2\x94\x82\x73\xcf\x98\x53\x72\x1f\xf8\x21\xcf\x0c\xbe\xa7\x0e\x9f\xf6\x1c\x32\xa7\x36\x31\xe5\xc3\xb7\x88\x7a\x94\x53\xec\x9a\xcc\xc6\x2e\xe9\xed\x5b\xaf\x35\xab\xc5\xe2\xe7\xd1\xc5\x7b\x64\x74\xbf\x30\x96\x4b\xd3\xfc\x9d\x4e\xd0\xe0\xfc\x8f\x93\xae\x4b\xbd\x3b\x14\x12\xb7\x67\xb0\x29\x70\xb7\x23\x8e\x28\x08\x30\xd0\x34\x24\x93\x9e\xd1\x99\xe0\xb9\x78\xb6\xe0\x3f\x65\x9c\x7e\x27\x9e\x43\x27\x7f\x98\x66\x96\x93\x62\xc0\xe8\xdf\x84\xf5\x8c\xc3\x83\x87\xc3\x83\x84\x9d\x98\x86\xe5\x32\xe6\xca\xe2\x1f\xe6\xe1\x81\x15\x78\xb7\x06\xe2\x8f\x01\xd8\x4a\x67\xf8\x96\x74\x44\x83\xf6\x43\xca\x1b\x07\x81\x4b\x4c\xee\x47\xf6\xd4\xcc\xc9\xd9\x3f\x78\xfd\x00\xff\x36\x4a\x82\x31\x56\x43\xce\x47\x47\x0f\xf0\x6f\x33\xe7\xa3\xa3\xa6\x9c\x8f\x0f\x1e\xe0\xdf\x66\xce\xc7\x07\x4d\x39\xbf\x01\x6f\xbc\xa9\xe1\x8d\x37\x15\xde\x60\xfc\xd1\x25\x6c\x4a\x08\x8f\x27\x85\x93\x07\xde\xb1\x19\x2b\xf2\x84\xa6\x0e\xf5\x1c\xf2\x60\x89\x4e\xcd\xa8\xa3\xb3\xe9\xa4\x3b\xf6\x9d\x47\xdd\xe8\xd0\x39\xb2\x5d\xcc\x40\x3f\xee\x07\xe6\x18\x87\x46\x9c\x49\xd9\xbe\xd0\xbf\x8f\xdb\xcb\xa9\x4c\x97\x4c\x78\x3a\x44\x0c\x8a\xdc\x78\xcc\x8c\x78\x51\xb6\x4f\x99\x15\xf7\xba\x38\xbc\x25\xe6\x3e\x8a\x02\x07\x73\x02\xb6\xc0\x1f\x6c\x3a\x64\x42\x3d\x30\x51\xfd\xfd\x33\x4e\xe7\x3c\x1b\x19\xfa\x9c\xcc\x02\x17\x28\x91\x1e\xcb\xde\xbe\x2d\x12\x21\x0b\xaa\x4a\xc7\xa5\x2b\x3a\x14\xb9\x75\x71\xac\xd5\x38\xe2\xdc\xf7\x10\x23\x30\x25\x0e\x0e\x1f\xd1\xd4\x77\x5d\xf0\x82\xf6\xb4\x28\x1d\xec\x6d\xa7\x73\x7f\x7f\x6f\x81\x94\x10\xfe\x59\xb6\x3f\xeb\xa8\x5a\xd3\x81\xf9\x22\x98\x11\xd6\x11\x8a\x31\xfe\x0f\x7b\x16\xf4\xd4\xdc\x14\x0d\x00\xa1\x71\x7d\xc2\x2b\xda\xd4\x52\x39\xef\x67\x88\x36\x70\xc7\x8a\x9f\x4a\x69\x55\xb3\xed\x3b\xa4\xa4\x43\x2a\x86\x44\x39\xa5\x60\x1f\x1d\x0b\x0f\x56\x0c\x5d\x55\xb4\xa5\xc0\x28\xf8\x3f\x6f\xcc\x82\x1f\xba\x2c\xc0\x5e\x6c\xd5\xda\xb8\x88\x02\x4e\x57\xa3\x22\x61\xb8\x2e\x3a\x34\xa9\x8a\x0d\x21\xb0\x5c\xa7\x4f\x6f\xb5\x8b\x9b\x5a\xed\xfa\xd8\xc1\xf3\xdb\x56\x66\xc7\xb4\x5b\xb7\xbb\x13\xb9\x35\x02\x38\x3f\x0a\x9e\xa1\x96\xec\x95\x3e\x66\x1e\x4e\xba\x41\xb3\xaa\x64\xfb\x6e\x34\xf3\x18\x52\xb5\xe5\x78\x7d\x6d\x01\x17\x10\x77\x46\x66\xb9\xf2\xb5\xce\x85\x09\x81\xf2\x61\xde\x82\x4a\x2d\xbe\x47\xb0\x30\xd7\xd0\xc4\x99\x34\x53\x04\xc6\x97\xe9\x91\xf7\x64\xf0\x5c\x7e\xb4\x83\xa8\x99\xfa\x82\xe0\x93\xf8\x91\x36\xf4\x23\x7d\x36\x3f\xee\x1f\xd4\x34\x21\x60\xcd\x4c\x80\xf1\xf5\x4d\x60\x76\x48\x03\x9e\x45\x12\x1f\xf1\x1c\xab\xd6\x04\x04\xcc\x71\x88\x04\x9e\x46\x3d\xa4\x91\xf5\x72\xf9\x03\x94\x0d\x39\xaa\x0e\xa3\x22\x66\x47\x2c\xb4\x53\xa0\xf2\x91\xc1\x2f\xc0\xbd\xd6\xe8\xf4\xa7\x9f\xce\xfb\x63\x0a\xf0\x7f\x46\xbd\xce\x38\xf2\x1c\x97\x58\xf0\xd3\xfa\xc8\x16\x0b\xe2\x32\x00\xf2\x40\x19\x77\xc8\x46\xcf\x49\x97\xd3\x93\x82\x4e\x1d\x8d\x71\x04\xec\xd1\x9b\x8d\xce\x37\x7b\xdf\x74\x96\xcb\xc5\x42\x79\x2c\xe3\x42\x2c\x30\xd6\x9f\x63\x0c\x28\x5f\xc2\x18\xf0\x20\x56\xeb\x3c\xd8\xfc\x33\xfc\x85\x4d\xc4\x62\x21\xa7\x72\xb9\x14\x6d\x67\xea\x27\xf2\xbd\x33\x97\xda\x77\xbd\x05\x9f\x52\x66\x4d\xb1\xd0\x4d\xb6\x2c\x11\xda\x53\x9b\x91\x77\x82\xab\xa4\xb7\x46\xe0\x1a\x31\x39\x58\x68\x23\xb5\xaf\xa9\x54\x48\x6f\xa7\xdb\xd5\x4a\xa9\x82\x52\xfd\xea\x6a\x55\x44\x56\x52\xa9\x54\x0b\xc3\x76\x69\xb0\x9f\xa2\x67\x03\x26\x63\xb1\x18\x89\x8d\xd7\x10\x5a\xe8\x03\x71\x90\x11\x13\x23\x08\xd6\xc2\x5e\x6d\xaf\x74\x07\xd7\x50\xb9\x78\x85\x03\x42\xbd\xbc\x25\x3c\x75\x57\xb2\xf2\x35\xe0\x9a\x14\x2b\x31\xe8\x55\x20\x37\xae\x92\x67\x80\x43\x3c\x03\xe3\xbb\x2a\xcb\x24\x20\x5b\x2c\xe4\x64\x0c\x7d\x06\x5b\xbf\x39\x41\xaf\x02\xeb\x6c\x78\xe3\x21\xc3\xf3\xcd\x71\xe4\xba\x02\xc2\x1b\x1c\x8f\x19\x70\x53\xe9\x2f\x1e\x12\xc4\x9f\x80\x6b\x68\x34\xe5\xb6\x15\xb1\x19\x76\x5d\x33\x6d\x48\x03\x5f\xf8\x5f\x84\xc3\x08\xa4\xc4\x82\xa4\x27\xe3\x01\xd3\xe3\x04\x20\x42\xf9\xa1\x9e\x39\xf6\x01\xdb\xce\xcc\xd7\xb9\xe2\x02\x64\x90\x2b\xc7\xd9\xb2\x81\xd3\xe4\xd2\xeb\x78\xbc\x7e\xab\xe2\x56\x69\xa5\x36\xce\xd4\xdb\x62\x43\xab\xb3\xde\x35\x53\xea\x00\x1a\x53\x20\x36\xc0\x8e\x43\xbd\x5b\x53\xec\x2e\x5e\x1f\x7f\x67\x24\xf6\xe4\xe0\x15\x3c\xe0\x31\x49\xe1\x2f\x75\x20\xd2\x91\x36\x52\x64\xb2\xb9\x1f\x16\x96\xf5\xee\x38\x8f\x47\xfa\xc4\xc5\x8f\x1a\x7e\x75\xc6\xb9\x91\x59\x34\x26\xd3\x30\xdd\x0c\x14\x36\x33\x22\x1e\x84\x11\x4e\x09\xa2\x12\xbe\x13\x4a\x66\xfd\x9a\x98\x50\xb0\x26\xb3\x60\xa8\xed\x87\x79\x1b\xfa\x51\xb0\x79\x0d\x28\x16\x30\xf4\x9e\x30\xd6\x4f\xe3\x01\x92\xae\x6a\x3f\x23\xa2\x79\x3d\x47\x55\x7d\xd0\x85\x1f\x92\xba\x2c\x57\x16\xa0\x2a\x8b\x9f\x3c\x7f\xd7\xfe\x3d\xdb\xd6\xf4\x79\xd6\xe9\x98\xc1\x42\xcd\xc9\x4e\xcd\xe3\x65\x26\xaf\xb7\x34\x8f\x75\x59\xae\x9b\xc7\x18\xc8\x9f\x74\x21\xd5\x61\xda\x74\x5e\x5f\xfa\xde\xbf\x49\xe8\x67\xd2\xda\x9f\x93\x10\x4d\xa0\xe8\xa1\x62\xf9\xd1\x39\x9f\x49\x6e\x9e\x9c\xf8\xe9\xe7\x30\x37\x05\x7c\x5a\xdc\x4d\xe4\x5a\xc4\x80\xa4\x74\xc2\x0a\x67\x2a\x93\xf3\x34\x37\x8c\x84\x6d\xe8\x3e\x3c\xb2\x36\x64\xff\xc4\x94\xb7\xa1\x1b\x40\x2a\xac\xd0\x75\x32\xfe\x90\xc6\xa7\xde\x02\xa6\xc9\xb1\x8e\x7c\x56\xb8\x4a\xae\x50\xb0\x6a\x89\xf0\x08\xb1\x07\x59\xf0\x0a\x9e\xd2\xc5\x0b\x1e\xac\xf7\xb0\xc1\x17\xfd\x1f\xd9\x03\xfa\x4b\x81\x06\xd1\xf4\x95\x18\xf0\xb5\x35\xc3\xc1\x57\x93\xc8\xb3\x39\xf5\xbd\xaf\x04\xf1\xd7\x68\x81\x42\xc2\xa3\xd0\xfb\x0b\x22\x84\x87\x30\xf3\xbf\x90\x47\x64\x40\x97\x09\x08\x78\xfc\x68\x5e\x1a\x52\x8a\x75\x99\x59\x86\xa4\x86\xce\xaa\xd9\x48\xfe\xf4\xfc\xfb\x10\x07\xab\x79\xa9\xb9\x80\xa9\x4e\x91\x53\x06\x74\x64\xb8\x8d\x6f\xcd\x88\x91\xc0\x96\xee\x94\x0b\xab\x7a\xec\x69\x66\x62\xf6\x87\x36\xcf\x29\x96\x8a\x4a\x7a\xbf\xdc\x9e\x44\x88\x9b\x6a\x81\x71\xe7\x16\xe5\x89\x80\xab\x16\x98\xf4\xb6\x91\x68\x52\x0f\x72\x99\x91\x0a\xc9\x22\x64\xab\x25\x27\xbd\xab\x92\x73\x61\xad\xe3\x70\xf9\xf5\xf2\x2f\x11\x94\x1a\x9e\xc9\x3f\x30\x30\x13\xe3\x82\x4e\x54\x9e\x18\x98\xc4\xf0\x4b\xfe\x68\x0a\xec\x60\x13\xdd\x12\xd7\xf5\x27\xcf\x03\xeb\x40\x4e\x0b\x54\xd7\xa7\xec\x0e\x45\x0c\xdf\x92\x2d\x80\x3b\x69\x6a\x43\x6c\x27\x69\x5e\x38\xb4\xeb\x4f\x76\x13\xd9\x81\x5e\x5b\x06\x76\x1b\x38\xbe\x40\x5c\x07\xf1\xb7\xdb\xb0\x4e\x26\xc8\x56\x51\xdd\x06\x8e\x4f\x03\x75\x2a\x9f\x9f\x86\xe9\x72\x28\x60\x75\xe9\x17\x13\x17\x8a\x3a\x9c\x45\x47\x15\x9e\xe0\xd3\xb9\xf0\x85\x81\x7e\x95\xf7\x64\xb1\x03\xee\xd0\x3e\x32\xfa\xf2\x16\x16\x34\x6a\x4c\x7c\x80\x8c\x0b\x3f\x82\xfa\xe6\xb4\xa1\x3e\x44\xc6\xe9\x1c\x53\x17\x50\x50\xd8\x94\xf6\x08\x19\x00\x42\xbe\x6c\x43\x7a\x2c\x49\x9d\x36\xa4\xdf\x21\x63\xe4\x73\xac\x35\x6e\x0b\x33\x1d\x58\x6b\x6e\xc4\x52\x93\x01\x9b\xce\x24\x5d\x50\x93\xfe\x46\x88\xd3\x99\x54\x01\x4e\x67\xa2\xf1\xa6\x43\x43\x75\xcd\x07\x83\xad\x3e\x0d\x2f\xe3\xb3\xa4\x44\x4b\x84\xca\xe0\x8d\x0a\x3d\x14\x9f\x59\xc9\x05\x58\x80\x19\xc1\x85\xcc\x57\xb8\xa8\xc8\xcc\x76\x16\x91\x4c\x73\x31\x25\xca\xa6\x62\xe2\xce\x32\xa8\xd6\x04\x48\xe7\x6a\xe6\x2c\x12\x03\x63\x35\x8c\x81\xe7\x3b\x84\xa1\x49\x48\xca\xee\x56\x85\x1a\x03\xd1\x57\x7a\x57\x74\x82\xd4\x08\x19\xed\xad\x50\x7a\x4e\xe9\x22\xa6\x04\xce\x10\xd0\x25\x88\xb2\x86\x3d\x91\x48\xa2\x0a\x7b\x22\x96\x00\xd1\x4a\x93\x6e\x58\x15\x58\xdd\xbe\xef\x23\x91\xb5\xd5\xba\x96\x61\x8f\x9c\xa2\xce\xb3\x44\x08\x97\x05\xa2\x42\x4d\x39\x64\xad\x9e\xb2\xbe\x94\x28\xba\x03\xd8\x9f\xb6\xc6\xfe\x83\x67\xc2\xfe\x83\x56\xd8\x7f\x00\x0b\x58\x38\xc1\x36\x61\x5b\xc0\xfe\x83\x16\xd8\x7f\xf0\x3f\x80\xfd\x07\x3b\x8a\xfd\x07\x5b\xc7\xfe\x1b\x38\xbe\x40\xec\x3f\xd8\x75\xec\x3f\xd8\x3a\xf6\xdf\xc0\xf1\x69\xd8\x7f\xb0\x05\xec\x9f\x5f\xa5\x0a\xe7\xb9\x49\xc5\x6a\x75\x62\x3a\xac\x45\x85\x72\x98\xcc\x77\xcd\x99\x63\x1e\x26\x8b\xdd\x3b\xca\x19\x1a\x78\x9d\xab\x88\xa3\x00\xec\x54\x3e\x2c\x4a\xba\x42\xdd\x95\xf7\xb0\xc6\xdd\x4e\xe1\x5d\x97\xa0\xde\x81\xf1\x7a\x85\x86\xd8\xbe\x23\x35\x74\x4a\xc6\x5d\xa1\xad\xc8\xed\x87\x7e\xc0\xbe\x3d\x0f\x43\x3f\xdc\x2c\xfc\xbd\xcf\xaa\x24\xb7\xdc\x4b\xd0\x09\x2c\x15\x21\xcb\xec\x24\x68\x66\x27\xa1\x7b\x1b\xed\x23\x68\xe5\x3e\x82\xc6\xfb\x08\xbd\x89\xa0\x13\x6b\x75\x07\xd1\x04\xd8\x97\x31\x50\x35\x29\xe9\xa9\x05\xd8\x56\x6b\x1a\xd0\x0f\x86\x9f\x06\xee\x15\xe3\x59\x8d\xd1\xd1\x20\xd1\x1b\x7a\xf7\xdb\xe8\xfc\x03\x04\x03\x9a\xf9\x4e\xe4\xfa\xe8\xe8\xa7\x92\xd7\x0c\x95\x96\xef\x1e\x39\x61\x03\xaf\xe2\x15\xb3\x93\x4e\x25\x77\x11\x67\x35\xd9\xc3\xd0\x2a\xfe\xa5\x40\x34\x27\xf3\xdd\x60\x24\x4d\xa9\x8a\xe9\x44\x14\x40\x09\x8e\x45\x59\xa8\xb0\xa6\x60\x8b\xe4\xbb\x2e\x59\x56\x19\x57\xd9\x71\xf2\x99\xa6\x39\x48\x4a\x4e\x8d\x99\xd0\x75\xa7\xd9\x54\xc7\x12\xea\x4d\xb6\x16\xf1\xa4\xe9\x4e\xcb\x68\xcd\x89\x59\x6f\x57\xc1\xaa\x61\xc6\x9e\x46\xec\x9f\x75\xea\xf3\x73\xe0\xc8\x02\x4f\x54\x81\xaf\x9c\x84\xb2\xf8\x90\x94\xf5\xa2\x43\xae\x22\xd5\xb1\xa1\x98\xa7\x40\xe3\x92\xba\x28\x21\x13\xce\x34\x56\x30\x45\x6e\x0e\x9e\xcc\xb4\xcc\xb0\x7a\x41\x19\x73\xab\x32\xed\xdb\x12\xc7\x91\x78\x35\xad\xc1\x5f\xad\xbc\xcd\xd2\x4a\xf3\xaf\x67\x80\x12\xd0\x2e\xa9\xb4\x73\x4f\x5d\x57\x41\xc3\x38\xaa\xf5\x74\x17\x1a\x84\x3e\x49\x4b\x6c\x57\xb1\x45\x4e\x8c\x0e\xd4\x95\xc9\xce\x47\x61\x3f\x8e\xbf\xea\x54\xcb\x27\x5b\xdb\x28\xcc\x59\xb0\xd5\x50\xac\xe2\x9c\x37\x71\x7d\x39\x29\xb1\xb1\x76\x3c\x26\xb8\xae\x36\xff\x66\xf1\x78\x9e\x46\x62\x33\x01\x0d\xe3\x71\x17\x8f\x93\xc4\x8b\xe1\x2d\xcf\x93\x2e\xc8\xec\x79\x0e\x94\x84\xa0\x16\x27\x4a\x40\xe6\x87\x8f\x5b\x38\x4d\x52\x86\x36\x3c\x4e\x52\x44\x2f\xfc\x3c\x09\x8c\xd8\xcd\x03\x25\xa1\xd8\x96\x4f\x94\x36\xb1\x7c\x81\x47\x4a\x22\x06\x77\xfb\x4c\x49\x65\xc9\x56\x0f\x95\x36\xb1\x7c\xda\xa9\x92\x4e\xeb\x1d\x7b\x4d\xf0\xc7\x90\xb4\x3a\x85\x12\xb7\xb7\x2d\xe9\x9c\x36\x74\x12\xf9\x6d\xeb\xd4\x65\x26\xeb\x7b\xe6\xd0\x05\x1a\xd2\x45\x4c\xf5\x36\x3a\x74\x01\x92\xaa\x53\x17\xe8\xd2\xc7\x2e\x77\xd4\x13\xb7\xd6\xd0\x60\xfd\x42\xc5\x4a\x5b\xd8\xf8\xac\xa4\x61\x3a\xb2\xe5\x31\x8a\x60\xf0\xa3\xbe\xd5\x6c\xfe\xde\x5d\xf1\x9e\x52\x70\x2b\xbf\xa8\x2c\x74\xd6\xbb\x4c\x2c\x57\xb7\xc1\x3d\x5f\x39\x83\x1d\xbe\x80\x0b\x58\x5b\xc0\x34\x64\xcf\x83\x97\x40\x4e\x0b\xb8\x34\x0c\x7d\x1b\x2a\xf3\x56\xee\xdf\xa4\xa5\x0d\x01\x93\xa4\x79\xe1\x78\x69\xc8\x76\x13\x2e\x81\x5e\x5b\x46\x4b\x1b\x38\xbe\x40\xb0\x04\xf1\xb7\xdb\x58\x49\x26\xc8\x56\xa1\xd2\x06\x8e\x4f\x43\x4a\x2a\x9f\x3f\xcf\xbb\x77\xaf\xec\xb4\xd5\x26\xe2\x9e\xae\xd1\x7b\x71\x43\x26\x5f\xc9\x1b\x0e\xfa\x4d\xdf\x4f\x13\x94\x07\xc8\xb8\x69\x47\x79\x08\x94\x1f\xce\xaf\x9b\xbe\xc6\x27\x48\x8f\x40\xdd\xeb\x36\x32\x8f\x91\x71\x39\x68\x43\xf8\x1d\x32\x7e\x1d\x5c\x8f\xda\x90\x7e\x8f\x8c\xeb\xf3\x0f\x6d\x28\xdf\x20\x63\x34\xb8\x38\x17\x9f\x6c\x34\x25\xfd\x7f\x64\x9c\x5d\x5d\x5c\x9c\x5e\xf6\x95\x7f\xdb\xc2\xce\x00\xd6\xc9\xec\x55\x5f\xc0\x32\x40\x40\xf4\x35\xc2\x9c\x01\xab\x82\x9c\x01\xd3\x88\x33\xa0\x02\x70\x06\xcc\x82\x78\xac\xf1\x8d\x4a\xa1\xb6\x89\x37\x9a\x62\xda\x36\x80\x4c\xd3\xdf\x54\xd0\xaf\x16\x52\x26\x3f\x4c\x79\x92\xb0\x61\x48\xfd\x90\xf2\xc7\x27\x31\xb9\xa4\x76\xcb\xab\x4b\xcd\xe0\x03\xfd\xfb\x69\x0c\xae\x09\x83\x0a\xe7\xf1\xcd\x4c\x74\x8d\x2a\x73\xe6\x88\x56\xdc\xc0\x96\x0d\xae\xb8\xae\xfd\xbc\xa8\x59\xff\xaf\x4b\x4a\x3e\x70\x56\x3d\x8d\xbe\x6f\x8e\xd3\x5b\xa4\xca\x34\xbb\xf9\x11\xd9\x4b\x44\xf2\x58\xa7\x2e\xbd\xf5\xf4\xe7\xe5\xc6\x9e\x02\xc8\xf1\x97\xe8\xef\x81\xb6\xec\x6b\x74\xd1\x5e\xf3\x8b\x74\xa5\xbf\x20\xd0\x9f\xc8\xeb\x63\xf3\xec\xb7\xed\x18\x12\x5a\xb3\x4b\x9d\x99\x00\x0a\x8d\xa9\xd5\x4e\x3f\x36\xfa\xbf\x01\x00\x00\xff\xff\x7f\x06\x8d\xf4\x70\x4c\x00\x00"

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 19568, mode: os.FileMode(420), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

