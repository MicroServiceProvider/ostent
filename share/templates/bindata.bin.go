// Code generated by go-bindata.
// sources:
// index.html
// DO NOT EDIT!

// +build bin

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xe4\x5c\xfb\x73\xdb\x36\xf2\xff\xdd\x7f\x05\xca\x6f\xfa\x9d\xb6\x13\x92\xf5\x23\xbd\x5c\x2a\xf9\xc6\xb6\xd4\x84\x53\x3f\x34\xb6\x9c\xbb\x5e\xa7\xd3\x40\x24\x24\x21\xa6\x48\x1e\x00\xc9\x56\x35\xfa\xdf\x6f\x01\x82\x4f\x3d\x29\xd3\xb1\x27\xf7\x83\x62\x11\xc4\x7e\x76\xb1\x0f\xec\xe2\xa1\x34\xbe\x69\x5d\x9d\x75\x7f\xeb\xb4\xd1\x50\x8c\xfc\xbd\xe3\xd9\xec\xd5\x04\xbd\x6b\x22\xeb\x8a\x0b\x12\x88\x8f\x84\x71\x1a\x06\xf3\x79\x43\xbd\x46\xe8\xb8\x31\x24\xd8\x83\x2f\xf2\xeb\x88\x08\x8c\xdc\x21\x66\x9c\x88\xa6\x31\x16\x7d\xf3\xad\xa1\x5f\x09\x2a\x7c\xa2\xbe\xc3\xd3\x6c\x66\xb5\xb0\xc0\xd6\x87\xcb\xf9\x1c\x85\x0a\xb8\x61\x67\x3d\x34\xd0\x50\x88\xc8\x24\xff\x19\xd3\x49\xd3\xf8\x97\x79\x7b\x62\x9e\x85\xa3\x08\x0b\xda\xf3\x89\x81\xdc\x30\x90\x64\x4d\xc3\x69\x37\x89\x37\x20\x46\x9e\x32\xc0\x23\xd2\x34\x26\x94\xdc\x47\x21\x13\xb9\xce\xf7\xd4\x13\xc3\xa6\x47\x26\xd4\x25\xa6\x7a\x78\x8d\x68\x40\x05\xc5\xbe\xc9\x5d\xec\x93\xe6\xbe\x06\x9a\xcd\x3e\x74\x2f\xce\x91\xd1\xf8\xc6\x98\xcf\x4d\xf3\x77\xda\x47\x4e\xfb\x8f\xe3\x86\x4f\x83\x3b\xc4\x88\xdf\x34\xf8\x10\xb0\xdd\xb1\x40\x14\xe0\x0d\x34\x64\xa4\xdf\x34\xec\x3e\x9e\xc8\x67\x0b\xfe\x59\x86\xf4\x3b\x09\x3c\xda\xff\xc3\x34\xf3\x48\x31\x00\xa7\x7f\x11\xde\x34\x0e\x0f\x1e\x0e\x0f\x52\x38\xa9\xfe\xf9\x3c\x41\xe5\xc9\x17\xf3\xf0\xc0\x8a\x82\x81\x81\xc4\x34\x82\x91\xd2\x11\x1e\x10\x5b\x36\x68\x2d\x64\xd8\x38\x8a\x7c\x62\x8a\x70\xec\x0e\xcd\x02\x9f\xfd\x83\x1f\x1f\xe0\xb3\x91\x13\xf4\xb1\x2a\x22\x1f\x1d\x3d\xc0\x67\x33\xf2\xd1\x51\x55\xe4\x37\x07\x0f\xf0\xd9\x8c\xfc\xe6\xa0\x2a\xf2\x5b\xd0\xc6\xdb\x2d\xb4\xf1\x76\x85\x36\xb8\x98\xfa\x84\x0f\x09\x11\x89\x51\x04\x79\x10\xb6\xcb\x79\x19\x13\x9a\x6c\x1a\x78\xe4\xc1\x92\x2f\x35\x10\x77\x19\x8d\x44\x9e\xf2\x33\x9e\xe0\xb8\xd5\x28\x87\x14\xe2\xcc\xcd\xf0\x3e\x73\x9b\xc9\x28\x61\x04\xbe\x1d\x58\xfb\xd6\xc1\x8f\x49\x83\x35\xa2\x81\xf5\x19\x24\xf0\x20\xda\xcc\x11\xa6\x41\x81\x6c\x36\x03\xaf\xb6\xba\x27\xef\xdf\xb7\x5b\x3d\x0a\x41\x0d\xdd\xb5\x68\x31\xe1\x6c\x46\x7c\x4e\xe6\x73\xe0\xa7\xdb\x55\x5b\xe0\xcd\xe7\x46\x12\xcb\x0d\x3b\x96\x52\x0f\xc4\xd6\xd3\xc1\x71\xa3\x17\x7a\x53\xdd\x18\xe0\x09\x72\x7d\xcc\x41\xd1\xf0\xb5\x87\x19\x8a\xff\x98\x1e\xe9\xe3\xb1\x2f\x92\x47\x2e\x20\xbc\x5d\xb0\x4f\x64\x20\x16\x42\x34\xca\xee\x74\x00\x8d\x60\xaa\x94\xa1\x47\x53\x34\x19\xd8\x30\x2a\xc2\xcc\xbe\x3f\xa6\x5e\xd2\xa7\xd4\x4b\xa3\x4b\xc9\x08\x83\xc9\xc0\x37\x47\x9e\xb9\x8f\x22\xec\x79\x34\x18\x98\x3e\xe9\xc3\xcc\x93\xd8\x22\xa1\xef\x8d\x85\x08\x83\x12\x84\x08\x07\x03\x9f\x48\x08\x1f\x47\x9c\x78\x89\xad\xe3\xce\x5a\xcf\x71\x27\x29\x5c\xdc\x2b\x69\xc6\x6c\x20\x6d\xf8\x7f\x1a\x2b\x7d\x9d\x63\xab\x5c\x21\xc2\x29\x5b\xce\xcc\x30\xf0\xa7\xc5\x2e\xd0\xa9\x1b\xcb\x91\x69\x07\xac\x00\x64\x6b\x90\x94\xf7\x02\xdb\x05\xa8\x17\x43\x69\xc7\x4a\x2c\x18\x01\x23\xea\x35\x8d\x21\x68\xb6\x68\x87\x1e\xc3\x81\x07\x6d\x34\xda\xcf\x66\x03\x30\x86\x4c\x21\xd0\x1f\x52\x8a\x4c\x01\x28\x9f\x67\x4a\x6a\xce\xbf\x6a\xd8\xb8\xc0\xd5\x06\xdf\x29\x79\x92\x14\xa3\x6c\xb7\xcc\x09\xe3\x06\xb4\xc6\xb0\xc7\x8d\xb1\x9f\x1b\x43\xd2\x15\xfe\x94\xcd\xef\xd3\xa4\x1f\x76\x05\x9d\x90\x45\xe5\x61\x3d\x60\x99\x1f\xf9\x3b\xdb\xbe\xbf\xbf\xb7\x60\xc4\x0c\x3e\x96\x1b\x8e\xec\x38\xa1\xc2\x1c\xe0\x13\xcc\x09\xb7\x7d\x2c\x08\x17\xff\x70\x47\x51\x33\x8e\xfd\x32\x24\x80\x26\x49\x18\x2f\x9a\xca\xa7\x2b\x25\x4c\xa2\x02\xe6\x2b\x94\xfb\x0e\x33\x0d\x1b\xd0\x40\xc6\x14\xea\x53\xc6\x85\x6a\x5d\x1c\x88\x1b\x7a\xa4\x04\x25\x9b\x60\x52\x5d\x18\xb5\x12\x31\xb5\x67\xcb\xb9\xe9\x5e\x3b\xa7\xd2\x72\x92\xa0\x66\x99\x1f\x2b\xe8\x38\xfa\xff\xa0\xc7\xa3\x9f\xe3\x58\x90\x9e\x33\x8e\x16\xbb\xe5\x7c\xf0\xb6\x23\x47\xb2\x10\x12\x7a\x2c\x2f\x70\x84\x3e\x2e\x8f\xd0\xc7\x6b\x47\x78\x7e\x52\xc3\x08\xed\xb1\xbf\x2e\x4c\x73\x8f\xf0\x00\x83\xd0\xc9\x67\x73\xba\x28\xf4\x61\xe1\x7d\x39\x8d\xc8\x01\x8e\xc8\x28\x1f\xf0\x32\x83\x1c\x25\xa9\x24\xec\xf7\x21\x3b\x9b\xfb\x85\x80\x9f\xcd\x04\x19\x45\x32\xf6\x90\x01\x69\x0e\xb8\xf2\x77\xef\xe2\x2f\x7f\x82\x1e\x88\xaf\x10\x2d\xa9\x97\xe5\xd3\x8d\xd7\x2f\x33\xfc\xa9\x1a\x03\x09\xb0\x04\xbf\xa0\xa7\xcd\x03\x77\xa3\x71\xcd\x03\x57\x88\x6b\x06\x4e\x1f\x3b\x70\x5a\xcb\xc0\x23\x5e\x16\x63\xff\xc7\xc7\x0d\x5c\x22\x6e\x92\x2b\x7d\xd8\x50\x13\x26\x04\x13\x28\xa6\x64\x88\xa1\x66\x32\x3b\xce\xe7\x3f\x97\x6b\x32\x5d\x8a\xc9\xea\x4c\x2f\xea\xec\x1f\xf6\x7e\xb0\xe7\xf3\xd9\x2c\x96\x2f\x27\x30\x96\x35\xed\x9f\x3d\x0c\x6b\x2a\x59\x18\xc1\x9a\x25\x49\x38\x80\xff\x01\xfe\xc2\x92\x6d\x36\x53\x8a\x99\xcf\x65\xdb\x59\xfc\x15\x85\xc1\x99\x4f\xdd\xbb\xe6\x4c\x0c\x29\xb7\x86\x90\xa0\x7d\xa2\x5a\xe6\x08\xed\xc5\x73\xc1\xa9\x44\x55\xf4\x56\x17\xc6\x13\x67\xde\x63\x5d\x51\x6e\x29\x14\xa3\x83\x61\xbd\x52\xc5\xa2\xa0\x4c\xbe\x6d\xa5\xd2\xb6\x05\x7f\x06\x17\xe2\x86\xec\x03\x75\xc9\x80\xa0\x57\xd0\xa4\x16\xcd\x6a\xf2\x3b\xeb\xdc\x5a\xe7\x94\x0b\xf9\xfe\x33\x7f\x40\x9f\x62\x59\x64\xd3\x77\xb2\xc3\xf7\xd6\x08\x47\xdf\xf5\xc7\x81\x2b\x2b\xb9\xef\x24\xf1\xf7\x68\x06\xcb\x0a\x31\x66\xc1\x27\x10\x47\x30\x10\xee\x57\x32\x45\x32\x18\x4d\xe0\xd5\x9b\x9a\x97\x86\xe2\x62\x41\xf9\xa2\x2c\x2b\xbc\xc4\x59\xd5\x5c\xaf\xb4\x84\xd4\xd7\x20\xbc\x67\x38\x4a\x17\xa3\x09\x15\x2c\xb8\xbd\x84\x32\xd3\x5c\x9e\xba\x37\x30\xc7\x9c\x44\xae\x72\x36\x55\xc2\xc6\x8f\x4d\x0d\x72\xcb\x09\xeb\xb8\x42\x09\x90\x41\xa7\xad\xdf\x3e\x9e\xc3\xcd\x94\x2f\x32\x48\x1a\x6b\xc0\xff\x27\xa6\x62\x91\x41\xda\x5a\x85\x83\x49\x83\x09\x61\x71\xd1\xb7\x84\x93\x03\x6e\xb7\xc8\x29\x6d\xcd\x38\xd9\x82\x49\xdf\x53\x7e\x32\xff\x7e\xfe\x49\x3a\x8d\x76\xc4\x6d\xfd\xd1\xeb\x97\xdd\xd1\xeb\x67\xde\xd8\xfa\xa5\x92\x33\x7a\xfd\x55\xbe\xe8\xf5\xb5\x2b\x7a\x94\xc9\x6a\xdb\x90\x7c\xac\x16\x65\x97\xf0\x10\x7b\x25\x42\xcb\x34\x17\x3b\x64\x5a\xbd\xc7\x45\x3b\x68\x44\x52\x93\x49\x4a\x1d\xab\x29\xdf\x98\x28\xa9\x3a\x6c\x4e\xa8\x0c\x36\x69\xcc\x5b\x79\x9b\x18\x2a\xac\x71\x46\x63\x55\xdb\x26\x4b\x0f\x27\x80\x5a\x06\xaa\x5e\x46\xd2\xba\x49\xb3\x73\x64\x5b\xa1\x0a\x3a\x46\xf1\x9b\x93\x09\xa6\x7e\xa5\x80\x2c\x08\x55\xf2\x36\x00\x84\x10\xcc\xf9\xda\x16\xe2\x02\xf5\xb7\x65\x71\xc7\x3c\x75\xcd\x05\x89\x6f\x79\xd9\x6d\xeb\x53\xdd\x58\x2e\xab\x17\x65\xf1\x96\xaa\xee\x56\xbf\xa8\x5d\x0a\x11\x0a\xec\x97\xc5\x50\xaf\x96\xca\xd1\x95\xdd\x73\x82\xd4\x10\xc5\x74\x21\x8a\x69\x2e\x8a\x9d\x6a\x51\x4c\x57\x46\x31\x4d\xa2\x58\x87\x30\xed\x5b\x59\xfc\x56\x09\xb3\x3c\x61\xac\xb2\xb4\x65\xad\x7d\x8c\x7c\x7f\xa7\x53\x8f\x35\xd3\x72\x4a\xbd\xd3\xa6\x55\x46\x42\xa7\xbf\x75\xdb\x37\xc8\x09\xd0\x28\xf4\xc6\x7e\x88\x8e\xde\xe7\x8a\xbf\x58\x8a\xd3\x29\x2c\x98\x9d\xa0\xb4\x64\x39\xb6\x57\xa2\x5d\x8d\xc5\x26\x38\xe8\x52\xc6\x2b\xf8\x51\x01\xfb\xd4\xe9\x2a\x11\x23\xc2\x10\x27\xb0\x6a\x29\x44\x04\x95\x53\xa2\x2f\xf0\x29\x15\x65\x29\x4b\x32\x2a\x1c\x29\xdc\x66\xa0\xb2\x7c\xc7\x4f\x6c\x86\x08\xbb\x77\x44\xf0\xf5\x86\xe8\xc4\x9d\xb6\x33\x45\x82\xb8\xde\x18\x1a\xb2\x92\x39\x3a\x99\xac\xeb\x15\xb9\x5c\xde\x92\xb4\x9d\x9c\x9c\x5b\xc1\x3d\x89\x69\x8a\xba\xf3\x58\x18\xf1\xd7\x84\xb1\x90\xf1\x45\xe5\x2d\xb3\x9f\xa2\x58\x6f\xbd\x96\xec\xb2\x68\xbb\x18\x6c\x36\x53\x15\xfa\x65\x18\x5c\x52\x1f\xa5\xdd\xa5\x52\x0c\x03\x19\x43\xea\x79\x24\x30\xf4\x6c\xa2\xb5\xf8\x08\x98\x65\xc2\xaf\x77\x94\x04\xa7\x2c\xfe\xeb\x25\xca\xd0\x8a\x5b\xab\x8d\xb6\xea\xb3\x9d\x2b\x6b\xbc\xf5\x02\xc6\x80\xdb\x39\xb2\x56\xd3\x89\xef\xff\x9b\xb0\x10\xa5\x1e\xa6\x4d\x54\x6a\x90\x7c\xd3\x96\x44\xee\x72\x8b\x52\xb1\x76\xa6\xd4\x4c\x45\x4f\x69\x25\x3e\xb2\xe8\xe6\x45\x47\xaf\xea\x29\x05\x49\x1f\xe9\x2e\xab\xb1\x8a\xc3\x58\x1e\xae\x4b\xc6\xb1\xd1\x67\xda\xa9\xb7\x6c\xc2\xdb\xce\x67\xda\x99\xb7\x6c\x07\xb8\xc1\x67\xea\xac\x62\x46\x64\x54\x2e\x63\xa0\x29\xab\x63\x2e\xda\x17\x95\x0a\x19\x20\x5e\x55\xc9\xc0\x2b\x5d\xca\xdc\x51\x18\xbf\x62\x64\xfd\x4a\xa5\xa0\x7a\xb2\x4c\x2b\x8d\xec\xcd\x96\xa5\x89\x24\xf8\x45\xd7\xef\xdb\x2f\x3a\x4b\x95\xb9\x04\x29\x96\xe6\xa5\xc6\xf5\xe5\xb4\x51\xa6\xa9\x26\xfe\x13\x94\xa8\xe9\x6e\x9e\xec\xf4\x2a\xca\xac\xda\xc1\x0c\x8f\x64\xa5\x2c\xf7\xd2\x74\xcc\x75\x42\x4e\xe5\x79\x06\x7a\x15\xc9\x1d\x91\x40\xc5\x9a\x42\x40\xea\xdf\xe4\x2c\xd0\xd0\xe6\xca\x6d\xd0\x0d\x8f\x0a\x67\x75\xa6\x4f\xef\x88\x19\x13\xc9\x33\x3d\x9a\x9d\xc7\x62\xe0\x26\x77\x83\xba\xc0\x25\x61\x94\x4d\x4e\xf0\x94\x9c\x70\xa4\x1b\x6d\xea\x60\x66\xb5\x8c\x7a\x32\x40\x86\x0f\x1e\x69\x0e\x58\x38\x8e\x8c\x74\x61\x95\x6d\xb9\x67\x6f\x4d\x2a\xc0\xbf\xf3\x95\xb2\x18\x66\x79\x34\x3b\x04\x52\x14\x34\x28\x6e\xb0\x4b\xc8\xfc\x8e\x62\x63\xc9\x31\x59\xaf\xf0\x0c\x2d\x10\xd8\x78\xda\xb0\x8b\xed\xc9\xc4\xaf\xb9\xa9\x9d\xb3\x85\x5d\x7f\x69\x34\x39\x4e\x6f\xe9\xe6\xfc\xe2\x29\x1d\x80\xe6\xac\xd2\x13\x81\x56\xc8\x5e\x09\x75\xc9\x36\x68\x79\x57\x11\x9d\x13\xce\x5b\x99\x95\x3c\x24\xf1\x90\xc4\xcc\xfc\x60\x13\x52\xec\xe5\xe8\x22\x64\x64\x13\x54\x71\xcf\x15\x95\xce\x17\x76\xd2\xfb\x35\xcc\x6b\x8f\x52\x7b\x60\x9d\xf4\x78\xe8\x43\x0a\x7d\x26\xfd\x5f\xe6\xa2\xe4\x91\xfa\xdf\x04\xb5\x49\xff\xd9\xd9\x4e\xf6\x26\x69\x85\xd9\x0d\xf7\x7c\x92\x4b\xde\x71\x11\x93\x70\x8b\xdf\xaa\x7f\xcd\x61\x38\x21\x6c\xa1\x20\x00\x84\xf4\x96\x92\x7a\x62\x39\xd6\x62\x58\x94\x2b\xf7\x2c\x5f\xae\x9a\x57\x75\x0f\xb9\xdd\x59\x95\xe6\x66\xca\xab\x92\xc8\x3d\xc9\xaa\x34\x72\x77\xb1\x44\x63\xa7\x23\x57\x03\xcd\x6e\x6e\x89\xf4\xb6\xc6\x2a\x0f\x2a\x6d\x76\xc7\x07\x19\x22\x77\xc9\xc3\x56\x16\xd8\x4b\xe7\xd6\x0a\x3b\xe8\xc9\x71\x55\xd5\x3c\xd2\xea\x7f\x99\x34\x02\x7c\xb2\x2c\xd2\xa2\xfc\x0e\x8d\x39\x1e\x90\xed\x93\x89\x12\xf4\xeb\xcf\x25\xad\xfe\x73\xa7\x12\x90\xa0\xa6\x4c\xb2\x02\xe9\xc5\x25\x12\x70\xad\x97\x92\x47\x94\x97\xd7\x92\x46\x56\x20\x3d\x4d\x16\x51\xcc\x76\x49\x22\x85\xf9\x37\xbf\xe3\x92\x58\x87\xc9\xa9\x2c\x3f\x3d\xaf\x50\x86\x18\x4e\xa4\x3a\x0c\xf4\x51\x5d\x28\x4c\x74\x70\x87\xf6\x91\xd1\x52\x97\x55\x41\x9a\xca\xc4\x07\xc8\xb8\x08\xc7\x81\x90\xd7\xd4\xaa\x53\x1f\x22\x43\x1d\x4c\xc0\x42\x8a\x55\xa5\x3d\x42\xc6\xad\x3c\x52\xd8\x81\xf4\x8d\x22\xf5\x76\x21\xfd\x09\xc5\xdb\x27\x31\x6d\x0d\xb9\x4e\x1f\xa4\xd5\x9f\xea\x68\xf5\x54\xe7\x7c\xa1\x54\xe7\xe4\x53\x9d\x03\xce\xc3\xfa\xd8\x25\x7c\xfb\x54\xe7\xfc\x6f\xa4\x3a\xe7\xd9\x53\x9d\x53\x5b\xaa\x5b\x81\xf4\xe2\x52\x9d\xf3\x72\x52\x9d\x53\x5b\xaa\x5b\x81\xf4\x34\xa9\xce\xd9\x35\xd5\xad\x5c\x2f\xa5\x53\x44\xe5\xd5\x49\x67\x0b\x8a\xc2\x8c\xa0\xef\x5e\x1d\xa6\x67\x17\xf2\xdc\x0a\x39\x81\xbd\x6a\xe7\x53\x72\xb9\x42\x8d\xd2\x3d\xc2\x5e\xc3\x2e\x38\x6e\xb4\xcd\x62\x6c\xbd\x20\xd9\x01\xd1\x3a\x59\xd2\x5e\x57\xa8\x06\x9e\x6a\xaf\xf9\x75\xba\x97\xbc\x8e\xf1\x79\xc8\x97\x73\x7d\x7c\x8a\xa4\x4f\x95\x22\xe5\xed\xc8\xaa\x39\xf2\x82\x8c\xbe\x4c\x92\x94\x8c\xb2\x2c\x09\x4f\x21\x9b\x6e\x9f\x21\x63\x31\xbf\xfe\x14\x09\xe3\x7c\xee\x1c\x29\x45\xa8\x29\x49\xae\x82\x7a\x71\x59\x52\xba\xd7\x4b\x49\x93\xb1\xab\xd7\x92\x27\x57\x41\x3d\x4d\xa2\x8c\xb9\x3d\xeb\xce\xa2\x3c\x6f\xda\x61\x37\xf2\xdb\x1d\x68\xbc\xaa\x34\x6a\x9d\x55\x7b\x32\x49\x0e\x0b\xeb\xcf\x26\x11\xaf\x9c\x4c\x3a\xfc\xcb\xe4\x12\xe0\x93\xa5\x92\x0e\x0b\x61\xb1\xc5\xab\xac\xb7\x94\x9c\x5f\x7f\x32\xe9\xf0\xe7\xce\x25\x20\x41\x4d\xa9\x64\x05\xd2\x8b\xcb\x24\xe0\x5a\x2f\x25\x91\x28\x2f\xaf\x25\x8f\xac\x40\x7a\x9a\x34\xa2\x98\x7d\xb9\xad\xc5\x57\x6e\xd6\xea\x12\xb9\x32\xab\xb4\xed\xd7\xe1\x6a\xc7\xb1\xe3\xb4\xaa\x6e\xbf\x49\xca\x03\x64\xdc\xee\x46\x79\x08\x94\x37\xed\xeb\xaa\xbb\x94\x92\xf4\x08\xc4\xbd\xde\x85\xe7\x1b\x64\x5c\x3a\xbb\x10\xfe\x84\x8c\x8f\xce\x75\x77\x17\xd2\xbf\x21\xe3\xba\x7d\xb3\x0b\xe5\x5b\x64\x74\x9d\x8b\xb6\xfc\xcd\x47\x55\xd2\xbf\x23\xe3\xec\xea\xe2\xe2\xe4\xb2\x15\xeb\xb7\x86\x3c\x1d\xf1\x27\x48\xd3\xbc\x7c\x4f\x28\xe2\xb9\x64\x7d\x53\xe9\x96\x50\xc4\x57\x5d\x12\x8a\xb8\xbe\x23\x14\x51\xb9\xc7\x1c\x71\x0b\xbc\x7d\xcd\x4f\x68\x74\xd6\x96\xd7\xbc\x93\xbe\xdb\xdc\xb9\xd1\xfd\x6f\x4b\xfd\xf7\xd2\xb9\x95\xab\xdf\xc9\x54\x02\xeb\x30\x1a\x32\x2a\xa6\x95\x88\x2e\xa9\xbb\xe5\x05\x6c\x4d\x70\x43\xff\xaa\x46\x70\x4d\x38\x85\xa9\x4c\xac\x26\xd2\x33\x51\x7e\xf0\x5d\x5a\xba\x17\x9e\x7f\x59\xba\x34\xfe\x98\x8b\x4a\x49\x54\x48\x1f\x18\xe6\xef\x6b\xe9\xff\x0b\x60\x36\xb3\x4e\x7c\x3a\x08\xf4\xaf\xc5\x8c\xbd\xb8\x42\x4b\x7e\x58\x76\x0e\xb4\xcb\x7e\x5c\x26\xdb\xb7\xfc\x81\x99\x1a\x95\x22\xd0\xbf\x78\xd3\xf7\x10\xf3\x3f\x55\xc3\xe0\xa9\x1a\x6e\x6f\x31\xb1\x1e\xc7\xb5\x60\xbc\x7e\x48\x22\xea\xbf\x01\x00\x00\xff\xff\xa9\x4a\xf6\x87\xa7\x45\x00\x00"

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 17831, mode: os.FileMode(420), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

