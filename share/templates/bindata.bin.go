// Code generated by go-bindata.
// sources:
// index.html
// DO NOT EDIT!

// +build bin

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5d\x6d\x73\xdb\x36\xf2\x7f\xef\x4f\x81\x72\xda\x69\xda\x09\xc9\xda\x71\xfa\xcf\xdf\x67\xf9\x26\xb1\xdd\x56\x53\xdb\xd1\xc4\x72\xee\x7a\x9d\x4e\x0b\x91\x90\x85\x98\x22\x79\x04\x28\xdb\xd5\xe8\xbb\xdf\x02\x24\x45\x8a\x0f\x12\xa8\x27\xf2\x85\x5f\x38\xe6\x03\xb0\xfb\xc3\x62\xb1\xf8\xed\x9a\x64\x4e\xbf\xba\xf8\x78\xde\xff\xad\x77\x89\x46\x7c\xec\x1c\x9c\x4d\xa7\x5f\x4f\xd0\x49\x07\x19\x1f\x19\x27\x2e\xff\x4c\x02\x46\x3d\x77\x36\x3b\x95\xb7\x11\x3a\x3b\x1d\x11\x6c\xc3\x81\x38\x1c\x13\x8e\x91\x35\xc2\x01\x23\xbc\xa3\x85\x7c\xa8\xbf\xd3\xe2\x5b\x9c\x72\x87\xc8\x63\x38\x9b\x4e\x8d\x0b\xcc\xb1\x31\xf2\x18\x77\xf1\x98\xcc\x66\xc8\x93\xe2\x4f\xcd\xb4\x5d\x2c\x6e\xc4\xb9\xaf\x93\xff\x86\x74\xd2\xd1\xfe\xad\xdf\xbd\xd7\xcf\xbd\xb1\x8f\x39\x1d\x38\x44\x43\x96\xe7\x8a\x6e\x1d\xad\x7b\xd9\x21\xf6\x3d\xd1\xb2\x3d\x85\xe4\x8e\x36\xa1\xe4\xd1\xf7\x02\x9e\x69\xfc\x48\x6d\x3e\xea\xd8\x64\x42\x2d\xa2\xcb\x93\xd7\x88\xba\x94\x53\xec\xe8\xcc\xc2\x0e\xe9\x1c\x1a\x3f\xc4\xa2\xa6\xd3\x5f\xfa\xd7\x57\x48\x3b\xfd\x4a\x9b\xcd\x74\xfd\x77\x3a\x44\xdd\xcb\x3f\xce\x4e\x1d\xea\x3e\xa0\x80\x38\x1d\x8d\x8d\x40\xba\x15\x72\x44\x41\x81\x86\x46\x01\x19\x76\x34\x73\x88\x27\xe2\xdc\x80\x7f\xca\x24\xfd\x4e\x5c\x9b\x0e\xff\xd0\xf5\xac\xa4\x48\x00\xa3\x7f\x13\xd6\xd1\xde\x1c\x3d\xbd\x39\x9a\x8b\x13\xd3\x30\x9b\x25\x52\x59\x72\xa0\xbf\x39\x32\x7c\xf7\x5e\x43\xfc\xd9\x87\xb1\xd2\x31\xbe\x27\xa6\xb8\x10\xdb\x21\x95\x8d\x7d\xdf\x21\x3a\xf7\x42\x6b\xa4\x2f\xe8\x39\x3c\xfa\xe1\x09\x7e\x56\x6a\x82\x36\x46\x4d\xc9\xc7\xc7\x4f\xf0\xb3\x5a\xf2\xf1\x71\x5d\xc9\x6f\x8f\x9e\xe0\x67\xb5\xe4\xb7\x47\x75\x25\xbf\x03\x6b\xbc\x53\xb0\xc6\xbb\x0a\x6b\x30\xfe\xec\x10\x36\x22\x84\x27\x93\xc2\xc9\x13\x37\x2d\xc6\xf2\x32\xe1\x92\x49\x5d\x9b\x3c\x19\xe2\x66\x2c\xc8\x8c\x57\xd3\xd9\xe9\xc0\xb3\x9f\xe3\x8b\x36\x9d\x20\xcb\xc1\x0c\xf0\x71\xcf\xd7\x07\x38\xd0\x92\x95\x54\x72\x4f\x77\xc8\x90\x27\x0d\x44\x93\xd0\x49\x5a\x8c\x89\x1b\xa6\x77\x22\xe0\x99\x53\xb9\x9a\x8f\x92\xc6\x23\x98\x39\x39\x1a\xe8\x87\x83\x7b\xea\xea\x03\x8f\x73\x6f\x7c\x82\x7e\xd0\x16\x3a\x89\x6e\xcc\xc7\x6e\xd2\x31\xf4\x6d\xcc\x09\x8c\x17\x7e\x61\xdd\x26\x43\xea\x82\x8c\xe8\xf7\x9f\xc9\x92\xcf\x8b\x90\x0b\x84\x93\xb1\xef\x40\x5f\x14\xb7\x66\x27\x27\xf9\x6e\xc8\x80\xd8\x63\x0a\x75\x79\x0c\xe8\x94\x8d\xb1\xe3\x94\xc9\x35\x2e\x28\xe3\x01\x1d\xc8\xae\x25\x8d\x84\xdd\x8f\x72\x86\x30\x17\x4c\x53\x62\xa9\xec\x90\x2d\xcf\x29\xd8\x24\xf4\x4b\x70\x16\xba\xa1\xd8\x5a\xe8\x71\x44\xe1\x97\x8f\x21\x24\xf9\x01\x29\x37\x5e\xe8\x73\x5a\x34\xdd\x52\xc3\xc5\x5d\x2a\xcc\x56\x1c\xa6\x19\x3a\x19\xd7\x31\xc1\xbd\x96\xb9\x5a\x40\xef\x47\xeb\xfb\x1a\x4e\xda\x0e\x42\x70\x2c\x17\x31\x02\x4b\xcb\xc6\xc1\x33\x1a\x79\x8e\xe3\x3d\xe6\xfc\x4f\x38\x5e\xbc\x86\xc4\xa6\xc0\x4e\x4c\xf3\xf1\xf1\xd1\x00\xcf\x08\xe0\xc7\xb0\xbc\xb1\x19\xed\x22\x26\xac\x44\x82\x19\x61\xa6\xb0\x09\xe3\xff\xb4\xc6\x7e\x27\x5a\x75\x05\xdb\x25\xfb\x0e\x5e\xdf\x2e\xf3\x93\x05\x13\x2d\x5d\x05\x30\x0f\xc4\x71\xb0\x76\xa0\x30\x83\x49\xdb\x68\x0a\xd7\xd4\x35\x26\x63\x75\x65\xa2\xf1\x46\xda\xec\xa1\xba\x32\x68\xbb\x91\x2e\xcb\x0f\xd5\x95\x89\xc6\x1b\x69\xa3\x35\x46\x46\x37\x1c\x99\xcf\xd4\x75\x41\xdb\xbc\x2e\x66\x05\xd4\xe7\xd9\x4d\xe8\x0b\x9e\xe0\xe8\xea\x5c\xf0\x04\x07\x48\x50\x31\xd4\x41\x31\x29\x9b\xcd\xfe\x01\x81\x42\xb6\x52\x11\x94\xa7\x7b\x88\x05\x56\xba\xc7\x7d\x61\x70\x04\x94\xc9\xe8\xbf\xff\xf9\xe7\xcb\x8b\x01\x05\xe6\x38\xa6\xae\x39\x08\x5d\xdb\x21\x06\x1c\x1a\x5f\xd8\x74\x4a\x1c\x06\x1c\x10\x7a\x26\x37\xe4\x45\xd7\x4e\xd7\xeb\x59\x0e\x93\x19\x6f\x8f\x22\x72\xc7\x3c\xd5\xfc\xfe\xe0\x7b\x73\x36\x9b\x4e\x23\xbb\x64\x0c\x85\xc5\xf6\xfc\xe7\x00\x03\x41\x94\x7b\x23\xd8\x09\x47\x81\x04\xc6\xfc\x0b\xfc\x06\xfe\x39\x9d\xca\x79\x99\xcd\xc4\xb5\xf3\xe8\x10\x79\xee\xb9\x43\xad\x87\xce\x94\x8f\x28\x33\x46\x58\x60\x93\x57\x66\x08\x1d\x44\x3b\xcb\x07\x21\x55\xf6\x37\xfa\x60\x1a\x31\x05\x58\xa0\x91\xe8\x15\x41\x45\x51\x74\x9b\xa8\x22\x28\x28\xc5\xa7\x8c\x6a\x22\x60\x2d\x62\xb9\x82\x2b\x65\x78\xc4\xf5\x1a\x98\x44\xf3\xd8\x44\x72\x0f\x5c\x1c\x1b\x0e\x08\x8f\x85\x25\x53\x1c\xef\x56\x67\xaa\xd8\xf3\x54\x21\x1d\x84\x66\x6a\x19\x75\x1a\x75\x47\x60\x73\xae\xc3\xf6\xeb\x05\x1a\x82\x5b\x7d\x91\x75\xf4\xa0\x29\x7d\x22\x36\xd2\x12\x11\x08\x16\x55\x2e\x51\x39\x28\x4d\x5f\x6a\x42\x9c\xc7\x22\xd1\xe8\x6b\x5f\xe6\x57\x52\xa2\x8f\x03\x3c\x06\x8c\x32\x50\x64\x10\xdf\x07\xd4\xd6\x07\x8e\x67\x3d\xc0\x80\x80\xb7\xfa\xda\x41\x2e\x9c\xc0\x58\x74\x27\x40\x0e\xec\x94\x44\x3f\x44\x62\x99\x66\x77\xe7\xb3\x58\xa2\x34\x71\xcf\x63\x90\xec\x4c\x08\xfa\xda\x37\xce\x7b\x77\x2e\x0c\x98\xda\x44\x87\x44\xe6\x51\x1c\x68\x48\xe4\x34\x8f\xe9\x79\x3c\x25\x92\x1e\x1e\xa6\xf4\x30\x52\xe2\x4d\x48\x30\x14\x9b\xf5\x41\x76\x63\xaf\xb6\x36\xa4\x41\x60\xe7\x3e\xe8\x4e\xd4\x83\xfb\xc8\xac\xaf\xa3\xc1\x19\xb2\x29\x83\x40\xf7\x8c\x3c\x20\x2e\xc0\xb8\x17\x29\x44\xce\x71\xb4\x04\xa2\x2e\xfe\xc9\x51\x28\x04\xa8\x30\xcf\xb1\x61\x29\xc6\x30\x0c\x54\x20\x43\x67\xa0\x3c\x4b\x03\x44\x64\x39\x2c\xdb\xe3\xe3\xc3\x25\xd6\x3f\xdc\xae\xcd\x33\x7a\x52\x3f\xa8\x26\x5d\x68\x6e\x14\x71\xb0\x82\x82\x65\x64\x53\xd7\x0f\xb9\x7e\x1f\x78\xa1\x5f\xe4\xf7\xe5\xed\x74\x07\x0f\x88\x83\x24\xa5\x8e\xbc\xc1\xf5\x1e\x03\x5c\xe8\x0f\x12\x6c\x02\x93\x9a\xe5\x4d\x2b\x65\x47\xa4\xb0\x44\x54\x91\x37\x4a\xfd\x29\x7b\x04\x17\xc2\x03\x87\xd8\xc5\xbe\x72\xf1\x46\x33\x60\x47\xab\xb6\x28\x7d\x2b\x18\x4b\x37\xec\xfc\x3e\x84\xae\x08\x63\x17\xe9\x4a\x80\xc8\xb3\x30\xa2\xac\x45\xb3\x7b\xfb\x2e\x81\x45\x31\x03\x5d\x7b\x01\xd9\x10\x59\xe1\xa2\x42\x4e\xb5\x37\x77\x0c\xbc\x47\xd6\x26\x6f\x74\x8d\xf7\x03\xe6\x39\x21\x27\x2d\x71\xcb\x9b\x4c\x80\xce\x4d\x3e\x0b\x2d\x0b\x5a\x34\xed\x9e\x5b\x42\xa8\xe0\xa6\xea\xb9\x5f\x1c\xec\x6f\x3c\xf7\x3f\x24\xf0\x52\x74\xa2\xfa\xe0\x8b\x20\xaf\x14\xdb\x11\x17\x55\xa0\x6c\x84\xcf\x17\x0d\xe4\x30\xf5\xc3\x85\xe0\x7e\x0e\x36\xc9\xed\x6a\x55\xf2\x85\x41\x90\xeb\x01\xa3\x86\x3c\xbb\x64\x87\x2d\x6a\x2a\x10\x8a\x79\x0f\x74\xc7\x48\x50\xdc\x4d\xd7\x10\x74\xfb\xcc\xb6\x22\xe7\x5f\x98\xf2\xad\x08\xea\x02\x89\x5d\x2d\x48\xcb\x7b\x4f\xa1\xc3\x82\x8b\x2d\x3a\x50\x94\x1d\x49\xee\x07\x7c\x50\xd0\xc1\x00\xbb\xf7\xc0\x12\xe0\x2c\xa5\x85\x70\x02\xf4\x99\x71\x71\xff\x0b\x7b\x42\x7f\x45\x34\x5b\x5c\x7a\x25\x1a\x7c\x67\x8c\xb1\xff\x6a\x18\xba\x96\xe0\x4c\xaf\x44\xe7\xd7\x88\x7e\x87\xa6\x08\x58\x75\x18\xb8\x7f\xc5\x8c\x72\x29\x8b\x58\x6a\x9f\x62\x20\x15\xa1\x4b\xe0\xba\x29\x14\x96\x92\xa5\xf0\x2b\x79\x46\x1a\x34\xd1\x21\xd8\x0e\x9e\xf5\x1b\x0d\x25\x1d\x2a\xa8\xad\xa2\x5b\xae\x9c\xb8\x02\x4d\x14\xc3\x89\x79\x65\xac\x6a\x70\xaf\x87\x8c\xf8\x16\x74\x95\xf9\x77\x74\xd2\x89\xc7\x24\x5c\xba\x67\xf1\xf9\x3a\x4d\x5d\x22\xdf\xe0\x9b\xf2\xa2\xda\x52\x9f\xd9\x3d\x7e\x58\x49\x4b\xe1\x27\xf7\xdb\x89\x5e\xac\xdf\xa5\xf0\xe7\x0d\x1a\xc7\xaf\x53\x17\xd2\x1f\x46\x4a\xc7\x21\xc2\xc7\xd2\x71\xcc\x1b\xac\x33\x8e\x38\xe5\x20\x4f\x70\x2d\xc7\x2d\xce\x92\x28\xf1\x85\xc5\x7b\xa8\x71\x0b\x99\xe5\x03\x6c\xa3\xe4\xd5\x14\xb2\xaf\x13\x44\x5f\x23\x10\x70\x82\xbe\x8d\x31\x7c\xfb\x1a\x41\x53\x1c\x3a\xfc\xd6\xf7\x38\x3b\x41\x3c\x08\xc9\xec\xbb\xd9\x5f\x25\x65\xe3\x15\x01\x4d\xaa\x8e\xba\xce\x33\x62\xf9\xab\x34\x89\x92\x07\x75\x53\x67\x7b\xd8\x82\xcc\xf9\x62\xd8\x64\xe2\x0c\xda\xd3\xbc\xf9\x82\xb2\x07\x14\x32\x0c\x1b\x47\x63\xe9\x73\x8a\x61\x4f\x59\x74\x3d\xfb\xbf\x24\xd1\xb9\x0e\x9b\xa7\x2d\x17\xc3\xb6\xe5\xd0\x80\xa8\x9d\x29\xf4\x7a\xc0\x5e\x32\x68\x75\x57\x6c\x6d\x02\x2d\xc3\x54\x9b\xf3\xe7\xcd\x00\xee\x38\x7d\x96\xe0\xf6\x91\x3d\x97\x1b\x2e\xfa\x6b\x08\xfa\x2c\x9f\xef\x48\xcc\xf5\x80\x0e\x91\x76\x21\x9f\x1e\xd2\x2a\x92\x9f\x6d\xa4\xdc\xf9\x6c\xb4\x16\xc2\x23\xa4\x5d\x7b\xa1\xcb\x61\xd1\x94\x32\xb8\xfa\xc9\x70\x2d\xf5\x3f\x22\xad\xef\x71\xec\x34\xa2\xfc\x2d\xd2\x20\x3f\x6b\x66\xe0\x6f\x90\xf6\x7e\x82\x69\x33\x03\x3f\x96\x03\xff\x46\x49\xf7\xb6\xaa\x16\x10\x9b\x1f\xee\x04\xeb\xcb\xd4\x2e\xec\x61\xca\xcb\xe7\xf7\x6b\x15\x30\xec\xe1\x96\xeb\x17\x45\xb2\x1d\x6d\x1d\xf6\xd0\x80\x95\x7c\x13\xff\x11\xaf\xba\x8c\x61\x0f\xe3\x2a\x86\x4d\x83\xe8\x39\x24\xd9\x95\x06\x51\xd7\xcd\x0a\x1a\x4a\x68\xe3\xbc\x31\xab\xb5\xae\x87\x45\xa1\x7c\x55\xe6\x9b\xb0\xe0\x50\xb4\xd3\x92\x14\xa3\xeb\x7a\x36\x81\x2d\x41\xae\xea\xb2\x84\x16\x80\x45\x6d\xca\x1f\x34\x8a\x9b\xc8\xa8\xd0\x08\xf2\x90\x15\x09\xc4\x1c\xb8\xb8\xb9\x14\xf7\x5d\x79\x83\xdd\xc3\x1e\x06\xa4\xf8\xc0\x57\x02\x5b\xdc\x5c\x0a\x5b\xc6\xa2\x95\xb8\x8b\x61\xa8\x9a\xfb\xd5\x2b\xef\xa0\x5c\x59\x24\xb2\x64\x69\x51\x44\x6d\x0a\xbf\x29\xe1\x3c\x99\x49\xac\xac\xa6\x2c\xcc\x64\xd3\x35\x97\x08\xc2\xb7\xad\x2d\xaf\xd0\x36\x94\x57\xba\x8d\x96\x57\xba\xd9\xf2\x4a\x17\x78\x54\x30\xc4\xc0\x89\x9b\x2b\xaf\xa4\x18\xf6\x54\x5e\xa9\x67\xff\x97\xf2\x4a\xae\xc3\xe6\x39\x6d\xb7\x75\xe5\x95\x6e\x5b\xcb\x2b\xeb\x01\x7b\x29\xaf\xa8\xbb\x62\x6b\xcb\x2b\xdd\xb6\x97\x57\x36\x03\xb8\xe3\xf2\x4a\x77\x5f\xe5\x95\xf9\xf6\xd5\xc4\x13\x0a\xdd\x9e\x32\x71\x3f\xaa\x22\xc1\xf3\x3f\xb5\x04\x9e\xcf\x5e\x5f\x06\x81\x17\x30\xd4\x75\xcd\x8f\x21\x47\x3e\x09\xe2\xe5\x94\xd7\x7c\xe5\xc1\x3c\x77\x3f\x22\x5f\xfd\xc9\x86\x95\x08\x7a\xd8\x7a\x20\x5c\x41\xf9\xbc\xe1\x76\xf5\x7f\xa0\x2a\xca\x41\xe9\x29\xcd\xbb\xf3\xe0\xd4\xcc\x05\x54\x15\x60\xdb\x2a\x55\xd0\x21\xb6\xed\x80\x65\x0a\x15\x34\x53\xa8\x88\xef\xd6\x2a\x53\xd0\x7d\x95\x29\xe8\xd0\x58\x5d\xa3\xa0\x49\x8d\x22\x2e\x50\xcc\x3b\x6d\xb9\x3a\x91\x71\x8d\x8a\x42\x45\x84\xb8\xdb\xab\x91\x31\x57\xba\x5d\xce\xaf\x96\xa5\x89\xb2\xb8\x80\x6c\xb9\x42\x49\xb4\x42\xc7\x9e\x1d\x3a\x1e\x3a\xfe\xb9\xe2\x95\xb5\x62\x4f\x70\xed\xea\x5e\xf3\xb1\xc9\x30\xd0\x75\xab\xde\x45\x4b\x52\x81\x24\xde\xde\x50\x07\xcd\xbb\x89\x85\xa3\x15\xc2\x6d\xa6\xb7\xb9\xb9\xd0\xb2\x81\x89\x26\x8a\x23\x83\xa6\x55\x43\x7b\x5d\x62\x38\x92\x84\x43\x05\xf9\x51\xe8\xac\x36\x9d\x59\x2d\x5f\x6d\x00\x91\x82\x25\x23\x28\xad\x97\x2c\x18\xf7\xbd\xe3\x44\x3b\xa4\xb0\x07\x71\x38\x8e\xa7\x3b\x77\x41\xe0\x99\x5f\x49\xc6\x95\xbf\x22\x27\x26\x76\xd4\xaa\xaa\x47\x76\x6f\x11\x56\xac\x0a\xab\xd9\x69\xca\xc0\xaa\xed\x85\x0b\x23\xd8\xaa\x2b\x56\x49\x5e\x1c\xe2\xb2\xad\xa3\x74\x8c\xca\xfe\x38\xdf\x98\x95\xe5\xd7\xf3\xc7\xcb\xd4\x13\xeb\x29\xa8\xe9\x8f\x7b\x89\x9b\x0a\x21\xd1\x9f\x93\x0d\x85\x95\x17\x13\x8e\x7a\x6b\x3b\xd1\xa0\xb6\xb8\x63\x15\xeb\xad\xee\x02\x81\x5a\x32\x87\xd9\x19\x5c\x3e\xae\xdc\xa8\x7a\x99\xf1\xd4\x12\x5f\x35\xa6\xd6\xf8\xc2\x87\xdf\xfa\x97\xb7\x6a\x9e\xf0\xe1\x99\x93\x9a\x7e\x10\x49\x57\xf3\x02\x29\x7e\x23\x1f\xf8\xd0\xed\xdf\xaa\x3b\x80\xa0\xbc\x6a\xb3\x2f\xe5\xaa\x4f\xbd\x10\xbc\xc1\xbc\x6f\xa3\x18\x1d\xe1\x88\x0d\x7a\x13\x8e\xdb\x5b\x96\x76\x70\x0b\xca\xd2\x57\xb8\xc9\xb2\x34\x68\x4f\xf7\xd2\x2b\x0f\xdb\x08\x4f\xee\x9b\x2b\x4a\x27\x08\xf6\x54\x92\xae\x67\xfb\x97\x92\x74\xae\xc3\xe6\x75\xc0\x2b\xdc\xb6\x92\x34\x20\x6a\x67\x49\x7a\x3d\x60\x2f\x25\x69\x75\x57\x6c\x6d\x49\x5a\x86\xa9\x36\x97\xa4\x37\x03\xb8\xe3\x92\xb4\x04\xb7\x8f\x92\x74\x0f\x4c\xe3\xd9\x4d\xd4\xa3\x3f\x63\x27\xdc\xe3\x8b\x65\xb0\xa7\xdb\xb0\x49\x67\xea\x9e\x0e\x4e\x29\x54\x7c\xb7\x56\xdd\xd3\xc1\x5b\xab\x7b\xe6\x2b\x9d\x0e\x36\xa2\x89\x99\xcd\xc6\xcb\x8a\x9d\x0e\x8e\x8b\x9d\xbe\x6c\xad\xa1\x6c\xcf\x5d\x14\x3c\x4b\x9e\xc5\x02\x8d\x72\x2a\x55\xca\x9c\xdb\xa0\xea\x52\x59\x7b\xf9\xb9\xf8\x6c\x50\xf3\x04\xfd\x9a\x8c\x9b\x64\xe8\x42\x7d\x4a\xd1\xe1\xcc\x8b\xb6\xb3\x66\x08\x7a\xa4\x7f\x4f\xf4\xbc\xa6\xe5\x5f\xf8\x79\xae\xc3\xe6\xa4\x08\x66\xa0\x6d\x04\x5d\x40\x6a\x27\x43\x5f\x13\xd9\x0b\x45\xaf\xe1\x8d\xad\xe5\xe8\x51\xac\x6a\x33\x49\xdf\x10\xe1\x8e\x59\x7a\x84\x6e\x1f\x34\x3d\xd9\xc2\xf6\x4f\xd3\x65\x5d\x7a\x2b\x6f\x71\x88\xa7\xc7\xb7\x22\xe8\xa7\x80\x28\x24\x0e\x6a\x88\x8a\x0f\x40\xef\x2c\x03\x19\xcb\x39\xcc\x24\x20\x70\x21\xe5\x88\xd1\xdd\x5a\x09\x08\x74\xd9\x59\x06\x02\xb2\x8d\x5f\xa9\x5b\x7c\xdc\x7f\x21\xff\x80\x56\x71\x02\xf2\x00\x6d\x35\x94\xe9\xb6\xa7\xec\x43\x28\x5c\xf3\x75\x8a\x65\x22\xd7\x7b\xd3\x61\x99\xc4\x9f\xca\xdf\x52\xd8\xe5\x67\x25\xf2\xef\x1d\xc4\x03\xab\xfc\x1a\x43\xf6\xfe\xcb\x8b\x01\x95\x19\x9e\xcf\x5a\x90\xe0\xf5\x58\x93\xf9\x1d\x68\x4f\xd3\xbb\x5e\xe0\x89\x0d\xb9\xc9\xf7\x02\xe6\x10\xf6\x94\xe4\xd5\xb3\xfe\x4b\x8e\x97\xeb\xb0\x39\xab\xee\xb1\xb6\xa5\x78\x80\xa8\x9d\x19\xde\x7a\xc0\x5e\x12\x3c\x75\x57\x6c\x6d\x7e\x27\xc3\x54\x9b\xd3\xbb\xcd\x00\xee\x38\xbb\x93\xe0\x76\x94\xdc\x55\x30\x3c\xf5\x0f\x30\xf4\x98\xfc\x00\x43\xaf\x7b\xb1\xe6\xd7\x17\x2a\xbf\x68\xb7\xcb\xf7\xf3\x05\xea\x23\xa4\xdd\x95\xa1\x56\x4c\x4e\x6a\xeb\x7b\x03\xfa\x6e\x2f\x3f\xed\xfd\x5b\x04\x42\xf7\x31\xcc\x50\x33\x9a\xdf\x22\xed\xa6\xdb\x88\xe6\x1f\x91\xf6\xb9\xfb\xa9\xdf\x88\xee\xff\x43\xda\xa7\xcb\xdb\x35\x54\x5b\x44\xbc\x9a\xb3\x91\xee\x77\x48\xeb\x77\xaf\x2f\xf7\xe7\xd8\xff\x8f\xb4\xf3\x8f\xd7\xd7\xef\x6f\x2a\x16\x93\x5a\x55\xc2\x07\xea\x9c\x7d\x1b\xc4\x67\x99\xb4\x46\xdc\xab\x55\x92\xf0\xd9\x36\x5f\x04\x29\x8b\x8f\xa0\xc2\x80\xa8\xb7\xbc\x2e\xe1\xb3\xe4\xef\xa2\x54\x54\x25\x92\x2e\x7b\xaa\x49\x80\xba\xbb\x12\x84\xb5\xfc\x40\x0a\x61\x24\xd8\x5e\x11\x42\x18\x21\xa0\x1e\xe4\x74\xcf\x5b\x15\x7a\x43\xad\x35\xbe\xc2\xb1\x44\xe0\x2d\xfd\x7b\xbb\x02\x3f\x11\x06\x9b\xb7\x5b\xf6\x80\xe9\x9a\x61\x41\x48\xed\x53\xc5\xaf\x8f\x94\xd6\x43\x12\xe3\x55\x7d\xc2\xa4\xc1\x22\x47\xfc\x9f\x25\xc5\xff\x43\xc5\x01\x4a\xff\xab\x87\xe8\xce\x1c\x6f\x22\xf3\x7f\x01\x00\x00\xff\xff\x87\x1f\x79\x73\x2e\x6f\x00\x00"

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 28462, mode: os.FileMode(420), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

