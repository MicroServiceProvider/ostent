// Code generated by go-bindata.
// sources:
// index.html
// DO NOT EDIT!

// +build bin

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5d\xfb\x6e\xdb\xc8\xd5\xff\x3f\x4f\x31\x4b\x7c\xf9\xb0\xbb\x0d\x49\xdb\x71\xda\x20\x2b\xa9\x48\x2c\x35\x25\x6a\x3b\x42\x6c\xa7\x5d\x2c\x16\xc5\x48\x1c\x49\x93\x50\x24\x97\x33\xf4\xa5\x86\xde\xbd\x67\x78\x19\x0e\x25\x4a\x22\x29\x92\x71\x91\x04\xb0\x2d\x0e\xe7\xdc\xe7\x72\xce\x6f\x48\xe5\xf1\xd1\x26\x33\xea\x12\xa4\xc5\x7f\xff\x1d\xfa\x9c\x2e\x89\xb6\x5a\xf5\x98\x8f\xdd\xc1\xe3\xa3\x31\xc4\x1c\x1b\x71\x33\xb4\x9a\x49\x33\x71\xed\xd5\x6a\x83\x7a\xe1\x31\xee\xe2\x98\x1e\xa3\x45\x40\x66\x7d\xcd\xd4\x10\xa7\xdc\x21\x7d\x2d\xbd\x8b\x52\xae\x69\xc3\x6a\xa5\x0d\x36\xdb\x7a\x26\xde\x2a\xc8\xc1\x20\xe2\x59\xcf\xa6\xb7\x68\xea\x60\xc6\xfa\x5a\xe0\xdd\x21\x72\x0f\xca\xd9\xc4\x06\xc9\xfa\xc4\xe3\xdc\x5b\x6a\x83\x67\x08\xa9\xdd\xa6\x9e\x13\x2e\x5d\xc4\x96\xd8\x71\xf4\x63\xc4\xc9\x3d\xd7\x03\x3a\x5f\x70\x6d\xa0\x76\x7b\x7c\xa4\x33\x14\x2b\xe4\xe3\x00\x2f\x99\x71\x8e\x5d\xe3\x92\xcc\x31\xa7\xb7\xa0\x1b\x5b\x78\x77\xba\xf8\xb5\xa0\x36\x01\x25\x1d\x06\x8d\xe2\xb3\xda\x28\x34\x8f\x14\x00\x15\x16\xc7\x29\xeb\xc5\xab\x58\xaa\x77\x4b\x82\x99\xe3\xdd\x81\x60\x9c\x7a\xe8\xdc\xc3\x36\xc2\xb7\x73\x64\x53\xe6\x3b\xf8\x01\x79\xe0\x77\xcf\x65\x5a\xec\xcb\xd4\x47\x89\x4a\xd7\x0e\x75\xbf\x44\x9a\xad\x56\x83\x28\x5e\xa9\x8c\x54\x09\x5d\xfc\x42\xf0\x91\x13\xb8\x3d\x25\xba\x1f\x10\x04\x42\x31\xd7\x1d\x32\x03\x9b\x0d\xc3\x40\x49\x4c\x53\xd9\xc2\xed\xb1\xce\xe6\xe2\x78\xd0\x33\xc1\x2b\x91\x13\xe5\x87\x4d\x6f\x3a\x38\x98\x13\xfd\xf8\xb8\x65\x1f\x86\x8e\x1a\xec\x25\x71\x43\x24\x0d\x15\x1f\x92\x7e\xd0\xd3\xa1\xe9\xc7\xbc\xbe\xd4\xf5\x43\xae\xcf\x03\x2f\xf4\xb5\xac\xc7\xd6\x3e\xba\x83\x27\xc4\x89\xc3\xe5\x7a\x77\x01\x06\x2a\x9b\x40\x5c\xa4\x33\xf6\x31\x98\x84\x30\x0a\xdd\x28\xc4\xc9\xdd\xb8\x25\x1e\x80\x88\x91\xa9\xe7\xda\x38\x78\x10\x01\xc7\x13\x87\xd8\xd9\x44\x90\x3e\xb3\xe3\xa9\x50\x59\xa6\xd2\x15\x3a\xe3\xc2\x21\x34\x4c\x87\x90\x6d\x9c\x13\xc6\x8c\xbf\x43\x1f\x98\x58\x28\xff\x2f\x11\xa2\xf8\x01\xe5\xcc\xd8\xc3\x74\x74\xcf\x03\x7c\x26\x78\x40\x2c\xd7\x78\x0f\xf4\x7d\xd4\xd7\x20\x35\xf6\x80\x6a\x7b\xcb\xce\xb8\xf0\x02\xd2\xb8\x33\x22\xa6\x3b\x9d\xb1\x87\x36\x76\x05\xfa\xd3\x6e\x67\xe4\x2e\x7b\x66\x36\x17\xda\x9c\x16\x30\x23\x59\xa7\xb3\xc2\x35\xde\x4e\x18\x2c\x3f\x9c\xb4\x38\x3d\x2e\xe5\x0a\x7b\xc8\xf4\x60\xe1\x74\x0a\xd4\xeb\x23\x63\x9d\x79\xb5\x69\xb2\x4e\xdd\xdd\x34\x51\x24\x1f\x30\x4d\xf6\x3b\xa5\xf2\x74\x59\xa7\x3d\x68\xba\xf4\xcc\xd0\xd9\xdc\xce\xc8\x1f\x9b\x3b\x5a\x3a\x0e\xd1\x51\xbc\x7d\xad\xed\x5a\x0a\x0b\xc6\x03\xea\x93\x6c\x9b\x5a\x4b\x5f\xf8\x82\x60\x18\xea\xb9\x9d\x3c\x4e\x69\x10\x6c\xb4\x69\xce\xa2\x0d\xc6\x24\xa0\x9e\x9d\x6c\xdb\x7b\x7a\xe7\x32\x1c\xf4\x09\x3b\x21\xd9\x4d\x08\xf2\x93\xfb\x91\x5f\x94\x4d\xdc\xc1\x22\x11\x0b\xb0\x3b\x27\xe8\xff\x1c\x8c\xde\xf4\xe5\x0d\xe3\x9c\x32\x31\xfa\xf2\x06\x95\x30\xa5\x70\x39\xca\x54\x46\x77\xd4\xe6\x0b\xfd\x65\x40\x96\x62\x09\x00\xa9\x46\x6c\xfc\x6a\xb5\x8c\xf5\xab\xe3\x85\x98\x51\xe4\x0b\x99\xd1\x6e\x61\xa0\x3b\xc1\x86\x43\x92\x8c\x34\xfa\xf3\x2c\x1b\x41\xea\xef\x2c\x5f\x5a\x23\x5a\x4b\x63\x97\x60\x57\xc7\x79\xec\x05\x59\x76\x90\xc8\x82\x14\x2f\x5e\xbf\x4b\xa7\xb1\x42\xb1\x26\xf2\xd8\x58\x74\x8b\x59\xec\xa1\x1e\xfc\x26\xd3\x58\x70\x5a\x07\x79\xac\x90\xd2\x7c\x22\x9b\x71\xad\x95\xc9\x66\xe4\x9d\xa7\xb2\x91\xe8\xc6\x73\xd9\x8c\x6b\x8d\x64\x36\x23\xfe\x9e\xcd\xe6\x56\x94\xee\xd2\xd9\x48\x5c\x6b\xf9\x6c\xc6\xbd\x56\x42\x9b\x91\x77\x9e\xd1\x46\xa2\x5b\x4b\x69\x33\xee\x35\x72\xda\x8c\xb8\x83\xa4\x36\x37\x1c\x3b\xcb\x6a\xd3\x7d\xbb\x7a\x3e\x77\xed\x71\xec\xd4\x21\xbc\x61\xa4\x56\x1a\xfd\xb7\x80\xec\xc9\xa2\xb7\xca\x7b\x5e\x37\xfb\x86\x54\x51\x49\xbf\xe1\x2a\xcb\xbf\xe1\xa2\x76\x02\x0e\xb9\xb0\x20\xff\x07\x75\xed\x7d\xb9\xf0\xd6\x64\x5a\x30\x88\x62\x70\x10\x07\x11\x8c\x83\x18\x88\xa8\xd4\x60\x80\x26\x73\x3d\x64\xc4\x9f\x72\x0d\xd9\xe0\xce\xe4\xa2\x9f\xa9\x35\x9e\x82\x6b\x55\x3d\xa3\x86\x3d\x91\x6c\xb9\x72\xb0\x67\x5d\x17\x0e\xc3\x59\x07\x75\xc3\x90\xb2\x2f\x28\x64\x18\xc6\x78\x95\xda\x01\x74\x6b\xa2\x74\xc8\xa4\xb7\x58\x3e\x1c\xe8\xc7\x6f\xb2\x7a\x18\xce\x3a\x28\x1e\x40\x48\xf3\xb5\x83\x64\x5a\xab\x74\x90\xd4\x9d\x57\x0e\x42\x72\xe3\x85\x83\x64\x5a\xa3\x6e\x90\xb4\xdf\xcb\x06\x75\x25\xe9\xae\x6a\x10\xd2\x5a\x2b\x1a\x24\xf3\x5a\x35\x83\xa4\xee\xbc\x64\x10\x92\x5b\xab\x18\x24\xf3\x1a\x05\x83\xa4\xed\xa0\x5e\x50\xc7\x61\x53\xe5\xc2\xe3\xa3\xf9\x33\xf2\xbd\x2f\x04\xf9\x61\x40\x67\x0f\x53\xc6\xde\xe4\xfa\xda\x81\xe7\x8b\x99\x9a\xdb\x89\x71\x40\x20\x8b\x33\x93\x79\x80\x7e\x36\x93\xe7\x18\xf6\x25\x82\xe9\x04\x7e\x7c\xbc\xa3\x7c\x81\x20\x19\x26\xf7\x79\x1b\x3f\xa5\x6e\xfd\x22\x2c\x7c\x56\x38\x3e\xce\xa1\x4b\x3c\x0e\x12\x79\x49\x5b\x12\xb9\x5c\xe0\x06\x43\x72\x4b\xa7\x44\xd5\x0e\x7a\x9f\x09\x03\x92\xee\x59\xf2\x28\x1f\x83\xa8\x92\xdb\x56\x32\xe9\xb8\x11\x93\x2e\xbc\xd0\xe5\x50\x51\xb5\x6c\x53\x2e\x67\x2d\x65\xde\xab\x46\xcc\x8b\xcb\xcc\x27\x67\xdc\x69\x23\xc6\x45\xa5\xf0\x93\xb3\xed\xa4\x11\xdb\xde\xde\x62\xfa\x04\x03\xf7\xb2\xa9\xc0\x3d\x6f\xd2\xb6\xed\x08\x84\x3d\x53\x00\x08\x7b\x96\xe1\x0f\xf6\xac\x26\xfc\xb0\x5e\x07\x42\x85\x0d\xbc\x60\x65\xbc\xc4\xcb\x8a\xa5\x7c\xc6\x04\x25\x5c\x68\x50\x9f\x8b\x0a\x0f\xcc\x03\xfc\xb0\x66\x49\x5c\x3e\x2a\xf0\x03\xc8\x2b\x02\x40\x92\xa2\xd6\x72\x3d\x9b\x30\xc4\x45\x0f\xd9\x3f\x6e\xcc\x08\xba\xd1\xb2\x00\x64\xc9\x2b\x19\x32\x91\x68\xa6\x3a\x86\xb9\xee\xdd\xa8\x18\xcd\xd6\x9d\x3a\xce\x02\x42\x32\x1d\x67\x39\xd8\xa7\x01\x1d\x77\x00\x42\xb1\x07\x63\x3c\xa8\x8c\xaf\x0b\x80\xa2\x0d\x77\x3f\xcf\xb9\x3b\x4f\xf1\x35\x11\xa6\xa9\x1f\x76\x0d\x31\x9d\x8d\x6f\x3a\xc0\x98\x40\x4a\x25\x70\x49\x68\xd5\x04\xba\x04\x7c\x5a\x84\x95\x0e\xf5\xdd\x37\x89\x2b\x81\xd3\x3a\x00\x96\x84\x94\xe6\x91\xa5\x8c\x6b\x2d\x68\x29\x23\xef\x1c\x5b\x8a\x44\x37\x0e\x2e\x65\x5c\x6b\xa0\x4b\x19\xf1\x77\x78\x29\xb7\xa2\x74\x87\x2f\x45\xe2\x5a\x03\x98\x32\xee\xb5\x10\xa6\x8c\xbc\x73\x88\x29\x12\xdd\x1a\xc6\x94\x71\xaf\x01\x32\x65\xc4\x1d\xa0\x4c\xb9\xe1\xd8\xd9\xa9\xf4\x19\x58\x57\xf3\xa8\x37\xd8\x73\x42\x58\x4c\x78\xf5\xc0\x6a\xd1\xfd\x13\x53\x5e\x8b\xd0\xb2\x9d\xfa\xa7\xd2\x90\x24\x2a\x45\x21\x5c\x65\x55\x21\x5c\x1c\x54\x16\x66\x00\x96\xe0\x6b\x5c\x1e\x76\xb4\x9b\x8e\xc1\xb5\x84\x5e\x70\x16\xa1\xca\x8e\x78\x73\x2d\xa9\x5f\xd2\x41\xd4\xb0\x64\x88\x75\x5e\x70\xda\xd0\xb2\x5c\x31\x56\xf2\x82\x65\x4b\x03\x92\x75\xea\x42\xd6\xcd\xc8\x2e\x0d\xc4\xa0\xcb\x6b\x20\x5b\xbe\xee\xb9\x3a\xed\xfc\x5c\xdd\xea\xe2\x5c\xdd\x72\x39\x34\x42\x81\xc2\x2a\x95\x3e\x56\x33\xe7\xea\x99\xf4\x16\x0b\xa0\x03\xfd\xf8\x4d\xd6\x3f\x56\x17\xe7\xea\x56\x1b\xe7\xea\xd6\x41\xe7\xea\xd6\x57\x3b\x57\xb7\xda\x38\x57\xb7\x0e\x38\x57\xb7\xbe\x9f\xab\x6f\xce\x8a\x2e\xeb\x1e\xab\xcd\x73\x75\xeb\xa0\x73\x75\xeb\xab\x9d\xab\x5b\x6d\x9e\xab\x5b\x07\x9c\xab\x5b\x1d\x9e\xab\x5b\x2d\x9c\xab\xef\x2d\x78\xe4\x5e\x5d\xab\x96\x18\x17\x61\xdd\xc3\xc0\xf3\xd9\x8b\x51\x10\x78\x01\x43\x96\x6b\x7e\x08\x39\xf2\x49\x90\x4c\x45\x6d\x2b\xf3\x13\x35\xbd\xcc\x2d\x08\xe8\xdc\x83\xe8\x5a\x1f\x90\xcf\x8a\x04\x8e\xf1\xf4\x0b\xe1\x4d\xc9\x92\xdc\xb6\x89\x7b\x47\x1b\x93\x05\x32\x7a\x74\x30\xe9\x99\x74\xb0\x26\xab\x42\x51\xe6\x12\xc8\xec\x94\xb2\x8c\x2a\x67\x75\xd1\xbd\xe6\x8e\xeb\xe8\xcc\x68\xe4\x94\x2d\x65\x66\x8d\x4b\xb2\xda\xee\xc3\xff\x77\x27\xcc\xff\x25\x17\xa0\xe8\x6c\x0e\xd9\xd1\x30\x24\xf1\x30\x5c\x7a\x76\xe8\x78\xe8\xf4\xbd\x0c\x93\x7a\x3c\xb5\x49\x07\xf1\x55\x68\x12\x6d\xa3\x81\x6d\xb9\x52\x65\x73\x2b\xb5\x18\x1a\xc5\xe4\x70\x47\xd2\xbf\x28\xa0\x27\xe9\xb4\xd9\xa4\x8f\x67\xd4\x1e\xf9\x09\x7d\xa1\x02\x31\x03\x55\x83\xe4\x8f\xea\x43\x75\x85\x12\x31\xf8\x11\x96\xa9\x48\x7b\xe2\x70\x9c\x78\x00\x69\x47\xda\x4f\x05\x77\x84\xd4\xcd\x5b\xa9\xde\x5b\x6f\xa5\x64\xab\x95\x08\x8a\x5c\xf2\x36\x17\x15\xe1\x16\x65\xc6\xa5\x7e\x55\x34\xdb\xe2\x9b\xa1\x8c\xca\x2e\xf2\xed\xb1\x91\x8b\xd9\x36\xfa\x3d\xb1\x19\x65\x51\xd9\xc9\xa0\x20\x36\x0d\x4e\x8f\x7d\x23\xdf\x97\xeb\xe8\xe6\xd8\x49\x56\xc5\x3d\xa3\x2f\xe5\x50\x38\xfc\x12\x16\x7b\xc6\xdf\xc6\x9a\xbe\xcd\x63\xfb\x34\x1a\x2b\xba\xec\x66\x51\xe4\xf5\x0e\xdc\xfd\xee\xd7\xeb\xd1\x55\xa1\xb3\xdf\x3d\x40\x95\xbd\xc7\xd5\x31\x75\xa1\xa3\x23\xf2\x72\x6e\x7e\x67\x5d\x5f\xed\xf0\xb1\xd8\xea\xb6\xea\x11\xd1\xee\xf0\xae\x20\x2e\xef\xda\x96\x81\x1e\x9f\x75\x0d\xf4\x8c\x59\x07\x40\xcf\x38\xf0\x44\xe6\x5b\x11\xe7\x01\xd5\x9a\xc0\x79\xa4\xf0\x16\x61\x9e\x03\xbd\xf8\x4d\xc2\x3c\x63\xd6\x01\xcc\x03\x42\x9a\x87\x79\x24\xd3\x5a\x30\x8f\xa4\xee\x1c\xe6\x11\x92\x1b\x87\x79\x24\xd3\x1a\x30\x8f\xa4\xfd\x0e\xf3\xa8\x2b\x49\x77\x30\x8f\x90\xd6\x1a\xcc\x23\x99\xd7\x82\x79\x24\x75\xe7\x30\x8f\x90\xdc\x1a\xcc\x23\x99\xd7\x80\x79\x24\x6d\x07\x30\x8f\x3a\x0e\xff\x97\x5f\x9f\xa8\xf6\x04\xf4\x98\x35\xf5\x26\xc5\xd8\x1a\x3e\xad\x87\xbb\x85\x69\xcd\xbc\x51\x71\xd3\xbe\x69\x25\xed\x69\xe6\x49\xfc\x9b\xab\xd1\xc7\xa7\x17\xab\x66\x1e\xc4\x1f\x3f\x41\xcb\x9a\x79\x37\xe4\xd2\x7a\x7a\x96\x35\xf3\x4a\xcf\x27\xeb\xe3\xf5\xd3\xb3\xed\xcf\x8d\xd8\xf6\x71\x74\xd5\x8d\x69\x53\x22\x8e\x0c\x4a\xda\xf6\x97\x66\x5e\xc5\xb2\x2e\x46\x4f\x64\x61\x7c\xdd\x88\x41\x67\x1f\x2e\x2e\xde\x5e\xd6\x5c\xec\xd7\xf1\x7f\x1f\xca\x70\xa6\xe0\xff\x3e\xcb\xf0\xff\xe8\xde\x41\xf8\x7f\x86\xd7\xfb\xe0\x01\x6b\x58\xfb\x3b\x3b\x80\xfc\xa6\x3c\x79\x46\xc3\x48\x70\x88\xcc\x71\x40\xbd\x80\xf2\x87\x43\x78\x5c\xd2\x69\x9d\xaf\x1a\x91\xf4\x57\xf4\x3f\x07\xd1\x7f\x24\x0c\x92\x44\x97\x57\xe3\x91\x4e\xd4\x84\xc9\x35\xdd\x7f\x70\x93\x59\x9c\x3b\xe5\x39\x18\x8e\xeb\xfd\x30\xfc\x70\x76\xfd\xeb\x78\x84\x16\x7c\xe9\xc0\xcd\xf8\x8f\x80\xb9\x20\x7f\x4d\xb2\xde\x25\xe1\x50\xdc\x2d\x70\xc0\x08\xef\x6b\x21\x9f\xe9\xaf\xd3\x84\x38\x42\xbb\x0a\xbe\x33\x1c\xc1\x27\xb0\xb2\x67\xc6\x1d\x14\x3e\x0b\xce\x7d\x9d\xfc\x11\xd2\xdb\xbe\xf6\x2f\xfd\xe6\xad\x7e\xe6\x2d\x7d\xcc\x29\x94\x86\x1a\x58\xea\x0a\xb2\xbe\x66\x8d\xfa\xc4\x9e\xa7\xe9\x75\x4c\x29\x38\xf7\xb5\x5b\x4a\xee\x7c\x2f\xe0\x4a\xe7\xe8\xcb\x29\xfb\x76\xf4\x22\xaf\x1e\x5d\xbc\x80\xc5\x82\x72\x8a\x1d\x9d\x4d\xb1\x43\xfa\xc7\xc6\x11\xcc\xaa\x1f\x74\xfd\x37\x98\x9c\xd6\xe8\xf7\x84\xad\x58\x3d\x50\x40\x9c\x08\x65\x0b\xf8\x34\xe4\x88\x02\x57\x2d\xfd\xc6\xf4\x19\xbe\x15\xd7\x06\xfc\x12\xe4\xbf\x81\xcb\xe8\xec\x77\x5d\xdf\x20\x8f\xa9\x18\x8c\x26\x88\xda\xcb\x93\xfb\x97\x27\x92\x07\xf8\xe6\x43\xe4\x8b\x4f\x24\x60\xd4\x73\x57\xab\x94\x2d\x4b\x3f\xe8\x2f\x4f\x0c\xdf\x9d\x6b\x88\x3f\xf8\x60\xe1\x25\xbe\xd4\x36\x24\x60\xdf\x77\x88\xce\xbd\x70\xba\xd0\x73\xd2\x8e\x4f\x8e\xee\xe1\xa7\x92\x3c\xe8\x1f\x09\xac\x20\xe5\xf4\xf4\x1e\x7e\xaa\x49\x39\x3d\xad\x2a\xe5\xd5\xc9\x3d\xfc\x54\x93\xf2\xea\xa4\xaa\x94\xd7\xe0\xb1\xd7\x15\x3d\xf6\x7a\x8b\xc7\x18\x7f\x70\x08\x5b\x10\x51\xb0\xc5\xe1\x13\x53\xdc\x84\x3a\x6f\x17\x7f\xb8\x6d\x46\xdb\x99\x21\x3a\xc6\x93\x33\x9d\x70\xbd\x89\x67\x3f\x6c\xd6\x9b\xdc\x83\xca\x1e\x07\x85\x05\x67\x72\x4f\x8f\x26\x9b\xfa\x65\xae\x8b\x13\x05\xab\x5e\xe2\x60\x4e\xdd\x04\x4e\xd7\x8f\xd2\x6d\x26\x7a\x2a\x34\x06\xe3\xfb\x1b\xff\x7f\x40\x4a\x1e\xfa\xd0\x8d\x30\xb1\xdd\x70\xb2\xf4\x1d\xb8\xd8\xfc\xcf\x06\x90\x21\x57\x26\xb9\x01\x6b\x62\xbe\xb3\x37\xa6\x79\x77\x77\x67\x40\xc7\x00\x7e\x8c\xa9\xb7\x34\xe3\x05\xc2\x04\x27\x12\xcc\x08\x33\x05\x4b\xc6\xff\x3a\x5d\xfa\xfd\x4d\x87\x69\x83\x74\x3d\x11\xe0\xd0\xe2\x24\x2b\xf1\xb3\x2d\x37\x26\xb9\xf1\xe7\x01\xb6\x89\xdc\xd7\x8b\xdc\x14\xe3\xe5\x4d\x6b\x28\xdb\xa4\x0a\x19\x94\xa5\xae\xcd\xb1\x4e\xc5\xe0\x5d\xaa\x61\xb2\xcb\xa8\x09\xcd\xbe\x50\x8a\x0d\x26\x5a\x88\xa9\x40\x26\x26\xb0\x04\x87\x3e\xda\x1e\xe1\xe4\xff\x97\x58\x8b\xef\xda\xf9\x42\x61\xb8\x53\x4a\x43\x3d\x3f\x8a\xa4\xab\x91\xd9\xc0\x62\xe4\x85\x12\x33\x97\xa0\x1f\x1d\xe2\x22\x63\x74\x2f\x96\x74\xea\xce\x7f\x92\x58\x44\xc9\x13\xa1\xf5\xae\x6b\xa7\x18\xc9\xc6\xeb\xcd\x66\xb0\x77\x6d\xfd\xa2\xe3\x35\x2c\xa7\x48\x7c\xa9\xc7\x76\x4e\xb4\x81\xb4\x04\x71\xaf\xe0\xcc\x71\x82\x61\x57\xcb\x40\x51\xe1\xe0\xbc\x03\x2a\xbe\x41\x0b\xa1\x1f\xb9\xb6\xef\x51\x31\x37\x72\x39\x41\x92\x73\x02\x89\x17\x65\x9d\x8a\x84\xed\x66\x96\x30\x10\xd2\x10\xc1\xb3\xd2\xe3\x26\x47\x19\x59\xaa\x6d\x71\x0e\x53\x7a\xf0\x28\xa9\x8e\xb0\xa0\x68\x84\x3b\x78\x73\xf5\x42\x05\xe3\x59\xf4\x8b\x07\x73\x26\x65\x1b\x4f\xf1\x3d\xd1\x65\x96\xc4\xa8\x5f\x49\x9e\xf6\xac\x9c\x9e\xa2\x5f\x59\x9e\xe2\x9d\xe1\x32\x7a\x46\xfd\x4a\xf2\xa4\x25\xf5\xa4\x15\xf4\xf4\x59\x39\x9e\xa2\xdf\x3a\x4f\x36\x85\x49\xcb\xd5\x4d\xf7\x33\xbe\xc5\x71\xab\x36\xb8\xc5\x01\x12\x39\x29\xea\xa7\xa8\xf4\x6a\xf5\x0b\x0c\xb9\xe8\x76\x19\x0e\xeb\x09\x2f\x62\xc1\xb4\x78\x33\xff\xcc\xcc\x78\x07\xba\x7e\xfb\xfe\xfd\x68\x38\xa1\xd0\xb8\xa4\xae\x39\x09\x5d\xdb\x21\x06\x7c\x34\x3e\xb3\xf4\x4c\x14\xb8\xa4\x37\xa2\xc6\xe4\x89\x1a\x45\xb1\x9e\x19\x27\x00\xb0\x9a\x8a\x5c\xfc\xbf\x01\x00\x00\xff\xff\xf2\x04\xef\x7e\x1a\x68\x00\x00"

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 26650, mode: os.FileMode(420), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

