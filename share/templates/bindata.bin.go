// Code generated by go-bindata.
// sources:
// index.html
// DO NOT EDIT!

// +build bin

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xe4\x5c\x6f\x73\xdb\x36\xd2\x7f\xef\x4f\x81\xf2\x49\x9f\x69\x3b\x25\x55\x3b\x4e\x2f\x97\x4a\xbe\x71\x22\xb7\xd5\x34\xb6\x35\x8e\xdc\xbb\x5e\xa7\xd3\x52\x24\x24\x21\xa6\x48\x1e\x00\xca\x76\x35\xfa\xee\xb7\x00\x01\xfe\x13\x69\x11\x8a\x6c\x6b\x7a\x2f\x1c\x89\x00\xf6\x87\xc5\x62\xb1\xfb\x03\x40\xa5\xfb\x59\xff\xf2\xdd\xe8\x97\xe1\x19\x9a\xf1\x79\x70\x70\xb2\x5c\xbe\x58\xa0\x37\x3d\xe4\x5c\x32\x8e\x43\xfe\x33\xa6\x8c\x44\xe1\x6a\xd5\x95\xd5\x08\x9d\x74\x67\xd8\xf5\xe1\x8b\xf8\x3a\xc7\xdc\x45\xde\xcc\xa5\x0c\xf3\x9e\x95\xf0\x89\xfd\xda\x52\x55\x9c\xf0\x00\xcb\xef\xf0\xb4\x5c\x3a\x7d\x97\xbb\xce\x2c\x62\x3c\x74\xe7\x78\xb5\x42\x91\x84\xef\x76\xf2\x76\x0a\x6e\xc6\x79\x6c\xe3\xff\x24\x64\xd1\xb3\xfe\x65\x5f\x9f\xda\xef\xa2\x79\xec\x72\x32\x0e\xb0\x85\xbc\x28\x14\x62\x3d\x6b\x70\xd6\xc3\xfe\x14\x5b\x45\x49\x81\xdc\xb3\x16\x04\xdf\xc6\x11\xe5\x85\xc6\xb7\xc4\xe7\xb3\x9e\x8f\x17\xc4\xc3\xb6\x7c\xf8\x1a\x91\x90\x70\xe2\x06\x36\xf3\xdc\x00\xf7\x0e\x15\xd0\x72\xf9\xe3\xe8\xfc\x3d\xb2\xba\x9f\x59\xab\x95\x6d\xff\x4a\x26\x68\x70\xf6\xdb\x49\x37\x20\xe1\x0d\xa2\x38\xe8\x59\x6c\x06\xd8\x5e\xc2\x11\x01\x78\x0b\xcd\x28\x9e\xf4\xac\xce\xc4\x5d\x88\x67\x07\xfe\xa9\x43\xfa\x15\x87\x3e\x99\xfc\x66\xdb\x45\xa4\x14\x80\x91\x3f\x31\xeb\x59\x2f\x8f\xee\x5e\x1e\x65\x70\x62\x12\x56\x2b\x8d\xca\xf4\x17\xfb\xe5\x91\x13\x87\x53\x0b\xf1\xfb\x18\x46\x4a\xe6\xee\x14\x77\x44\x81\xb2\x42\x8e\xed\xc6\x71\x80\x6d\x1e\x25\xde\xcc\x2e\xf5\x73\x78\xf4\xcd\x1d\xfc\x6d\xec\x09\xda\x38\x86\xc8\xc7\xc7\x77\xf0\xb7\x19\xf9\xf8\xd8\x14\xf9\xd5\xd1\x1d\xfc\x6d\x46\x7e\x75\x64\x8a\xfc\x1a\xac\xf1\xba\x85\x35\x5e\x37\x58\x83\xf1\xfb\x00\xb3\x19\xc6\x5c\x4f\x0a\xc7\x77\xbc\xe3\x31\x56\xc5\x84\xa2\x0e\x09\x7d\x7c\xe7\x88\x4a\x05\xc4\x3c\x4a\x62\x5e\x94\xfc\xe8\x2e\xdc\xb4\xd4\xaa\x2e\x2c\xc4\xa8\x97\xe3\x7d\x64\x1d\x2a\x56\x09\xc5\xf0\xed\xc8\x39\x74\x8e\xbe\xd1\x05\xce\x9c\x84\xce\x47\xd0\xc0\x87\x35\x67\xcf\x5d\x12\x96\xc4\x96\x4b\xf0\x6a\x67\x74\xfa\xc3\x0f\x67\xfd\x31\x81\xa5\x0d\xcd\x95\x6a\xa9\xe0\x72\x89\x03\x06\x6b\x14\xfa\x53\xe5\xb2\x2c\xf4\x57\x2b\x4b\xaf\xe8\x6e\x27\xd5\x52\x0d\xa4\xa3\x82\xc2\x49\x77\x1c\xf9\xf7\xaa\x30\x74\x17\xc8\x0b\x5c\x06\x86\x86\xaf\x63\x97\xa2\xf4\xc3\xf6\xf1\xc4\x4d\x02\xae\x1f\x19\x87\xe5\xed\xc1\xfc\xc4\x16\xa2\x11\xac\x46\xd1\x9c\x4c\xa1\x10\xa6\x2a\xeb\xd0\x27\x19\x9a\x58\xd8\x30\x2a\x4c\xed\x49\x90\x10\x5f\xb7\xa9\xb4\x52\xe8\x42\x33\x4c\x21\x18\x04\xf6\xdc\xb7\x0f\x51\xec\xfa\x3e\x09\xa7\x76\x80\x27\x10\x79\xf4\x5c\x68\xf9\x71\xc2\x79\x14\x56\x20\x78\x34\x9d\x06\x58\x40\x04\x6e\xcc\xb0\xaf\xe7\x3a\x6d\xac\xec\x9c\x36\x12\xca\xa5\xad\x74\xb1\x4b\xa7\x62\x0e\xff\x4f\x61\x65\xd5\x85\x6e\xa5\x2b\xc4\x6e\xd6\x2d\xa3\x76\x14\x06\xf7\xe5\x26\xd0\x68\x94\xea\x91\x5b\x07\x66\x01\xc4\x1e\x40\x92\xde\x0b\xdd\xae\x41\xed\x8d\x64\x27\x35\xe2\x41\x13\x5a\x12\x83\x19\xb1\x76\x66\xf0\x1c\x98\xf7\x9e\x95\x7e\xfe\xae\xf3\x49\xc5\x98\xcb\x25\xc7\xf3\x38\x00\x39\xa4\x5a\xb2\x37\x6f\xaa\x22\xc8\x81\xa4\x56\xd5\x08\xf4\x01\x0f\xaa\xf8\x13\xf1\x33\x4f\xc8\x27\x37\x73\xc5\xb4\x00\x3d\x30\xbd\x27\xdd\x24\x28\x78\x94\x6e\x0a\x1f\x55\x27\x08\x88\x6e\xe7\x7a\x9c\x2c\xf0\xba\x09\x5d\x15\x56\x44\x96\x64\x6f\x3a\x9d\xdb\xdb\x5b\x07\x46\x44\xe1\xcf\xf1\xa2\x79\x27\x4d\xab\x10\x09\x02\xec\x32\xcc\x3a\xc2\x08\x8c\xff\xc3\x9b\xc7\xbd\x34\x02\x54\x21\x01\x54\xa7\x62\x77\x7d\xc2\x02\xd2\xa8\xa1\x5e\x1b\x10\xb5\x50\xe1\x3b\xc4\x1b\x3a\x25\xa1\x58\x59\x68\x42\x28\xe3\xb2\x74\x7d\x20\x5e\xe4\xe3\x0a\x94\x28\x82\xd0\xba\x36\x6a\xa9\x22\x12\x1c\x82\xc0\x48\xc9\x58\xcc\x9b\x68\xbb\x63\x75\x3f\x55\xc7\x24\xfe\xff\x70\xcc\xe2\xef\xda\xbb\x6f\x12\x73\x52\x75\x5e\x05\xf6\x90\x0b\x2b\xb1\x5a\x07\xce\x4c\xb1\x87\x06\x0a\x5c\x53\x03\x05\x91\xeb\xbb\x8b\xa9\xb1\x85\xb4\xdc\x4e\x4c\xd4\x49\x82\x87\x22\x44\xe1\x11\x1e\xc0\x0a\x2a\xfb\x6d\xce\x57\xa5\x36\x34\xba\x6d\xc8\x63\x2a\x73\x1d\xeb\x14\x16\x4d\x26\xc0\x0a\x20\x93\x3d\x68\x3a\x18\x33\x0e\xe6\x78\x5e\x0a\x44\x0f\xd9\x2c\x13\x48\x8d\xb6\x1e\x06\xcb\xea\x7c\xdb\xa2\x7b\x7f\x62\xd6\x3b\xb4\xaf\xeb\xbc\x64\xe1\xc7\x36\x99\x17\x27\x66\x4a\x0b\x81\xdd\x99\x8c\x18\x9a\x8c\xec\xd8\x64\x87\xdf\x6c\x61\xb3\x98\x99\x29\x0d\xed\x37\x2a\x9d\x3d\x6c\x60\xc9\x5a\x60\x01\xf4\x52\xec\x31\x51\x0f\xa9\xdd\xe6\x6a\xf5\x5d\x95\xa5\x2a\x72\x2a\xf8\xaa\xda\xec\x76\xbe\x3a\xf8\xaa\xb3\x5a\x2d\x97\xa9\x7e\x05\x85\x5d\xc1\xf2\x7f\x1f\xbb\xb0\xcb\x14\x54\x11\x76\x71\x3a\xf9\x02\xfe\x8f\xf0\x09\x9b\xd8\xe5\x52\x5a\x6f\xb5\x12\x65\xef\xd2\xaf\x28\x0a\xdf\x05\xc4\xbb\xe9\x2d\xf9\x8c\x30\x67\xe6\x86\x7e\x80\x65\xc9\x0a\xa1\x83\x74\x33\xfc\x56\xa0\x4a\x79\x67\x04\xe3\x11\xa6\x70\x85\x36\x92\x63\xb7\x54\x8a\x92\xe9\x6c\xb7\x5a\xa5\xaa\xa0\x5c\xbf\xb6\x5a\x55\xa9\x95\x54\x2a\xd7\x42\xa7\x86\x31\x85\x5e\xc1\xdf\x48\x7c\x98\x6f\xe6\x2c\x98\x99\xe5\x72\x24\x4e\x01\x86\x50\x42\xee\xb0\x8f\x2c\x8d\x84\xc0\x4f\x2a\x07\x07\x07\xb5\xc7\x09\x86\x9a\xea\xfc\x00\x82\x2a\x39\x64\x98\xaa\x2a\xcb\x1b\x06\xa8\x59\x38\x10\x8d\x5e\xc4\xf2\x14\x45\x62\xc6\x2e\x75\xe7\x60\x09\xb9\xde\x96\x4b\x39\x25\xc3\x88\x11\x41\xf1\xd0\x8b\xd8\x79\x37\xbc\x0e\x91\x65\x21\x4b\x22\x20\xf9\xaf\xde\x24\x59\xe9\x90\x8b\x4b\x75\x76\x5c\xda\xc4\xd8\x01\xb9\xc1\x76\x2a\x24\x36\x3b\x24\xdf\xa8\x8a\x59\x10\x4e\x31\x82\x5e\x74\x47\x12\x4f\x56\xc3\x93\x26\x7d\xd9\x7a\x93\x5c\xb5\x59\xc7\x19\xf1\x7d\x0c\x3b\x1e\x2b\x00\x2a\x66\x4f\x69\x94\xc4\x96\x02\x2c\x72\x89\xbc\xd6\x26\x10\x0b\x90\x24\x12\x61\x74\x4b\xdd\x18\xf1\x59\x9e\xff\x72\x5e\x2c\x25\x80\x66\x94\x98\x83\x80\x5c\xdb\x18\x54\xb2\xf3\xb8\x9a\xc1\xfb\x38\x70\xef\x61\xa9\x97\xdb\xa1\x12\xe9\x90\x0b\x68\x8d\xce\x88\x49\x13\xe3\xf4\x6b\x49\xc3\xfa\xf6\x05\x40\x0b\xb3\x32\xe6\xa1\x32\x48\x8b\xcd\x48\x35\xb8\xa0\xf7\xc0\xaf\xfa\xf9\x2c\xc1\x1a\x00\x3c\x24\x30\x73\x3f\xd8\x84\x94\x46\x04\x74\x1e\x51\xbc\x09\xaa\x1c\x7a\xab\xbc\x67\x2b\xbb\x5f\x45\xb7\xec\x93\xcc\x1e\x3a\xa7\x63\x16\x05\x09\xc7\xcf\x64\xff\x8b\xc2\x2a\xf9\x44\xfb\x6f\x82\xda\x64\xff\x9c\x73\xe6\x35\xba\xf4\xa4\xcb\xdd\x71\x80\xf5\x22\xbd\x88\xc2\x7f\x63\x1a\xe5\xbd\xa5\xb5\xf2\x5f\x7b\x16\x2d\x30\xb5\xb2\x75\x9b\x2d\x55\x9e\x1d\xe2\xca\x27\x5a\xe8\x9a\xcf\xca\x7a\x15\x9e\x45\xa5\x36\xb7\x5c\xd2\xe9\x88\x8b\xed\xaf\x19\xa6\xa6\x32\x1f\xee\x99\xa9\xc8\x3f\x5d\xc2\x4d\x65\x06\x90\xf1\x2a\x32\x9d\x6c\xe4\x72\xa0\xf9\xc1\x36\xcf\x8e\xb1\xa4\x07\x89\x03\x33\x19\xc9\x21\xba\x0b\x3f\x80\x44\x36\x85\xa8\x08\x4f\x79\x90\x87\x07\xe7\x3d\x44\x31\x51\xff\x91\xdd\xa1\x3f\xd2\x4c\x2b\x8a\xbe\x10\x0d\xbe\x74\xe6\x6e\xfc\xc5\x24\x09\x3d\x71\x72\xf3\x85\x10\xfe\x12\x2d\x11\xc5\x3c\xa1\xe1\x1f\xe0\x12\x9c\xc2\x94\xfe\x84\xef\x91\x05\x55\x36\x30\xb5\xf1\xbd\x7d\x61\xc9\x5e\x9c\x8b\x2c\x6a\x4b\xed\xfc\xf5\xa1\x16\x63\x6c\x85\x8d\x69\x04\x18\xa2\x5f\x46\x29\xe4\xe8\x02\xd2\x78\x6a\x27\x0c\xc7\x9e\x34\x9f\x24\x7d\xe9\x63\x4f\x41\x89\x39\x1e\x7a\xbc\xa0\x52\xde\x4d\x56\xf7\xf9\xae\x7a\x03\xef\x68\xea\x4c\x57\xed\xac\x2f\xe1\x56\x4d\x9d\x65\x75\xe6\xbd\x41\x62\x83\x65\x98\x1e\x0a\xd5\xf4\x2a\x1c\xb3\xa9\xd7\xac\xae\xda\x6b\xc1\x75\x95\xbf\xad\xbe\x5c\xfd\x21\x9c\x4f\xd1\x15\xf9\x01\xcd\x0a\x07\xb2\x1d\x19\x14\x0e\xb2\x74\x6f\xca\x6d\x60\x7f\x66\x4a\x6d\xfa\x93\xa7\x61\x36\xd0\x4f\x4e\x6c\xfa\x84\xdd\xa0\x84\xb9\x53\xdc\x9e\xdf\x48\x45\xff\xfa\xf4\xa6\x3f\x79\x6e\x76\x03\x1a\xec\x88\xdc\x34\x20\xed\x1d\xb7\x01\xd7\xda\x17\x6a\x23\xbd\x7c\x27\xcc\xa6\x01\xe9\x71\x88\x8d\xec\x6c\x1b\x5e\x53\xca\x93\xd5\xe4\x28\x66\x87\x8a\x50\x56\x64\x0c\x0d\xc6\xe0\xb3\x85\x30\x87\x85\x7e\x96\x97\x7f\xda\x06\x37\xe8\x10\x59\x7d\x79\xb1\x0c\xda\x18\x0b\x1f\x21\xeb\x3c\x4a\x42\x2e\xae\x94\xcc\xa5\x5f\x22\xeb\x74\xe1\x92\x00\x38\x02\x35\x95\x3d\x46\x16\xa4\xea\xcf\xb7\x11\x7d\x25\x45\xfd\x6d\x44\xbf\x45\xd6\x28\xe2\xae\xd2\xd8\x9c\x7e\xf9\x10\xd8\xaf\x45\x5c\x2f\x90\x30\x7f\x92\x67\xa3\xac\xde\x88\x89\xf9\x93\x26\x22\xe6\x4f\x14\x0f\xf3\x09\x4d\x2f\x8d\xa0\xb1\xd3\x27\xf4\x42\x9f\x45\xe8\xe5\x8a\xea\x68\x80\x4a\x09\xfa\xc4\x43\xbe\xea\x20\x92\xbe\xc0\xc0\x8b\x0a\x46\xea\x8f\xc5\xaa\x72\xc6\x37\xef\x62\x4d\xcd\xbc\x0b\x5d\xb5\x4e\x65\xda\x13\xcb\x52\xf8\x9b\x27\xf2\x9a\x47\x29\x60\x0d\xc2\xc8\xc7\x0c\x4d\x28\x5e\xbf\x9b\x13\x0a\x0c\x44\x4d\xdd\xfd\x1b\x4a\xeb\xa5\x5f\x6f\xc1\x58\x4b\xca\x56\xa8\x16\xc0\x82\xdf\xae\x11\xad\x16\xc3\x48\xc4\x4a\xa9\x1d\x46\xc2\x32\x76\xd6\x30\x92\x6b\x56\xcf\xdf\x76\x6d\xea\x44\x2c\xc9\x26\x1d\xeb\x72\x7e\x41\x41\xff\xd1\x1d\x81\xcb\x55\x5f\xab\x9e\x6c\xf0\x80\x7e\x32\x60\xac\x29\xf8\x1c\xf4\x97\x98\xd3\xdf\xc1\x13\xd1\xdf\x41\x91\xfe\x0e\x20\xa1\xd0\x89\xeb\x61\xd6\x9e\xfe\x0e\xfe\x37\xe8\xef\xe0\xd9\xe9\xef\x60\x67\xf4\xb7\x01\x69\xef\xe8\xef\x60\x7f\xe8\xef\x60\x67\xf4\xb7\x01\xe9\x71\xe8\xef\x60\x5b\xfa\xdb\x78\xac\x97\x85\x08\xe3\x43\xb4\x61\x0b\x89\x52\x44\x50\xd7\x89\x2f\xb3\x94\xf0\x96\x70\x86\x06\x61\xe7\x32\xe1\x28\xc6\x14\x31\xec\x45\xa1\x5f\xee\xe5\x12\x75\x2b\xd7\xf0\xe3\x6e\xa7\xe4\xb8\x71\x9b\x33\xc3\x87\x15\x19\xba\xde\x0d\xde\xa8\x4b\xd6\xea\x12\xed\xa0\xcf\x3e\x8d\x62\xf6\xf5\x19\xa5\x11\xdd\xd4\xf1\xfb\x88\xd5\xf7\x6a\x4c\x9b\xc9\x04\xb2\x0a\x65\x05\xd2\x4c\x0a\xa4\x59\xd5\x1a\x51\x66\xd2\x48\x99\x89\xa6\xcc\x8a\x2f\x93\x89\x53\x25\xcb\x26\x3c\x76\x5d\x3c\x0d\x2b\x59\x79\x0b\xe2\x52\x3d\x0e\x05\xd9\xc1\x70\xf7\x94\xa7\x12\xd3\x64\x0b\x35\xeb\x92\xc3\xa0\xb7\xbf\x8c\xce\x3e\xc0\xa4\xa3\x79\xe4\x27\x41\x84\x8e\x7f\xa8\x0b\x98\xa0\xdd\xdb\x7b\x8e\xd9\x20\xac\x0f\x96\x9d\x46\x64\xe1\x4b\xad\xa0\xa1\x61\xfb\x40\x5c\xec\xed\xed\x60\x24\x07\x50\xef\xb1\x59\x27\x90\xa4\xb9\x2b\x96\x79\xed\x18\x2a\x23\x90\x98\xcd\xcb\x60\x1d\xb4\x5e\xfb\x93\x27\x9f\xce\x38\x0b\x1f\x1b\xad\xae\x62\x88\xc9\x94\x6a\xf4\x36\x93\xaa\xe0\xb7\x9e\xd6\x3c\x10\xb6\x9a\x84\x87\x46\x53\x19\xcb\xb0\x30\x0a\x03\xe8\x27\x9a\xe2\xb2\xc5\x7d\x19\x9a\x71\x1a\x9a\x1b\x4c\x5e\xe7\x07\x52\xae\x8d\x17\xc8\xd8\xdf\xe4\x03\x29\x70\x9e\xfb\x2f\x48\x80\x32\x21\x61\x3e\x6b\x2d\xdf\x97\xac\xfe\xc9\x90\x75\x83\x6a\xe3\x7c\x1a\xad\x7e\x58\x5f\xd7\x18\x0c\xeb\xec\xb7\x11\x3b\xcd\x93\x26\xcb\x46\x61\xb7\x51\x3c\x05\x37\x5f\x34\xca\xa0\xa7\x41\x90\xf2\x33\xed\xbb\x6a\x7a\x2b\x05\x42\x93\xac\x44\x8f\xa7\x5a\x22\x27\x43\x39\x65\x65\x72\xcb\x1e\xd7\xd7\xbe\xd6\xb4\x98\xca\xcb\x69\x3b\x8f\x2b\xe9\xbe\x43\xb7\x6b\xc6\x2d\x0f\xef\xa1\x60\x51\x33\xbe\x96\xbe\x97\x71\xae\x96\xd8\x26\xbe\x77\x96\x7b\x9d\x09\xb8\x81\xef\xed\xc1\xf1\x87\x78\x37\xd4\xf4\xfc\xe3\x1c\xcf\x9f\xe6\x00\x44\x74\x94\x9f\x80\xc0\x53\x44\xef\xdb\x9f\x7e\xa4\x6a\xfe\xf5\x8f\x3f\x60\x9c\xcf\x7d\xfe\x21\x54\xd8\xd1\x01\x48\x13\xd4\xde\x9d\x80\x08\xf7\xda\x97\x23\x90\xd4\xd5\x77\x72\x06\xd2\x04\xf5\x38\x87\x20\x69\x6f\xcf\xfa\x72\xd3\xf7\x14\x1b\x1f\x98\x88\x5b\xb6\x2d\x64\x7c\x53\x19\x49\x7f\x3e\xf5\xa0\x60\x2e\xe3\x66\xe1\x9c\x00\x0a\xf2\x60\x9f\xd6\x1a\x9d\x13\x80\x48\xd3\x41\x01\x54\xa9\x93\x82\x1b\x12\x8a\xdb\x44\x28\x70\x7e\x22\x22\x23\x95\x38\x7e\x65\xf3\x9e\xb7\xda\x62\xe7\x2f\x84\xbf\x57\x37\x4f\xa6\x6f\x0c\x55\x6e\x93\x04\x54\xdd\x75\x52\xa5\xaa\xcd\xb5\x4f\x9d\x96\xad\x6f\x65\xea\x84\xf7\xe7\xca\x24\x66\xc6\x94\x61\xc8\x9e\x86\x31\x40\x3f\x39\x61\x18\xd2\xc8\x83\x20\x69\x72\x63\x22\xf5\xfc\xeb\x53\x86\x21\x7b\x6e\xc6\x00\x1a\xec\x88\x30\x34\x20\xed\x1d\x5f\x00\xd7\xda\x17\xba\x20\xbd\x7c\x27\x6c\xa1\x01\xe9\x71\xc8\x82\xec\xec\xe9\x5e\x18\x7a\xe1\xe5\xa5\x1e\x16\x77\x2b\x46\x2f\xf3\x0c\x99\x7c\x8f\x68\x38\xe8\x9b\xbe\x54\x23\x24\x8f\x90\x75\xbd\x9d\xe4\x4b\x90\xfc\x70\x76\x65\xfa\xee\x91\x10\x3d\x06\x75\xaf\xb6\xe9\xf3\x15\xb2\x2e\x06\xdb\x08\x7e\x8b\xac\x9f\x07\x57\xa3\x6d\x44\xff\x86\xac\xab\xb3\x0f\xdb\x48\xbe\x46\xd6\x68\x70\x7e\x26\xde\xc2\x36\x15\xfd\x3b\xb2\xde\x5d\x9e\x9f\x9f\x5e\xf4\x53\xfb\x9a\xb3\xb1\x18\x92\x52\xf1\xd2\x26\x66\x85\x2c\x2a\xea\x8c\xa8\x58\xcc\x9a\x98\x58\xcc\x14\x11\x8b\x89\xe0\x61\x31\x73\xc0\x13\x37\xbe\x70\x5e\x22\x1e\xe2\x5d\x0d\x2d\x67\x4a\x5a\x94\xec\x75\xad\x6c\x85\xdd\x88\x76\x0c\xd3\xad\x3b\x19\x52\x12\x51\xc2\xef\xb7\x06\xb8\x20\xde\x16\x97\x4e\x4a\xf8\x03\xf9\x73\x7b\xe1\x2b\xcc\x08\x84\x2e\xbe\x09\x40\xc5\x9f\x75\xc3\x8d\x48\xed\x7d\xd9\x7a\xc3\xda\x8b\xb5\x27\x66\x8f\xea\x37\xee\x35\x3f\xd0\x4b\x6b\x8c\x7e\x9f\xa7\xd7\xa8\xf0\xfa\x59\x91\xe8\xab\xff\x1b\x04\xa0\x4f\x03\x32\x0d\xd5\x6f\x25\xad\x83\x94\x2f\xea\x9f\x55\xbe\x07\xd9\xba\x9f\x56\x8a\xf2\x96\x3f\xaf\x4c\xf5\x17\x02\xea\xf7\x9e\xea\x8c\xb4\xf8\x43\x4d\x17\xd6\xa6\x82\xcb\xe3\x44\x96\xe6\x4f\x52\x66\x9a\xee\x59\xf5\xa0\xff\x1b\x00\x00\xff\xff\x42\x15\xe5\x62\xbd\x49\x00\x00"

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 18877, mode: os.FileMode(420), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

