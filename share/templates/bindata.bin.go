// Code generated by go-bindata.
// sources:
// index.html
// DO NOT EDIT!

// +build bin

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5c\x6d\x73\xdb\x36\x12\xfe\xee\x5f\x81\xf2\xda\x9b\xb4\x13\x52\x89\x63\xf7\x72\xa9\xe5\x1b\x27\x72\x5b\x4d\x63\x47\x93\xd8\xbd\xeb\x75\x3a\x0d\x44\x42\x12\x62\x8a\xe4\x01\xa0\x6c\x55\xc3\xff\x7e\x0b\x10\x7c\x15\x69\x91\x94\xa2\x78\x26\xf9\xe0\xd8\x04\xb0\x2f\x58\x2c\x76\x1f\x2c\xc8\x9c\x7c\x35\x78\xf3\xea\xea\xb7\xd1\x39\x9a\x89\xb9\x7b\x70\xba\x5a\x7d\xbd\x40\x2f\xfa\xc8\x7a\xc3\x05\xf1\xc4\xaf\x84\x71\xea\x7b\x51\x74\xa2\xba\x11\x3a\x3d\x99\x11\xec\xc0\x1f\xf2\xcf\x39\x11\x18\xd9\x33\xcc\x38\x11\x7d\x23\x14\x13\xf3\xb9\xa1\xbb\x04\x15\x2e\x51\x7f\xc3\xd3\x6a\x65\x0d\xb0\xc0\xd6\xcc\xe7\xc2\xc3\x73\x12\x45\xc8\x57\xec\x4f\x7a\xd9\x38\xcd\x6e\x26\x44\x60\x92\xff\x85\x74\xd1\x37\xfe\x63\x5e\x9f\x99\xaf\xfc\x79\x80\x05\x1d\xbb\xc4\x40\xb6\xef\x49\xb2\xbe\x31\x3c\xef\x13\x67\x4a\x8c\x3c\xa5\xe4\xdc\x37\x16\x94\xdc\x06\x3e\x13\xb9\xc1\xb7\xd4\x11\xb3\xbe\x43\x16\xd4\x26\xa6\x7a\x78\x8c\xa8\x47\x05\xc5\xae\xc9\x6d\xec\x92\xfe\x53\xeb\x89\x66\xb5\x5a\xfd\x7c\x75\xf1\x1a\x19\x27\x5f\x19\x51\x64\x9a\xbf\xd3\x09\x1a\x9e\xff\x71\x7a\xe2\x52\xef\x06\x31\xe2\xf6\x0d\x3e\x03\xee\x76\x28\x10\x05\x01\x06\x9a\x31\x32\xe9\x1b\xbd\x09\x5e\xc8\x67\x0b\xfe\xa9\xe2\xf4\x3b\xf1\x1c\x3a\xf9\xc3\x34\xf3\x9c\x62\x06\x9c\xfe\x45\x78\xdf\x78\x76\x78\xf7\xec\x30\x65\x27\x97\x21\x8a\x12\xae\x3c\xf9\xc3\x7c\x76\x68\x05\xde\xd4\x40\x62\x19\xc0\x5c\xe9\x1c\x4f\x49\x4f\x36\x68\x3b\x64\xbc\x71\x10\xb8\xc4\x14\x7e\x68\xcf\xcc\x82\x9c\xa7\x87\x4f\xee\xe0\x67\xa3\x24\x18\x63\xb5\xe4\x7c\x74\x74\x07\x3f\x9b\x39\x1f\x1d\xb5\xe5\x7c\x7c\x78\x07\x3f\x9b\x39\x1f\x1f\xb6\xe5\xfc\x1c\xac\xf1\xbc\x81\x35\x9e\xd7\x58\x83\x8b\xa5\x4b\xf8\x8c\x10\x91\x2c\x8a\x20\x77\xa2\x67\x73\x5e\xe6\x09\x4d\x3d\xea\x39\xe4\xce\x92\x9d\x9a\x51\x4f\xef\xa6\xd3\x93\xb1\xef\x2c\x75\xa3\x43\x17\xc8\x76\x31\x07\xfd\x84\x1f\x98\x63\xcc\x8c\x64\x27\x55\xf4\x99\x2e\x99\x88\x64\x80\x1c\x12\xba\xc9\x88\x39\xf1\xc2\xac\x27\x56\x3c\xf7\x58\xe2\x17\x06\x0e\x16\x04\xf4\x86\x5f\xd8\x74\xc8\x84\x7a\x30\x9d\xf8\xf7\x9f\xc9\xd6\x35\x0a\xf4\xca\xcd\x05\x99\x07\x2e\x50\x22\x3d\x96\xbf\x78\x51\x26\x42\x16\x44\x90\x1e\xc8\x2a\x49\xef\x15\xf4\xa9\x56\xaf\x2c\xf0\x24\x60\xa4\xd4\x06\xad\x3e\x47\x32\xca\x50\x2e\x18\x1d\x4b\x61\xeb\xa3\x4e\x3f\xae\x06\x61\xf0\x77\x6f\xcc\x83\x1f\x4e\x78\x80\xbd\x46\x36\x0d\x03\x41\xd7\x2d\xaa\x98\xdd\x67\x55\x4d\x16\xdb\x54\x0a\x5b\xd7\xe5\x13\x4c\xdf\xc5\x6d\xa7\xef\xfa\xd8\xc1\x8b\x69\xeb\xf9\x27\x74\x1f\xc5\x00\xbd\xd0\x3d\xa8\x24\xa8\xdc\x7a\x8c\x4e\x67\xdd\xf7\x1e\x4e\xc7\x62\x36\xa5\x9e\xf9\x04\x8d\x43\x21\x7c\x0f\x71\x02\x31\xc7\xc1\x6c\x89\x66\xbe\xeb\xfa\xb7\x49\x28\x91\xb9\x91\xbf\xe8\xf5\x6e\x6f\x6f\x2d\xd8\x5a\x0c\x7e\x2c\xdb\x9f\xf7\xe2\x64\xda\x83\x80\x44\x30\x27\xbc\x27\xed\xc6\xc5\xbf\xec\x79\xd0\x8f\x83\xcf\xda\xae\x4d\xd2\x2f\xee\x6e\x8e\xf4\xa1\x60\x19\xe6\xdf\x22\x17\xa6\x43\x20\x81\x54\x46\x2d\xdb\x77\xc3\xb9\x97\x8c\x79\x92\x33\x1e\xa8\x1a\x28\xe8\xa1\xb0\x42\x80\x19\x9e\x73\x58\xe1\x12\xf3\x00\x3b\x0e\xf5\xa6\xa6\x5c\x82\x27\xc7\xdf\x17\x4d\x9c\x1b\xab\x05\x80\xe5\xcc\xb1\xcf\x1c\xc2\x24\x85\x51\x9e\x6e\xd1\x21\x62\x06\xd4\x91\xab\x37\x37\xaa\x35\x7e\x8a\xee\x75\x6a\xf0\x46\xe2\x2a\x6a\xd5\x0b\xde\xc9\x6e\x4c\x1e\x8e\x6f\xc8\xb2\x6f\x5c\x73\x32\xb2\x45\x49\x89\xfb\x5c\x3d\xe3\x56\x11\x40\x4b\xea\xaf\x2d\xc3\x7e\x2c\xe5\x4c\xb6\x30\x14\x10\xb7\x34\x86\x14\xf7\x60\x6d\x61\x07\xe1\x16\xc6\x90\xd4\x2d\xad\xa1\x04\x3e\x58\x73\xd0\x6d\x5c\x83\xb6\x76\x0d\xfa\x90\x5d\x23\xe0\x5b\xd8\x22\xe0\x6d\x6d\x21\xc5\x35\xb1\x45\x5d\x82\x8b\x95\x3b\xac\x4f\x6d\x68\x41\x98\xa0\x70\x78\x42\xe3\xa9\xe9\xca\x34\x68\x4e\x19\x5e\x6e\xcc\x78\x71\x22\xfb\x9b\x8c\x69\xe5\x9c\x74\x41\xe6\x3e\x5b\x6e\xce\x49\xf5\x5c\xcb\xe1\x04\x3a\x01\x11\xde\xa0\x90\xc3\x39\x69\x1b\xc6\x6b\x5b\x13\x7a\x5f\x8d\xae\xb7\x61\x59\xf6\x6f\xe8\x1c\xc2\x79\x95\x4d\xb0\x4d\xf8\x36\x8c\xcb\xce\x02\x9d\x23\xe6\x03\x53\xde\x84\x6f\xb3\x84\xcf\x6d\x46\x03\x91\x3f\xf0\x7c\xc0\x0b\x1c\xb7\xa6\x59\x7f\x81\x19\x92\xa9\x1c\xf5\x91\x2e\x00\x44\xd1\x0f\x00\xd8\xd4\xa8\x26\x8c\xca\xa5\x05\xc4\x99\x9d\x9d\xa7\x3e\x70\xf8\x0b\x8e\xe7\xd6\xd5\xd9\x4f\x3f\x9d\x0f\xc6\xd4\x8b\xa2\x39\xf5\x7a\xe3\xd0\x73\x5c\x62\xc1\x9f\xd6\x07\xbe\x5a\x11\x97\x93\x28\x02\xca\xa4\x43\x35\x7a\x4e\x06\x8a\x4e\x4b\x3a\xf5\xf4\x51\x4c\x9e\xce\x74\x4d\xa4\xf7\xdd\xc1\x77\xbd\x28\x5a\xad\xe2\x3d\x96\xdb\x74\x58\x1e\x05\xff\x1c\x63\x67\x4a\xd4\x39\x0c\xf6\x9c\x5e\x09\x98\xf3\xcf\xf0\x3b\x8a\x60\xf6\x6a\xe3\x44\x91\x6c\x7b\x15\xff\x89\x7c\xef\x95\x4b\xed\x9b\xfe\x4a\xcc\x28\xb7\x66\x58\xea\xa6\x5a\x22\x84\x0e\xe2\x9a\xc9\x4b\xc9\x55\xd1\x5b\x57\x60\x1a\xb9\x9d\xb1\xd4\x46\x69\xdf\x50\xa9\x18\xa1\xee\x52\xab\x58\x15\x94\xe9\xd7\x54\xab\xf2\xa1\x50\x29\x95\x69\x61\xcc\x8e\x0d\x78\xbc\x92\x05\xa1\x11\xa8\x48\xef\x88\x83\x8c\x64\x34\x32\xd0\x5a\x0d\x49\x9f\xaf\x8d\x83\xfc\xa1\xa4\xa2\xd8\x94\x1c\x06\x4e\x5b\x6a\x9a\x1c\x34\x80\x83\x3e\x65\xa4\xcc\x75\x57\x7a\x00\x69\xc1\x35\x4d\xdc\x72\x50\x1d\xe2\x3d\x48\xe2\xf1\x6a\xa5\x96\x66\xe4\x73\x2a\xe8\x82\xa0\xaf\x03\x0b\x02\x8f\x87\x0c\x81\xc7\x1c\xc9\x7f\x74\x36\x42\x71\x29\x40\xd6\x1d\xd6\xfa\x40\x54\x9c\x5c\x64\x5b\x45\x91\x41\x8e\x54\x85\x38\x24\x43\xbb\x1c\x65\xea\xac\x98\xed\x11\xb9\x54\xd2\x73\xae\x40\x85\x44\x8b\x28\xca\xc5\x8a\xd9\x71\xe9\x38\x33\xf6\xe1\x30\x33\x37\x9f\x14\x72\x82\x8a\x9a\xb3\xe3\x7c\x8c\xc1\x55\x11\x26\xcb\x36\x13\xb0\xb5\x50\x45\x0e\x39\x45\x94\x3f\x57\xc9\x30\x98\x4f\x4a\xa6\x8c\x20\x46\x75\xaa\xa7\x5e\x10\xca\x1c\xe5\x87\x01\xba\x4f\xc1\xc2\xf9\x35\x47\x64\xba\x78\x4c\xdc\x52\x1e\x76\x88\x8b\x97\x6b\x67\xd0\x0d\x3c\x50\xfc\x6f\x7a\xc8\x5b\xcb\xed\xb1\x75\x9d\x8a\xd3\x6d\x75\xe2\x2f\xc7\x20\xf4\x1a\xdc\x60\x90\xad\x13\x6c\xa3\x9a\x83\x25\x92\x06\x33\x3d\xff\x96\xe1\x00\xe5\x15\x8d\xc7\x2b\x17\xbd\x5f\x60\x1c\x5f\xd0\x85\xcf\xc8\x8e\x24\xae\x41\x94\x34\x43\x7d\xf2\xe5\x06\xb8\xc8\x3f\xd2\x6a\x7b\xd6\xd9\x98\x03\x30\x14\x64\xbb\x65\xbf\xcc\x6d\xcf\xfd\x2c\xfb\x8e\x24\xde\xb7\xec\x09\x28\x49\x23\xc4\xe9\x09\xc4\x28\x08\x57\x3a\x3a\x5e\xfa\xde\x7f\x09\xf3\x33\x2d\x66\x3e\xc0\xd3\xb5\x75\x87\x76\xea\xc8\xbc\xa3\x99\x89\xf4\x2a\x43\x3d\xb1\x9c\x74\x31\x2b\xa2\xa2\xdc\xb3\xec\x4c\x23\xa7\x9c\x55\xa9\x08\x04\x23\xe0\x9c\xcf\xbe\x69\x4b\xf4\x6e\xc9\x5b\xd3\xfc\x1b\x53\xd1\x9a\x68\x08\x39\xbd\x4c\xd4\x4b\x67\xaf\x26\x9b\x5d\xf1\x88\xb4\x2e\xad\xdc\x50\xe2\x2d\x95\xac\x20\x81\x49\x2f\x61\xd8\x9b\x42\x52\x82\xa7\x2c\x8f\xc1\x83\xf5\x9a\x72\x21\xfb\x3f\xf0\x3b\xf4\x3e\x06\x13\xb2\xe9\x91\x1c\xf0\xad\x35\xc7\xc1\xa3\x49\xe8\xd9\x82\xfa\xde\x23\x49\xfc\x2d\x5a\x21\x46\x44\xc8\xbc\xf7\xe0\x09\x82\xc1\xc2\xfe\x42\x96\x48\x1e\xa8\x4d\xd8\x74\xe3\xa5\x79\x69\x28\x29\xd6\x65\x21\xe7\x08\x67\x7d\xae\x79\x57\x33\x8a\x9b\x28\xe1\x00\x53\x74\x8a\x5c\x72\x30\x24\xc7\x09\x8e\x36\x21\x27\x41\x5c\xb2\x51\x09\x34\x7e\xec\x6b\x56\x72\x9d\x47\xb6\xc8\xa9\x94\x89\x49\xfb\xbe\xd9\x95\x34\x70\x90\x3a\x61\x49\xd7\xce\x64\x49\xc7\xaa\x13\x96\xf6\xb5\x97\x66\x52\x0f\x36\x26\x27\x35\x52\xa5\x67\xd6\x49\x4d\xfb\xca\x52\x73\xae\xab\xfd\x2d\xfa\x36\x7a\x2f\x9d\x4f\x23\x32\xf5\x0b\x86\xe5\x6e\x58\x7a\x2a\x7c\x1c\xa4\x11\xa5\x2d\x7c\x83\x83\x66\x57\xf4\x36\x98\x3c\x00\xf0\x06\x4a\x74\xc0\x6e\xf9\xb3\xf4\x17\x08\xb7\x29\xa9\x0f\x26\x3b\x42\x70\xc0\x68\xbf\x00\x6e\x3b\x81\x9f\x21\x7e\x83\xed\xb4\x63\xf8\xa6\xa2\xc4\x3e\xd1\xdb\x76\x02\x77\x04\xde\x94\x12\xdd\xb0\x5b\x01\x07\x94\x93\xbf\x5c\x25\x26\x43\x75\x1e\x12\xd5\x98\x49\xcc\x16\xd2\x50\x06\xfa\x55\x5d\xf2\x27\xd6\xb9\x41\x4f\x91\x31\x50\xaf\x90\x80\x2e\xad\x89\x0f\x91\x71\xe1\x87\x9e\x20\x4e\x17\xea\x67\xc8\x38\x5b\x60\xea\x02\x06\x62\x6d\x69\x8f\x90\xbc\x76\xfa\xa6\x0b\xe9\xb1\x22\x75\xba\x90\x7e\x8f\x8c\x2b\x5f\x60\xad\x71\x7b\x78\xe9\x40\xaa\xb9\x96\x99\x26\x07\x32\x9d\x49\x96\x6d\xd3\xfe\x56\x48\xd3\x99\xd4\x01\x4d\x67\xa2\x71\xa6\x43\x59\xfc\xc6\x02\x0c\xb6\x06\x94\x5d\xaa\x0a\x52\xe6\x49\x08\x55\xc1\x9c\x6a\xb4\x29\x39\x90\xc5\xa5\xae\x41\xe5\x41\x4b\x5b\x2e\x89\x1e\xeb\x80\xab\x39\xfc\x2d\x84\xb9\x79\xa8\x62\x2f\x52\xc0\xa1\x6f\x0c\x3d\xdf\x21\x1c\x4d\x18\x21\xeb\xf1\x0d\x14\x18\xca\x9e\xaa\xc8\x86\xe2\x7e\xe5\x9d\x1d\x70\x75\x41\xd9\x32\x22\x04\xbe\xf1\x85\x69\x11\x0f\x36\x98\x47\x28\x1d\xbe\x72\x1e\x21\x4f\x41\x64\xcd\x54\xae\x79\x35\xcc\xdc\xb5\xad\x43\xb9\xb3\xea\x74\xac\x44\x0e\x99\x82\xce\x47\xf7\x04\xa1\x36\x6f\xa5\x7a\x6a\xc0\x3d\xfa\xa9\x7d\xbf\xa6\xe0\xa7\x40\xe9\xb4\x3b\x4a\x1f\x3e\x04\x94\x3e\xec\x84\xd2\xf3\xb7\x48\x5f\x50\xfa\x26\xe8\x36\xdc\x15\x4a\x1f\xee\x1b\xa5\x6f\x27\xf0\x33\x44\xe9\xc3\x9d\xa3\xf4\xe1\xbe\x51\xfa\x76\x02\x77\x84\xd2\x87\xdd\x51\x7a\x6d\x85\x35\x0d\x5a\xad\x8b\x99\xa3\x06\x14\x05\xd3\xd8\xbe\x6b\xce\x1d\xf3\x59\x9a\xf2\x5e\x52\xc1\xd1\xd0\xeb\xbd\x09\x05\x0a\x60\x52\xb1\x61\x8b\x52\xde\xa0\x93\xd2\x85\xfb\xf8\xa4\x57\xb8\x39\x0f\xf8\xd6\x8a\x8c\xb0\x7d\x43\x36\xea\x92\x8e\x7a\x83\x76\x20\x73\xc0\xfc\x80\x3f\x3e\x67\xcc\x67\x9b\x04\xbf\xf6\x79\xb5\xd4\xd6\xe8\x9e\x4e\x20\xf5\x31\x9e\xc3\xf6\x34\x87\xed\x75\x6f\x2b\x64\x4f\x6b\x91\x3d\x4d\x90\xbd\x86\xf5\x74\x62\x95\x31\x7d\x73\x2c\x9e\x12\x37\x80\x5f\x15\xb4\xc3\xd1\xee\x81\x5b\xd1\x2b\xe3\x11\x7a\x6d\x15\x12\x43\x2f\x7f\xbb\x3a\x7f\x07\x4b\x8b\xe6\xbe\x13\xba\x3e\x3a\xfa\xa9\xe2\x1d\x6e\xa9\xdd\xcb\xa5\x20\x7c\xe8\x55\xbe\x54\x7b\xda\xab\xe5\x2c\x3d\xa6\x11\x6b\x18\x58\xcd\xbb\x02\x4a\x16\xa4\xbd\x1c\x5e\xa9\x09\x54\xfb\x65\x2a\x64\x40\x5c\x81\xe5\x66\xae\x9c\x43\x69\x06\x8a\x67\xbd\xb3\xaf\x33\xad\xd6\xfe\x74\xef\xcb\x19\xa4\x41\x62\xa3\xd5\x75\xa4\x68\xb3\xa4\x09\xf7\x26\x8b\xaa\xd9\x77\x5e\xd6\x2c\xdc\x35\x5a\x84\xfb\x66\x53\x9a\xcb\x28\x37\x8b\x16\xac\xf7\xb4\xc4\x45\x8b\x3b\x2a\x00\x93\x38\x00\xd7\x98\xbc\xca\x0f\x14\x5d\x13\x2f\x50\x11\xbe\xce\x07\x62\xc6\x59\x8e\xbf\xa4\x2e\x4a\x89\xa4\xf9\x8c\x52\x4e\x2f\xd8\x7c\x4b\x86\x55\x13\x6a\xe2\x78\x09\xaf\xea\x29\x3d\xae\x30\x16\x49\xf2\xdb\x46\xde\x71\x26\x6c\xb3\x65\x34\xef\x26\x8a\xc7\xcc\xdb\x6f\x18\x6d\xce\x33\xd7\x8d\x31\x58\xe2\xb7\x7a\x69\x4b\x0d\x52\x93\xb4\x25\x99\x4f\xb9\x45\x2d\x85\x76\xc8\xd2\xd2\x16\xbd\x6d\x90\xf8\x59\xdd\x46\x2a\x6e\xa5\x6e\xde\x56\xd0\x7d\x67\x2e\x57\xc7\xb5\x38\xb5\xfb\x82\x44\xc5\xdc\x1a\xfa\x5d\x8a\xa8\x1a\xf2\x6e\xe3\x77\xe7\x99\xc7\xb5\x61\xde\xc2\xef\x1e\x40\xf1\x46\xbe\x21\xdc\xb5\x7a\x73\x41\xe6\x0f\xa0\x7c\x23\xb5\xe8\x50\xbf\x49\x5e\x83\xfe\x52\xbb\xd9\x74\xa0\x07\x4b\xed\xa8\x78\x23\x39\xed\xb7\x7a\xb3\xa5\xc4\xcf\xb0\x7c\x23\xb7\xd3\x8e\xeb\x37\x71\x9c\xd8\x67\x01\x67\x4b\x89\x3b\xaa\xe0\xc4\x5a\x7c\xe2\x97\xe4\x14\x7a\xea\xf0\x66\x9d\xd3\x96\xe6\x47\x46\x5a\x97\x95\xe4\x95\xe9\x1a\xcd\x3d\xb3\x6d\x5d\x02\x99\xab\x28\x9f\xab\x80\x40\x43\x96\xe8\xe2\xde\x56\x15\x10\x20\x79\x8c\x68\x5d\x15\x04\x7a\x75\x19\xe4\x86\x7a\xf2\x46\x17\x1a\xac\x5f\xa8\x4c\xc8\x85\xa3\x4d\xa9\x66\x91\x8d\xea\x50\xf0\x90\xc4\xd5\x97\x41\x4d\xa9\x1b\x5f\x75\x55\x11\xff\xa8\xaf\x2c\xdb\xbe\x10\x57\xbe\x86\xd4\x8a\x54\xbd\x97\x96\xef\xaa\xbf\x2f\x9c\x84\xae\x5b\x52\x30\x5e\x50\xee\x3e\xa2\x0a\x47\x3d\x00\xb8\x15\xf0\xce\x68\x6b\xc4\x1f\x00\xd8\x02\x25\x3a\x60\xad\xdc\x87\x51\x5f\xe0\xd6\xa6\x04\x3c\xe2\x3b\x42\x5b\xc0\x68\xbf\x60\x6b\x3b\x81\x9f\x21\xd6\x82\xdd\xb4\x63\xa8\xa5\x82\xc4\x3e\x91\xd6\x76\x02\x77\x04\xb4\x94\x12\xfb\x7c\xa1\xed\x6b\x3b\x6b\xb5\x89\xbc\x54\x6b\xf5\xb2\xd9\x88\xab\xf7\xdc\x46\xc3\x41\xdb\x97\xbe\x24\xe5\x21\x32\xae\xbb\x51\x3e\x03\xca\x77\xe7\x6f\xdb\xbe\x1b\x27\x49\x8f\x40\xdd\xb7\x5d\x64\x1e\x23\xe3\x72\xd8\x85\xf0\x7b\x64\xfc\x3a\x7c\x7b\xd5\x85\xf4\x1f\xc8\x78\x7b\xfe\xae\x0b\xe5\x73\x64\x5c\x0d\x2f\xce\xe5\x57\x10\x6d\x49\xff\x89\x8c\x57\x6f\x2e\x2e\xce\x2e\x07\xb1\x7d\xdb\x83\xd5\x00\xd2\x64\xfe\xb6\x2e\xe0\x39\x94\x20\xfb\x5a\x21\xd5\x80\xd7\xa1\xd4\x80\x6b\x90\x1a\x50\x89\x51\x03\x6e\x81\x27\x6e\xfc\xe0\xa3\x10\x3e\xe5\x4b\x48\x09\x5d\x5b\xe0\xa8\x69\xaf\x2b\x69\x4b\xd0\x4f\x8e\xe3\x84\x75\x16\x32\x62\xd4\x67\x54\x2c\x3b\x33\xb8\xa4\x76\x87\x7b\x48\x4d\xfc\x8e\xfe\xd5\x9d\xf8\x2d\xe1\x10\xb9\x3c\xb1\x89\x81\x8e\x3f\xeb\x86\xbb\xa2\x95\x57\xa8\xeb\x03\x2b\xef\x5a\xf7\x8c\x8e\xf5\xff\xb6\x54\xf1\x0d\x70\xdc\xd3\xea\x13\xe0\x64\x8f\x4a\xaf\x9f\x15\xbe\x7d\x86\x4d\x48\xe4\x3e\xb0\xce\x5c\x3a\xf5\xf4\xe7\xd8\xf1\x97\xcd\xd9\x97\xdb\xaf\x81\xb6\xea\xeb\x6d\xd9\xde\xf0\x0b\xee\x58\x7f\x49\xa0\x3f\x29\xd7\xc5\xf3\xfc\xb7\xe0\x18\xf6\xa6\x66\x97\xc5\x89\x14\x02\x68\x74\x1c\x9f\x80\x93\x49\xff\x3f\x00\x00\xff\xff\x97\x2c\x58\x11\x47\x50\x00\x00"

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 20551, mode: os.FileMode(420), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

