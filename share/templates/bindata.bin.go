// Code generated by go-bindata.
// sources:
// index.html
// DO NOT EDIT!

// +build bin

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5c\x7b\x73\xdb\x36\x12\xff\xdf\x9f\x02\xe5\xb5\x37\x6d\xa7\xa4\x1c\x3f\x7a\xb9\x54\xf2\x8d\x63\xb9\xa9\xa6\xb1\xad\x49\xe4\xdc\xf5\x3a\x9d\x06\x22\x21\x09\x31\x45\xf2\x08\x50\xb6\xaa\xe1\x77\xbf\x05\x08\x3e\x45\x5a\x24\xa5\x28\x9e\x49\xfe\x90\x25\x12\xd8\x07\x16\x8b\xdd\x1f\x16\xa4\xbb\x5f\xf5\x6f\x2e\x46\xbf\x0d\x2f\xd1\x8c\xcf\xed\x83\xb3\xd5\xea\xeb\x05\x7a\xd1\x43\xc6\x0d\xe3\xc4\xe1\xef\x88\xcf\xa8\xeb\x84\x61\x57\x36\x23\x74\xd6\x9d\x11\x6c\xc1\x0f\xf1\x73\x4e\x38\x46\xe6\x0c\xfb\x8c\xf0\x9e\x16\xf0\x89\xfe\x5c\x53\x4d\x9c\x72\x9b\xc8\xdf\x70\xb5\x5a\x19\x7d\xcc\xb1\x31\x73\x19\x77\xf0\x9c\x84\x21\x72\x25\xfb\x6e\x27\xed\xa7\xd8\xcd\x38\xf7\x74\xf2\xbf\x80\x2e\x7a\xda\x7f\xf4\xdb\x73\xfd\xc2\x9d\x7b\x98\xd3\xb1\x4d\x34\x64\xba\x8e\x20\xeb\x69\x83\xcb\x1e\xb1\xa6\x44\xcb\x52\x0a\xce\x3d\x6d\x41\xc9\xbd\xe7\xfa\x3c\xd3\xf9\x9e\x5a\x7c\xd6\xb3\xc8\x82\x9a\x44\x97\x17\x3f\x20\xea\x50\x4e\xb1\xad\x33\x13\xdb\xa4\xf7\xcc\x38\x54\xac\x56\xab\x5f\x46\x57\xaf\x91\xd6\xfd\x4a\x0b\x43\x5d\xff\x9d\x4e\xd0\xe0\xf2\x8f\xb3\xae\x4d\x9d\x3b\xe4\x13\xbb\xa7\xb1\x19\x70\x37\x03\x8e\x28\x08\xd0\xd0\xcc\x27\x93\x9e\xd6\x99\xe0\x85\xb8\x36\xe0\x4f\x19\xa7\xdf\x89\x63\xd1\xc9\x1f\xba\x9e\xe5\x14\x31\x60\xf4\x2f\xc2\x7a\xda\xf1\xd1\xc3\xf1\x51\xc2\x4e\x4c\x43\x18\xc6\x5c\x59\xfc\x43\x3f\x3e\x32\x3c\x67\xaa\x21\xbe\xf4\x60\xac\x74\x8e\xa7\xa4\x23\x6e\x28\x3b\xa4\xbc\xb1\xe7\xd9\x44\xe7\x6e\x60\xce\xf4\x9c\x9c\x67\x47\x87\x0f\xf0\xd9\x28\x09\xfa\x18\x0d\x39\x9f\x9c\x3c\xc0\x67\x33\xe7\x93\x93\xa6\x9c\x4f\x8f\x1e\xe0\xb3\x99\xf3\xe9\x51\x53\xce\xcf\xc1\x1a\xcf\x6b\x58\xe3\x79\x85\x35\x18\x5f\xda\x84\xcd\x08\xe1\xf1\xa4\x70\xf2\xc0\x3b\x26\x63\x45\x9e\x70\xab\x43\x1d\x8b\x3c\x18\xa2\x51\x31\xea\xa8\xd5\x74\xd6\x1d\xbb\xd6\x52\xdd\xb4\xe8\x02\x99\x36\x66\xa0\x1f\x77\x3d\x7d\x8c\x7d\x2d\x5e\x49\x25\x6d\xba\x4d\x26\x3c\xee\x20\xba\x04\x76\xdc\x63\x4e\x9c\x20\x6d\x89\x14\xcf\x5c\x16\xf8\x05\x9e\x85\x39\x01\xbd\xe1\x0b\xeb\x16\x99\x50\x07\x86\x13\x7d\xff\x19\x2f\x5d\x2d\x47\x2f\xdd\x9c\x93\xb9\x67\x03\x25\x52\x7d\xd9\x8b\x17\x45\x22\x64\x40\x04\xe9\x80\xac\x82\xf4\x4e\x4e\x9f\x72\xf5\x8a\x02\xbb\x9e\x4f\x0a\xf7\xe0\xae\xcb\x90\x88\x32\x94\x71\x9f\x8e\x85\xb0\xf5\x5e\x67\x1f\x57\x83\xc0\xfb\xbb\x33\x66\xde\x4f\x5d\xe6\x61\xa7\x96\x4d\x03\x8f\xd3\x75\x8b\x4a\x66\x8f\x59\x55\x91\x45\x36\x15\xc2\xd6\x75\xf9\x04\xc3\xb7\x71\xd3\xe1\xdb\x2e\xb6\xf0\x62\xda\x78\xfc\x31\xdd\x47\x31\x40\x27\xb0\x0f\x4a\x09\x4a\x97\x9e\x4f\xa7\xb3\xf6\x6b\x0f\x27\x7d\xb1\x3f\xa5\x8e\x7e\x88\xc6\x01\xe7\xae\x83\x18\x81\x98\x63\x61\x7f\x89\x66\xae\x6d\xbb\xf7\x71\x28\x11\xb9\x91\xbd\xe8\x74\xee\xef\xef\x0d\x58\x5a\x3e\x7c\x0c\xd3\x9d\x77\xa2\x64\xda\x81\x80\x44\x30\x23\xac\x23\xec\xc6\xf8\xbf\xcc\xb9\xd7\x8b\x82\xcf\xda\xaa\x8d\xd3\x2f\x6e\x6f\x8e\xe4\x22\x67\x19\xdf\xbd\x47\x36\x0c\x87\x40\x02\x29\x8d\x5a\xa6\x6b\x07\x73\x27\xee\x73\x98\x31\x1e\xa8\xea\x49\xe8\x21\xb1\x82\x87\x7d\x3c\x67\x30\xc3\x05\xe6\x1e\xb6\x2c\xea\x4c\x75\x31\x05\x87\xa7\x3f\xe6\x4d\x9c\xe9\xab\x04\x80\xe5\xf4\xb1\xeb\x5b\xc4\x17\x14\x5a\x71\xb8\x79\x87\x88\x18\x50\x4b\xcc\xde\x5c\x2b\xd7\xf8\x19\x7a\xd4\xa9\xc1\x1b\x89\x2d\xa8\xf3\x92\x1e\xf3\xe7\x84\xa4\x2c\x4a\x16\x74\x5c\xb3\xf5\x7e\xcc\x61\x4d\xb6\xb0\x06\x10\x37\x34\x86\x10\xf7\x64\x6d\x61\x7a\xc1\x16\xc6\x10\xd4\x0d\xad\x21\x05\x3e\x59\x73\xd0\x6d\x5c\x83\x36\x76\x0d\xfa\x94\x5d\xc3\x63\x5b\xd8\xc2\x63\x4d\x6d\x21\xc4\xd5\xb1\x45\x55\x16\x8b\x94\x3b\xaa\xce\x5f\x68\x41\x7c\x4e\x61\x87\x84\xc6\x53\xdd\x16\xb9\x4e\x9f\xfa\x78\xb9\x31\xad\x45\xd9\xea\x6f\x6b\x61\x10\x5a\xaf\xc8\xdc\xf5\x97\x9b\x13\x4f\x35\xd7\x62\x38\x81\x46\x80\x7d\x77\x28\x60\xb0\x19\xda\x86\xf1\xda\xd2\x84\xd6\x8b\xe1\xed\x36\x2c\x8b\xfe\x0d\x8d\x03\xd8\x94\xfa\x13\x6c\x12\xb6\x0d\xe3\xa2\xb3\x40\xe3\xd0\x77\x81\x29\xab\xc3\xb7\x5e\x56\x67\xa6\x4f\x3d\x9e\xdd\xd5\x7c\xc0\x0b\x1c\xdd\x4d\x52\xfb\x02\xfb\x48\xe4\x6b\xd4\x43\x6a\x97\x1f\x86\x3f\x01\x2a\x93\xbd\xea\x30\x2a\xd6\x0f\x10\xf3\xcd\x74\xd3\xf4\x81\xc1\x2f\xd8\x83\x1b\xa3\xf3\x57\xaf\x2e\xfb\x63\xea\x84\xe1\x9c\x3a\x9d\x71\xe0\x58\x36\x31\xe0\xa7\xf1\x81\xad\x56\xc4\x66\x24\x0c\x81\x32\x6e\x90\x37\x1d\x2b\x45\x3e\x67\x05\x9d\x3a\x6a\xbf\x25\xb6\x60\xaa\xf0\xd1\xf9\xfe\xe0\xfb\x4e\x18\xae\x56\xd1\x1a\xcb\x2c\x3a\x2c\xf6\x7b\x7f\x8e\xb1\x35\x25\x72\xb3\x05\x6b\x4e\xcd\x04\x8c\xf9\x17\xf8\x0e\x43\x18\xbd\x5c\x38\x61\x28\xee\x5d\x44\x3f\x91\xeb\x5c\xd8\xd4\xbc\xeb\xad\xf8\x8c\x32\x63\x86\x85\x6e\xf2\x4e\x88\xd0\x41\x54\x18\x79\x29\xb8\x4a\x7a\x63\x04\xa6\x11\xcb\x19\x0b\x6d\xa4\xf6\x35\x95\x8a\x60\xe8\x2e\xb5\x8a\x54\x41\xa9\x7e\x75\xb5\x2a\xee\xfc\xa4\x52\xa9\x16\xda\xec\x54\x83\xcb\x91\xa8\xfa\x0c\x41\x45\xfa\x40\x2c\xa4\xc5\xbd\x91\x86\xd6\x0a\x45\x6a\x13\xad\x1d\x64\x77\x1e\x25\x15\xa5\x18\xf1\x9f\x35\xd4\x34\xde\x4d\x00\x07\xb5\x95\x48\x98\xab\xa6\x64\x97\xd1\x80\x6b\x92\xb8\x45\xa7\x2a\x58\x7b\x10\xc7\xe3\xd5\x4a\x4e\xcd\xd0\x65\x94\xd3\x05\x41\x5f\x7b\x06\x04\x1e\x07\x69\x1c\x8f\x19\x12\x7f\x54\x36\x42\xd1\x7e\x5f\x14\x17\xd6\xda\x40\x54\x94\x5c\xc4\xbd\x92\x4a\x82\xe8\x29\xab\x6d\x48\x84\x76\xd1\x4b\x57\x59\x31\x5d\x23\x62\xaa\x84\xe7\x8c\x40\x85\x58\x8b\x30\xcc\xc4\x8a\xd9\x69\x61\xcf\x32\x76\x61\xc7\x32\xd7\x0f\x73\x39\x41\x46\xcd\xd9\x69\x36\xc6\xe0\xb2\x08\x93\x66\x9b\x09\xd8\x9a\xcb\x4a\x86\x18\x22\xca\x6e\x9e\x44\x18\xcc\x26\x25\x5d\x44\x10\xad\x3c\xd5\x53\xc7\x0b\x44\x8e\x72\x03\x0f\x3d\xa6\x60\x6e\x93\x9a\x21\xd2\x6d\x3c\x26\x76\x21\x0f\x5b\xc4\xc6\xcb\xb5\x8d\xe6\x06\x1e\x28\xfa\x9b\xec\xe4\xd6\x72\x7b\x64\x5d\xab\x64\x0b\x5b\x9e\xf8\x8b\x31\x08\xbd\x06\x37\xe8\xa7\xf3\x04\xcb\xa8\x62\xf7\x88\x84\xc1\x74\xc7\xbd\xf7\xb1\x87\xb2\x8a\x46\xfd\xa5\x8b\x3e\x2e\x30\x8a\x2f\xe8\xca\xf5\xc9\x8e\x24\xae\x41\x94\x24\x43\x7d\xf2\xe9\x06\xb8\xc8\x3e\xd2\x6c\x3b\xc6\xf9\x98\x01\x30\xe4\x64\xbb\x69\xbf\xce\x2c\xcf\xfd\x4c\xfb\x8e\x24\x3e\x36\xed\x31\x28\x49\x22\xc4\x59\x17\x62\x14\x84\x2b\x15\x1d\xaf\x5d\xe7\xbf\xc4\x77\x53\x2d\x66\x2e\xc0\x53\x04\x59\x1d\x84\xeb\x0f\x6b\x0e\x00\x1d\xa8\x25\x12\x90\xe2\xca\x93\x83\x0b\x79\xe5\x67\xd4\xe0\xb3\x3c\x3c\xca\x5c\x8b\xc6\x24\x84\x8a\xe1\x15\x4a\x3e\xd0\xe3\x96\x11\xff\x9b\xa6\x44\x6f\x97\xac\x31\xcd\xbf\x31\xe5\x8d\x89\x06\x90\xdc\x8b\x44\x9d\x64\xf4\x72\xb0\xe9\x81\x0e\x4f\xaa\xd0\xd2\x1f\x05\xf0\x92\x59\x0b\x32\x99\x70\x17\x1f\x3b\x53\xc8\x4e\x70\x95\x26\x34\xb8\x30\x5e\x53\xc6\x45\xfb\x07\xf6\x80\xde\x47\xa8\x42\xdc\xfa\x56\x74\xf8\xce\x98\x63\xef\xdb\x49\xe0\x98\x9c\xba\xce\xb7\x82\xf8\x3b\xb4\x42\x3e\xe1\x81\xef\xbc\x07\x97\xe0\x3e\xcc\xf0\xaf\x64\x89\xc4\xce\x5a\x87\xd5\x37\x5e\xea\xd7\x9a\x94\x62\x5c\xe7\x92\x0f\xb7\xd6\xc7\x9a\xf5\x39\x2d\xbf\x9a\x62\x0e\x30\x44\x2b\xcf\x25\x83\x47\x32\x9c\x60\x8f\x13\x30\xe2\x99\xd2\x7e\x32\x93\x46\x97\x3d\xc5\x4a\xcc\xf3\xd0\xe4\x19\x95\x52\x31\x49\xdb\x37\xbb\x92\x06\x0e\x52\x25\x2c\x6e\xda\x99\x2c\xe1\x58\x55\xc2\x92\xb6\xe6\xd2\x74\xea\xc0\x0a\x65\xa4\x42\xaa\xf0\xcc\x2a\xa9\x49\x5b\x51\x6a\xc6\x75\x95\xbf\x85\xdf\x85\xef\x85\xf3\x29\x68\x26\xbf\xa0\x5b\xe6\x3c\xa5\x23\xe3\xc8\x41\x12\x5a\x9a\xe2\x38\xd8\x71\xb6\x85\x71\xfd\xc9\x13\x40\x71\xa0\x44\x0b\x10\x97\xdd\x54\x7f\xc1\x72\x9b\xb2\x7b\x7f\xb2\x23\x28\x07\x8c\xf6\x8b\xe4\xb6\x13\xf8\x19\x02\x39\x58\x4e\x3b\xc6\x71\x32\x4a\xec\x13\xc6\x6d\x27\x70\x47\x28\x4e\x2a\xb1\x25\x88\xcb\x01\x82\x22\x0a\x10\xd3\xe5\x8b\x98\x9d\xc5\x46\x15\xf6\xe2\xb3\x85\xb0\x98\x86\xde\xc9\xb3\xfd\xd8\x4c\x77\xe8\x19\xd2\xfa\xf2\xc9\x11\xd0\xa5\x31\xf1\x11\xd2\xae\xdc\xc0\xe1\xc4\x6a\x43\x7d\x8c\xb4\xf3\x05\xa6\x36\x80\x21\xbf\x29\xed\x09\xd2\x00\x93\x7c\xd3\x86\xf4\x54\x92\x5a\x6d\x48\x7f\x44\xda\xc8\xe5\x58\x69\xdc\x1c\x67\x5a\x90\x73\x6e\x45\xca\xc9\xa0\x4d\x6b\x92\xa6\xdd\xa4\xbd\x11\xe4\xb4\x26\x55\x88\xd3\x9a\x28\xc0\x69\x51\x3f\x7a\x50\x01\x3a\x1b\x7d\xea\x5f\xcb\x9a\x52\xea\x49\x08\x95\xe1\x9d\x72\xd8\x29\x38\x90\xc5\xb5\xaa\x4a\x65\xd1\x4b\x53\x2e\xb1\x1e\xeb\xc8\xab\x3e\x0e\xce\xc5\xbb\x79\x20\x83\x30\x92\x08\xa2\xa7\x0d\x1c\xd7\x22\x0c\x4d\x7c\x42\xd6\x03\x1d\x28\x30\x10\x2d\x65\x21\x0e\x45\xed\xd2\x3b\x5b\x00\xec\x9c\xb2\x45\x68\x08\x7c\xc1\xfd\xd6\x80\x61\x8d\x71\x04\xc2\xe1\x4b\xc7\x11\xb0\x04\x4d\x56\x0c\xe5\x96\x95\xe3\xcd\x5d\xdb\x3a\x10\x2b\xab\x4a\xc7\x52\x08\x91\x2a\x68\x7d\x74\x4f\xe0\x72\xf1\x96\xaa\x27\x3b\x3c\xa2\x9f\x5c\xf7\x6b\x0a\x7e\x0a\xb8\x4e\xdb\xc3\xf5\xc1\x53\x80\xeb\x83\x56\x70\x3d\x7b\xae\xf4\x05\xae\x6f\xc2\x70\x83\x5d\xc1\xf5\xc1\xbe\xe1\xfa\x76\x02\x3f\x43\xb8\x3e\xd8\x39\x5c\x1f\xec\x1b\xae\x6f\x27\x70\x47\x70\x7d\xb0\x03\xb8\x5e\x59\x73\x4d\xa2\x57\xe3\xf2\xe6\xb0\x06\x45\xce\x46\xa6\x6b\xeb\x73\x4b\x3f\x4e\x72\xdf\x4b\xca\x19\x1a\x38\x9d\x9b\x80\x23\x4f\x8c\x4e\x5a\x38\x2f\xe5\x06\x75\x0b\x67\xf1\xe3\x6e\x27\x77\xa8\xee\xb1\xad\x15\x19\x62\xf3\x8e\x6c\xd4\x25\xe9\x75\x83\x76\x20\xb3\xef\xbb\x1e\xfb\xe1\xd2\xf7\x5d\x7f\x93\xe0\xd7\x2e\x2b\x97\xda\x18\xe6\xd3\x09\xe4\x40\x9f\x65\x40\x3e\xcd\x80\x7c\xd5\xda\x08\xe2\xd3\x4a\x88\x4f\x63\x88\xaf\xf0\x3d\x9d\x18\x45\x70\x5f\x1f\x94\x27\xc4\x35\x70\x58\x09\xed\x60\xb8\x7b\x04\x97\xf7\xca\xa8\x87\x9a\x5b\x09\xc9\xd0\xcb\xdf\x46\x97\x6f\x61\x6a\xd1\xdc\xb5\x02\xdb\x45\x27\xaf\x4a\x9e\xe1\x16\xda\xbd\x5c\x72\xc2\x06\x4e\xe9\x43\xb5\x67\x9d\x4a\xce\xc2\x63\x6a\xb1\x86\x8e\xe5\xbc\x4b\x30\x65\x4e\xda\xcb\xc1\x48\x0e\xa0\xdc\x2f\x13\x21\x7d\x62\x73\x2c\x16\x73\xe9\x18\x0a\x23\x90\x3c\xab\x9d\x7d\x9d\x69\xb9\xf6\x67\x7b\x9f\x4e\x2f\x09\x12\x1b\xad\xae\x22\x45\x93\x29\x8d\xb9\xd7\x99\x54\xc5\xbe\xf5\xb4\xa6\xe1\xae\xd6\x24\x3c\x36\x9a\xc2\x58\x86\x99\x51\x34\x60\xbd\xa7\x29\xce\x5b\xdc\x92\x01\x98\x44\x01\xb8\xc2\xe4\x65\x7e\x20\xe9\xea\x78\x81\x8c\xf0\x55\x3e\x10\x31\x4e\x93\xfd\x35\xb5\x51\x42\x24\xcc\xa7\x15\x72\x7a\xce\xe6\x5b\x32\x2c\x1b\x50\x1d\xc7\x8b\x79\x95\x0f\xe9\x87\x12\x63\x91\x38\xbf\x6d\xe4\x1d\x65\xc2\x26\x4b\x46\xf1\xae\xa3\x78\xc4\xbc\xf9\x82\x51\xe6\x3c\xb7\xed\x08\x8c\xc5\x7e\xab\xa6\xb6\x70\x43\x68\x92\xdc\x89\xc7\x53\xbc\x23\xa7\x42\x39\x64\x61\x6a\xf3\xde\xd6\x8f\xfd\xac\x6a\x21\xe5\x97\x52\x3b\x6f\xcb\xe9\xbe\x33\x97\xab\xe2\x9a\x1f\xda\x63\x41\xa2\x64\x6c\x35\xfd\x2e\x41\x54\x35\x79\x37\xf1\xbb\xcb\xd4\xe3\x9a\x30\x6f\xe0\x77\x4f\xa0\x8a\x23\x1e\x1e\x6e\x5b\xc6\xb9\x22\xf3\x27\x50\xc7\x11\x5a\xb4\x28\xe4\xc4\x4f\x48\x7f\x29\xe2\x6c\xda\xd9\x83\xa5\x76\x54\xc5\x11\x9c\xf6\x5b\xc6\xd9\x52\xe2\x67\x58\xc7\x11\xcb\x69\xc7\x85\x9c\x28\x4e\xec\xb3\x92\xb3\xa5\xc4\x1d\x95\x72\x22\x2d\x9e\xca\xf3\x73\x3f\xfb\xa4\x71\xd9\x47\x9c\x6d\xb6\xa0\xb1\x9a\xd2\x48\x88\xb7\x6d\xb9\x63\x2e\x23\x7a\xa6\xda\x01\x37\xd2\xa4\x16\xb5\x36\xaa\x76\x00\x49\x55\xb9\x03\x9a\x54\xbd\xe3\x8e\x3a\xe2\x0c\x17\x6e\x18\xbf\x52\x91\x79\x73\x7b\x98\x42\x71\x22\xed\xd5\xa2\xb2\x21\x88\x7f\x56\x27\x85\x4d\x1f\x48\x2b\x9e\xfe\x09\x5e\x65\xc7\x7f\x85\xa6\x3a\xc7\x74\x65\x6a\xd6\x3e\x45\x2b\x23\x7e\x3a\x47\x5c\x1e\x6b\x8d\x8d\x86\xec\x09\x40\x23\x50\xa2\x05\x32\xca\xbc\xe1\xf4\x05\x1c\x6d\x4a\x97\x43\xb6\x23\x6c\x04\x8c\xf6\x0b\x8d\xb6\x13\xf8\x19\x22\x23\x58\x4d\x3b\x06\x46\x32\x48\xec\x13\x17\x6d\x27\x70\x47\xb0\x48\x2a\xf1\x49\x1e\x48\xfb\xda\x4c\xef\x9a\x44\x9c\x85\x35\x7a\x58\x6c\xc8\xe4\x73\x6a\xc3\x41\xbf\xe9\x43\x5b\x82\xf2\x08\x69\xb7\xed\x28\x8f\x81\xf2\xed\xe5\x9b\xa6\xcf\xb6\x09\xd2\x13\x50\xf7\x4d\x1b\x99\xa7\x48\xbb\x1e\xb4\x21\xfc\x11\x69\xef\x06\x6f\x46\x6d\x48\xff\x81\xb4\x37\x97\x6f\xdb\x50\x3e\x47\xda\x68\x70\x75\x29\x5e\x67\x68\x4a\xfa\x4f\xa4\x5d\xdc\x5c\x5d\x9d\x5f\xf7\x23\xfb\x36\xc7\x9d\x1e\xe4\xcb\xec\x21\x9b\xc7\x32\x70\x41\xb4\x35\x02\x9d\x1e\xab\xc2\x9c\x1e\x53\x90\xd3\xa3\x02\x71\x7a\xcc\x00\x4f\xdc\xf8\xe6\x46\x2e\x8e\x8a\x87\x88\x62\xba\xa6\xe8\x4c\xd1\xde\x96\xd2\x16\x60\x9c\xe8\xc7\x88\xdf\x5a\xc8\xd0\xa7\xae\x4f\xf9\xb2\x35\x83\x6b\x6a\xb6\x38\x3e\x54\xc4\x6f\xe9\x5f\xed\x89\xdf\x10\x06\x91\xcb\xe1\x9b\x18\xa8\xf8\xb3\x6e\xb8\x11\x2d\x3d\xf9\x5c\xef\x58\x7a\x44\xba\x67\x98\xac\xfe\x49\x52\xc9\x5b\xbd\x51\x4b\xa3\x97\x7a\xe3\x35\x2a\xbc\x7e\x96\x7b\x9b\x19\x16\x21\x11\xeb\xc0\x38\xb7\xe9\xd4\x51\x2f\x58\x47\xef\x2a\xa7\xef\x62\xbf\x06\xda\xb2\xf7\xb1\xc5\xfd\x9a\xef\x64\x47\xfa\x0b\x02\xf5\x92\xb8\xaa\x79\x67\xdf\xee\xc6\xb0\x36\x15\xbb\x34\x4e\x24\x58\x40\xc1\xe4\x68\x77\x1e\x0f\xfa\xff\x01\x00\x00\xff\xff\x51\xf7\x1c\x51\xfe\x4f\x00\x00"

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 20478, mode: os.FileMode(420), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

