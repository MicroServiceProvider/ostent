// Code generated by go-bindata.
// sources:
// index.html
// DO NOT EDIT!

// +build bin

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5d\x7b\x73\xdb\x36\x12\xff\xbf\x9f\x02\xe5\x5c\x6f\xda\x5e\x49\xda\x8e\x73\x97\x69\x25\xdd\x24\x96\xae\xc7\x39\xdb\xd1\xc4\x76\xee\x3a\x9d\xce\x0d\x24\x42\x12\x12\x8a\x64\x09\xd0\x8f\xd3\xe8\xbb\xdf\x82\x6f\x8a\xa4\x24\xbe\xd0\x78\x92\xcc\xd8\x91\x40\xec\xeb\x07\x2c\xb0\xbb\x80\xe4\xcd\xc6\x24\x0b\x6a\x13\xa4\x84\xff\xff\xd7\x77\x39\x5d\x13\x65\xbb\x1d\x30\x17\xdb\xa3\xcd\x46\x1b\x63\x8e\xb5\xb0\x19\x5a\xf5\xa8\x99\xd8\xe6\x76\x5b\xa0\x5e\x39\x8c\xdb\x38\xa4\xc7\x68\xe5\x91\xc5\x50\xd1\x15\xc4\x29\xb7\xc8\x50\x89\x9f\xa2\x98\x6b\xdc\xb0\xdd\x2a\xa3\x62\xdb\x40\xc7\x95\x82\x2c\x0c\x22\xbe\x1a\x98\xf4\x1e\xcd\x2d\xcc\xd8\x50\xf1\x9c\x07\x44\x1e\x41\x39\x93\x98\x20\x59\x9d\x39\x9c\x3b\x6b\x65\xf4\x15\x42\xd9\x6e\x73\xc7\xf2\xd7\x36\x62\x6b\x6c\x59\xea\x29\xe2\xe4\x91\xab\x1e\x5d\xae\xb8\x32\xca\x76\xdb\x6c\xe8\x02\x85\x0a\xb9\xd8\xc3\x6b\xa6\x5d\x62\x5b\xbb\x26\x4b\xcc\xe9\x3d\xe8\xc6\x56\xce\x83\x2a\x7e\xad\xa8\x49\x40\x49\x8b\x41\xa3\x78\x9d\x6d\x14\x9a\x07\x0a\x80\x0a\xab\xd3\x98\xf5\xea\x65\x28\xd5\xb9\x27\xde\xc2\x72\x1e\x40\x30\x8e\x11\xba\x74\xb0\x89\xf0\xfd\x12\x99\x94\xb9\x16\x7e\x42\x0e\xe0\xee\xd8\x4c\x09\xb1\x8c\x31\x8a\x54\xba\xb5\xa8\xfd\x31\xd0\x6c\xbb\x1d\x05\xe3\x15\xcb\x88\x95\x50\xc5\x2f\x04\x2f\x39\x81\xc7\x73\xa2\xba\x1e\x41\x20\x14\x73\xd5\x22\x0b\xb0\x59\xd3\x34\x14\x8d\x69\x2c\x5b\xc0\x1e\xea\xac\xaf\x4e\x47\x03\x1d\x50\x09\x40\x4c\x5e\x14\xd1\xb4\xb0\xb7\x24\xea\xe9\x69\xcf\x18\xfa\x56\x76\xb0\xd7\xc4\xf6\x51\x62\xa8\x78\x11\xf5\x83\x9e\x16\x8d\x5f\xe6\xf5\xa5\xb6\xeb\x73\x75\xe9\x39\xbe\xab\xa4\x3d\x2a\xfb\xa8\x16\x9e\x11\x2b\x9c\x2c\xe1\xa0\xd9\xce\x83\x87\x81\xd6\x24\x30\x3a\x09\x24\x87\xd8\xcc\x7c\x98\x8b\x76\x30\xd0\xd1\xd3\xb0\x25\xe2\xcc\xc8\xdc\xb1\x4d\xec\x3d\x89\x61\xc7\x33\x8b\x98\xa9\x3b\x24\xc8\x99\xa1\x43\xd4\x96\x99\xe9\x0a\x9d\x71\xe9\x44\x1a\xc7\x13\xc9\xd4\x2e\x09\x63\xda\x3f\xa1\x0f\xb8\x17\xca\xff\x8b\x84\x64\x70\x40\x39\x33\x0e\x30\x9d\x3c\x72\x0f\x5f\x08\x1e\x30\xa2\x3b\xbc\x47\xea\x21\xea\x5b\x90\x1a\x22\x90\xb5\xbd\x67\x30\xae\x1c\x8f\x74\x0e\x46\xc0\x74\x2f\x18\x07\x68\x43\x28\xd0\x5f\xf6\x83\x91\x7b\x3b\xd0\x53\x8f\xe8\xdf\x39\xc0\x3b\x99\x54\xdf\xb0\xb5\xd7\x33\x06\x4b\x11\x27\x3d\x3a\xc9\x75\xb2\xda\xb6\x71\x12\xe6\xcf\xe7\x40\xbd\x3b\x3f\x76\x99\xd7\x73\x96\x5d\x6a\x79\xce\x92\x91\xdc\xc2\x59\x0e\x83\x52\xdb\x69\x76\x69\x5b\x39\xcd\x40\xf7\xad\xe2\xd6\x46\x7e\x2f\xee\x6e\xf1\x3c\x44\x27\xe1\x56\xb6\xb3\x83\x65\x58\x30\xee\x51\x97\xa4\x5b\xd6\x4e\x28\xc3\x57\x04\xc3\x54\xcf\xed\xea\x61\x78\x83\x60\xd3\x8d\xe3\x17\x65\x34\x25\x1e\x75\xcc\x68\x0b\x3f\xd0\x3b\x17\xed\xa0\xf7\xd8\xf2\xc9\x7e\x42\x90\x1f\x3d\xcf\xe2\x92\xd9\xd7\x2d\x9c\x0c\xf6\x66\xe3\x61\x7b\x49\xd0\x9f\x2c\x8c\x7e\x1c\x26\xcf\xb5\x4b\xca\xc4\x5c\xcc\x9b\x77\x84\x61\xa5\x4b\x54\x6a\x00\x7a\xa0\x26\x5f\xa9\x2f\x3c\xb2\x16\x0b\x02\x48\xd5\x42\x28\xb6\xdb\x75\xa8\x6d\x13\x4c\x42\x46\x01\x32\x49\xac\x5b\xc1\x40\xb5\xbc\x1d\x78\xa2\xb1\x4e\xf0\x48\xdf\xc5\x0a\xa5\xbf\xd3\x80\x2a\x47\x5b\x88\x73\xd7\x60\x9e\xe4\x40\xf7\x8a\xac\x25\x44\xba\x20\xc5\x09\x17\xf5\xa3\xe3\x5c\xa1\x58\x17\x81\x6e\x28\xba\xc7\x30\xb7\x2d\x82\x9f\x71\x9c\x0b\xd0\x49\x08\x74\x85\x94\xee\x23\xdd\x94\x6b\xa3\x50\x37\x25\x97\x1e\xeb\x06\xa2\x3b\x0f\x76\x53\xae\x0d\xa2\xdd\x94\xf8\x4b\xb8\x5b\x70\x11\x99\xf1\x6e\x20\xae\xb7\x80\x37\xe5\xde\x28\xe2\x4d\xc9\xa5\x87\xbc\x81\xe8\xde\x62\xde\x94\x7b\x83\xa0\x37\x25\x96\x10\xf5\xe6\xa6\xa3\xb4\xb0\x37\xde\xc3\xeb\x87\x78\xb7\x0e\xc7\x56\x13\xc2\x3b\x46\x1a\xc5\xd9\xff\xf0\xc8\x81\x30\xbb\x52\xde\x37\x2d\xc3\x73\x88\x1e\x8b\xf1\x39\x34\xa6\x01\x3a\xbc\x69\x1c\xa1\x43\xb0\x2c\xc8\xff\x45\x6d\xf3\x50\xb0\x5c\x19\x6d\x0b\x06\xc1\x88\xb4\xe2\x20\x86\xa6\x15\x03\x31\x46\x0d\x18\xa0\xd9\x52\xf5\x19\x71\xe7\x5c\x41\x26\xc0\x19\xbd\x19\xa6\x6a\x4d\xe7\x00\x6d\x56\xcf\xa0\xe1\xc0\xb8\xca\x49\x2d\xcc\x85\xec\xcc\x62\xbc\x90\x90\x58\x8c\x29\xfb\x88\x7c\x86\x61\xaa\xd7\x49\x2e\x40\xb7\x2e\x72\x8b\x54\x7a\x8f\xf9\x45\x4b\x1c\x3f\xe3\xf4\x62\xbc\x90\x90\x5d\x80\x90\xee\x93\x8b\x84\x69\xa3\xdc\x22\xa1\x96\x9e\x5a\x08\xc9\x9d\x67\x16\x09\xd3\x06\x89\x45\x42\xfb\x25\xaf\xd8\xf5\x0d\x99\x69\x85\x90\xd6\x5b\x56\x91\x30\x6f\x94\x54\x24\xd4\xd2\x73\x0a\x21\xb9\xb7\x94\x22\x61\xde\x20\xa3\x48\x68\x25\x24\x14\xd9\x79\xd8\x55\x3e\xb1\xd9\xe8\xdf\x23\xd7\xf9\x48\x90\xeb\x7b\x74\xf1\x34\x67\xec\xc7\x5c\x5f\xd3\x73\x5c\xe1\xaf\xb9\x5d\x19\x7b\x04\x02\x3b\x3d\xf2\x03\xf4\xbd\x1e\xdd\x8a\x38\x14\x1b\xc6\x0e\x9c\x01\x68\xb3\x79\xa0\x7c\x85\x20\x54\x26\x8f\x79\x73\xdf\xc7\x08\x7f\x14\xc6\x7e\x55\x3a\x55\x2e\xa1\x4b\x38\x25\x22\xd1\x51\x5b\x34\x88\xb9\x31\x1c\x8d\xc9\x3d\x9d\x93\xac\xa2\xd0\xfb\x42\xd8\x12\x75\x4f\x43\x4b\x9c\x57\x91\xd4\x0d\xe4\x9b\x1a\x7a\xda\x89\xa1\x57\x8e\x6f\x73\xc8\xc9\xe4\x59\x9a\x8b\x75\xeb\x1a\xfd\xb2\x13\xa3\xc3\xf4\xf5\x99\x98\x7c\xde\x89\xc9\x41\xe2\xfd\x4c\x2c\x3e\xeb\xc4\xe2\xd7\xf7\x98\x3e\x9b\x41\x7e\xd1\xd5\x20\x7f\xd3\x93\xc5\x07\xcb\x24\xe6\xa2\x58\x25\x31\x17\x69\x91\xc4\x5c\x34\xac\x91\xec\x66\xa9\x9b\x0d\xf0\xd5\x60\x81\xbe\xc6\xeb\x9a\xf5\x86\x94\x09\x8a\xb8\x50\xaf\x39\x97\x6c\x0d\x63\xe9\xe1\xa7\x1d\x4b\xc2\xe4\x36\x53\x23\x01\x79\x65\x55\x9a\x28\xe5\x36\x6c\xc7\x24\x0c\x71\xd1\x23\xe9\x1f\x36\xa6\x04\x72\xb4\x2c\xa9\x04\xe5\x95\xf4\x99\x08\x7d\x63\x1d\xfd\x5c\x77\x39\x2a\x06\xce\xbd\x57\xc7\x85\x47\x48\xaa\xe3\x22\x57\x9b\xea\x40\xc7\x3d\x55\xab\x10\xc1\xb0\x68\x75\x0c\xd6\x25\xd5\xac\x02\xdc\xdf\xe4\xe0\xce\x53\x7c\x02\x65\xb0\xb9\xeb\xcb\xae\x83\x5d\x4c\xef\x24\x14\xc2\x40\x4a\xad\x0a\x98\xd0\xaa\x8b\x12\x18\xf0\xe9\xb1\xf6\xd5\x16\xbb\xcf\xb8\xf8\x05\xd0\x49\xa8\x7e\x09\x29\xdd\x97\xbf\x52\xae\x8d\xea\x5f\x29\xb9\xf4\x02\x58\x20\xba\xf3\x0a\x58\xca\xb5\x41\x09\x2c\x25\xfe\x52\x03\x2b\xb8\x88\xcc\x22\x58\x20\xae\xb7\x2a\x58\xca\xbd\x51\x19\x2c\x25\x97\x5e\x07\x0b\x44\xf7\x56\x08\x4b\xb9\x37\xa8\x84\xa5\xc4\x12\x4a\x61\xb9\xe9\x28\xed\x6c\xfd\x02\xac\x6b\x78\x60\xed\x1d\x38\xd9\x2c\x27\xbc\x79\x62\x8d\xe8\xfe\x8d\x29\x6f\x44\x68\x98\x56\xeb\xb3\x75\x88\x1b\x8b\x59\x23\x34\xa6\x69\x23\xbc\x69\x95\x37\xc6\x6b\x20\x04\xcf\x82\xd5\x75\xbb\x03\xea\x78\x46\xee\x44\xfc\x82\xb3\x18\xb8\xf4\xa0\x3a\xd7\x12\xa3\x14\x4f\xa9\x8e\x25\xc3\xc8\xe7\x05\xc7\x0d\x3d\xcb\x15\x33\x27\x2f\x38\x69\xe9\x40\xb2\x4a\x6d\x88\xc7\x19\xd9\xa7\x81\x98\x82\x79\x0d\x92\x96\x4f\xe2\x76\x00\x95\x7e\x3b\xc0\x90\x71\x3b\xc0\xb0\x39\x34\x42\x06\xc3\x6a\xe5\x46\x46\x37\xb7\x03\x52\xe9\x3d\x66\x48\x2d\x71\xfc\x8c\x13\x24\x43\xc6\xed\x00\xa3\x8f\xdb\x01\x46\xab\xdb\x01\xc6\x1f\x76\x3b\xc0\xe8\xe3\x76\x80\xd1\xe2\x76\x80\xf1\xe5\x76\x40\x95\x6f\xc8\x4c\x8c\x8c\x3e\x6f\x07\x18\xad\x6e\x07\x18\x7f\xd8\xed\x00\xa3\xcf\xdb\x01\x46\x8b\xdb\x01\x86\xc4\xdb\x01\x46\x0f\xb7\x03\x0e\x66\x44\xc9\xbe\xdd\x28\xd9\x98\x96\xd5\xc7\xc7\x9e\xe3\xb2\x1f\x26\x9e\xe7\x78\x0c\x19\xb6\xfe\xd6\xe7\xc8\x25\x5e\xe4\x8a\x4a\x25\xf3\xb3\x6c\xc4\x99\x5b\x10\xd0\xa5\x03\xa3\x6b\xbc\x45\x2e\x2b\x13\x38\xc5\xf3\x8f\x84\x77\x25\x2b\xe1\x56\x25\xee\x0d\xed\x4c\x16\xc8\x18\xd0\xd1\x6c\xa0\xd3\xd1\x8e\xac\xfa\x59\x9b\x4d\x20\xd8\x2b\xe6\x6d\x34\x73\xda\x17\x74\xe9\xee\xc0\x8f\x2e\xb4\x4e\xce\xe9\x62\x66\xc6\xf4\x48\x56\xd5\x88\xfe\xd9\x9e\x31\xf7\xa7\xdc\x70\x05\xa7\x7b\xc8\x0c\x26\x25\x09\x27\xe5\xda\x31\x7d\xcb\x41\xe7\x3f\x27\x83\x96\x3d\xe0\x2a\xd2\xc1\x68\x67\x68\x22\x6d\x83\x69\x6e\xd8\x89\xca\x7a\x25\xb5\x98\x28\xe5\xe4\xf0\x24\xa1\xff\xa1\x84\x9e\xc4\x4e\x54\xa4\x0f\xfd\xeb\x80\xfc\x88\xbe\x54\x81\x90\x41\x56\x83\xe8\xbf\x2c\x86\xd9\xf5\x4a\x8c\xc1\xb7\xb0\x68\x05\xda\x13\x8b\xe3\x08\x01\xa4\x9c\x28\xdf\x95\x3c\x11\x52\x8b\x8f\x62\xbd\x2b\x1f\xc5\x64\xdb\xad\x18\x94\x64\x01\x2c\x2e\x31\x02\x96\x8c\xff\xc5\xb8\x66\x34\xab\xc0\x66\x9c\x8c\xca\x3e\xf2\xea\xb1\x49\x96\xb6\x2a\xfa\x03\x63\x33\x49\x47\x65\x2f\x83\x92\xb1\xe9\xd0\x3d\x0e\xcd\x7c\x37\x59\x55\x8b\x73\x27\x5a\x23\x0f\xcc\xbe\x98\x43\xe9\xf4\x8b\x58\x1c\x98\x7f\x85\x15\xbe\x0a\xb1\x43\x1a\x4d\x33\xba\xec\x67\x51\x86\xba\x04\xb8\xdf\xfc\x72\x3b\xb9\x29\x05\xfb\xcd\x13\xe4\xdf\x07\xa0\x0e\xa9\x4b\x81\x0e\xc8\x8f\x83\xf9\x8d\x71\x7b\xb3\x07\x63\xb1\xf1\x55\xea\x11\xd0\xee\x41\x57\x10\x1f\x0f\xad\x9c\x4a\x90\xcb\x64\x57\x82\xa6\x4c\x42\x25\x68\xea\x39\x22\x1c\xae\x59\x08\x02\xd5\xba\x28\x04\x25\xc2\x7b\xac\x03\xb5\x44\xf1\x33\xae\x03\x4d\x99\x84\x3a\x10\x08\xe9\xbe\x0e\x94\x30\x6d\x54\x07\x4a\xa8\xa5\xd7\x81\x84\xe4\xce\xeb\x40\x09\xd3\x06\x75\xa0\x84\xf6\x4b\x1d\x68\xd7\x37\x64\xd6\x81\x84\xb4\xde\xea\x40\x09\xf3\x46\x75\xa0\x84\x5a\x7a\x1d\x48\x48\xee\xad\x0e\x94\x30\x6f\x50\x07\x4a\x68\x25\xd4\x81\xb2\xf3\xf0\x39\x7f\x4a\xa4\xf1\xd5\xeb\x29\xeb\xea\x03\x23\x53\x63\xfc\x1c\xee\x9a\x0b\x83\xbb\xf9\xe0\xc8\x9d\x54\x83\xeb\x5b\xd9\xcd\x87\x08\xee\x6e\x26\xef\x9e\xcb\xb8\x76\xf3\x19\x82\xe9\xb3\xb1\xb7\x9b\x0f\xc6\x5c\x1b\xcf\xc5\xde\x6e\x3e\xfb\xf4\xde\x78\x77\xfb\x5c\x2c\xfe\x6b\x27\x16\xbf\x9b\xdc\x48\x37\x78\x4e\xc4\x69\x47\x7d\x8b\xff\xd6\xcd\xe7\xdb\x8c\xab\xc9\x27\xbd\x38\xbf\xea\xc4\xcc\x8b\xb7\x57\x57\xaf\xaf\xdb\x6f\x43\x15\xc7\x1c\xae\xe7\xcc\x59\xf1\x98\xc3\x65\xe9\x31\x47\xd0\xa5\xd5\x31\x47\x7a\x2c\xe1\x02\x34\xc6\xb8\xf1\x37\xb0\x00\xf9\xdd\xf1\xe4\x29\x0d\x23\x5e\x1b\x99\x53\x8f\x3a\x1e\xe5\x4f\x6d\x78\x5c\xd3\x79\x93\x2f\x8e\x49\xe8\x6f\xe8\xff\x5a\xd1\xbf\x23\x0c\x02\x5f\x9b\xd7\xe3\x11\xbb\x78\xc4\xe4\x96\x1e\x3e\x9f\x4a\x2d\xce\x1d\x66\x75\x55\x75\x1c\x7c\x3d\x7e\x7b\x71\xfb\xcb\x74\x82\x56\x7c\x6d\xc1\xc3\xf0\x3f\x51\xcd\x83\xd0\x3c\x0a\xe8\xd7\x84\x43\xde\xba\xc2\x1e\x23\x7c\xa8\xf8\x7c\xa1\xbe\x8a\x63\xfd\xa0\xa8\x57\xf2\x1d\xf2\x08\x5e\x81\xb1\x03\x3d\xec\x90\xe1\xb3\xe2\xdc\x55\xc9\xef\x3e\xbd\x1f\x2a\xff\x51\xef\x5e\xab\x17\xce\xda\xc5\x9c\x42\xd6\xab\x80\xc1\xb6\x20\x1b\x2a\xc6\x64\x48\xcc\x65\x9c\x39\x84\x94\x82\xf3\x50\xb9\xa7\xe4\xc1\x75\x3c\x9e\xe9\x1c\x7c\x25\xe9\xd0\x0c\x3e\x7f\xad\x06\x6f\x7e\x80\xc5\x84\x72\x8a\x2d\x95\xcd\xb1\x45\x86\xa7\xda\x09\x38\xd7\xd7\xaa\xfa\x2b\xb8\xaa\x31\xf9\x2d\x62\x2b\x56\x17\xe4\x11\x2b\x28\x26\x7a\x7c\xee\x73\x44\x81\xab\x12\x7f\x83\xfe\x02\xdf\x8b\xf7\x1a\xfc\x12\xe4\xbf\x02\x64\x74\xf1\x9b\xaa\x16\xc8\x43\x2a\x06\x93\x0a\x06\xef\xc5\xd9\xe3\x8b\xb3\x84\x07\x60\xf3\x36\xc0\xe2\x3d\xf1\x18\x75\xec\xed\x36\x66\xcb\xe2\x17\xea\x8b\x33\xcd\xb5\x97\x0a\xe2\x4f\x2e\x58\x78\x8d\xaf\x95\x82\x04\xec\xba\x16\x51\xb9\xe3\xcf\x57\x6a\x4e\xda\xe9\xd9\xc9\x23\xfc\xd4\x92\x07\xfd\x03\x81\x35\xa4\x9c\x9f\x3f\xc2\x4f\x3d\x29\xe7\xe7\x75\xa5\xbc\x3c\x7b\x84\x9f\x7a\x52\x5e\x9e\xd5\x95\xf2\x0a\x10\x7b\x55\x13\xb1\x57\x15\x88\x31\xfe\x64\x11\xb6\x22\x22\x17\x0d\x87\x4f\x78\xba\x0e\x29\xec\x3e\xfe\xf0\x58\x0f\xb6\x3b\x4d\x74\x0c\x9d\x33\x76\xb8\xc1\xcc\x31\x9f\x8a\xa9\x34\x77\x5c\x75\x86\xbd\xd2\x5c\x3a\x7a\xa6\x06\xce\x96\xfd\x0a\xdf\xd5\x59\xa6\x24\xbf\xc6\xde\x92\xda\xd1\xa9\x81\x7a\x12\xef\x36\xc1\x25\xd9\xf0\xcc\x61\x58\xf8\x7b\x12\x31\xb9\xef\x42\x37\xc2\xc4\xae\xc3\xc9\xda\xb5\xe0\x4d\xf1\x8f\x4f\x20\x2d\x59\xa0\x92\x0d\x5a\x11\xfe\xce\x7e\xd4\xf5\x87\x87\x07\x0d\x3a\x7a\xf0\xa3\xcd\x9d\xb5\x1e\x2e\x10\x3a\x80\x48\x30\x23\x4c\x17\x2c\x19\xff\xfb\x7c\xed\x0e\x8b\x80\x29\xa3\x78\x3d\x11\x75\xaf\xd5\x59\x5a\xbd\xc8\x96\x32\x4a\x10\xd9\x8d\x22\x0f\x22\x22\x96\xeb\x60\x3d\xa3\xa2\x76\x31\x83\x95\xcc\x77\x51\x35\x50\xd1\x9f\xed\xd8\x81\x69\xe7\x34\xa2\x14\xb5\x98\x52\xcb\x1e\x3a\x05\xd2\x2b\x0c\x8c\xd7\x6d\x58\xc1\x6c\x82\xbe\xb5\x88\x8d\xb4\xc9\xa3\x58\x0a\xa9\xbd\xfc\x2e\xa9\x49\x1c\x79\x60\xb4\xdb\x75\xe7\x90\x23\xda\xb7\x9c\xc5\x02\xd6\xfc\xca\xaf\x85\xde\x29\xef\x94\x89\x3f\xea\xaa\xcf\x99\x32\x4a\x2c\x41\xdc\x29\x39\x99\x9c\x61\xd8\x0d\xd2\x3a\xa9\x40\x34\x0f\x40\xcd\x4f\xea\xc2\x58\x4f\x6c\xd3\x75\xa8\x98\x53\xb9\x2d\x35\x0a\xd9\x80\xc4\x09\x82\xb6\x8c\x84\x6a\x33\x8f\x30\x10\x76\x71\xc1\xb3\xd6\xa5\x94\x93\x94\x2c\xd6\x76\x6f\x08\x50\xa8\xed\x15\x26\x4f\x26\x44\x10\x16\x94\x4d\x69\x0b\x17\xbd\x1e\x95\x4c\x60\xd1\x2f\x9c\xbd\xa9\x94\x2a\x9e\xe2\xeb\xb4\x8f\x59\x4a\x82\x7e\x47\xf2\x34\x17\xc7\xe9\x29\xfa\x1d\xcb\x53\x7c\x28\xf9\x18\x3d\x83\x7e\x47\xf2\xa4\x47\xea\x49\x6b\xe8\xe9\xb2\xe3\x78\x8a\x7e\xbb\x3c\xd9\x1c\x9c\x96\x67\x37\xab\x0f\xf8\x1e\x87\xad\xca\xe8\x1e\x7b\x48\xc4\x72\x68\x18\x17\xaa\xb7\xdb\x9f\x60\xca\x05\x8f\x8f\xe1\xb0\x1b\x28\x22\xe6\xcd\xcb\x37\xc1\x0f\x4c\x0f\x53\xa7\xdb\xd7\x3f\xff\x3c\x19\xcf\x28\x34\xae\xa9\xad\xcf\x7c\xdb\xb4\x88\x06\x2f\xb5\x0f\x2c\x3e\x32\x05\x2e\xf1\x83\xa0\x31\xba\x77\x93\x51\x6c\xa0\x87\x1b\x27\x2c\x9f\x22\x86\xfd\x7f\x00\x00\x00\xff\xff\x4c\x9c\xcc\x9e\x62\x69\x00\x00"

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 26978, mode: os.FileMode(420), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

