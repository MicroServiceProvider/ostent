// Code generated by go-bindata.
// sources:
// index.html
// DO NOT EDIT!

// +build bin

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xe4\x5c\x6d\x73\xdb\x36\x12\xfe\x9e\x5f\x81\xf2\xd2\xfb\xd0\x29\xa5\xda\x71\x7a\xb9\x54\xca\x8d\x13\xb9\x2d\xa7\xb1\xa3\xf1\x4b\xee\x3a\x9d\xce\x0d\x44\x42\x12\x6a\x8a\x64\x09\x48\xb6\xab\xd3\x7f\xbf\x5d\x00\x7c\x95\x48\xbd\x90\x49\xea\xc6\x33\x96\x48\x70\xf7\xc1\x2e\xb0\x78\x16\x20\x41\xf5\xbe\x18\xbc\x7b\x73\xfd\xf3\xf0\x8c\x4c\xe5\xcc\x7f\xf2\xaa\xa7\xbe\x08\x81\x03\x46\x3d\x38\xc0\xc3\x19\x93\x94\xb8\x53\x1a\x0b\x26\xfb\xd6\x5c\x8e\xed\x17\x96\xb9\x24\xb9\xf4\x99\x3a\x86\xb3\xe5\xb2\x33\xa0\x92\x76\x7e\xbc\x58\xad\x48\x28\x24\x0b\x64\xaf\x9b\x49\x18\xa0\xa9\x94\x91\xcd\x7e\x9f\xf3\x45\xdf\xfa\x8f\x7d\x73\x6a\xbf\x09\x67\x11\x95\x7c\xe4\x33\x8b\xb8\x61\x80\x6a\x7d\xcb\x39\xeb\x33\x6f\xc2\xac\xbc\x66\x40\x67\xac\x6f\x2d\x38\xbb\x8b\xc2\x58\xe6\x84\xef\xb8\x27\xa7\x7d\x8f\x2d\xb8\xcb\x6c\x75\xf2\x35\xe1\x01\x97\x9c\xfa\xb6\x70\xa9\xcf\xfa\x47\x06\x68\xb9\xfc\xf1\xfa\xfc\x2d\xb1\x7a\x5f\x58\xab\x95\x6d\xff\xc2\xc7\xc4\x39\xfb\xf5\x55\xcf\xe7\xc1\x2d\x89\x99\xdf\xb7\xc4\x14\xb0\xdd\xb9\x24\x1c\xe0\x2d\x32\x8d\xd9\xb8\x6f\x75\xc7\x74\x81\xe7\x1d\xf8\xd8\x84\xf4\x0b\x0b\x3c\x3e\xfe\xd5\xb6\xf3\x48\x1a\x40\xf0\x3f\x98\xe8\x5b\xcf\x8e\xef\x9f\x1d\x97\xe1\x44\x72\x60\x3f\x3b\xee\x44\xc1\xc4\x22\xf2\x21\x02\x17\xf9\x8c\x4e\x58\x17\x0b\x8c\xfb\x19\x28\x8d\x22\x9f\xd9\x32\x9c\xbb\x53\xbb\x50\xc1\xd1\xf1\x37\xf7\xf0\x5f\x5d\x05\x5c\xec\xec\x09\x79\x72\x72\x0f\xff\x35\x90\x27\x27\xfb\x42\x3e\x3f\xbe\x87\xff\x1a\xc8\xe7\xc7\xfb\x42\xbe\x00\xc7\x5f\xd4\x39\xfe\xa2\xc2\x71\x21\x1f\x7c\x26\xa6\x8c\xc9\xa4\xe1\x25\xbb\x97\x5d\x57\x88\x14\x0c\x8e\xbb\x3c\xf0\xd8\x7d\x07\x4b\x0d\x82\x70\x63\x1e\xc9\xbc\xca\x6f\x74\x41\x75\xa9\x55\x1e\x28\x44\xc4\x2e\x00\xfd\x26\xba\x31\x06\x7d\xcc\xe0\xe8\xb8\x73\xd4\x39\x7a\x91\x14\x74\x66\x3c\xe8\xfc\x06\x75\x7a\x30\x78\xec\x19\xe5\x81\x96\x5f\x2e\x21\x3a\x3b\xd7\xa7\x3f\xfc\x70\x36\x18\xf1\x60\xb5\x02\x39\x63\x8c\xd6\x58\x2e\x99\x2f\xd8\x6a\x05\x35\x74\x67\xdc\xbf\x35\x17\xd5\x85\xc0\x5b\xad\xac\x64\x60\xf6\xba\xda\x38\x63\x7f\xd7\x8c\xed\x57\xbd\x51\xe8\x3d\x98\xc2\x80\x2e\x88\xeb\x53\x01\x2d\x0a\x87\x23\x1a\x13\xfd\x65\x7b\x6c\x4c\xe7\xbe\x4c\x4e\x85\x84\xb1\xea\x42\x47\x44\x16\x89\x43\x18\x5a\x28\xce\x27\x50\x08\x7d\x92\x56\xe8\xf1\x14\x0d\x47\x29\xf8\xc4\x62\x7b\xec\xcf\xb9\x97\xc8\x94\xa4\x0c\x3a\x5a\xc6\x62\x18\xd9\xbe\x3d\xf3\xec\x23\x12\x51\xcf\xe3\xc1\xc4\xf6\xd9\x18\x68\x24\xe9\x82\x44\x7f\x34\x97\x32\x0c\x4a\x10\x32\x9c\x4c\x7c\x86\x10\x3e\x8d\x04\xf3\x92\xbe\xd5\xc2\xa6\x95\xb5\x10\x1a\xa7\xa5\x92\x62\x1a\x4f\xb0\xeb\xfe\x66\xb0\xd2\xcb\xb9\x6a\x55\x04\x44\x34\xad\x56\xc4\x76\x18\xf8\x0f\x45\x11\x10\xba\xd6\x76\x64\xad\x03\xbd\x00\x6a\x35\x48\x2a\x5a\xa1\xda\x35\xa8\x3f\x8d\x66\x57\x37\x62\xa1\x13\x28\xe1\x5e\xdf\x9a\x42\xcb\x16\xfb\x61\x14\xd3\xc0\x83\x32\x1e\x1d\x65\xe3\x1d\x3a\x03\xf3\x01\xc8\x43\x7e\x40\x3e\x27\xf9\xa4\x51\x6a\xe6\xfc\xa5\x5e\x97\x16\x6a\xed\x42\xec\x94\x22\x09\xcd\x28\xf7\x5b\x16\x84\xba\x80\xd4\x74\xec\xab\xde\xdc\xcf\xf9\x90\x88\xc2\x57\xb9\xfb\x7d\x9e\xc8\x51\x57\xf2\x05\x5b\x6f\x3c\x6a\x1c\xc6\x64\x27\x5e\x76\xbb\x77\x77\x77\x1d\xf0\x38\x86\xff\x8e\x1b\xce\xba\x3a\x3b\x02\x03\xf8\x8c\x0a\x26\xba\x3e\x95\x4c\xc8\x7f\xb9\xb3\xa8\x9f\x78\xfd\xfe\xec\xf2\xca\x79\xb7\xd6\x2a\x0a\x3f\x49\xae\x74\xbd\xd7\x7c\x5e\x69\x6c\x32\x40\x80\xb1\x48\xee\x18\x28\x27\x9e\xf0\x00\x87\x17\x19\xf3\x58\x48\x55\xba\xee\x93\x1b\x7a\xac\x04\x85\x45\xc0\xa7\x6b\x0d\xa0\x4c\x4c\xbb\x76\xe0\x5c\x5d\x5f\x3a\xaf\xb1\x13\x51\xa1\x65\x9b\x9b\x1a\xca\xa3\xbf\x07\x23\x11\x7d\xa7\x87\x05\x06\x11\x8f\xd6\xc5\x72\xe1\xe8\x0c\xd1\x93\xb5\xd1\x61\x7c\xf9\x13\x7a\x38\x5f\xf3\x70\x5e\xef\xe1\xcd\x63\xf3\xd0\xa7\x65\x0f\x7d\x5a\xeb\xe1\xdb\xd3\x16\x3c\xec\xce\xfd\x3a\x4e\xca\x9d\xc2\x09\x38\x61\x32\xed\xf6\xdc\x58\x90\x89\xc3\xbb\x72\xce\x44\x07\x67\x6c\x96\x67\x37\x4c\x97\x27\x49\xde\x0c\xc7\x63\x98\x81\xd8\x47\x05\x76\x5b\x2e\x25\x9b\x45\x48\x34\xc4\x82\x9c\x0e\xb5\x8a\x97\x2f\xf5\xc1\x7f\xa1\x1d\x98\xaf\x10\x3b\xd8\x2e\x9b\xb9\xd5\x1b\x97\x2b\x7c\xde\xac\x42\x04\xdc\x50\x5f\xa1\xdd\xb6\x37\x84\x1b\xcd\x5b\x6e\x08\x85\x58\xd3\x10\xbc\xed\x86\xe0\xad\x34\x44\x24\xca\x66\x1d\x7d\xd3\xcc\x2e\x44\x6c\x6e\xd7\x62\xd2\xb6\x5d\x88\xb8\xcd\xae\xf4\x64\xcb\x7c\x3d\x51\x58\xc0\x8c\x17\xa9\x81\xf4\x93\xbc\xb5\x5a\x7d\x57\x9e\x38\x9b\xf9\x32\x4e\xa1\xd5\x72\x79\xb9\xec\x7e\xf5\xe4\xab\xee\x6a\xb5\x5c\x6a\xfb\x72\x06\x8f\x28\xac\x5f\x3d\x5c\x6d\xe0\xe4\x15\x16\x89\xc9\xa4\x00\xe0\x7f\x84\x6f\x5c\x23\x07\x6f\x7c\xee\xde\xf6\x97\x72\xca\x45\x67\x0a\xf3\x25\x9f\xa9\x92\x15\xd8\xa0\x9a\x6c\xb5\x42\xf1\x37\xfa\x10\x6a\x7e\x92\xce\xdf\x32\x01\xeb\xde\xa7\x23\xe6\x13\xfd\x95\xcc\xd7\xd3\x65\x6a\xe7\x35\x1a\x92\xa3\xbb\x57\xe8\xe0\x35\x34\x83\x9e\x55\xbd\x32\xab\x85\xdd\x7c\x89\xf9\x64\xda\xa6\x33\xa9\x29\xa4\xb1\x5b\xbb\x3a\x63\x22\x09\x46\x39\x04\xac\xb0\x50\xe6\x8e\xcb\x29\xc1\x33\x08\x46\x8c\x2c\x80\xc7\x0f\xbd\xbc\x5a\x2e\x61\x26\x3b\x61\xe4\x29\xff\x9a\x3c\x05\x2d\xf2\xb2\x4f\x74\x16\x79\x33\xbc\xe9\xbc\xe5\x02\x1b\x52\xc6\x60\xfa\xa9\x94\xf1\x4f\xec\x81\x20\x27\xd9\x00\x37\x7a\xb0\x2f\x2c\xa5\xd3\xb9\x50\x1e\xbf\xea\x49\x2f\x19\x0b\x2a\x05\xaa\xe6\x24\xea\x30\x08\xef\x62\x1a\xa5\xfe\x25\x5a\xbd\xae\xf4\x12\xcd\x5c\xe3\xe4\xb4\x47\x13\x7b\x2e\x58\xe4\x4a\xb3\x88\xd1\x27\x7d\x03\x71\x23\x58\x3c\x74\xa5\xaa\x3e\x03\x4e\x4b\xbf\x6c\x8a\x7f\xf5\x20\xd6\xe1\x93\xc2\xc6\xe8\xff\xa6\x5c\xae\xc3\xa7\xa5\xfb\xe0\xdb\x3c\x58\xb0\x38\x5d\xea\x15\xeb\x71\x20\x58\xd7\xeb\x49\x4b\xb3\x7a\xba\x32\xce\x05\x59\xf1\x6b\x97\x90\x93\x14\xef\x73\xa1\xd0\xd3\x28\x0b\xa4\x21\x8d\xe9\x4c\x60\x18\xe1\x65\xf0\x44\x0d\x92\x8b\x30\xf8\x83\xc5\x21\x79\x1a\x61\xa4\x05\xc4\xd2\x57\xd5\xa7\x3d\x0d\xc1\x1b\x8b\xa4\x2b\x1b\x7b\xca\x3d\x8f\x05\x56\x12\x67\xb9\xfb\x77\x60\x72\xc2\x8a\x72\x9a\xe7\xcb\xf4\x0c\x2f\xac\xc7\x65\x8e\xcc\x31\x5e\xf6\x91\x87\x00\xd8\x47\x1c\x3b\x74\x1f\x79\xec\x98\x82\x7c\xd7\xf8\xa8\x9c\x4a\xee\x6e\xc8\xec\xf6\x46\x5d\x4a\x49\x88\x40\xa7\x14\x99\x71\xbc\x6a\xe8\x7d\x28\xc5\x1b\xef\xc9\x28\xde\x38\x8b\x81\xc1\xf7\x9b\xb9\xc4\x1b\x1b\x2a\xf1\x78\x8c\x2b\x66\x0b\xd5\x3a\x03\x1e\x5f\xc0\x89\xee\x6d\x42\x36\xc5\xbf\x26\x94\x74\x05\xae\x17\xde\x10\x77\xa8\xcd\x16\xa9\xb6\x0e\xf7\x7c\x61\x12\xec\xfb\xc3\xe6\x8c\xca\x60\x93\xc2\xfc\x58\xdd\x85\x03\x0b\xf7\x29\xd4\xe5\x49\x4c\x1f\x7c\x94\xc6\xc8\x37\x37\x12\x9c\x00\x26\xeb\xb0\x70\x8d\x59\xba\x30\x30\x15\x3b\x58\x56\x98\xe6\x63\xe6\xc3\x2b\xa7\x0b\xca\xfd\x5d\xa8\x35\xef\x70\x35\x51\x01\x22\x8c\x8f\x1c\x7d\xec\x65\x39\xe0\x7c\x59\xb6\x7c\x2e\x52\xde\x59\x33\xfe\x46\x94\x39\xe9\x43\xb4\xe7\x1c\xef\x9c\xad\x5b\xe5\x6d\x6c\xcf\x1b\x73\xe1\x03\xda\x23\x43\x49\xfd\xb2\x41\xea\xd2\x46\x8b\xae\x51\x3c\x67\x52\x23\xda\xf6\xc6\x07\xb2\xf6\x60\xdc\x06\x69\x6f\xe4\x2e\x7d\xa3\x94\x05\xf3\x19\xce\xca\x2c\xf2\x5e\xdd\xd6\x06\xeb\x54\xb5\xb7\xe4\x88\x58\x03\xf5\x3c\x04\x6a\x53\x86\x1f\x80\x71\x4c\xac\xf3\x70\x1e\x48\xbc\x87\x7a\x30\xc8\x33\x62\xa9\xe1\x06\x10\x39\x2a\x3f\x10\xec\x84\x58\x37\x38\x5c\xda\xc0\x7a\xae\xb0\xbc\x56\xb0\xbe\x25\x96\x8a\xb8\x32\x58\xa3\xbc\x64\xb2\x49\xf3\xb4\xc4\xf7\x4d\x4b\x3c\x97\x96\x9c\x8a\xb4\xc4\x93\xb4\x64\x72\x12\x1f\x77\x0e\x4d\x48\x79\x55\x3d\xb8\xd3\x92\x0f\xc3\x29\xaa\xaf\xc8\xeb\x9f\xaf\xcf\xae\x88\x73\x41\x66\xa1\x37\xf7\x43\x72\xf2\x43\x9e\x5f\xc0\x84\xd7\x0f\x92\x09\x27\x28\x11\x8c\xae\xc2\x20\xbd\xe6\x52\x20\x44\xc4\x62\x22\x98\x1b\x06\x5e\x09\x63\xc0\x7c\x49\x51\xaa\x8c\xf3\xe1\x3d\x7b\x77\x73\x5d\xef\xda\xbb\xb9\xdc\xea\x1b\x82\x6c\x77\x6e\x0d\xe9\x43\x7a\x17\x51\xf7\x96\xe9\x66\xaf\x72\x6f\xa8\x45\xea\xfb\x6e\x98\xe1\xd4\x7b\x58\x81\xf6\x31\x7c\xac\xeb\x43\x63\xd6\x96\x5e\x1c\xe6\x90\x76\x72\xf3\xa3\xf6\x25\x8b\xe3\x30\xae\xed\xca\x33\x25\x51\xdf\x93\x67\x29\x4a\xbd\x87\x9b\xb1\x3e\x82\x7f\x75\xdd\xa8\x8d\xda\xd2\x8b\x67\x19\xce\x2e\x2e\x56\xf7\x61\xa3\x89\x10\x3f\x74\x22\xe4\xb4\x32\x11\x2a\xac\x5e\x1d\x98\x97\xc4\x63\xea\xb2\xad\xeb\x46\x12\x84\xf1\x0c\x73\x33\xe4\xa3\xd0\xc7\x36\xc1\x8c\xf4\x6d\x6e\x39\xa9\x98\xae\x37\xda\x4e\xea\xa6\xe6\x5e\x77\x94\x29\x7f\x5d\xd6\xdc\xdc\x49\x4a\x16\xfa\xa5\xa0\x4b\xfe\x47\x92\xf1\x99\x81\xd4\xf2\xd2\x36\x0b\xea\x87\x7b\x95\x11\x26\xbc\x32\x98\xba\x11\xb5\xcd\x84\xda\x58\xdd\x68\x41\x6b\x4b\x79\xde\xd6\x94\x69\xc6\x66\x07\xdc\x1c\x04\xad\x6c\x50\x9c\x9f\x9d\x6f\x9e\x39\x81\x94\x99\x3a\xdd\x72\x68\x18\xa5\xd6\xf9\x89\xa3\x65\x86\x86\xd2\x79\x50\x76\xa5\x96\xa4\xac\x82\xc2\xf7\x66\xd9\x7b\xf8\x9d\x37\x44\x29\xae\x68\x4b\x85\xf5\x6b\x4f\xab\xac\xb3\x9f\xfd\xad\xae\xdd\x00\xf0\x40\xce\x3a\x67\xb3\x4f\x7a\xcb\x0d\xbb\x71\xcf\x5b\x74\x5f\xee\x29\xef\xed\x23\xaf\xba\xa5\xb5\x91\x9a\x0c\xb0\xe6\x43\x35\x7d\x64\x57\xd9\xc3\xf8\x20\x0a\xff\x4c\x1f\x0f\x43\xc1\x71\xd7\x46\x76\x5f\x15\xfa\x54\xa1\x10\xf5\x99\x3e\x6a\x48\xd7\x32\x1a\x60\xab\xba\xda\xbd\xc4\x83\x89\x95\x8c\x1a\xfc\xe8\x51\xa5\x8a\x0f\x49\xae\xcd\x8a\x11\xb5\x56\xf9\xa7\x22\x46\x5d\xf1\x27\x19\xc9\xc0\x1e\xf9\xa1\x7b\x9b\xa6\x77\xfd\x05\x04\x5b\x69\xc1\xf4\xc4\xc2\x0f\x1c\xd2\x3c\x18\x87\x89\x01\x4a\x1b\x24\x32\xb2\xd5\x26\x99\x7d\x23\xe8\x9a\x79\x4c\xa6\x56\x6c\xf9\x81\xb0\x5e\x87\xbe\x5c\x8e\x7d\x53\x9e\xba\x8c\x5c\x67\xa2\x48\x3b\x05\xe4\x3f\xe6\x93\xec\xc9\x76\x36\xfe\xcd\x23\xc0\xe3\x8a\x1d\x61\x75\x73\x30\x23\x0e\x33\x1e\xfa\x90\x7f\xf2\x6f\x54\xd5\xe3\xaa\xb5\xcd\x44\xda\x13\x6f\xc3\x83\xff\xf5\x47\xf7\x86\x83\x73\x74\xbc\x66\x1f\xf6\xd3\x24\x0e\xe7\x11\xd1\x96\xe9\x93\x64\x53\x9c\x3e\x79\x52\x30\x60\xc3\x68\x28\x3d\x24\x24\x6f\x99\x10\x83\x2c\x4c\x3c\x82\xd5\xa8\x90\xc8\x82\x72\x0b\x90\x1e\xb7\xe4\x3c\x8c\xd9\x36\xa4\x7a\xb7\xd7\x1e\xda\x5a\x15\xa2\x19\x0f\x7c\xcc\xce\xbf\x04\xfa\xd8\xb3\xef\x83\xce\xe9\x48\x84\xfe\x5c\xb2\x3f\x7d\x10\x5c\xe4\xb8\xa2\x59\x10\x6c\x43\x6a\x3b\x08\x90\x54\x34\x89\xab\x93\x2d\x4f\x5e\x34\x7b\x64\x4f\xf3\xf7\x25\x7e\x6f\x7c\x10\xef\xab\x3b\xb3\x07\xd3\x7e\x41\x7b\x57\xd6\x07\xa5\xb6\x48\x5f\xd5\x5f\xc7\xf9\x03\x2e\x6e\xc9\x5c\xd0\x09\x6b\x48\xfd\xb9\x3b\xd8\x8f\x9b\xf9\x07\xe3\xc7\x43\xfc\x60\x6b\x3b\xbc\x5f\x01\xf4\x59\xd1\x3e\x44\xf0\xe3\x63\x7d\x35\xec\xda\x20\xfd\x0a\xa0\x4f\xc8\xf9\xc9\xc3\xb4\xc3\x29\x9f\x1f\x46\xf9\x4e\x23\xca\x77\x0e\xa1\x7c\xa7\x3d\xca\x77\xb6\x51\x7e\x7a\x3f\x4c\x34\xa4\x7c\xe7\xaf\x42\xf9\xce\x23\xa2\x7c\xa7\x2d\xca\xaf\x00\xfa\xac\x28\xdf\x79\x8c\x94\xef\xb4\x45\xf9\x15\x40\x9f\x90\xf2\x79\x63\xca\xc7\xad\xe9\x87\x70\xbe\xbe\x87\x77\x30\xe9\x17\xd5\x77\x65\x7d\xd4\x6a\x8b\xf6\xb5\x05\x75\xbc\x0f\x12\x61\xfc\xd0\x90\xf3\xf3\xf7\x3a\x1f\x37\xe9\x83\x27\x8f\x87\xf5\xd1\xd8\x76\x68\xbf\x0a\xe9\xb3\xe2\x7d\x8c\xe2\xc7\x47\xfc\x7a\xec\xb5\xc1\xfc\x55\x48\x9f\x90\xfa\xd3\xc7\x2f\x87\x73\x7f\x24\x0e\xa2\xfe\xa1\x68\xc2\xfc\x05\xed\x5d\x89\x1f\x94\xda\xe2\x7d\x55\x7f\x1d\xed\x0f\xe3\x10\xa6\xfa\xa2\xf1\x6c\x5f\x55\xf4\x57\x20\xfe\xa1\x78\x3c\xbc\x0f\xb6\xb6\x43\xfb\x15\x40\x9f\x15\xeb\x43\x04\x3f\x3e\xd2\x57\xc3\xae\x0d\xce\xaf\x00\xfa\x84\x94\x1f\x89\xa6\x8c\xbf\x98\x1c\xc4\xf8\xef\x27\x4d\x18\xbf\xa0\xbd\x2b\xe3\x83\x52\x5b\x8c\xaf\xea\xaf\x63\xfc\xf7\x74\x12\xd3\x40\x36\xe4\x7b\x55\xcd\x5f\x81\xef\xdf\x4f\x1e\x0f\xdf\x83\xad\xed\xf0\x7d\x05\xd0\x67\xc5\xf7\x10\xc1\x8f\x8f\xef\xd5\xb0\x6b\x83\xef\x2b\x80\x3e\x21\xdf\x2f\x26\x4d\xf8\x5e\xec\xb9\xcd\x2e\x12\xb9\xa4\x70\xb5\x79\x83\x5d\x24\xcc\xfe\xba\x88\xe3\xf6\xba\x48\x74\x86\xce\xa0\xe6\xfd\x5b\xb3\xfd\x0c\x5f\x1d\x4a\x64\x77\xd9\xae\x66\xe4\x6f\x4a\xf2\x4f\xd2\x50\x15\xea\x35\xdb\xbd\xc0\x86\x31\x0f\x63\x2e\x1f\xf6\x52\xba\xe0\xee\xb6\x57\x25\x8a\x0a\x57\xfc\x8f\xfd\x14\x2e\x99\xe0\x90\x22\x64\xb5\x92\xcb\xf0\xf9\x83\x95\x77\xfe\x9a\x97\xde\xe0\xc8\x5f\x2c\xbd\xde\xd1\x68\x8f\x5f\x32\xe3\xd8\x7b\x8b\x5f\x6e\xf1\xf3\x31\xdf\xcf\x1a\x0a\xf5\x7e\x16\x04\x5a\xe3\x97\x8f\x10\xea\x98\x58\x37\x2d\x41\x3d\x03\xa8\xab\xb3\xcb\x03\x5f\xf7\x42\x84\x13\xf0\xeb\xb2\x15\x5b\x9e\x13\xeb\xc2\x69\x05\xe9\x5b\x62\xbd\x77\x2e\xaf\x5b\xc1\xfa\x07\xb1\x2e\xcf\xae\x5a\x81\x7a\x41\xac\x6b\xe7\xfc\x2c\xc1\x32\x23\xe8\x40\xb0\x7f\x12\xeb\xcd\xbb\xf3\xf3\xd3\x8b\x81\xee\xbc\x46\x9b\x33\x0d\x2b\x37\xdf\x9b\xb9\x98\xa8\x17\x20\x2c\x4d\xd1\xb7\xec\x01\x7f\x0d\x44\x17\x25\x24\x52\xd8\x94\xff\x3c\x25\x10\xf3\x1b\x58\x7a\xce\xab\x76\x94\x57\xb2\xc5\x0e\x56\xa4\x49\xc6\x64\x91\xc5\x24\xb7\x51\xdb\x54\x72\x4e\xdd\x29\xaa\x6d\xce\x29\x0b\x2d\x64\x12\xcb\x7c\xae\x32\x0b\xc0\x74\x6e\x6e\x72\xb9\x25\x65\xb8\xec\xca\x26\xfe\xc3\xab\x6b\xef\xb7\x15\xae\x0e\xe3\x70\x01\x8c\x1b\x57\x4b\x5c\x49\x2a\x6b\x00\x8c\x53\x63\xee\xe3\xa2\x4a\x4e\xb7\x71\xed\x0e\x8d\x28\x20\x43\xbb\xd3\x5d\x72\x35\x1f\x13\xf6\x3b\x59\xef\x42\x8f\xc8\x78\xce\x2a\x22\xbc\x14\x32\xa4\x80\x58\x27\x9f\xc6\xea\xa1\xf9\x23\x99\xc1\xec\x9d\x3f\x72\x8b\xa9\xd6\x5e\x6b\x19\x94\xf6\x64\x67\x97\x30\x62\x2a\x2f\x26\x01\x53\x29\xa0\xe2\xa5\xf2\xea\x80\xc7\xcc\x95\xea\x41\x52\x4b\x1b\xbc\xd3\x78\x69\xc0\x22\x29\xdd\x15\x7e\x6f\xe6\x2d\x94\x6c\xfd\xcd\x99\x27\x9a\x45\x50\x76\xbf\x9f\xba\x29\x11\x2d\xf6\xfe\x34\xbf\xc2\x37\xbf\x50\x09\xd8\xa7\x3e\x9f\x04\x6f\x74\xb9\xa6\xb3\x8d\x36\x16\x7e\xfc\x06\xcb\x8d\x4a\x32\xd1\x2e\x5a\x59\xfa\x11\x1c\xfc\xbd\x1c\x1a\x33\x99\xd7\x51\x8d\x98\x7f\xb5\x8b\x9a\x76\x9d\xa6\x0e\xfe\x3f\x00\x00\xff\xff\x2a\x5b\x13\x98\xd7\x57\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 22487, mode: os.FileMode(384), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

