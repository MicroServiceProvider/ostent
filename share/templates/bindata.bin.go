// Code generated by go-bindata.
// sources:
// index.html
// DO NOT EDIT!

// +build bin

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5c\xeb\x73\xdb\xb6\xb2\xff\x9e\xbf\x02\x97\xb7\xbd\xd3\x76\x2a\xa9\xce\xe3\xde\xde\xd4\xf2\x19\xc7\x72\x12\x4d\x63\x47\x13\xdb\x99\xd3\x4f\x1d\x88\x04\x25\xc4\x14\xc9\x12\xa0\x1c\x1f\x8d\xfe\xf7\xb3\x8b\x07\x9f\x7a\x93\x4e\x7c\x26\xfd\x90\x98\x04\x17\x8b\xc5\x62\xf1\xdb\x05\xb0\xc2\xf1\x7f\x0d\xde\x9f\x5d\xff\x31\x3a\x27\x53\x39\x0b\x9e\x9c\x1c\xab\x3f\x84\xc0\x03\xa3\x1e\x3c\xe0\xe3\x8c\x49\x4a\xdc\x29\x4d\x04\x93\x7d\x27\x95\x7e\xe7\x57\xa7\xf8\x69\x2a\x65\xdc\x61\x7f\xa5\x7c\xde\x77\xfe\xd9\xb9\x39\xed\x9c\x45\xb3\x98\x4a\x3e\x0e\x98\x43\xdc\x28\x94\x2c\x84\x7a\xc3\xf3\x3e\xf3\x26\xac\x54\x33\xa4\x33\xd6\x77\xe6\x9c\xdd\xc5\x51\x22\x0b\xc4\x77\xdc\x93\xd3\xbe\xc7\xe6\xdc\x65\x1d\xf5\xf2\x33\xe1\x21\x97\x9c\x06\x1d\xe1\xd2\x80\xf5\x8f\x2c\x23\xc9\x65\xc0\xd4\x33\xbc\x2d\x16\xdd\x01\x95\xb4\xfb\x36\x12\x12\x99\x2f\x97\x04\x9e\x80\xe5\x71\x2f\xa7\x3b\x39\x0e\x78\x78\x4b\x12\x16\xf4\x1d\x0e\x4d\x3a\x44\xde\xc7\x20\x07\x9f\xd1\x09\xeb\xc5\xe1\xc4\x21\xd3\x84\xf9\x7d\xa7\xe7\xd3\x39\x12\x74\xb1\xac\x56\x55\xc8\xfb\x80\x89\x29\x63\xd2\x32\x90\xec\xb3\xec\xb9\x42\x64\xf5\xe1\xb9\xc7\x43\x8f\x7d\xee\x62\xa9\xe1\x20\xdc\x84\xc7\xb2\x58\xe5\x13\x9d\x53\x5d\xea\x54\xf5\x4c\x44\xe2\x02\xa3\x4f\xa2\x97\xa0\x86\x13\x06\x4f\x4f\xbb\x47\xdd\xa3\x5f\x6d\x41\x77\xc6\xc3\xee\x27\x68\xd3\x83\x8e\x77\x66\x94\x87\x9a\x7e\xb1\xe0\x3e\xe9\x5e\x9f\xbe\x79\x73\x3e\x18\xf3\x70\xb9\x04\x3a\x23\x8c\xae\xb1\x58\xb0\x40\x80\x86\xa0\x85\xde\x8c\x07\xb7\xe6\xa3\xfa\x10\x7a\xcb\xa5\x63\x95\x7a\xdc\xd3\xc2\x19\xf9\x7b\xc6\x34\x4e\x8e\xc7\x91\x77\x6f\x0a\x43\x3a\x27\x6e\x40\x85\xe8\x3b\xf0\x38\xa6\x09\xd1\x7f\x3a\x1e\xf3\x69\x1a\x48\xfb\x2a\x24\x18\x86\xdb\x91\x51\xec\x90\x24\x82\x71\x44\x72\x3e\x81\x42\x18\x87\xac\x41\x8f\x67\xdc\xd0\x24\xa0\x4f\x2c\xe9\xf8\x41\xca\x3d\x4b\x53\xa1\x32\xdc\x51\x32\x96\x80\x19\x05\x9d\x99\xd7\x39\x22\x31\xf5\x3c\x1e\x4e\x3a\x01\xf3\x61\xf0\xed\x10\xd8\xfa\xe3\x54\xca\x28\xac\xb0\x90\xd1\x64\x12\x30\x64\x11\xd0\x58\x30\xcf\x8e\xad\x26\x36\x5a\xd6\x44\x28\x9c\xa6\xb2\xc5\x34\x99\xe0\xd0\xfd\xb7\xe1\x95\x7d\x2e\x34\xab\x2c\x20\xa6\x59\xb3\x22\xe9\x44\x61\x70\x5f\x26\x01\xa2\x6b\x2d\x47\xae\x1d\x18\x05\xa8\xb6\x81\x13\x5a\x6a\x07\x9a\xad\xb1\x7a\x34\x35\x7b\x5a\x89\xa5\x41\xa0\x84\x7b\x7d\x67\x0a\x9a\x2d\x8f\xc3\x38\xa1\xa1\x07\x65\x1c\x0c\x45\xcd\xb4\xbe\x33\xa3\x9f\x35\x16\xbc\x24\x47\x4f\xdd\x69\x36\xcb\x60\x88\x70\x6e\x03\x17\x33\xeb\x49\x1d\x06\x2a\x43\x50\x27\x38\xee\xd1\x92\x5c\x3d\xb0\xae\x8a\xad\xa1\xa0\xd5\x91\xcd\xcd\x54\x17\x90\x0d\x43\x7f\x72\x9c\x06\x85\x5e\x5a\x52\xf8\x53\x35\x90\x80\x5b\x3a\xea\x4a\x3e\x67\x75\xf5\x52\xd3\x79\xc4\x5e\xf1\xb2\xd7\xbb\xbb\xbb\xeb\x42\x5f\x12\xf8\xd7\x75\xa3\x59\x4f\xa3\x1e\x60\x44\xc0\xa8\x60\xa2\x17\x50\xc9\x84\xfc\x87\x3b\x8b\xfb\xb6\xef\x1f\xcf\x3f\x5c\x0d\xdf\x5f\x56\x75\xa3\xf8\x5b\xd0\xa4\xf5\x71\x0d\xf8\x5a\x61\xed\x14\x02\x4c\x23\x85\x67\x00\xa5\x64\xc2\x43\x9c\x80\xc4\xe7\x89\x90\xaa\xb4\xde\x27\x37\xf2\x58\x85\x15\x16\x01\xe2\xd6\x14\xa0\x44\xcc\x86\x79\x30\xbc\xba\xfe\x30\x7c\x85\x83\x88\x15\x5a\x96\xb9\xa9\xa0\x3c\xfe\x9f\x70\x2c\xe2\xdf\xf4\xc4\x41\x23\x02\x9b\xae\x91\x15\x8c\x72\x38\xc2\x9e\xd4\xe6\x8f\xe9\xcb\x23\xec\x61\x5a\xeb\x61\xba\xb9\x87\x37\xb1\xe4\x7a\xd2\xfd\x07\xf5\x32\xa0\xd5\x5e\x06\x74\x63\x2f\xdf\x9d\xb6\xd0\xc3\x5e\x1a\x6c\xc2\xa5\xc2\x2b\xbc\x40\x27\x8c\x3f\xde\xee\x41\x4b\x34\x49\x74\x57\xf5\xac\xd8\xc1\x19\x9b\x81\x53\xd3\x71\x5c\x86\x73\xe8\x5a\x9f\x5b\x1f\x1b\xf9\x3e\x44\x2b\x9d\xa3\x12\xce\x2d\x16\x92\xcd\x62\x84\x1c\xe2\x80\xff\x87\xb6\xc5\xcb\x97\xfa\xe1\x4f\xd0\x06\x0b\x80\xaf\x43\xba\xa8\x9d\xd5\x28\xeb\xf9\xab\x9b\x7d\xd1\xac\x59\xcf\x5f\xd9\x6a\x49\x87\xdb\x95\xe2\xc6\xe9\x83\x28\x05\xf8\x6e\x54\x0a\x7f\x18\xa5\xf0\x56\x94\x12\x8b\xd5\xc2\x1d\xfd\xd2\x4c\xba\x58\xb4\x21\xdd\x7c\xf2\x30\xd2\xcd\x27\xdb\xa5\xcb\x5e\xb6\x44\xfe\xb6\xc2\x1c\x62\x67\x84\x0f\xd2\xb7\xfe\x6d\xb9\xfc\xad\x1a\x82\x9b\xc8\x1b\x83\x71\xb5\x6e\x5b\x2c\x7a\x3f\x3d\xf9\xa9\xb7\x5c\x2e\x16\x5a\xbe\xba\xc0\x60\x5e\xa0\x1d\xe1\x20\xcd\x1d\x97\x53\x82\x6f\xd0\x67\xec\x00\x34\x84\xff\xe9\xf5\xc0\x62\x01\xa1\xd7\x84\x91\xef\xf8\xcf\xe4\x3b\x37\x4a\x18\x79\xd9\x27\x1a\xd1\xce\x46\x37\xdd\x77\x5c\x48\xe8\xb2\x4c\x40\x3c\xf5\xb9\x7b\xd9\x3d\x95\x32\xf9\x9d\xdd\x13\x35\x37\x80\xef\xf8\xbe\x73\x09\x0d\x29\x09\xa5\x67\x95\xae\xf0\x38\xe1\x93\x29\x20\x74\x74\x97\x50\xe3\x23\x4e\x32\x3e\xa8\x49\xe9\xad\xad\x95\x2d\xa0\x10\x7f\x17\x0b\xf5\x7d\xb9\x04\x67\x23\x58\xcc\x12\x17\x02\x16\x1d\x58\xe8\x60\x3c\x2f\xed\xdb\x06\x6e\x04\x4b\x94\x54\xa5\x66\x75\x69\x01\xa8\x4f\x1e\x56\x8a\xab\x7b\x51\x17\x42\x15\xb6\x2d\x43\x87\x87\x73\x96\x64\xcb\x93\x15\xb2\x0c\xbd\x80\xd5\x85\xd1\xa5\x2b\xa5\xe9\xc9\x04\xad\x4d\x2d\x10\xab\x7f\x76\x31\x41\x3d\x0d\xd1\x7e\xf0\x21\xeb\x99\x7a\x51\xff\xc3\x0a\x11\x0c\x9d\x29\x37\x05\x9d\x2f\x6c\x43\x40\xcb\x76\x4e\xc9\x69\x71\xb6\x65\x6f\xf8\x61\x8b\xb1\x29\x32\x1c\xf1\xd2\x32\x26\x0d\x79\x29\x1e\x3d\xf9\xbe\xe2\xb7\x0f\x69\x05\x86\xf4\xe1\x1b\xc1\xa1\x6a\xd2\x4a\xcf\x68\x55\x95\xda\x75\xbd\xcc\x17\xf6\x9b\x20\xd0\x22\x8a\x86\x40\x99\x63\x92\x1a\xc8\x82\x99\x6c\x35\x0c\xcf\x1f\xdf\xc3\xfa\xe4\xcf\x3d\x01\xca\xe3\xe2\x36\x07\xa7\xc1\x6b\xc5\xa4\x0c\x50\x48\xd2\x1d\xf0\xe4\x12\x16\x79\x39\x4c\x99\xf6\x0c\x54\x79\x3c\xc1\x35\x60\x0e\x58\x19\x2c\xe9\xda\x6c\x7e\x69\x96\x88\xd9\x94\xac\x50\x68\xfe\xbb\xc1\x97\xad\x74\x3a\xa7\x3c\xd8\xb5\xca\xfa\x41\xc8\x27\xb5\xa3\x15\x82\x78\x36\xd2\x25\xcb\xa5\x8e\x58\x6d\x93\xf0\xc5\xdb\x4f\xc8\xeb\x48\xd2\xa2\x90\x8d\xa6\xbf\x1d\x65\x8b\x01\xd0\x48\x9c\x0f\xdf\x88\x26\x74\x26\x1a\x22\xc3\x4a\x4d\xe9\x5d\x21\x16\xa6\x33\xdc\xbc\x03\x35\xc5\xdd\x8f\x34\xe1\x48\x04\x8f\x03\xff\x96\x1c\x11\x67\xa0\xf6\x1a\x1d\xe2\x28\xc1\x0e\xe2\xf2\x94\x38\x17\x51\x1a\x4a\xdc\x34\x6a\xc0\xe6\x19\x71\x94\x6d\x00\x93\xc2\xb8\x1c\xcc\xee\x39\x71\x6e\xd4\x3e\x56\x2b\xdc\x5e\x10\x47\xd9\x44\x95\x5d\x23\x20\x29\x4d\xff\x36\xd0\x84\x87\xb0\xb8\x6a\x0c\x27\x9a\xcb\x6e\x78\xa2\x69\xbf\x2a\xa0\x0c\xfd\x84\xed\x5c\x65\x1f\x40\x19\xa6\x6b\x11\x05\x3f\xed\x09\x29\x43\xa5\xa9\xf6\x30\xc5\x8c\x75\x5b\x81\x85\xad\xa9\xa7\x42\xc1\xd3\x6a\x80\x58\xe3\xa2\x6b\xd4\x06\x08\x36\x92\x93\xaa\x8e\x14\x99\x9a\xfb\x07\xd4\xc3\x49\x7e\x40\x35\x35\x9b\x5b\x0b\x09\xca\x53\xaf\xf9\x54\xe6\x87\x05\x06\xdc\xcf\xe7\xf1\x70\x55\x58\xc0\xfd\x6e\x79\x06\xf3\x52\x44\xb0\x66\xf6\x9a\x5a\x3b\xdb\x3b\xd0\x0f\x58\x20\xe9\x30\xdc\xbb\xca\xfb\x54\xee\x53\x67\xbf\x16\xca\xcc\x1b\xcd\x3f\x5e\xf1\xe9\xed\xc5\xf5\x43\x98\x3f\x89\x4f\xd7\x4e\xb9\x7a\x54\x6c\x8f\x01\x5e\x0d\xaf\xaf\x08\x60\x18\x11\xcc\x8d\xc2\xe2\x91\xd1\x30\xdc\x1c\x2b\x1f\x57\x76\xdf\xc6\xc7\xbd\x62\xc9\x49\x2c\x0e\x0e\xd9\xb7\x0b\x07\xa3\xf2\xd5\xa5\x93\x88\x06\xe4\xd5\x1f\xd7\xe7\x57\x64\x16\x79\x69\x10\x91\xe7\x6f\x1a\x28\xf0\x55\x45\xc4\xef\x9f\xbf\x79\x70\x19\xf7\xd6\xe3\xbe\x42\x36\x01\x48\xde\x6e\xa8\xc3\x7d\x96\x24\x51\xd2\x10\x20\x35\x8f\xad\x08\xa9\xc9\xfe\x86\xc8\xbd\x21\xd2\x8c\xd1\x63\xc2\xc8\x35\xf0\x58\x3c\xe1\x58\x37\x7d\x5a\x80\x99\x75\xf8\xf7\x85\x9a\x5f\x8d\x6c\xbb\x34\xde\x06\x7e\xad\xc1\xac\x36\x9a\x6f\x86\x4c\x45\x28\x69\x03\x9a\x62\xea\xde\x32\xd9\x10\x9b\x0c\x93\xad\xe0\x64\xe8\xfe\x46\xa7\xbd\xd1\xc9\x0e\xd3\xdf\xf0\xf4\x48\xe0\x49\x07\x38\x5f\x17\xa4\xd6\xcb\xf0\x28\xa0\xaa\x04\x2d\xcd\xb1\x6a\xc6\x66\x07\x9c\x8d\x41\xad\x1c\xa9\x2e\xce\x2f\xca\x18\x05\x5f\xbb\xbf\xf3\xd0\xcb\x41\x0a\x4f\xd3\x35\x3c\xdd\x42\xf9\x0a\x78\xb2\x55\x76\x86\x02\xac\xf0\xba\xfd\x5d\x1f\x64\xbb\x72\x17\xd9\x7c\xd8\x4f\xc0\x56\xf7\x90\x81\xe1\x57\x38\x42\x2a\x98\x3f\xaa\x7b\x1f\xfa\x0d\xdb\x32\x5f\x60\x3f\xc6\x1a\x76\xf3\x29\x92\xa5\x28\xac\xdd\xb7\xd7\xe7\xdc\x27\xc7\xf9\x79\x37\xd5\x5d\x40\x7a\x35\x0b\xde\x26\xcc\x37\x79\x8d\x50\x72\x16\x85\x3e\x9f\x00\xcb\xe5\xb2\x78\x86\x39\x96\x61\x67\x1c\x44\xee\x6d\x76\x22\x4e\x88\x3d\xe8\x34\x7c\xce\x90\xf6\xb2\xc4\x83\x38\xd3\xe7\x64\x3c\xe9\xf0\xd0\x8f\x1c\x7c\x71\xb2\x63\x4d\xe0\x70\x36\xba\x29\x81\xd1\x89\xcd\x6c\xcb\x8e\xe7\x8b\x62\x63\xd6\xc0\xe6\xb6\x5c\xf5\x68\x72\x8b\x54\x2e\x6b\xad\x28\xcb\x20\xed\x4c\xb9\xe7\xb1\x10\xe4\xb1\xd9\x23\x9a\x34\xcf\xc3\xf1\xa3\x64\x96\x37\x78\xea\x62\xb6\xe7\x6b\x28\x2b\xeb\x05\xa9\xa0\x7b\xe5\xe4\x24\x58\xcb\x86\x71\x2a\xb3\x8d\x3e\xd5\x54\x47\xa4\xe3\x19\xcf\xb2\x92\xcd\x5b\xa1\x4e\x21\x61\x02\xb5\x2d\xa3\x28\xa8\xe4\x70\xd6\x68\x26\x49\x94\xc6\x24\x7b\xea\x88\x99\xcd\xdf\x55\xef\xd5\x04\x46\xba\x4a\x81\x6f\xb9\xc7\x94\xfa\x80\x8d\x62\x65\x73\x83\x4d\x92\x63\xed\x83\x19\xc3\x35\xf6\x63\xd8\x15\xc6\xd9\xb4\xfe\x56\x69\xa1\x9a\xbc\xb8\x4a\xa8\x3c\xab\xe1\xfc\x33\x58\x87\x87\x93\x02\xde\xea\x82\xd4\x65\xf6\xb8\x40\x6a\x6f\xb3\x8c\x9a\xed\x4a\x29\x6d\x96\x58\xde\x3a\xe2\x01\xbc\x55\x73\x51\x0b\x56\xda\xd2\xf0\x6c\x42\x0c\x10\x3f\x61\x62\xea\x90\x1f\xce\xa6\x94\x87\x5a\x45\xc4\xf9\xa0\x8b\x11\x00\x7e\xac\x26\xbc\xd4\x04\x84\x57\xb4\xd6\x27\xb5\x8f\xfb\x4c\xb7\xcc\x5a\xaa\x13\x49\x9d\xad\x3d\xd9\xa1\x2b\x59\xba\x41\x39\x47\xa7\x20\x84\x7a\xd8\x17\x04\x3d\x7f\x6f\x0c\xdc\x88\x80\x9e\xbf\x0d\x00\xb7\xc0\x9f\xe7\x6f\x46\xbf\x01\x9e\x6b\xa5\x82\x4e\x58\x5b\x20\x88\x2d\x36\xc0\x40\xcf\xff\x96\x21\x10\x95\xd7\x1e\x02\xa2\xf5\x34\x05\xc0\x1c\xfc\x06\xaf\xdb\xc6\xbe\x55\xf2\x59\xe8\xcb\x61\x6f\xf0\xfa\x31\xa3\x1e\xcc\xf8\xfd\x41\xaf\x96\xeb\x8f\x29\x88\x82\xd4\xa6\x4d\x81\x41\xc0\x2b\x03\x74\xad\x8e\xdd\xb5\xd6\x85\x3e\x82\x97\x98\xac\x90\x99\x8b\x53\x52\xee\xea\x2e\xae\x3f\xce\x57\xbc\xf4\x79\xac\xe6\x55\xca\x3f\xde\x55\x9e\xa7\x2d\xca\x03\xbc\x5e\xe1\xfe\xf8\x4a\x71\xf2\x54\xe8\x06\x2e\x45\x43\xd7\x06\x8f\xb2\xa2\xf2\xba\x61\x70\xea\xac\x8a\xb8\xbb\xd3\x41\xe9\x2a\x0f\xb5\x87\x14\x4f\x1b\x4a\x51\x3c\xbd\xab\x0b\xd1\x9a\xcf\xe4\xfb\xfb\xcc\x2d\x5e\x93\x6f\xf5\x9a\x5b\x97\x0d\x7c\x8b\xdf\xcc\xb6\xaf\x44\x5b\x7e\x93\x37\xf3\x9b\xfc\x9b\xf6\x9b\xbc\x55\xbf\xc9\x5b\xf5\x9b\xc3\xd6\xfd\xe6\x2a\xf9\xea\x7e\x73\xf8\xa8\xfd\x26\x7f\x34\x7e\x73\xd8\xa2\xdf\x34\xbc\x46\x7a\x0b\xf2\x40\xc7\x39\x6c\xd1\x71\x1a\x5e\xe7\xea\xf8\xa6\x81\x3c\xcf\x5a\x94\xe7\xd9\x83\x3b\x72\xde\x86\x23\x1f\x36\x76\xe4\xd5\xf3\x93\x83\x3c\xf9\xb0\xb1\x27\xaf\x1c\x32\x1f\x2c\xc5\xb3\x86\x52\x7c\xa1\x78\x02\x7f\x40\xd6\x72\x40\x01\x2c\x1b\x47\x14\x78\x22\xb0\x31\xa4\xb8\x60\xb3\x28\xb9\x6f\x2b\x9c\x50\xcd\x35\x88\x27\xa0\xfe\xb7\x1c\x50\x28\xf5\xb5\x17\x51\x68\x03\x3a\x3c\xa6\x30\x6c\xc4\x1d\x8d\xdb\x14\x0b\xf9\xad\x0c\x75\x18\xc1\x4f\x8f\x37\x7a\xc0\x39\xfe\x05\xf7\x1a\xcd\x64\x3a\x70\xaf\x31\x3b\x97\x6a\x77\xaf\x31\x16\xed\xee\x35\xc6\xa2\xe1\x5e\x63\x2c\x36\x03\xdc\x28\x89\x60\xbd\x24\xda\x5b\x32\x61\x83\x0d\x20\x2e\x16\xdf\x32\xc2\xa1\xf2\xda\x43\x92\x58\x34\x5f\x32\x8d\xae\xd4\x34\x81\xbf\x61\x24\x07\xcc\x4d\x18\x55\x6b\xa2\xa6\xcb\xa7\x77\x78\xb9\x04\xbc\x8f\x44\x58\x17\xb2\x73\xa0\x7c\xf9\xfa\xee\x00\xf1\xca\xf2\x5d\xe0\xef\x68\xd7\xc9\x67\xd7\x75\x79\xe3\x71\x90\x8a\x6b\x58\xdf\x3d\xe6\xd5\x1d\x60\xd3\x17\x84\x67\x8d\x03\x07\xa2\x73\x2c\x1e\x02\x9c\xe7\x93\xb6\x63\xd0\xf9\xa4\x71\x08\x3a\x9f\x6c\x06\xe8\x8f\x74\x92\xd0\x50\x92\x49\x10\x8d\xf1\x32\x2d\x49\x65\xda\x1a\x58\x63\xe3\x0d\xc0\x7a\x3e\xf9\x96\xc1\x1a\x95\xd7\x1e\x58\xa3\x29\xed\x0a\xd6\x8f\x05\x51\x60\x42\x7d\x41\x44\xd1\xc6\x7a\x20\xa2\xcc\x27\x6d\x23\x8a\xd8\x33\x03\x2d\x86\x48\xab\x00\x3c\xc6\x75\x94\x52\xd0\x90\xa4\x3b\x1a\x0e\xf2\x14\xb4\xd8\x26\xc8\xc6\xdc\xdb\x74\x41\x83\xc9\xe0\x2a\x32\xd9\x2d\xe7\x2b\xab\x71\x53\xa9\xf1\xc4\xa8\xd4\x7c\x35\x77\x2e\xec\xc1\x70\x94\xf0\x28\xe1\xf2\x7e\xcf\x6a\x97\xdc\xdd\x31\x3d\x2e\xab\x72\xc5\xff\xb5\x6f\x95\x0f\x4c\x80\x45\x85\x1b\x52\x7e\x31\x93\xce\xfe\x42\x30\x53\xc3\x35\x5f\xf7\x33\x50\x2d\x7b\x39\x57\xb9\x51\xe2\x9c\x75\x81\x07\xff\xec\xda\xbc\x4d\xa3\xb9\xee\x46\x8b\x3f\xc1\x1e\x09\xf5\x13\x6c\x30\xb2\x16\x7e\xa5\x8c\xcc\x7e\x25\xce\x4d\x6b\xcc\xfe\x1f\x98\x5d\x9d\x7f\x38\xf8\x37\xdd\xc8\xe3\x29\xf4\xee\x43\x4b\xf2\x3c\x23\xce\xe5\xb0\x25\x5e\xcf\x89\xf3\x71\xf8\xe1\xba\x25\x6e\x2f\x00\xc9\xcf\xaf\x5a\x62\xf6\xbf\xc4\xb9\x1e\x5e\x9c\x5b\x6e\x66\xfe\x1c\xcc\xee\xff\x88\x73\xf6\xfe\xe2\xe2\xf4\x72\x60\xb7\xa4\x1b\xa4\x55\x1a\xb0\x6e\x9e\x55\x69\xfd\xa1\x9a\x95\x78\x49\x0b\x4e\xcc\x1f\xd4\x45\x9c\xa4\x4b\x7e\xf9\x51\x95\x87\xa5\xc2\xa3\x1f\xf3\x29\xac\xaa\x94\x82\xce\x8a\xb3\xd3\x9f\xd4\xc9\x40\x89\xb8\xab\x0f\x0b\x08\xf0\x76\x54\x98\x64\x7c\x7c\xe1\x19\xbc\x3c\x31\xe2\x99\x8f\x53\x2a\x3a\x77\x34\x09\x39\xde\x90\xba\x73\x35\xeb\x66\x4a\xd7\x46\x16\xe8\xa9\xe7\xd9\xab\x3f\x4f\x4c\x1c\x90\x85\xa3\x18\xee\xea\x28\xae\x1a\xed\xe1\xa5\x66\x10\x82\x64\x4d\x69\x2a\x75\x3b\x64\xc7\x8f\xd2\x04\x2f\x18\xcb\xef\x59\x72\x08\x0c\xa4\xcb\xa6\x51\x00\x56\xd2\x37\xaa\xee\x5e\xf0\xd0\x34\xa8\xc2\x49\xa3\x37\x04\x5d\x53\x0c\xea\x29\x7e\xf9\x48\x83\xb4\xf4\xe9\x89\x32\x93\x4f\xe2\xf3\x59\x10\x09\x66\x54\xe2\xd8\x80\x60\x0f\x33\x28\x64\x5f\x43\xed\xea\xad\x3e\x01\x1d\xb3\x60\xd5\x1d\x3e\x5d\x2b\x02\x3c\xd8\x6b\x5e\xf6\x68\x75\x3e\x51\x67\x06\x8e\x8e\x17\x6e\xd9\x3d\x46\xe0\xba\xc8\x7a\x30\x90\x22\x0a\x90\x2f\xca\xf1\x22\xf3\x5e\xe6\x02\x49\xbd\x94\x50\xa6\xb4\xd6\x4d\xed\x20\x45\x16\xf8\x98\xc8\x66\x46\xdd\x69\xee\xa0\x4c\x2b\x17\x50\x88\xf5\x2a\x49\xf6\x50\xda\xbd\xb9\x29\x86\x38\x73\x4d\x6f\xe2\x9c\x34\xe5\x2b\x33\xed\x6d\xbd\xd5\xde\x57\x7d\x5e\x7f\x47\x83\xfa\x3c\x4a\xa2\x39\xf8\xfc\x64\x03\x09\xc4\x64\x72\x13\x0b\xd3\x35\x9f\x07\xb8\xa2\x94\xd3\x6d\xbe\x7e\x07\x5d\x0a\x08\x1e\xdd\xe9\x2e\x61\x24\xf7\x09\xfb\x8b\xd4\x47\x12\x1c\x7d\x92\xb2\x35\x38\x5b\xb1\x1c\x52\xe2\xb8\x89\x3e\xc3\xcb\x43\xe3\x17\x1b\x70\x67\x91\x8a\x5e\x30\x96\xaf\x75\x6b\xf2\x23\x00\x5e\x4d\xd3\xcf\x3f\xe1\xaf\xc9\xd6\x7e\x8c\x8d\x1d\xac\x25\xc0\x25\xf6\xfa\xea\x1e\x4f\x98\x2b\xd5\xa1\x50\x4b\x39\xff\x99\x11\x34\x70\x4f\x99\x27\x05\x0e\xe6\xaa\x59\x30\x9f\x77\x50\x82\x2b\x4d\xbc\x55\x3b\x3c\x0b\xb8\x7b\xdb\x5f\xc8\x29\x17\xdd\x29\x0d\xbd\x80\xa9\x12\x8b\x48\x48\x9b\xef\x60\xed\xd2\x66\xc5\x87\xe3\x40\x4f\x8b\x30\x68\x6e\xb1\x00\xde\xa7\x01\x9f\x84\x67\xba\x5c\x8f\xef\x4a\x19\xf3\xba\xa6\xdc\x54\xc9\x50\x2c\x97\xf1\x49\xbe\xaf\x52\xa8\x73\x46\x13\x26\x8b\x95\x94\x16\x8b\xb7\xa2\x51\xa3\xd8\x69\xd6\xc3\x7f\x07\x00\x00\xff\xff\x2a\x12\x4d\x6f\x52\x5d\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 23890, mode: os.FileMode(384), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

