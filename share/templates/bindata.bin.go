// Code generated by go-bindata.
// sources:
// index.html
// DO NOT EDIT!

// +build bin

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5d\x7b\x73\xdb\xc6\x11\xff\xdf\x9f\xe2\x82\x69\x3a\x49\x1a\x00\x96\x2c\xb7\x9e\x84\x64\xc7\x16\xd9\x14\x53\x49\xe6\x58\x92\xdb\x8c\x86\x93\x39\x12\x47\xf2\x62\x10\x40\x70\x07\x3d\xfa\xe9\xbb\x87\xc7\xdd\x81\x04\x49\x10\x04\x60\x75\x6c\xcf\x48\x22\x81\xdb\xf7\x3d\x76\x7f\x0b\xd2\x77\x77\x2e\x99\x53\x9f\x20\x23\xfd\xfb\x5b\x1c\x72\xba\x22\xc6\x64\xd2\x63\x21\xf6\x07\x77\x77\xd6\x10\x73\x6c\xb1\x27\xc6\xc9\xca\x4a\xef\xfe\x36\x0f\xa2\x15\xe6\x30\xc6\xce\x06\x11\xdf\x9d\x4c\x36\x78\x2d\x03\xc6\x7d\x9c\x72\xc3\x68\x19\x91\x79\xdf\xb0\x0d\xc4\x29\xf7\x48\xdf\xc8\xef\xa2\x5c\x46\x7e\x61\x32\x31\x06\x9b\xd7\x7a\x36\xde\x2a\xc8\xc3\x20\xe2\x45\xcf\xa5\xf7\x68\xe6\x61\xc6\xfa\x46\x14\x3c\x20\xf2\x08\xca\xb9\xc4\x05\xc9\xe6\x34\xe0\x3c\x58\x19\x83\x17\x08\xe9\xc3\x66\x81\x17\xaf\x7c\xc4\x56\xd8\xf3\xcc\x13\xc4\xc9\x23\x37\x23\xba\x58\x72\x63\xa0\x0f\xbb\xbb\xa3\x73\x94\x2a\x14\xe2\x08\xaf\x98\x75\x81\x7d\xeb\x8a\x2c\x30\xa7\xf7\xa0\x1b\x5b\x06\x0f\xa6\xf8\xb5\xa4\x2e\x01\x25\x3d\x06\x17\xc5\x6b\xfd\xa2\xd0\x3c\x51\x00\x54\x58\x9e\xe4\xac\x97\xaf\x53\xa9\xc1\x3d\x89\xe6\x5e\xf0\x00\x82\x71\xee\xa1\x8b\x00\xbb\x08\xdf\x2f\x90\x4b\x59\xe8\xe1\x27\x14\x80\xfb\x03\x9f\x19\xa9\x2f\x73\x1f\x65\x2a\xdd\x78\xd4\xff\x94\x68\x36\x99\x0c\x92\xe8\xe5\x32\x72\x25\x4c\xf1\x0b\xc1\x4b\x4e\xe0\xf6\x8c\x98\x61\x44\x10\x08\xc5\xdc\xf4\xc8\x1c\x6c\xb6\x2c\x0b\x65\x31\xcd\x65\x0b\xb7\xa7\x3a\xdb\xcb\x93\x41\xcf\x06\xaf\x24\x4e\x94\x2f\x36\xbd\xe9\xe1\x68\x41\xcc\x93\x93\x96\x7d\x18\x7b\x7a\xb0\x57\xc4\x8f\x91\x34\x54\xbc\xc8\xc6\xc1\x48\x8f\xe6\x2f\x8b\xfa\x52\x3f\x8c\xb9\xb9\x88\x82\x38\x34\xd4\x88\xad\x63\x4c\x0f\x4f\x89\x97\x86\xcb\x0f\x1e\x22\x0c\x54\x2e\x81\xb8\x48\x67\xec\x63\x30\x8d\x61\x16\xfa\x49\x88\xb3\xbb\xe9\x95\x74\x02\x22\x46\x66\x81\xef\xe2\xe8\x49\x04\x1c\x4f\x3d\xe2\xaa\x85\x20\x7d\xe6\xa6\x4b\xe1\x60\x99\xda\x50\x18\x8c\x4b\xa7\xd0\x30\x9f\x42\xae\x75\x41\x18\xb3\xfe\x09\x63\x60\x61\xa1\xe2\xbf\x4c\x88\xe6\x07\x54\x30\x63\x0f\xd3\xd1\x23\x8f\xf0\xb9\xe0\x01\xb1\x5c\xe3\x3d\x30\xf7\x51\xdf\x80\xd4\xd4\x03\xba\xed\x2d\x3b\xe3\x32\x88\x48\xe3\xce\x48\x98\xee\x74\xc6\x1e\xda\xd4\x15\xe8\x2f\xbb\x9d\x51\x78\xdb\xb3\xd5\x5a\x68\x73\x59\xc0\x8a\x64\x9d\xae\x0a\xdf\x7a\x3b\x65\xb0\xfd\x70\xd2\xe2\xf2\xb8\x92\x3b\xec\x31\xcb\x83\xc5\xb3\x19\x50\xaf\xcf\x8c\x75\xe6\x87\x2d\x93\x75\xea\xee\x96\x89\x26\xf9\x88\x65\xb2\xdf\x29\x07\x2f\x97\x75\xda\xa3\x96\x4b\xcf\x8e\xbd\xcd\xe3\x8c\xfc\xb1\x79\xa2\xe5\xf3\x10\xbd\x4c\x8f\xaf\xb5\x53\x4b\x63\xc1\x78\x44\x43\xa2\x8e\xa9\xb5\xf4\x85\x2f\x09\x86\xa9\x5e\x38\xc9\xd3\x94\x06\xc1\x41\x9b\xe7\x2c\xc6\x60\x4c\x22\x1a\xb8\xd9\xb1\xbd\x67\x74\x21\xc3\x41\x1f\xb1\x17\x93\xdd\x84\x20\x3f\xbb\x9f\xf8\x45\x3b\xc4\x3d\x2c\x12\xb1\x08\xfb\x0b\x82\xfe\xe4\x61\xf4\x53\x5f\xde\xb0\x2e\x28\x13\xb3\xaf\x68\x50\x05\x53\x4a\xb7\x23\xa5\x32\x7a\xa0\x2e\x5f\x9a\xaf\x22\xb2\x12\x5b\x00\x48\xb5\x52\xe3\x27\x93\x55\xaa\x5f\x1d\x2f\xa4\x8c\x12\x5f\xc8\x8c\x76\x0b\x03\xd3\x8b\x36\x1c\x92\x65\xa4\xc9\x9f\x17\x6a\x06\xe9\xbf\x55\xbe\xb4\x46\xb4\x96\xc6\xae\xc0\xae\x8e\xf3\xd8\x4b\xb2\xea\x20\x91\x05\x29\x41\xba\x7f\x57\x4e\x63\x85\x62\x4d\xe4\xb1\xa9\xe8\x16\xb3\xd8\x63\x3d\xf8\x45\xa6\xb1\xe0\xb4\x0e\xf2\x58\x21\xa5\xf9\x44\x56\x71\xad\x95\xc9\x2a\xf2\xce\x53\xd9\x44\x74\xe3\xb9\xac\xe2\x5a\x23\x99\x55\xc4\x5f\xb3\xd9\xc2\x8e\xd2\x5d\x3a\x9b\x88\x6b\x2d\x9f\x55\xdc\x6b\x25\xb4\x8a\xbc\xf3\x8c\x36\x11\xdd\x5a\x4a\xab\xb8\xd7\xc8\x69\x15\x71\x07\x49\x6d\x61\x3a\x76\x96\xd5\xe6\xe7\xf6\xe1\xf9\xdc\x4d\xc0\xb1\x57\x87\xf0\x96\x91\x5a\x69\xf4\x3f\x22\xb2\x27\x8b\xde\x2a\xef\xdb\xba\xd9\x37\xa4\x8a\x5a\xfa\x0d\xef\x54\xfe\x0d\x6f\x6a\x27\xe0\x90\x0b\x0b\xf2\x7f\x51\xdf\xdd\x97\x0b\x6f\x4d\xa6\x05\x83\x24\x06\x47\x71\x10\xc1\x38\x8a\x81\x88\x4a\x0d\x06\x68\xba\x30\x63\x46\xc2\x19\x37\x90\x0b\xee\xcc\xde\xf4\x95\x5a\xe3\x19\xb8\x56\xd7\x33\xb9\xb0\x27\x92\x2d\x57\x0e\xee\xbc\xeb\xc2\x61\x38\xef\xa0\x6e\x18\x52\xf6\x09\xc5\x0c\xc3\x1c\x3f\xa4\x76\x00\xdd\x9a\x28\x1d\x94\xf4\x16\xcb\x87\x23\xfd\xf8\x45\x56\x0f\xc3\x79\x07\xc5\x03\x08\x69\xbe\x76\x90\x4c\x6b\x95\x0e\x92\xba\xf3\xca\x41\x48\x6e\xbc\x70\x90\x4c\x6b\xd4\x0d\x92\xf6\x6b\xd9\xa0\xef\x24\xdd\x55\x0d\x42\x5a\x6b\x45\x83\x64\x5e\xab\x66\x90\xd4\x9d\x97\x0c\x42\x72\x6b\x15\x83\x64\x5e\xa3\x60\x90\xb4\x1d\xd4\x0b\xfa\x3c\x6c\xaa\x5c\xb8\xbb\xb3\x7f\x40\x61\xf0\x89\xa0\x30\x8e\xe8\xfc\x69\xc6\xd8\x4f\x85\xb1\x6e\x14\x84\x62\xa5\x16\x4e\x62\x1c\x11\xc8\xe2\xec\x6c\x1d\xa0\x1f\xec\xec\xa9\x86\x7d\x89\x60\xbe\x80\xef\xee\x1e\x28\x5f\x22\x48\x86\xc9\x63\xd1\xc6\x8f\xb9\x5b\x3f\x09\x0b\x5f\x94\xce\x8f\x0b\x18\x92\xce\x83\x4c\x5e\x76\x2d\x8b\x5c\x21\x70\x83\x21\xb9\xa7\x33\xa2\x6b\x07\xa3\xcf\x85\x01\xd9\x70\x95\x3c\xca\xc7\x20\x0e\xc9\x6d\x0f\x32\xe9\xa4\x11\x93\x2e\x83\xd8\xe7\x50\x51\xb5\x6c\x53\x21\x67\xad\x64\xde\xeb\x46\xcc\x4b\xcb\xcc\x67\x67\xdc\x59\x23\xc6\x25\xa5\xf0\xb3\xb3\xed\xb4\x11\xdb\xde\xde\x63\xfa\x0c\x03\xf7\xaa\xa9\xc0\x7d\xdb\xa4\x6d\xdb\x11\x08\x77\xae\x01\x10\xee\x5c\xe1\x0f\xee\xbc\x26\xfc\xb0\x5e\x07\x42\x85\x0d\xbc\x60\x67\xbc\xca\x1e\x00\xab\x1e\x04\xc5\x04\x65\x5c\x68\x54\x9f\x8b\x0e\x0f\x2c\x22\xfc\xb4\x66\x49\x5a\x3e\x6a\xf0\x03\xc8\x2b\x03\x40\xb2\xa2\xd6\xf1\x03\x97\x30\xc4\xc5\x08\x39\x3e\xbd\xa8\x08\xba\xd1\xb2\x04\x64\x29\x2a\x19\x33\x91\x68\xe6\x3a\xc6\x85\xe1\xdd\xa8\x98\xac\xd6\x9d\x3a\xce\x23\x42\x94\x8e\xf3\x02\xec\xd3\x80\x8e\x3b\x00\xa1\xd4\x83\x29\x1e\x54\xc5\xd7\x25\x40\xd1\x86\xbb\xbf\x2d\xb8\xbb\x48\xf1\x39\x11\xa6\x59\x18\x77\x0d\x31\x9d\x8f\x6f\x3b\xc0\x98\x40\xca\x41\xe0\x92\xd0\xaa\x09\x74\x09\xf8\xb4\x08\x2b\x1d\xeb\xbb\x2f\x12\x57\x02\xa7\x75\x00\x2c\x09\x29\xcd\x23\x4b\x8a\x6b\x2d\x68\x49\x91\x77\x8e\x2d\x25\xa2\x1b\x07\x97\x14\xd7\x1a\xe8\x92\x22\xfe\x0a\x2f\x15\x76\x94\xee\xf0\xa5\x44\x5c\x6b\x00\x93\xe2\x5e\x0b\x61\x52\xe4\x9d\x43\x4c\x89\xe8\xd6\x30\x26\xc5\xbd\x06\xc8\xa4\x88\x3b\x40\x99\x0a\xd3\xb1\xb3\xae\xf4\x39\x58\x57\xb3\xd5\x1b\xed\xe9\x10\x96\x13\x5e\x3f\xb1\x5a\x74\xff\xc6\x94\xd7\x22\x74\x5c\xaf\x7e\x57\x1a\x92\x44\xad\x28\x84\x77\xaa\x2a\x84\x37\x47\x95\x85\x0a\xc0\x12\x7c\xad\xab\xe3\x5a\xbb\xf9\x1c\x5c\x4b\xe8\x05\x67\x11\x2a\xd5\xe2\x2d\x5c\xc9\xfd\x92\x4f\xa2\x86\x25\x43\xac\x8b\x82\xf3\x0b\x2d\xcb\x15\x73\xa5\x28\x58\x5e\x69\x40\xb2\x49\x7d\xc8\xba\x19\xd9\xa5\x81\x98\x74\x45\x0d\xe4\x95\xcf\xdb\x57\xa7\x9d\xf7\xd5\x9d\x2e\xfa\xea\x8e\xcf\xe1\x22\x14\x28\xec\xa0\xd2\xc7\x69\xa6\xaf\xae\xa4\xb7\x58\x00\x1d\xe9\xc7\x2f\xb2\xfe\x71\xba\xe8\xab\x3b\x6d\xf4\xd5\x9d\xa3\xfa\xea\xce\x67\xeb\xab\x3b\x6d\xf4\xd5\x9d\x23\xfa\xea\xce\xd7\xbe\xfa\xe6\xaa\xe8\xb2\xee\x71\xda\xec\xab\x3b\x47\xf5\xd5\x9d\xcf\xd6\x57\x77\xda\xec\xab\x3b\x47\xf4\xd5\x9d\x0e\xfb\xea\x4e\x0b\x7d\xf5\xbd\x05\x8f\x3c\xab\x6b\xd5\x12\xe3\x32\xac\x7b\x18\x05\x21\xfb\x71\x14\x45\x41\xc4\x90\xe3\xdb\xef\x63\x8e\x42\x12\x65\x4b\xd1\xd8\xca\xfc\x54\x4f\x2f\x0b\x1b\x02\xba\x08\x20\xba\xce\x7b\x14\xb2\x32\x81\x63\x3c\xfb\x44\x78\x53\xb2\x24\xb7\x6d\xe2\xde\xd1\xc6\x64\x81\x8c\x1e\x1d\x4c\x7b\x36\x1d\xac\xc9\x3a\xa0\x28\xf3\x09\x64\x76\x5a\x59\x46\xb5\x5e\x5d\x72\xaf\xb9\x76\x1d\x9d\x5b\x8d\x74\xd9\x72\x66\xce\xb8\x22\xab\xed\x3e\xfc\xb3\x3f\x65\xe1\xcf\x85\x00\x25\xbd\x39\xe4\x26\xd3\x90\xa4\xd3\x70\x15\xb8\xb1\x17\xa0\xb3\x5f\x64\x98\xf4\xf6\xd4\x26\x1d\xc4\x57\xa3\xc9\xb4\x4d\x26\xb6\xe3\x4b\x95\xed\xad\xd4\x62\x6a\x94\x93\xc3\x1d\x49\xff\x63\x09\x3d\xc9\x97\xcd\x26\x7d\xba\xa2\xf6\xc8\xcf\xe8\x4b\x15\x48\x19\xe8\x1a\x64\x7f\x74\x1f\xea\x3b\x94\x88\xc1\x77\xb0\x4d\x25\xda\x13\x8f\xe3\xcc\x03\xc8\x78\x69\x7c\x5f\x72\x47\x48\xdd\xbc\x95\xeb\xbd\xf5\x56\x4e\x36\x99\x88\xa0\xc8\x2d\x6f\x73\x53\x11\x6e\xd1\x56\x5c\xee\x57\x4d\xb3\x2d\xbe\x19\xca\xa8\xec\x22\xdf\x1e\x1b\xb9\x99\x6d\xa3\xdf\x13\x9b\x91\x8a\xca\x4e\x06\x25\xb1\x69\x70\x79\xec\x9b\xf9\xa1\xdc\x47\x37\xe7\x4e\xb6\x2b\xee\x99\x7d\x39\x87\xd2\xe9\x97\xb1\xd8\x33\xff\x36\xf6\xf4\x6d\x1e\xdb\xa7\xd1\x58\xd3\x65\x37\x8b\x32\xaf\x77\xe0\xee\x77\xbf\xde\x8c\xae\x4b\x9d\xfd\xee\x09\xaa\xec\x3d\xae\x4e\xa9\x4b\x1d\x9d\x90\x57\x73\xf3\x3b\xe7\xe6\x7a\x87\x8f\xc5\x51\xb7\x55\x8f\x84\x76\x87\x77\x05\x71\x75\xd7\xb6\x0c\xf4\x84\xac\x6b\xa0\x67\xcc\x3a\x00\x7a\xc6\x51\x20\x32\xdf\x03\x71\x1e\x50\xad\x09\x9c\x47\x0a\x6f\x11\xe6\x39\xd2\x8b\x5f\x24\xcc\x33\x66\x1d\xc0\x3c\x20\xa4\x79\x98\x47\x32\xad\x05\xf3\x48\xea\xce\x61\x1e\x21\xb9\x71\x98\x47\x32\xad\x01\xf3\x48\xda\xaf\x30\x8f\xbe\x93\x74\x07\xf3\x08\x69\xad\xc1\x3c\x92\x79\x2d\x98\x47\x52\x77\x0e\xf3\x08\xc9\xad\xc1\x3c\x92\x79\x0d\x98\x47\xd2\x76\x00\xf3\xe8\xf3\xf0\xff\xf9\xe3\x13\x87\x3d\x01\x3d\x66\x4d\x7d\x92\x62\xec\x0c\x9f\xd7\xc3\xdd\xc2\xb4\x66\x3e\x51\x71\xdb\xbe\x69\x15\xed\x69\xe6\x49\xfc\xdb\xeb\xd1\x87\xe7\x17\xab\x66\x1e\xc4\x1f\x3f\x43\xcb\x9a\xf9\x6c\xc8\x95\xf3\xfc\x2c\x6b\xe6\x23\x3d\x1f\x9d\x0f\x37\xcf\xcf\xb6\xbf\x36\x62\xdb\x87\xd1\x75\x37\xa6\xcd\x88\x68\x19\x54\xb4\xed\x6f\xcd\x7c\x14\xcb\xb9\x1c\x3d\x93\x8d\xf1\x4d\x23\x06\x9d\xbf\xbf\xbc\x7c\x7b\x55\x73\xb3\x5f\xc7\xff\x43\x28\xc3\x99\x86\xff\x87\x4c\xe1\xff\xc9\xbd\xa3\xf0\x7f\x85\xd7\x87\xe0\x01\x67\x58\xfb\x3b\x3b\x80\xfc\xb6\x3a\xb9\xa2\x61\x24\x3a\x46\xe6\x38\xa2\x41\x44\xf9\xd3\x31\x3c\xae\xe8\xac\xce\x57\x8d\x48\xfa\x6b\xfa\xdf\xa3\xe8\x3f\x10\x06\x49\xa2\xcf\x0f\xe3\x91\x2f\xd4\x8c\xc9\x0d\xdd\xdf\xb8\x51\x16\x17\xba\x3c\x47\xc3\x71\xbd\x6f\x86\xef\xcf\x6f\x7e\x1d\x8f\xd0\x92\xaf\x3c\xb8\x99\xfe\x11\x30\x17\xe4\xaf\x59\xd6\xbb\x22\x1c\x8a\xbb\x25\x8e\x18\xe1\x7d\x23\xe6\x73\xf3\x4d\x9e\x10\x27\x68\x57\xc9\x77\x86\x23\x78\x05\x56\xf6\xec\x74\x80\xc6\x67\xc9\x79\x68\x92\x3f\x62\x7a\xdf\x37\xfe\x63\xde\xbe\x35\xcf\x83\x55\x88\x39\x85\xd2\xd0\x00\x4b\x7d\x41\xd6\x37\x9c\x51\x9f\xb8\x8b\x3c\xbd\x4e\x29\x05\xe7\xbe\x71\x4f\xc9\x43\x18\x44\x5c\x1b\x9c\x7c\x39\x65\xdf\x4d\x3e\xc8\x6b\x26\x6f\x7e\x84\xcd\x82\x72\x8a\x3d\x93\xcd\xb0\x47\xfa\x27\xd6\x4b\x58\x55\xdf\x98\xa6\x58\x9c\xce\x68\x92\xb1\x15\xbb\x07\x8a\x88\x97\xa0\x6c\x11\x9f\xc5\x1c\x51\xe0\x6a\xe4\xdf\x98\x3e\xc7\xf7\xe2\xbd\x05\xbf\x04\xb9\x70\x19\x9d\x4f\x4c\x73\x83\x3c\xa5\x62\x30\x9b\x20\x6a\xaf\x4e\x1f\x5f\x9d\x4a\x1e\xe0\x9b\xf7\x89\x2f\x3e\x92\x88\xd1\xc0\x9f\x4c\x72\xb6\x2c\x7f\x61\xbe\x3a\xb5\x42\x7f\x61\x20\xfe\x14\x82\x85\x57\xf8\xca\xd8\x90\x80\xc3\xd0\x23\x26\x0f\xe2\xd9\xd2\x2c\x48\x3b\x39\x7d\xf9\x08\x3f\x07\xc9\x83\xf1\x89\xc0\x03\xa4\x9c\x9d\x3d\xc2\xcf\x61\x52\xce\xce\x0e\x95\xf2\xfa\xf4\x11\x7e\x0e\x93\xf2\xfa\xf4\x50\x29\x6f\xc0\x63\x6f\x0e\xf4\xd8\x9b\x2d\x1e\x63\xfc\xc9\x23\x6c\x49\x44\xc1\x96\x86\x4f\x2c\x71\x1b\xea\xbc\x5d\xfc\xe1\xb6\x9d\x1c\x67\x96\x18\x98\x2e\xce\x7c\xc1\xf5\xa6\x81\xfb\xb4\x59\x6f\xf2\x00\x2a\x7b\x1c\x95\x16\x9c\xd9\x3d\x33\x59\x6c\xfa\x97\xb9\x2e\x4f\x35\xac\x7a\x85\xa3\x05\xf5\x33\x38\xdd\x7c\x99\x1f\x33\xc9\x53\xa1\x29\x18\xdf\xdf\xf8\xff\x03\x72\xf2\x38\x84\x61\x84\x89\xe3\x86\x93\x55\xe8\xc1\x9b\xcd\xff\x6c\x00\x59\x72\x67\x92\x07\xb0\x21\xd6\x3b\xfb\xc9\xb6\x1f\x1e\x1e\x2c\x18\x18\xc1\x8f\x35\x0b\x56\x76\xba\x41\xd8\xe0\x44\x82\x19\x61\xb6\x60\xc9\xf8\xdf\x67\xab\xb0\xbf\xe9\x30\x63\x90\xef\x27\x02\x1c\x5a\x9e\xaa\x12\x5f\x1d\xb9\x29\xc9\x6d\xb8\x88\xb0\x4b\xe4\xb9\x5e\xe6\xa6\x14\x2f\x6f\x5a\x43\x79\x4d\xaa\xa0\xa0\x2c\x7d\x6f\x4e\x75\x2a\x07\xef\x72\x0d\xb3\x53\x46\x4f\x68\xf6\x85\x52\x1c\x30\xc9\x46\x4c\x05\x32\x31\x85\x2d\x38\x0e\xd1\xf6\x08\x67\xff\xdb\xc4\x5a\x7c\xd7\xfa\x0b\xa5\xe1\xce\x29\x2d\xbd\x7f\x94\x48\xd7\x23\xb3\x81\xc5\xc8\x37\x5a\xcc\x7c\x82\xbe\xf3\x88\x8f\xac\xd1\xa3\xd8\xd2\xa9\xbf\xf8\x5e\x62\x11\x15\x3b\x42\xeb\x43\xd7\xba\x18\xd9\xc1\x1b\xcc\xe7\x70\x76\x6d\xfd\xa2\xe3\x35\x2c\xa7\x4c\x7c\xa5\xc7\x76\x4e\x8d\x81\xb4\x04\xf1\xa0\xa4\xe7\x38\xc5\x70\xaa\x29\x50\x54\x38\xb8\xe8\x80\x03\x3f\x41\x0b\xa1\x1f\xf9\x6e\x18\x50\xb1\x36\x0a\x39\x41\x96\x73\x02\x49\x90\x64\x9d\x9a\x84\xed\x66\x56\x30\x10\xd2\x10\xc1\xf3\xa0\xc7\x4d\x5e\x2a\xb2\x5c\xdb\xf2\x1c\xa6\xf2\xe4\xd1\x52\x1d\x61\x41\xd9\x0c\xf7\xf0\xe6\xee\x85\x4a\xe6\xb3\x18\x97\x4e\x66\x25\x65\x1b\x4f\xf1\x3d\xd1\x55\xb6\xc4\x64\x5c\x45\x9e\xee\xbc\x9a\x9e\x62\x5c\x55\x9e\xe2\x33\xc3\x55\xf4\x4c\xc6\x55\xe4\x49\x2b\xea\x49\x0f\xd0\x33\x64\xd5\x78\x8a\x71\xeb\x3c\xd9\x0c\x16\x2d\xd7\x0f\xdd\xdf\xf1\x3d\x4e\xaf\x1a\x83\x7b\x1c\x21\x91\x93\xa2\x7e\x8e\x4a\x4f\x26\x3f\xc3\x94\x4b\x6e\x57\xe1\xb0\x9e\xf0\x22\x16\xcd\xca\x0f\xf3\xdf\x99\x9d\x9e\x40\x37\x6f\x7f\xf9\x65\x34\x9c\x52\xb8\xb8\xa2\xbe\x3d\x8d\x7d\xd7\x23\x16\xbc\xb4\x7e\x67\x79\x4f\x14\xb8\xe4\x37\x92\x8b\xd9\x13\x35\x9a\x62\x3d\x3b\x4d\x00\x60\x37\x15\xb9\xf8\xff\x02\x00\x00\xff\xff\x67\xdd\x97\xe1\x28\x68\x00\x00"

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 26664, mode: os.FileMode(420), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

