// Code generated by go-bindata.
// sources:
// index.html
// DO NOT EDIT!

// +build bin

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5c\x7b\x73\xdb\x36\x12\xff\x3f\x9f\x02\xe5\xa5\xf7\x47\xa7\x94\xea\x47\xee\x72\xa9\xe4\x1b\xc7\x72\x53\x4e\x63\x47\x63\xcb\xbe\xeb\x74\x3a\x1d\x88\x84\x24\xd4\x14\xc9\x12\x90\x6c\x57\xa3\xef\x7e\x8b\x07\x29\x92\x12\xf5\x20\x61\xc7\xba\x26\x33\xb1\x48\x00\xbb\x58\x00\xbb\x3f\x2c\x80\x25\x5a\x5f\x75\x3e\x9d\xf5\x7e\xee\x9e\xa3\x11\x1f\xfb\xaf\x4e\x5a\xf2\x07\x21\x78\x20\xd8\x83\x07\xf1\x38\x26\x1c\x23\x77\x84\x63\x46\x78\xdb\x9a\xf0\x81\xfd\xd6\xd2\x59\x9c\x72\x9f\xc8\x67\x78\x9b\xcd\x1a\x1d\xcc\x71\xe3\xc7\x90\xf1\x00\x8f\xc9\x7c\x8e\xe0\x89\x04\xbc\xd5\x5c\x94\xd3\xec\x46\x9c\x47\x36\xf9\x63\x42\xa7\x6d\xeb\xbf\xf6\xcd\xa9\x7d\x16\x8e\x23\xcc\x69\xdf\x27\x16\x72\xc3\x40\x90\xb5\x2d\xe7\xbc\x4d\xbc\x21\xb1\xb2\x94\x82\x73\xdb\x9a\x52\x72\x1f\x85\x31\xcf\x14\xbe\xa7\x1e\x1f\xb5\x3d\x32\xa5\x2e\xb1\xe5\xcb\xb7\x88\x06\x94\x53\xec\xdb\xcc\xc5\x3e\x69\x1f\x68\x46\xb3\xd9\x8f\xbd\x8b\x8f\xc8\x6a\x7d\x65\xcd\xe7\xb6\xfd\x0b\x1d\x20\xe7\xfc\xd7\x93\x96\x4f\x83\x3b\x14\x13\xbf\x6d\xb1\x11\xf0\x76\x27\x1c\x51\x60\x6f\xa1\x51\x4c\x06\x6d\xab\x39\xc0\x53\xf1\xde\x80\x3f\xab\x38\xfd\x42\x02\x8f\x0e\x7e\xb5\xed\x2c\x27\xc5\x80\xd1\x3f\x09\x6b\x5b\x47\x87\x0f\x47\x87\x45\x76\x2c\x79\xb0\x8f\x0e\x1b\x51\x30\xb4\x10\x7f\x8c\xa0\x89\x74\x8c\x87\xa4\x29\x12\x74\xf3\x17\x4c\x71\x14\xf9\xc4\xe6\xe1\xc4\x1d\xd9\xb9\x0a\x0e\x0e\xbf\x7b\x80\xff\xe5\x55\x40\x66\x63\x47\x96\xc7\xc7\x0f\xf0\x7f\x0d\xcb\xe3\xe3\x5d\x59\xbe\x39\x7c\x80\xff\x6b\x58\xbe\x39\xdc\x95\xe5\x5b\x68\xf8\xdb\x75\x0d\x7f\x5b\xd2\x70\xc6\x1f\x7d\xc2\x46\x84\xf0\xa4\xe3\x39\x79\xe0\x4d\x97\xb1\x94\x19\x3c\x37\x69\xe0\x91\x87\x86\x48\xd5\x1c\x98\x1b\xd3\x88\x67\x49\x7e\xc7\x53\xac\x52\xad\xa2\xb9\x20\x16\xbb\xc0\xe8\x77\xd6\x8c\x85\xd2\xc7\x04\x9e\x0e\x1b\x07\x8d\x83\xb7\x49\x42\x63\x4c\x83\xc6\xef\x50\xa7\x07\x26\x64\x8f\x31\x0d\x54\xf9\xd9\x0c\xb4\xb3\xd1\x3b\xfd\xf0\xe1\xbc\xd3\xa7\xc1\x7c\x0e\xe5\xb4\x30\x8a\x62\x36\x23\x3e\x03\x5b\x83\x1a\x9a\x63\xea\xdf\xe9\x4c\x99\x11\x78\xf3\xb9\x95\x98\x67\xab\xa9\x84\xd3\xf2\x37\xb5\x85\x9f\xb4\xfa\xa1\xf7\xa8\x13\x03\x3c\x45\xae\x8f\x19\xf4\x28\x3c\xf6\x71\x8c\xd4\x8f\xed\x91\x01\x9e\xf8\x3c\x79\x65\x1c\x6c\xd5\x85\x81\x88\x2c\x14\x87\x60\x5a\xa2\x38\x1d\x42\x22\x8c\x49\x5a\xa1\x47\x53\x6e\xc2\x4a\xa1\x4d\x24\xb6\x07\xfe\x84\x7a\x49\x99\x42\x29\xcd\x5d\x48\x46\x62\xb0\x6c\xdf\x1e\x7b\xf6\x01\x8a\xb0\xe7\xd1\x60\x68\xfb\x64\x00\x30\x92\x0c\x41\x42\xdf\x9f\x70\x1e\x06\x05\x16\x3c\x1c\x0e\x7d\x22\x58\xf8\x38\x62\xc4\x4b\xc6\x56\x15\xd6\xbd\xac\x0a\x09\xe1\x54\xa9\x24\x19\xc7\x43\x31\x74\x7f\xd3\xbc\xd2\xec\x4c\xb5\x52\x03\x22\x9c\x56\xcb\x62\x3b\x0c\xfc\xc7\x7c\x11\x28\xd4\x53\x72\x2c\x7a\x07\x46\x01\xc8\xd6\x70\x92\xda\x0a\xd5\x2e\xb1\x7a\x31\x94\x4d\xd5\x89\xb9\x41\xc0\x88\x7a\x6d\x6b\x04\x3d\x9b\x1f\x87\x7e\x8c\x03\x0f\xd2\x28\x28\x8a\xb4\xb4\xb6\x35\xc6\x0f\x0a\x9e\xdf\xa1\x83\x43\x77\x94\x5a\x19\x0c\x91\x98\x25\x80\x8b\x9e\x3f\xd0\xf2\x84\x52\x18\x82\xe5\x02\xad\x26\xce\xc9\xd5\x04\xed\x2a\xe8\x9a\x10\xb4\x38\xb2\x0b\x35\x55\x09\x68\xcd\xd0\x9f\xb4\x26\x7e\xa6\x95\x49\x51\xf8\x29\x2a\x88\x4f\x93\x72\xd8\xe5\x74\x4a\x96\xbb\x17\xeb\xc6\x8b\xe9\x90\xbd\x6b\x36\xef\xef\xef\x1b\xd0\x96\x18\xfe\x37\xdc\x70\xdc\x54\xf3\x27\x60\x84\x4f\x30\x23\xac\xe9\x63\x4e\x18\xff\xb7\x3b\x8e\xda\x49\xdb\x6f\xcf\xaf\xae\x9d\x4f\x97\xc5\xbe\x91\xfc\x93\xe9\x17\x2f\x8f\xab\x4f\x4b\x85\x4d\x4c\x08\x30\x0d\x65\x9e\x01\x94\xe2\x21\x0d\x84\x01\xa2\x01\x8d\x19\x97\xa9\xcb\x6d\x72\x43\x8f\x14\x58\x89\x24\x40\xdc\xa5\x0e\x90\x22\xa6\xc3\xdc\x71\xae\x7b\x57\xce\x7b\x31\x88\x82\xc0\xb0\xcc\x75\x05\xa5\xd1\xdf\x83\x3e\x8b\xbe\x57\x86\x23\x94\x08\x74\x7a\xa9\x58\x46\x29\x9d\xae\x68\xc9\x92\xfd\xe8\xb6\xbc\xc0\x16\x4e\x96\x5a\x38\x59\xdf\xc2\x9b\x88\x53\x65\x74\x7b\xd4\x4a\x1f\x17\x5b\xe9\xe3\xb5\xad\xfc\x78\x6a\xa0\x85\xcd\x89\xbf\x0e\x97\x32\xaf\xf0\x02\x8d\xd0\xf3\xf1\xe6\x19\x34\x57\x26\x0e\xef\x8b\x33\xab\x68\xe0\x98\x8c\x61\x52\x53\xae\x75\x8a\x73\x62\x6a\x3d\x4e\xe6\xd8\x70\x30\x00\x6f\xc5\x3e\xc8\xe1\xdc\x6c\xc6\xc9\x38\x12\x90\x83\x2c\x98\xff\xa1\x6e\xf6\xee\x9d\x7a\xf8\x0d\x7a\x83\xf8\xc0\xd7\x42\x0d\xd1\x3b\xab\x51\xd6\x1b\xac\xae\xf6\x4d\xbd\x6a\xbd\xc1\xca\x5a\x73\x7d\xb8\xb9\x53\xdc\x68\xf2\x24\x9d\x02\x7c\xd7\x76\x0a\x7d\x9a\x4e\xa1\x46\x3a\x25\x62\xab\x85\x3b\xf8\xae\x9e\x74\x11\x33\x21\xdd\x74\xf8\x34\xd2\x4d\x87\x9b\xa5\x4b\x5f\x36\x78\xfe\x09\xc1\x14\x7c\x67\x01\x1f\xa8\x9d\xcc\x6f\xf3\xf9\xf7\x45\x17\x5c\x7b\xde\xc2\x19\x97\xcb\xef\xd9\xac\xf9\xcd\xab\x6f\x9a\xf3\xf9\x6c\xa6\xe4\xcb\x08\xdc\xc7\xb0\x12\xf6\xc4\xba\x45\xb8\xc1\xb0\xdc\x4c\x9c\x07\x60\xff\x23\xfc\x8a\xd5\x76\x70\xe6\x53\xf7\xae\x3d\xe3\x23\xca\x1a\x23\xf0\xbc\x7c\x22\x53\xe6\x20\x83\xec\xb2\xf9\x5c\x14\x3f\x53\x8f\x50\xf3\xab\xd4\x13\x5c\x14\xb0\x1e\x7c\xdc\x27\x3e\x52\x3f\x89\xe7\x9f\x2e\x78\x1b\xef\x85\x20\x19\x48\x3c\x11\x0d\xec\x41\x37\x28\xef\xeb\x44\xaf\x3b\xb6\x6b\x4b\x4c\x87\x23\x93\x8d\x49\x45\x41\xb5\x9b\xb5\x6d\x63\xb4\x26\x81\xdd\x83\xda\x32\x4b\x94\xb9\xa7\x7c\x84\xc4\x1b\x28\xa3\xd0\x2c\x60\x2f\xfe\xa8\x85\xda\x6c\x06\x3e\xf1\x90\xa0\xd7\xf4\x5b\xf4\xda\x0d\x63\x82\xde\xb5\x91\x9a\x6a\xce\xba\x37\x8d\x8f\x94\x89\x9e\xe4\x31\xc8\x7e\xca\x79\xfc\x13\x79\x44\x12\xac\x80\x5f\xff\xd1\xbe\xb4\x14\x51\xe3\x52\xb6\xf9\xa4\xc5\xbd\xc4\x1a\xe4\x44\x29\x3b\x14\x05\xe1\x7d\x8c\xa3\xb4\x71\x29\x45\xab\xc9\xbd\x52\xaa\x74\x65\x5b\xe8\xb8\x09\x23\x11\x89\x5d\xf0\x24\x95\xc7\xa7\x56\x49\x8b\xd4\x76\x52\xc1\x0d\x23\xb1\x94\x2a\x57\xad\x4a\xcd\xcc\xa0\x27\x4f\x2b\xc5\xf5\x23\x5b\x16\x42\x26\x3e\x9f\x0c\xff\xc1\x94\x2f\x0b\xa1\x52\x4d\x4b\x61\xd3\x60\x4a\xe2\x74\xf5\xba\x42\x1a\x07\x4c\x67\x59\x1a\x95\xba\x52\x9a\x26\x8f\x33\xaa\x9f\xff\xd9\xc6\x10\x14\x4a\x8b\x42\xaf\xa3\x85\x76\x77\x71\x8c\xc7\x62\x18\x64\x36\xb4\x48\x9a\xee\x65\x18\xfc\x49\xe2\x10\xbd\x8e\x84\xfa\x07\xc8\x52\xb9\xf2\xaf\x3d\x0a\xa1\x69\x16\x4a\xd7\x65\xf6\x88\x7a\x1e\x09\xac\x44\xf7\x33\xbb\x94\x20\x72\x82\xd5\x7c\x94\x45\xf1\xf4\x4d\x64\x6c\xb0\x15\x59\x4c\x28\x6c\x6e\x79\x3c\x09\x68\x6e\x9d\x73\xf2\x75\xc1\x1f\xac\x52\x0b\x68\xe4\xd3\x57\x22\x34\xee\xe9\x6b\x11\x9a\x54\xa7\x96\xa6\x1e\x3b\x99\x9a\xec\x4a\xf1\xc5\xb6\xd4\xba\x09\x3c\x81\x5d\x35\x81\xf3\xc5\x8c\x2a\x15\x68\x17\x00\xf7\x06\xfd\x47\x58\x5d\xff\xb6\x23\x8a\x7b\x94\xdd\x2d\x74\xbc\xf3\x83\x64\xb2\x1a\xc5\x75\x0d\x1a\xc9\x3d\x1a\x8b\x3d\x0b\x4b\xb1\x68\x74\x68\x7c\x29\xb7\x30\x34\x1e\xa4\xd8\xad\x72\xc9\xf4\x52\x6f\x70\xa4\x88\x51\x28\x91\xd0\x6f\x83\x29\x09\xd1\xe9\x14\x53\x7f\x5b\x92\xf2\x41\x58\x60\x4e\xd2\x1a\xb0\xa1\xae\x4a\x99\xcf\xd5\x7a\x2b\xa9\x12\x72\xbc\xdd\x84\xec\x85\x1c\x67\x85\xac\x85\x4e\xc9\x28\xef\x02\x51\x3d\xdc\x17\xf0\xd4\x19\x04\xea\x87\xa3\x43\x03\x30\xb5\xb2\x43\xd5\xd6\x27\x09\x26\x63\xe1\x1d\x59\xe8\x56\x6e\x54\x83\x88\xb2\xe2\x3b\x74\x80\xac\x8e\x3c\xe1\x80\xda\xa4\xf4\x15\x78\x80\xf0\x17\xe1\x24\xe0\x62\x57\xb4\x32\x93\x23\x64\x49\xe5\x01\x16\x99\x81\xab\xc8\xec\x18\x59\x37\x72\x93\xd6\x00\xaf\x37\xc8\x92\x0a\x53\x64\x56\x0b\x65\x72\xd8\x60\x02\x6a\x68\x10\x7a\xf5\xb1\x46\x71\x29\x03\x1b\x95\xfb\x82\xd0\xc6\x19\xc4\x64\x6b\x92\x5d\xd0\xc6\x99\x94\xc2\x8d\xc8\xda\x11\x6f\x1c\xd9\x6f\xe6\x00\x47\x8f\x75\x3d\xc4\x39\x30\xe3\x18\x25\x8d\x57\x56\x94\x99\xc3\x15\xaa\x94\x4c\xfe\x4b\xa5\x35\x7e\xac\x2d\x8e\x8a\x1d\x2c\x8b\x49\xd0\xa8\x40\x27\xf0\xa1\x02\x99\x84\x02\x63\xce\x46\xde\x6e\xeb\xe3\x00\xad\xe6\x72\xd0\xc1\x42\x7f\x9c\x75\x0e\x07\xcd\x39\x1c\xda\xfe\xe9\xa0\xb1\xda\xf4\xd3\x8c\x2d\x8d\x05\xca\x77\x88\xcf\xb1\x13\xec\x4c\xf2\x69\xc2\x77\xa1\xd9\xad\x86\x3c\xf3\x5a\xc6\x4b\xab\x7b\x0b\x8e\xb2\x5d\x07\x6c\xf7\xc8\xf4\xa2\xc6\x01\xe3\x8b\x07\xb8\xd4\x5e\x97\x9d\xf5\xe4\x6c\xed\xbd\xd3\xbb\x46\x80\x9e\x88\x11\x37\x0c\xb2\xe7\xb0\x4e\xb0\xde\x85\x6f\x15\xb6\xb4\xfb\xad\x66\x36\xe5\x24\x62\x95\x57\x12\x9b\x85\x83\x21\xfd\xec\xd2\x71\x01\x25\xe8\xfd\xcf\xbd\xf3\x6b\x34\x0e\xbd\x89\x1f\xa2\xe3\x0f\x35\x3a\xf0\x7d\x41\xc4\xaf\x8f\x3f\x3c\xb9\x8c\x3b\xf7\xe3\xae\x42\xd6\x41\x57\x6a\xd6\xc9\xa2\x03\x12\xc7\x61\x5c\x13\x5d\x15\x8f\x32\x78\x55\xb9\x5f\xf0\xb5\x3a\xbe\xea\x31\xaa\x07\xb0\x26\x96\x63\x86\x00\xb6\x04\x5b\xb3\x67\x8e\x65\xb6\x67\x00\xa3\xca\xc0\xf3\x99\xaa\x5f\x0d\x8b\xdb\x54\x6e\x02\xfc\x4a\x00\xcf\x44\xf5\xf5\x60\x2d\x8b\x43\x26\x70\x2d\xc2\xee\x1d\xe1\x35\x81\x4d\x33\x29\x43\x36\x9d\xfd\x05\xda\xaa\x43\x5b\x32\x4c\xf5\xb0\xcd\xd0\xc2\xef\x0b\xb6\x19\x71\xad\x3e\x2f\xc2\x95\xcb\xf0\x22\x70\x2e\x87\x4b\xf5\x81\x6e\x4c\xc6\x15\x4e\x54\x81\x6a\x61\x64\x17\xe7\x17\xab\x01\x4e\x84\xc4\x28\x68\xbb\xa3\xa0\x50\x92\xac\xf1\x13\x15\x92\x15\xb1\x6d\x91\xb3\x25\x8e\x08\x82\x1f\xcc\xef\x74\x09\xb6\x2b\xb7\xd5\x75\xc6\x6e\x02\x1a\xdd\x54\x07\x86\x15\x8f\xfc\x2e\xc8\xf8\xf9\x8f\xfc\x32\x76\x23\xc6\x69\x97\xf2\x6b\xb6\xa1\x9e\x61\xff\x29\xb1\x88\xfa\xb6\x95\x86\x2a\x95\x8e\x98\x08\xba\x11\xff\xf4\x98\x75\x43\x46\x45\x0c\xeb\xe2\x9c\x16\xc6\x48\x72\x41\xf2\x6f\x1a\x50\xa1\xc6\x09\x21\xcd\x60\x23\xb9\x8c\xf6\xa6\xc1\xd0\xd2\x27\xd4\x27\xe2\x4f\x0b\x4b\x52\x11\x0a\xd2\xd3\x7b\xfb\x82\x6a\x9e\x8d\xfd\xd0\xe4\x12\x1a\x51\x9f\x07\x76\xdf\x0f\xdd\xbb\x34\x00\x47\xfd\xb4\xfa\xe5\x12\x8c\x8e\x2d\xf1\x07\xf5\x87\x36\x0d\x06\xa1\x95\x1e\x91\x03\x35\x94\x68\x35\xfb\x59\x5e\x49\x14\xad\x68\x9a\x0e\x06\x12\x8f\x39\xc5\x5e\xae\x43\x65\x17\x75\x59\xa7\xa7\x4d\x16\xe0\xa4\xb5\x48\x35\x0a\x66\xb9\x01\x1d\x2e\x62\xfc\x16\xf6\xac\x03\x9d\x0e\xcb\x22\xe8\xe5\x84\xb1\x72\x2f\x14\x89\x4d\x5e\x1f\x3f\xae\x98\x27\x64\x3c\xce\x52\x6c\xb5\x6a\x84\xb7\x22\xfa\x71\x39\x7e\x51\xe3\x65\x06\x3a\x97\x44\x13\x43\x34\x8c\xc3\x49\xa4\x67\x35\xf5\x92\x7c\x3f\xa0\x5e\x5e\xe5\x04\x58\x61\x08\x85\x28\x28\xf4\x91\x30\xd6\x59\x68\x88\x87\x44\x35\x52\x1b\x16\xfa\xb8\x81\x91\xea\x26\x74\x11\xc6\x64\x13\xa7\xf5\xcd\x5e\x8a\x4a\xb3\x4a\x8a\x2e\x20\xe0\x99\xc6\xfd\x0a\x40\x63\xc7\x61\x0f\x1a\xa7\x7d\x16\xfa\x13\xbe\x2a\xbe\xf7\x65\x8d\xff\x65\x06\x21\xea\x8d\xff\x26\x4e\xa6\xc7\x5f\x40\x89\x82\x6e\xf9\xb2\x21\xce\x41\xc7\x3e\xa6\x91\x8a\xbb\xc2\xbd\x37\xa8\x84\xf6\xe2\x10\xaa\x3a\xd8\xe7\xa8\xb7\xc5\x7a\x20\x32\x05\xf5\xb2\xfe\x75\x48\xdf\x11\x67\xaa\x13\x86\x87\xa4\x26\xe0\xcb\x9a\xf6\x1c\xef\x3b\x83\xfd\x81\x7b\x90\xd5\x0c\xda\x97\x30\xfa\xab\x80\x3d\xe8\xed\xfe\x61\xbd\x34\x36\x13\x50\x5f\xc2\xe8\xe5\x0e\x7e\xc9\xa8\x5f\x13\x9f\xb8\x7c\x83\xd8\x80\xa8\xa1\x2f\xc6\x57\x60\x6a\xae\x82\xa5\x4f\xda\xec\x88\xfa\x7e\xe1\x4b\x4b\x9f\xae\x8d\x4f\xd0\x1f\xb9\xc9\x98\xa2\xa2\x9e\xad\x18\x96\xb2\x10\x1e\xc9\x4b\xc5\x60\x28\x5e\x85\xcf\x69\xd6\xcb\x71\x68\x50\x0e\xe0\xf5\x5e\x9c\x48\x95\x88\x91\xfd\xa6\xa7\xfe\x04\x5f\x88\x13\x11\xd3\xfc\xab\x4d\x14\xd9\xc3\xe9\xea\x7e\x01\xad\xe6\x17\x38\xb5\xfc\x02\xa7\x8a\x5f\xe0\x98\xf3\x0b\x9c\x4d\x7e\x41\xba\x4d\xca\x6a\xfa\x05\xce\xff\x81\x5f\xe0\xec\x91\x5f\xe0\x98\xf2\x0b\x4a\x18\xbd\xdc\xa9\xc1\xac\x5f\xe0\xec\xa3\x5f\xe0\x98\xf2\x0b\x4a\x18\xbd\xdc\xc1\x7f\x49\x7e\x41\xfe\xf8\xca\xc8\x7c\xac\x79\x75\xd5\x11\xc3\xb6\x8e\x41\x3e\x46\xc0\x98\x20\xc0\xeb\x5c\x9e\xe9\x56\x90\xe3\xc8\xa0\x1c\x47\xcf\xe9\xa0\x14\x0f\x34\xb7\xf0\x50\x0a\xe1\x1d\x5b\x51\x98\xf1\x69\xc4\xa7\xc9\x55\x9c\x1a\x75\x1e\x51\xd9\xab\xc9\x93\x6f\xeb\xd6\x08\x2a\x53\x7e\x8d\x92\x60\x9d\x63\x03\x25\xc2\xf8\xb1\xa6\x53\x93\x3d\xb7\xd9\x5b\xaf\x06\x1a\xb1\x3f\x6e\x8d\x10\xd6\x8c\x5f\x53\xc6\xe9\xe5\xce\x6d\x66\x1d\x1b\xa1\xbb\xfb\xe7\xd9\x28\x8b\x33\xe1\xda\x94\x71\xfa\x8c\xbb\xdb\xe9\x01\x72\x75\xc4\x8f\x58\x25\xc0\xef\xb2\x3a\x78\x9f\xa3\xde\x16\xee\x81\xc8\x14\xda\xcb\xfa\xd7\x81\x7d\x37\x0e\x61\x05\xcb\x6a\x2f\x62\x65\x45\x7b\x0e\xf7\x5d\xb6\x3f\x68\x0f\xb2\x9a\x01\xfb\x12\x46\x7f\x15\xac\x07\xbd\xdd\x3f\xa8\x97\xc6\x66\x02\xe9\x4b\x18\x7d\x46\xa0\x8f\x58\x5d\x9c\x9f\x0e\x2b\xe1\xfc\xed\xb0\x0e\xce\xe7\xa8\xb7\xc5\x79\x20\x32\x85\xf3\xb2\xfe\x75\x38\x7f\x8b\x87\x31\x16\x57\xbd\xd5\x42\x79\x59\xcd\x9e\xa3\xfc\xed\x70\x7f\x50\x1e\x64\x35\x83\xf2\x25\x8c\xfe\x2a\x28\x0f\x7a\xbb\x7f\x28\x2f\x8d\xcd\x04\xca\x97\x30\xfa\x8c\x28\x3f\x1d\xd6\x41\x79\xb6\x63\xd4\x6f\x04\x3e\x6e\x66\x32\xb8\x96\x75\xaf\x0e\xfb\x8d\x92\x0f\x1a\x22\x2a\x82\x7e\x05\x65\xa3\xeb\x74\xd6\x5c\xa5\xa4\xa3\x66\x91\xd0\xb3\xb4\xf4\x36\x71\xb6\x29\xc5\x4d\x81\xe2\x55\xaa\xb7\x32\x57\xdf\x8e\xb4\x03\xc3\x6e\x4c\xc3\x98\xf2\xc7\x1d\xc9\x2e\xa9\xbb\x65\x48\x72\x4a\x72\x4d\xff\xdc\x95\xe4\x8a\x30\xea\xc9\xf8\xe4\x32\x32\x11\xbd\x9c\x7c\x4c\x9e\x76\x43\x8f\x96\x5d\x37\xa0\x64\xcf\x7f\x5c\x52\x2b\x58\x39\x71\x41\x76\x8e\x55\xce\xac\x81\x9e\xf3\xda\x8f\x2e\x93\xd7\x7e\x80\xe2\xd5\xbe\x1f\x43\xb0\x3a\x44\xd6\x8d\x21\x56\x47\xc0\xea\xfa\xfc\xaa\xe2\x2d\x22\x82\xc3\x31\xb4\xeb\xca\x88\x2c\x6f\x90\x75\xe9\x18\xe1\xf4\x0f\x64\xdd\x3a\x57\x3d\x23\xbc\xfe\x89\xac\xab\xf3\x6b\x23\xac\xde\x22\xab\xe7\x5c\x9c\x27\xbc\xb4\x15\x55\x64\xf6\x2f\x64\x9d\x7d\xba\xb8\x38\xbd\xec\x24\x47\x07\x35\xa2\xd2\x35\x60\xd7\x0f\x4a\xcf\x7c\xee\x00\xac\x8a\xd7\x9e\xc9\x7b\xfb\x56\x5d\x72\xa6\x4e\x15\x4e\xe4\x43\x72\xd1\xd4\x0e\xb5\x4e\x87\xf2\x90\xc2\x52\x93\xc5\x1d\x79\x14\x17\x4d\xaa\xa4\x04\xbe\x72\xe7\x63\x6f\x52\xe8\xd2\x17\x30\x2b\xd7\x5b\x1e\x08\x95\x62\xd4\x16\x52\xa4\xb3\x9e\x9e\xd6\xc6\xd8\x1d\x2d\xd0\x49\xd7\x72\x01\x89\x82\x6e\xf5\xf4\x36\x55\x85\xf4\x1c\x37\x99\xc8\x49\x4e\xf0\x69\xdc\xdc\x64\x66\xb9\x14\x5b\x33\x59\xab\xa0\x57\x66\x97\x5f\x04\x23\xb3\xbb\x71\x38\x05\xc0\x8f\xd7\x14\x81\x09\x99\xaf\x63\xa1\x9b\x36\xa0\xbe\x58\xe2\xf1\xd1\x26\xa0\xdf\xa2\x2f\x19\x78\x0e\xee\x68\x1b\x1f\x82\x0e\x10\xf9\x03\x2d\x8f\xa4\x87\x78\x3c\x21\x25\xe6\x55\xd0\x1c\x94\xe3\xb8\xae\x7c\x6a\x28\x55\x27\xaf\xc4\xb3\xda\x79\xf2\xca\x2c\xed\x8c\x7d\x48\xd8\x29\x7c\x09\xb3\xc8\x12\x4a\x53\x9a\x99\xa8\x4c\x69\x01\xa9\x30\xa5\xb9\x1d\x1a\x13\x97\xcb\x23\x2c\x43\x9f\xd5\xa4\xfa\x52\x03\xc2\x52\xac\xcd\xdd\x65\xfa\x11\x52\x36\xde\x67\xaa\xc1\x4b\x94\xdd\xed\x1a\xd5\x02\xca\x8b\xd1\x1f\x65\x11\x53\x5f\x8c\x03\xbc\x4f\x7d\x3a\x0c\xce\x54\xba\x42\xb5\x95\x32\xe6\x2e\x56\x15\xe9\x9a\x24\x59\x00\xe4\xa5\x2c\x00\xb4\xb8\x8b\x15\xc7\x84\x67\x69\x64\x27\x66\x2f\x98\xc4\xba\x5f\x47\x69\x03\xff\x17\x00\x00\xff\xff\x85\x5c\x6a\x47\x83\x66\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 26243, mode: os.FileMode(384), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

