// Code generated by go-bindata.
// sources:
// index.html
// DO NOT EDIT!

// +build bin

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5c\x59\x73\xe3\x36\xf2\x7f\xf7\xa7\xc0\x9f\xff\x64\x1f\x52\x91\xb4\x9e\x63\x37\x3b\x91\xbc\x65\x5b\xce\x84\x95\xb1\x47\xe5\x6b\x37\xfb\x92\x82\x48\x90\xc2\x98\x22\x19\x10\x92\x47\x51\xe9\xbb\x6f\xe3\x20\x45\x52\xa4\x24\x1e\x76\xac\x9d\x99\xaa\xb1\x48\x00\xdd\xe8\x06\x1a\xbf\x6e\x1c\x44\xff\xff\x86\x1f\xcf\x6f\x7f\x1d\x5d\xa0\x09\x9f\x7a\x47\x27\x7d\xf9\x83\x10\x3c\x10\x6c\xc3\x83\x78\x9c\x12\x8e\x91\x35\xc1\x2c\x22\x7c\x60\xcc\xb8\xd3\xf9\xc1\x48\x67\x4d\x38\x0f\x3b\xe4\xf7\x19\x9d\x0f\x8c\x7f\x77\xee\x4e\x3b\xe7\xc1\x34\xc4\x9c\x8e\x3d\x62\x20\x2b\xf0\x39\xf1\x81\xce\xbc\x18\x10\xdb\x25\x19\x4a\x1f\x4f\xc9\xc0\x98\x53\xf2\x18\x06\x8c\xa7\x0a\x3f\x52\x9b\x4f\x06\x36\x99\x53\x8b\x74\xe4\xcb\xf7\x88\xfa\x94\x53\xec\x75\x22\x0b\x7b\x64\x70\x1c\x33\xe2\x94\x7b\x44\x3e\xc3\xdb\x72\xd9\x1d\x62\x8e\xbb\x3f\x07\x11\x17\xcc\x57\x2b\x04\x4f\xc0\xb2\xdf\x5b\x97\x3b\xe9\x7b\xd4\x7f\x40\x8c\x78\x03\x83\x42\x95\x06\xe2\x8b\x10\xe4\xa0\x53\xec\x92\x5e\xe8\xbb\x06\x9a\x30\xe2\x0c\x8c\x9e\x83\xe7\xa2\x40\x57\xa4\x6d\x90\x46\x7c\xe1\x91\x68\x42\x08\x8f\x19\x70\xf2\x99\xf7\xac\x28\x4a\xe8\xe1\xb9\x47\x7d\x9b\x7c\xee\x8a\x54\xcd\x21\xb2\x18\x0d\x79\x9a\xe4\x13\x9e\x63\x95\x6a\xe4\xdb\x19\x45\xcc\x02\x46\x9f\xa2\x1e\x13\x2d\xcc\x08\x3c\xbd\xea\x1e\x77\x8f\x7f\x88\x13\xba\x53\xea\x77\x3f\x41\x9d\x36\x28\xde\x99\x62\xea\xab\xf2\xcb\x25\x75\x50\xf7\xf6\xf4\xfd\xfb\x8b\xe1\x98\xfa\xab\x15\x94\xd3\xc2\x28\x8a\xe5\x92\x78\x11\xb4\x10\xd4\xd0\x9b\x52\xef\x41\x67\xca\x0c\xdf\x5e\xad\x8c\xb8\x51\xfb\x3d\x25\x9c\x96\xbf\xa7\x4d\xe3\xa4\x3f\x0e\xec\x85\x4e\xf4\xf1\x1c\x59\x1e\x8e\xa2\x81\x01\x8f\x63\xcc\x90\xfa\xe9\xd8\xc4\xc1\x33\x8f\xc7\xaf\x11\x07\xc3\xb0\x3a\x3c\x08\x0d\xc4\x02\xe8\x47\x51\x9c\xba\x90\x08\xfd\x90\x54\x68\xd3\x84\x9b\x30\x09\xd0\x89\xb0\x8e\xe3\xcd\xa8\x1d\x97\xc9\x95\xd2\xdc\x85\x64\x84\x81\x19\x79\x9d\xa9\xdd\x39\x46\x21\xb6\x6d\xea\xbb\x1d\x8f\x38\xd0\xf9\x71\x17\xc4\xf4\xe3\x19\xe7\x81\x9f\x63\xc1\x03\xd7\xf5\x88\x60\xe1\xe1\x30\x22\x76\xdc\xb7\xaa\xb0\x6e\x65\x55\x48\x08\xa7\x4a\xc5\xc9\x98\xb9\xa2\xeb\xfe\x5f\xf3\x4a\xb2\x53\xd5\x4a\x0b\x08\x71\x52\x6d\xc4\x3a\x81\xef\x2d\xb2\x45\xa0\xd0\xad\x92\x63\xdd\x3a\xd0\x0b\x40\xb6\x85\x93\xb0\xd4\x0e\x54\xbb\xc1\xea\xc5\x50\xf6\x54\x23\x66\x3a\x01\x23\x6a\x0f\x8c\x09\xb4\x6c\xb6\x1f\xc6\x0c\xfb\x36\xa4\x51\x30\x14\x39\xd2\x06\xc6\x14\x7f\x56\x58\xf0\x0e\x1d\xbf\xb2\x26\xc9\x28\x83\x2e\x12\x63\x1b\xb8\xe8\x51\x8f\x36\x61\x20\xd7\x05\x9b\x05\xfa\x3d\x9c\x91\xab\x07\xd6\x95\xb3\x35\x21\x68\xbe\x67\xd7\x66\xaa\x12\xd0\x96\xae\x3f\xe9\xcf\xbc\x94\x96\x71\x51\xf8\xc9\x1b\x88\x47\xe3\x72\xd8\xe2\x74\x4e\x36\x9b\x17\x6b\xe5\x05\xf6\x46\xef\x7a\xbd\xc7\xc7\xc7\x2e\xe8\xc2\xe0\x7f\xd7\x0a\xa6\x3d\x85\x7a\x80\x11\x1e\xc1\x11\x89\x7a\x1e\xe6\x24\xe2\xff\xb4\xa6\xe1\x20\xd6\xfd\xfe\xe2\xfa\xc6\xfc\x78\x95\x6f\x1b\xc9\x3f\x06\x4d\xbc\xd9\xaf\x1e\x2d\x15\x36\x1e\x42\x80\x69\x28\xf5\x0c\xa0\xc4\x5c\xea\x8b\x01\x88\x1c\xca\x22\x2e\x53\x37\x75\xb2\x02\x9b\xe4\x58\x89\x24\x40\xdc\x8d\x06\x90\x22\x26\xdd\x3c\x34\x6f\x6e\xaf\xcd\x33\xd1\x89\x82\xa0\x65\x99\x9b\x0a\x4a\xc3\xbf\xf8\xe3\x28\xfc\x51\x0d\x1c\x61\x44\x60\xd3\x1b\xc5\x52\x46\x69\x8e\x84\x26\x1b\xe3\x47\xeb\xf2\x02\x35\x9c\x6d\x68\x38\xdb\xae\xe1\x5d\xc8\xa9\x1a\x74\x07\xa4\xa5\x87\xf3\x5a\x7a\x78\xab\x96\x1f\x4e\x5b\xd0\xb0\x37\xf3\xb6\xe1\x52\xea\x15\x5e\x40\x09\xed\x8f\x77\x7b\xd0\x4c\x19\x16\x3c\xe6\x3d\xab\x50\x70\x4a\xa6\xe0\xd4\x54\x1c\x97\xe0\x9c\x70\xad\x6f\x62\x1f\x1b\x38\x0e\x44\x2b\x9d\xe3\x0c\xce\x2d\x97\x9c\x4c\x43\x01\x39\xc8\x00\xff\x0f\x75\x47\xef\xde\xa9\x87\xdf\xa0\x35\x88\x07\x7c\x0d\xd4\x15\xad\x53\x8c\xb2\xb6\x53\x5c\xed\xdb\x66\xd5\xda\x4e\x61\xad\x99\x36\xdc\xdd\x28\x56\x38\x7b\x92\x46\x01\xbe\x5b\x1b\x85\x3e\x4d\xa3\xd0\x56\x1a\x25\x8c\x8a\x85\x3b\xfe\x6b\x33\xe9\xc2\xa8\x0d\xe9\xe6\xee\xd3\x48\x37\x77\x77\x4b\x97\xbc\xec\x88\xfc\x63\x82\x39\xc4\xce\x02\x3e\xd0\x20\xf6\x6f\xab\xd5\x8f\xf9\x10\x5c\x47\xde\x22\x18\x97\xf3\xb6\xe5\xb2\xf7\xdd\xd1\x77\xbd\xd5\x6a\xb9\x54\xf2\xa5\x04\x1e\x63\x98\x76\xd9\x62\xde\x22\xc2\x60\x03\xc4\xd5\xc1\x03\xb0\xff\x19\x7e\xc5\x1c\xc9\x3f\xf7\xa8\xf5\x30\x58\xf2\x09\x8d\xba\x13\x88\xbc\x3c\x22\x53\x56\x20\x83\x6c\xb2\xd5\x4a\x14\x3f\x17\x8f\xc8\x18\x73\x1f\xc1\xff\x38\xb6\x07\x96\x20\xcb\x51\x12\x1b\xae\x49\x8c\xcf\x1e\x1e\x13\x0f\xa9\x9f\xa4\xfc\x91\x6e\xdd\xee\x99\x10\x2d\x05\x92\x27\x42\xe5\x5b\x68\x18\x15\x8f\x9d\xe8\x99\xc8\x7e\xda\x31\xea\x4e\x9e\x56\xbd\x44\x38\xd4\x58\xd1\x7d\xd5\xd3\xd6\x06\xd8\x00\xa6\x1d\x19\xa2\xcc\x23\xe5\x13\x24\xde\xc0\x60\x85\xf5\x01\x7b\xf1\x47\x4d\xe6\x96\x4b\x88\x9b\x5d\x82\xbe\xa1\xdf\xa3\x6f\xac\x80\x11\xf4\x6e\x80\x94\x3b\x3a\x1f\xdd\x75\x3f\xd0\x48\xb4\x2d\x67\x20\xfb\x29\xe7\xec\x17\xb2\x40\x12\xd0\x80\xdf\x78\xd1\xb9\x32\x14\x51\xf7\x4a\xea\x0c\x93\x6b\x3b\x1e\x31\xd2\x99\xca\x26\x46\x7e\xf0\xc8\x70\x98\x28\x97\x50\xc0\x1c\xdb\x2e\xa5\x4a\x66\xbf\xb9\x86\x9b\x45\x24\x24\xcc\x82\x68\x53\x45\x85\x6a\x26\xb5\x4e\x1d\xc4\x15\xdc\x45\x84\x49\xa9\x32\xd5\xaa\xd4\x94\x97\x3d\x79\x5a\x29\x6e\x16\xd1\xa6\x10\x32\xf1\xf9\x64\xf8\x17\xa6\x7c\x53\x08\x95\xda\xb6\x14\x1d\xea\xcf\x09\x4b\x66\xb8\x05\xd2\x98\x30\x98\x36\xa5\x51\xa9\x85\xd2\xf4\x38\x4b\x99\x7e\xf6\x67\x9f\x81\xa0\x90\x5c\x14\xfa\x26\x5c\x5b\xf7\x08\x33\x3c\x15\xdd\x20\xb3\x91\xc8\xec\x0a\x0b\x97\x63\xfa\x2a\xf0\xff\x20\x2c\x40\x90\x06\xa3\xc0\x47\x86\x2a\x24\xff\x76\x26\x01\x68\x68\xa0\x64\x0a\xd7\x99\x50\xdb\x26\xbe\x11\x0f\x81\xd4\x4a\x18\x48\x1e\xc3\x3a\x9f\xa4\x01\x3f\x79\x13\x19\x3b\x86\x8c\x2c\x26\xec\x36\x33\x93\x9e\xf9\x34\x33\x25\x3a\xf9\x36\x17\x3a\xd6\xa9\x05\x0c\xf3\xe9\x2b\x11\x86\xf7\xf4\xb5\x08\x83\x6a\x52\x4b\x4f\xf7\x9d\x4c\x8d\x17\xb0\xf8\x7a\x05\x6b\x9b\xaf\x8f\xd1\x57\xf9\x7a\xbe\x76\xbe\xd2\x80\xaa\xe0\xb8\xed\x8c\x17\x30\x11\xff\xad\x22\x98\xdb\x34\x7a\x58\x9b\xfa\xf0\x27\xc9\xa4\x18\xcc\x75\x0d\x1a\xd0\x6d\xca\xc4\xf2\x86\xa1\x58\x74\x87\x94\x5d\xc9\xd5\x0e\x0d\x0b\x09\x84\xab\x5c\x32\xbf\xd2\x6b\x21\x09\x70\xe4\x4a\xc4\xf4\xfb\x40\x4b\x4c\x74\x3a\xc7\xd4\xdb\x97\xa4\xbc\x13\xd6\xd0\x13\x6b\x03\x63\x68\xa4\x52\x56\x2b\x35\x35\x8b\xab\x84\x1c\xbb\x9a\x90\xb7\x01\xc7\x69\x21\x1b\x81\x54\xdc\xcb\x35\x90\xea\x16\x8f\x05\x4a\x0d\x1d\x5f\xfd\x70\xf4\xaa\x05\xb4\x2a\x6c\x57\xb5\x58\x4a\xfc\xd9\x54\x44\x4f\x86\xa8\xef\x5e\xae\x6e\xcb\x8a\x1f\xd0\x31\x32\x86\x72\x01\x1e\x6a\x93\x4a\xd4\xe0\x01\xc2\x5f\x06\x33\x9f\x8b\x75\xd4\xda\x4c\x5e\x23\x43\xda\x10\xb0\x48\xf5\x5f\x4d\x66\x6f\x90\x71\x27\x97\x75\x5b\xe0\xf5\x16\x19\xd2\x6e\xf2\xcc\x1a\x81\x4d\x06\x22\xda\x40\x1c\xea\x07\x76\x73\xc8\x51\x5c\xca\x30\x47\xe5\xbe\x20\xd0\x31\x1d\x46\xf6\x26\xa9\x02\x3a\xe6\xac\x14\x75\x44\x56\x45\xd8\x31\x65\xbb\xb5\x87\x3b\xba\xaf\x5b\x01\x9e\xe3\x76\xc2\xa4\xb8\x0d\xd4\x60\x4a\x79\x74\x05\x2e\x25\xa1\xc0\x46\x69\x0d\x23\x5b\x8b\xa3\x7c\x3b\xcb\x62\x12\x3b\x6a\xd0\x09\x98\xa8\x41\x26\x11\xa1\xb5\xd0\x23\x3b\x7c\x9b\xc3\x01\xad\x17\x80\x50\x67\x6d\x46\xe6\xb6\xf0\x83\x66\xc2\x0f\x0d\x03\xd4\xe9\x16\x23\x40\x92\xb1\xe7\x98\x81\xf2\x43\xe2\x71\x6c\xfa\x95\x49\x3e\xce\x78\x15\x9a\x6a\x35\x64\x99\x37\x1a\xc3\xb4\x71\xec\x60\xaa\x21\x6c\xc2\x10\x7e\xdd\xf6\x4c\xc7\x84\x31\xc8\x1c\x5c\x3a\x6c\x37\x23\xf8\x78\x6f\xee\xcc\xbc\xbd\x41\x80\xa5\x28\x22\x56\xe0\xa7\xf7\x71\x4d\x7f\x7b\x5c\xdf\xcf\x2d\x89\x8f\xfb\xbd\x74\xca\x49\x18\xd5\x9e\x5e\xec\x16\x0e\x7a\xf6\x4f\x97\x8e\x0b\x44\x41\x67\xbf\xde\x5e\xdc\xa0\x69\x60\xcf\xbc\x00\xbd\x79\xdf\xa0\x01\xcf\x72\x22\x7e\xfb\xe6\xfd\x93\xcb\x58\xb9\x1d\xab\x0a\xd9\x04\x64\x69\xbb\x21\x17\x75\x08\x63\x01\x6b\x08\xb2\x8a\x47\x19\xca\xaa\xdc\xaf\x30\x5b\x1f\x66\x75\x1f\xb5\x82\xb3\x6d\xcc\xd1\x5a\xc2\xd9\x12\x88\x4d\x6f\x5d\x96\x0d\xc1\x16\xa0\xaa\x0c\x43\x9f\xa9\xfa\x62\x74\xdc\xa7\xf2\x36\x30\xb0\x04\xf7\xda\xa8\xbe\x19\xba\xa5\xe1\xa8\x0d\x78\x0b\xb1\xf5\x40\x78\x43\x7c\xd3\x4c\xca\x00\x4e\x67\x7f\x45\xb8\xfa\x08\x17\x77\x53\x2b\x10\xd7\xd2\x6c\xf0\x2b\xc4\xb5\x12\x68\xfd\xb9\x40\x57\x2e\xc3\x8b\x80\xbb\x0c\x3c\x35\xc7\xbb\x29\x99\xd6\xd8\x7b\x05\xaa\xf5\x58\xbb\xbc\xb8\x2c\xc6\x39\x71\xc0\x46\x21\xdc\x03\x05\x83\x92\x64\xdd\x5f\xa8\x90\x2c\x0f\x71\xeb\x9c\x3d\xe1\x44\x10\xfc\xd4\xfe\x2a\x98\x60\x5b\xb8\xf2\xae\x33\xaa\x09\xd8\xea\xba\x3b\x30\x6c\xb6\x39\x78\x49\xa6\xcf\xbf\x39\x98\x1a\x3e\xa2\xbb\xaa\x94\xdf\xb2\x44\xf5\x0c\x6b\x53\xf1\xc0\x68\x3e\xc4\x92\xf3\x4f\xa5\x1d\x27\x4e\xf2\x88\x7f\xd9\xae\x1b\xad\x77\x74\xa1\x8f\x24\x17\x24\xff\x66\xcf\x6e\x9c\x20\xa4\x19\xec\x24\x97\x47\xc8\xa9\xef\x1a\x7a\x4b\xfb\x44\xfc\xe9\xe3\x34\xa9\x38\x54\xa2\x4e\x67\xff\x0c\x65\x63\x16\xab\xf4\x59\x12\xcd\x4b\xc2\xa5\x3c\x4a\x32\xf6\x02\xeb\x21\x39\xe2\xa3\x7e\xfa\xe3\x72\x71\x26\x6f\x0c\xf1\x07\x8d\xdd\x0e\xf5\x9d\xc0\x48\x36\xd8\x81\x1a\x4a\xf4\x7b\xe3\x34\xaf\xf8\x9c\xae\xd0\x53\x1f\x37\x12\x8f\x45\xc6\x3e\xca\xef\x81\xe7\x0d\x5b\xa7\x27\xfa\x0b\xc0\xd2\x26\xa5\x94\x02\xcf\xe7\x50\x77\x7d\x8a\x70\x3d\xc6\xf5\x51\xaa\x57\x65\x67\xf4\xa5\x13\x29\x5c\x34\x45\x62\x35\xd8\xc3\x8b\x02\xdf\x21\xcf\xf7\x6c\x9c\xde\x56\x4a\xd8\x05\xe7\x2b\x37\x4f\x48\x6a\x0c\x4d\xc1\xe9\x86\x68\xa2\x8b\x5c\x16\xcc\x42\xed\xe9\xd4\x4b\xfc\x85\x82\x7a\x39\xca\x08\x50\x30\x2a\x72\xe7\xac\x44\x43\x7f\x20\x51\x34\x44\x89\xb0\x3b\xc8\x54\xa3\x48\x1c\x0a\x18\x49\xd1\x6d\x57\x69\xe3\x4c\x9b\x21\x2c\x31\xf0\x44\xc3\x08\x5b\xcc\xf4\x47\x9a\x74\x3d\xf6\x9f\xa9\x8f\xaf\x01\x2d\x2a\x76\xb1\xdf\x3d\x03\x58\x39\x84\x7e\xbe\x5a\x23\x41\xa5\x7e\x4e\xd1\xbd\x00\x95\xd6\xb2\xfd\x07\x7c\xe2\xde\xb2\x6d\xda\xe0\x2e\x9b\x13\x50\xa5\xfc\x84\x7c\xd9\x71\xfc\x42\x9f\xde\x4c\xce\x5a\x56\xf5\x2d\xb6\x53\xcb\xb5\x88\xdd\xb0\xfa\x9e\x25\x43\x5d\xcb\xb1\x00\x87\xb6\xfc\x8a\x14\x66\x9b\x5b\x19\x8a\x0d\xdf\x59\x84\x5d\xd2\xd0\xbb\xc8\x9a\x0e\xdc\xb9\x0c\x9d\xc3\xf1\x2d\x52\xd6\xea\xae\x45\xab\xf8\x65\x7a\x16\xb0\xd1\xc3\x72\x2c\x12\x09\xaa\xfb\x15\x49\xf6\x02\x14\x2a\x70\x2b\x7b\x88\x56\xdd\xab\xb4\x67\x6f\x25\x86\x76\x43\x3c\x62\xf1\x1d\x62\x67\x06\xc9\xeb\x74\x05\x1b\x1f\x00\x76\x42\xea\x79\xb9\xef\x52\x3d\xba\xcf\xd9\x0c\xfd\x65\xa0\x3c\x56\x95\xb7\xf0\x82\xbe\x28\x3b\xc5\x24\x79\xa9\x63\x28\x8a\x57\xee\x1b\xa4\xbd\xc4\x79\xd5\xa2\x38\xc0\xeb\x4c\xec\xc6\x95\x48\x93\xfe\x1e\xaa\x79\x68\x91\x3b\x31\x23\x02\x8c\xa3\x5d\x14\xe9\xfd\xf9\xfa\x11\x09\xad\x17\x91\x98\x8d\x22\x12\xb3\x71\x44\x62\xb6\x17\x91\x98\xbb\x22\x92\x64\x85\x38\x6a\x18\x91\x98\xff\x03\x11\x89\x79\x40\x11\x89\x59\x2f\x22\x31\xbf\xe4\x88\xc4\x3c\xb4\x88\xc4\xac\x17\x91\x98\x2f\x37\x22\xd9\x43\xb4\xaf\x11\xc9\x96\xfd\xc1\x56\x42\x00\xcd\x6b\xa4\xf6\x70\x2a\x86\x24\xd9\x23\x19\xad\xc9\x03\xbc\x2e\xe4\x16\x7a\x7d\x71\x5e\xb7\x28\xce\xeb\xe7\x8c\x90\xf2\xdb\xc8\x7b\x84\x48\xb9\xb3\x35\x7b\x51\xb4\x13\x54\x89\xef\xca\xeb\x44\x55\x6a\xdf\xa7\x76\x58\x95\x25\xaf\x15\x57\x09\x16\x6d\x05\x56\x4a\x9c\x6d\x91\x15\x94\x08\xd8\xa2\x61\x54\x95\xde\x2c\x3b\xd8\xb0\x0a\x94\x38\x9c\xb8\x4a\x09\x5b\x3d\xb0\x8a\x95\xfc\x32\x23\x2b\x61\xa7\x87\x15\x5a\x29\x30\xa8\x1e\x5b\x29\xba\x17\xa0\x52\x41\x70\xb5\x8f\x6c\x4f\xba\x8b\x90\x1c\x0e\xa8\xef\x5e\xc2\xa8\x96\x77\x19\x45\x4d\x9c\x4b\x86\xba\x96\x6f\x01\x0e\x6d\xb9\x16\x29\xcc\x36\xcf\x32\x62\x01\xcc\xd7\xa3\xc6\x53\x76\x59\xd1\x81\xfb\x96\x51\x74\x38\xae\x45\xca\x5a\xdd\xb3\x68\x15\xbf\x4c\xc7\x02\x36\x7a\x58\x7e\x45\x02\x41\x75\xb7\x22\xc9\x5e\x80\x42\x05\x5e\x65\x0f\xd1\x9e\xd4\xa9\x84\x51\x53\x9f\x32\x77\x6b\xf9\x94\x7b\xb7\x89\x4f\xc9\x50\xd7\xf2\x29\xc0\xa1\x2d\x9f\x22\x85\xd9\xe6\x53\xee\xb1\xcb\xb0\xb8\x8d\xb0\x91\x47\x91\xd5\x1c\xb8\x47\xb9\x77\x0f\xc7\xa3\x48\x59\xab\x7b\x14\xad\xe2\x97\xe9\x51\xc0\x46\x0f\xcb\xa3\x48\x18\xa8\xee\x51\x24\xd9\x0b\x50\xa8\xc0\xa3\xec\x21\xda\x93\x7a\x94\xb9\xdb\xc4\xa3\x44\x15\x4f\xaa\x87\x10\xae\xa7\x1c\xcf\x8d\xac\xbb\xf8\xa8\x7a\x18\x7f\x8b\x13\x52\x71\x50\x5d\x50\x76\x47\xe6\x70\xcb\x45\x61\xfa\xa4\xb7\x04\xe3\xa4\xf4\x3e\x67\xc3\x13\x8a\xbb\x1c\xc5\x51\x32\x54\x64\xae\xbe\xfb\xab\x02\xc3\x11\xa3\x01\xa3\x7c\x51\x91\xec\x8a\x5a\x7b\x1e\xa3\x4f\x48\x6e\xe8\x1f\x55\x49\xae\x49\x44\x6d\x79\xa6\xbe\x8c\x4c\x9c\xb8\x8f\x6f\x45\x48\x9a\xe1\x96\x96\x5d\x9f\xa1\x64\xcf\x7e\x17\xd5\xe8\x80\x7d\x1c\xee\xd4\x3d\x5f\x9f\x9a\xd5\x3d\xe7\x6d\x36\xa3\x48\xde\x66\x03\xf6\xd7\xf8\xda\x17\xc1\xea\x07\x64\xdc\xb5\xc4\xea\x1f\xc0\xea\xe6\xe2\xba\xe6\xe5\x38\x82\xc3\x2b\xd0\xeb\xba\x15\x59\x5e\x23\xe3\xca\x6c\x85\xd3\x1b\x64\xdc\x9b\xd7\xb7\xad\xf0\x7a\x8b\x8c\xeb\x8b\x9b\x56\x58\xfd\x0d\x19\xb7\xe6\xe5\x45\xcc\x4b\x0f\xa6\x9a\xcc\xfe\x8e\x8c\xf3\x8f\x97\x97\xa7\x57\xc3\x78\x1b\xa6\xc1\x97\x14\x1a\xb7\x9b\x7f\x48\x91\xfa\x52\x07\x58\xe5\xef\xf6\x93\x97\x53\x16\xdd\xe4\xa7\x76\x68\x4e\xe4\x43\x7c\x8d\x5a\x85\x5a\xe7\xae\xdc\xf0\x31\x94\xcf\x78\x20\x0b\x71\xe3\xaa\x4a\x8a\x51\x2c\x13\xa0\xbd\x4d\x10\x4c\xdf\x44\xae\x02\x7c\xb9\xc7\x56\x0a\x55\x7b\x48\x91\x38\x3f\xed\xdd\xa6\xd8\x9a\xac\x41\x4a\xd7\x72\x09\x89\x82\xae\xd8\xcb\xcd\x55\x21\xed\xea\x66\x33\xe9\xeb\x04\x9f\xee\xdd\x5d\xca\xd9\x25\x10\x9b\xca\x2a\x42\x60\x99\x5d\x7e\xbf\x91\xcc\x1e\xb1\x60\x0e\xb8\xcf\xb6\x14\x01\xbf\xcc\xb7\xb1\xd0\xaa\x39\xd4\x13\xb3\x4a\x3e\xd9\x85\xf7\x7b\xb4\x65\x04\x01\x84\x35\xd9\x27\x94\xa0\x0e\x22\xbf\xa3\xcd\x9e\xb4\x11\x67\x33\x52\x32\xbc\x72\x96\x83\x32\x1c\xb7\x95\x4f\x06\x4a\x5d\x1f\x16\x07\x58\x75\x7d\x58\x6a\x1e\xd9\xda\xa7\xb0\xc3\xdc\x47\x5c\xeb\x2c\x61\x3b\xa5\x99\xb1\xe5\x94\x16\x90\x76\x53\x9a\x3b\xa4\x8c\x58\x5c\x6e\x04\xb6\xf4\x45\x58\x62\x36\x0d\x90\x2c\x81\xdc\x55\xfa\x26\xdf\x0f\x90\xb2\xf3\x36\x5f\x8d\x61\xa2\x6c\xb5\x4b\x84\x73\x60\x2f\x8c\x60\x92\x06\x4e\x7d\xdf\x13\xf0\x3e\xf5\xa8\xeb\x9f\xab\x74\x05\x6e\x85\x32\x66\xae\x15\x16\xe9\x9a\x24\x9e\x0e\x64\xa5\xcc\xe1\xb4\xb8\x89\x18\x33\xc2\xd3\x34\xb2\x11\xd3\x97\xa9\x62\xdd\xae\x93\x44\xc1\xff\x06\x00\x00\xff\xff\xe3\x62\xc1\x01\xcc\x67\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 26572, mode: os.FileMode(384), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

