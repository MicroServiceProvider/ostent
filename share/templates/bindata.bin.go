// Code generated by go-bindata.
// sources:
// index.html
// DO NOT EDIT!

// +build bin

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xe4\x5c\x5b\x73\xdb\x36\x16\x7e\xcf\xaf\x40\xb9\xe9\x3e\x74\x4a\xa9\x76\x9c\x6e\x36\x95\xbc\xe3\x44\x6a\xcb\x69\xec\x68\x6c\x39\xbb\x9d\x4e\xa7\x03\x91\x90\x84\x9a\x22\x59\x00\x92\xad\x68\xf5\xdf\xf7\xe0\xc2\xab\x44\x4a\x34\xe5\xcb\x4e\x1e\x6c\x93\xc0\xc1\x87\x73\x70\x0e\x3e\x5c\xe9\xce\x57\xbd\x8f\xef\x87\xbf\x0e\xfa\x68\x2a\x66\xfe\x8b\xd3\x8e\xfa\x83\x10\x3c\x10\xec\xc1\x83\x7c\x9c\x11\x81\x91\x3b\xc5\x8c\x13\xd1\xb5\xe6\x62\x6c\xbf\xb1\x4c\x96\xa0\xc2\x27\xea\x19\xde\x56\xab\x56\x0f\x0b\xdc\xfa\xf9\x62\xbd\x46\x21\x17\x24\x10\x9d\x76\x2a\x61\x80\xa6\x42\x44\x36\xf9\x6b\x4e\x17\x5d\xeb\x3f\xf6\xf5\x99\xfd\x3e\x9c\x45\x58\xd0\x91\x4f\x2c\xe4\x86\x81\x2c\xd6\xb5\x9c\x7e\x97\x78\x13\x62\x65\x4b\x06\x78\x46\xba\xd6\x82\x92\xdb\x28\x64\x22\x23\x7c\x4b\x3d\x31\xed\x7a\x64\x41\x5d\x62\xab\x97\x6f\x11\x0d\xa8\xa0\xd8\xb7\xb9\x8b\x7d\xd2\x3d\x32\x40\xab\xd5\xcf\xc3\xf3\x0f\xc8\xea\x7c\x65\xad\xd7\xb6\xfd\x1b\x1d\x23\xa7\xff\xfb\x69\xc7\xa7\xc1\x0d\x62\xc4\xef\x5a\x7c\x0a\xd8\xee\x5c\x20\x0a\xf0\x16\x9a\x32\x32\xee\x5a\xed\x31\x5e\xc8\xf7\x16\xfc\xda\x86\xf4\x1b\x09\x3c\x3a\xfe\xdd\xb6\xb3\x48\x1a\x80\xd3\xcf\x84\x77\xad\x57\xc7\x77\xaf\x8e\x8b\x70\x3c\x7e\xb0\x5f\x1d\xb7\xa2\x60\x62\x21\xb1\x8c\xc0\x44\x3a\xc3\x13\xd2\x96\x09\xc6\xfc\x14\x14\x47\x91\x4f\x6c\x11\xce\xdd\xa9\x9d\xab\xe0\xe8\xf8\xbb\x3b\xf8\x29\xaf\x02\x32\x5b\x35\x21\x4f\x4e\xee\xe0\xa7\x02\xf2\xe4\xa4\x2e\xe4\xeb\xe3\x3b\xf8\xa9\x80\x7c\x7d\x5c\x17\xf2\x0d\x18\xfe\xa6\xca\xf0\x37\x25\x86\x73\xb1\xf4\x09\x9f\x12\x22\xe2\x86\x17\xe4\x4e\xb4\x5d\xce\x13\x30\x78\x6e\xd3\xc0\x23\x77\x2d\x99\x6a\x10\xb8\xcb\x68\x24\xb2\x45\xfe\xc4\x0b\xac\x53\xad\x62\x47\x41\x9c\xb9\x00\xf4\x27\x6f\x33\x19\xf4\x8c\xc0\xd3\x71\xeb\xa8\x75\xf4\x26\x4e\x68\xcd\x68\xd0\xfa\x13\xea\xf4\xa0\xf3\xd8\x33\x4c\x03\x2d\xbf\x5a\x41\x74\xb6\x86\x67\x3f\xfd\xd4\xef\x8d\x68\xb0\x5e\x83\x9c\x51\x46\x97\x58\xad\x88\xcf\xc9\x7a\x0d\x35\xb4\x67\xd4\xbf\x31\x99\x2a\x23\xf0\xd6\x6b\x2b\xee\x98\x9d\xb6\x56\xce\xe8\xdf\x36\x7d\xfb\xb4\x33\x0a\xbd\xa5\x49\x0c\xf0\x02\xb9\x3e\xe6\xd0\xa2\xf0\x38\xc2\x0c\xe9\x3f\xb6\x47\xc6\x78\xee\x8b\xf8\x95\x0b\xe8\xab\x2e\x38\x22\xb2\x10\x0b\xa1\x6b\x49\x71\x3a\x81\x44\xf0\x49\x52\xa1\x47\x13\x34\xd9\x4b\xc1\x26\xc2\xec\xb1\x3f\xa7\x5e\x2c\x53\x90\x32\xe8\x52\x33\xc2\xa0\x67\xfb\xf6\xcc\xb3\x8f\x50\x84\x3d\x8f\x06\x13\xdb\x27\x63\xa0\x91\xd8\x05\x71\xf9\xd1\x5c\x88\x30\x28\x40\x88\x70\x32\xf1\x89\x84\xf0\x71\xc4\x89\x17\xfb\x56\x0b\x9b\x56\xd6\x42\x52\x39\x2d\x15\x27\x63\x36\x91\xae\xfb\x9b\xc1\x4a\xb2\x33\xd5\xaa\x08\x88\x70\x52\x2d\x67\x76\x18\xf8\xcb\xbc\x08\x08\x0d\xb5\x1e\x69\xeb\x80\x17\xa0\x58\x05\x92\x8a\x56\xa8\x76\x03\xea\xd9\x94\x6c\xeb\x46\xcc\x39\x01\x23\xea\x75\xad\x29\xb4\x6c\xde\x0f\x23\x86\x03\x0f\xd2\x68\x74\x94\xf6\x77\x70\x86\x1c\x0f\x40\x1e\xc6\x07\xc9\xe7\x28\x3b\x68\x14\x9a\x39\x9b\xd5\x69\xe3\x5c\xad\x6d\x88\x9d\x42\x24\x49\x35\x8a\x7e\x4b\x83\x50\x27\xa0\x0a\xc7\x9e\x76\xe6\x7e\xc6\x86\x58\x14\xfe\x14\xdd\xef\xd3\x58\x0e\xbb\x82\x2e\xc8\x66\xe3\x61\x63\xb0\x1c\xec\xf8\xdb\x76\xfb\xf6\xf6\xb6\x05\x16\x33\xf8\x69\xb9\xe1\xac\xad\x47\x47\x60\x00\x9f\x60\x4e\x78\xdb\xc7\x82\x70\xf1\x2f\x77\x16\x75\x63\xab\x3f\xf5\x2f\xaf\x9c\x8f\x1b\xad\xa2\xf0\xe3\xc1\x15\x6f\x7a\xcd\xa7\xa5\xca\xc6\x1d\x04\x18\x0b\x65\x9e\x81\x72\xd8\x84\x06\xb2\x7b\xa1\x31\x65\x5c\xa8\xd4\x4d\x9b\xdc\xd0\x23\x05\x28\x99\x04\x7c\xba\xd1\x00\x4a\xc5\xc4\xb5\x3d\xe7\x6a\x78\xe9\xbc\x93\x4e\x94\x05\x0e\xac\x73\x53\x45\x69\xf4\xf7\x60\xc4\xa3\x1f\x74\xb7\x90\x41\x44\xa3\x4d\xb1\x4c\x38\x3a\x03\x69\xc9\x46\xef\x30\xb6\x3c\x43\x0b\xe7\x1b\x16\xce\xab\x2d\xbc\xfe\x7f\xb3\xd0\xc7\x45\x0b\x7d\x5c\x69\xe1\x87\xb3\x03\x58\xd8\x9e\xfb\x55\x9c\x94\x79\x85\x17\x30\xc2\x8c\xb4\xbb\xc7\xc6\x9c\x0c\x0b\x6f\x8b\x63\xa6\x34\x70\x46\x66\x59\x76\x93\xc3\xe5\x49\x3c\x6e\x86\xe3\x31\xcc\x40\xec\xa3\x1c\xbb\xad\x56\x82\xcc\x22\x49\x34\xc8\x82\x31\x1d\x6a\xe5\x6f\xdf\xea\x87\x3f\xa0\x1d\x88\xaf\x10\x5b\xb2\x5d\xb6\x73\xab\x37\x2e\x56\xf8\xba\x59\x85\x12\x70\x4b\x7d\xb9\x76\xdb\xdd\x10\x6e\x34\x3f\x70\x43\x28\xc4\x8a\x86\xa0\x87\x6e\x08\x7a\x90\x86\x88\x78\x51\xad\xa3\xef\x9a\xe9\x25\x11\x9b\xeb\xb5\x98\x1c\x5a\x2f\x89\xb8\x4b\xaf\xe4\x65\xc7\x7c\x3d\x2e\xb0\x80\x19\xaf\xa4\x06\xd4\x8d\xc7\xad\xf5\xfa\x87\xe2\xc4\xd9\xcc\x97\xe5\x14\x5a\x2d\x97\x57\xab\xf6\x37\x2f\xbe\x69\xaf\xd7\xab\x95\xd6\x2f\xa3\x30\x96\x0b\x8d\x3f\x46\x18\x56\xb1\x72\xf6\x0a\xab\x44\x98\x15\x84\xc1\x7b\x9f\xba\x37\xdd\x95\x98\x52\xde\x9a\xc2\x0c\xc9\x27\x2a\x65\xad\x27\x0c\x50\xf5\xcf\xf0\x17\xd6\xcf\xab\x95\x6a\xb3\xf5\x5a\xa6\xbd\xd7\x8f\x2f\x34\x83\xbd\x93\x98\x4a\xa4\x35\x04\x6b\xf4\xe4\xe8\xd4\x4c\xfa\xf7\x54\x89\xd1\xc9\xf4\x90\x3a\x69\x45\x50\xaa\xdd\xbe\x3a\x19\xbf\x42\x9f\x83\xf0\xe1\x96\x94\xb9\xa5\x62\x8a\xe4\x1b\x84\x86\xf4\x33\x80\xca\x5f\x7a\xb1\xb3\x5a\xc1\xbc\x72\x42\xd0\x4b\xfa\x2d\x7a\x09\xa5\xd0\xdb\x2e\xd2\x9c\xfe\x7e\x70\xdd\xfa\x40\xb9\x6c\x0f\xc1\x40\x93\x33\x21\xd8\x2f\x64\x89\x24\x43\xd8\x00\x37\x5a\xda\x17\x96\x2a\xd3\xba\xd0\x7a\x77\x84\x17\x47\xa6\x1a\x90\x54\xa3\x20\xf5\x18\x84\xb7\x0c\x47\xc9\x5a\x3f\x2e\xd5\x69\x0b\x2f\x2e\x99\xb6\x46\xb6\xf4\x68\x62\xcf\x39\x89\x5c\x61\x96\x14\xfa\xa5\x6b\x20\xae\x39\x61\x03\x57\xa8\xea\x53\xe0\x24\xf5\xeb\xa6\xf8\x57\x4b\xbe\x09\x1f\x27\x36\x46\xff\x37\xa6\x62\x13\x3e\x49\xad\x83\x6f\xd3\x60\x41\x58\xb2\xf0\xca\xd7\xe3\x40\x04\x6e\xd6\x93\xa4\xa6\xf5\xb4\x05\xcb\x04\x59\xfe\xcf\x3e\x21\x27\xb0\xdc\x75\x92\x42\x2f\xa3\x34\x90\x06\x98\xe1\x19\x97\x61\x24\xb3\xc1\x12\x15\xea\x17\x61\xf0\x99\xb0\x10\xbd\x8c\x64\xa4\x05\xc8\xd2\xb9\xea\xb7\x3d\x0d\xc1\x1a\x0b\x25\xeb\x0c\x7b\x4a\x3d\x8f\x04\x56\x1c\x67\x99\xdd\x34\x50\x39\xe6\x28\x31\xcd\xb2\x57\xf2\x26\x33\x36\xe3\x32\x43\xad\x32\x5e\xea\xc8\x43\x00\xd4\x11\x97\x0e\xad\x23\x2f\x1d\x93\x93\x6f\x1b\x1b\x95\x51\xf1\x5e\x83\x48\x37\x1b\xaa\x08\x3e\x26\x02\x4d\xf0\x22\x65\x5c\xd5\xd0\x75\x28\xc5\x1b\xd7\x64\x14\x6f\x9c\xc6\x40\xef\xc7\xed\x5c\xe2\x8d\x0d\x95\x78\x94\xc9\xf5\xab\x25\x8b\xb5\x7a\x94\x5d\xc0\x8b\xf6\x36\x42\xdb\xe2\x5f\x13\x4a\xb2\x1e\xd6\xcb\x60\x88\x3b\x59\x9a\x2c\x92\xd2\x3a\xdc\xb3\x89\x71\xb0\xd7\x87\xcd\x28\x95\xc2\xc6\x89\xd9\xbe\xba\x0f\x07\xe6\x76\x0d\x54\xf6\x84\xe1\xa5\x2f\xa5\x65\xe4\x9b\x65\xbd\x13\xc0\xd4\x19\x96\x91\x8c\x24\xd3\x74\x53\xb1\x23\xd3\x72\x93\xee\x53\xa4\x73\xce\x16\x98\xfa\xfb\x50\x6b\xd6\xe0\x72\xa2\x02\x44\xe8\x1f\x19\xfa\xa8\xa5\x39\xe0\x7c\x5d\xd4\x7c\xce\x13\xde\xd9\x50\xfe\x9a\x17\x39\xe9\x21\xda\x73\x2e\xf7\xb1\x36\xb5\xf2\xb6\xb6\xe7\xb5\xc9\x78\x40\x7d\x44\x28\xb0\x5f\x54\x48\x65\x6d\xd5\x68\x28\xc5\x33\x2a\x35\xa2\x6d\x6f\x7c\x4f\xd6\xee\x8d\x9b\x90\x76\xae\x69\xb2\x2d\x57\xc6\x67\x62\xba\x90\xd3\x2d\x0b\x7d\x52\x3b\xce\xa0\xaa\xd2\xe1\x06\x1d\x21\xab\xa7\x8e\x2a\xa0\x6a\x65\x45\x9d\xc2\xc7\xc8\x3a\x0f\xe7\x81\x90\xfb\x9a\xf5\x4b\xbf\x42\x96\xea\x6d\x50\x36\xc3\xe4\x75\x51\x4e\x90\x75\x2d\xbb\x49\x23\x90\xd7\x0a\xc4\x6b\x06\xf2\x3d\xb2\x54\x6c\x15\x51\x1a\x8d\x40\x66\xdc\x68\x3e\x00\xd1\xba\x03\x10\xcd\x0c\x40\x4e\xc9\x00\x44\xe3\x01\xc8\x8c\x3e\x74\xdc\xba\xef\xd0\x93\x2d\xaa\xbb\x71\x92\xf2\x30\xec\xa1\x7c\x85\xde\xfd\x3a\xec\x5f\x21\xe7\x02\xcd\x42\x6f\xee\x87\xe8\xe4\xa7\x2c\x93\x80\x0a\xef\x96\x82\x70\x27\x28\x50\x89\xae\xc2\x20\xbd\xa3\x82\x4b\x88\x88\x30\xc4\x89\x1b\x06\x5e\x01\xa3\x47\x7c\x81\xa5\x54\x11\xe7\xe1\x2d\xfb\x78\x3d\xac\x36\xed\xe3\x5c\xec\xb4\x4d\x82\xec\x36\x6e\x03\xe9\x21\xad\x8b\xb0\x7b\x43\x74\xb3\x97\x99\x37\xd0\x22\xd5\xbe\x1b\xa4\x38\xd5\x16\x96\xa0\x3d\x86\x8d\x55\x3e\x34\x6a\xed\xf0\xe2\x20\x83\xb4\x97\x99\x8f\xea\x4b\xc2\x58\xc8\x2a\x5d\xd9\x57\x12\xd5\x9e\xec\x27\x28\xd5\x16\x6e\xc7\x7a\x04\xfb\xaa\xdc\xa8\x95\xda\xe1\xc5\x7e\x8a\xb3\x8f\x89\xe5\x3e\x6c\x34\xe5\xa1\xf7\x9d\xf2\x38\x8d\xa6\x3c\x5b\xd7\xa9\x0e\xcc\x3d\xd8\x18\xbb\x64\xe7\x0a\x11\x05\x21\x9b\xc9\xb1\x19\xc6\xa3\xd0\x97\x6d\x22\x47\xa4\xef\x33\x0b\x47\xc5\x74\x9d\xd1\x6e\x52\x37\x35\x77\xda\xa3\xb4\xf0\xb7\xc5\x92\xdb\x9d\xa4\x64\xc1\x2f\xb9\xb2\xe8\xbf\x28\xee\x9f\x29\x48\x25\x2f\xed\xd2\xa0\xba\xbb\x97\x29\x61\xc2\x2b\x85\xa9\xea\x51\xbb\x54\xa8\x8c\xd5\xad\x1a\x1c\x6c\xd1\x4e\x0f\x35\x65\x9a\x91\xd9\x3d\xb6\x01\xa1\x54\xda\x29\xce\xfb\xe7\xdb\x67\x4e\x20\x65\xa6\x4e\x37\x14\x1a\x46\x15\x6b\xfd\x42\xa5\x66\x86\x86\x92\x79\x50\x9a\x53\x49\x52\x56\xae\xc0\x8f\x66\x81\x7b\xff\x3d\x36\x89\x92\x5f\xbb\x16\x12\xab\x57\x99\x56\xb1\x4c\x3d\xfd\x0f\xba\x4a\x03\xc0\x7b\x72\xd6\x39\x99\x3d\xe9\xe6\x9a\x74\x63\xcd\xcd\xb8\xaf\x6b\xca\x7b\x75\xe4\x95\x5b\x0e\xd6\x53\xe3\x0e\xd6\xbc\xab\x26\x47\x65\xa5\x1e\x96\x07\x40\xc6\xbf\x83\x90\x53\x79\x53\x22\xdd\x3d\x05\x7f\x2a\x04\xa4\x7e\xc7\xb7\x8c\x62\x9f\x66\x4e\x95\xa6\x27\xb9\x5b\x40\xb6\x4f\x6f\x88\xad\x0b\x49\xe3\x69\x7a\xb3\x0b\x43\x6d\xf2\xa4\x62\x68\x56\x88\xb2\x22\xd3\x91\x20\x1b\xde\xe2\x0b\x13\xc9\xe9\x90\xba\xf2\x51\xae\x63\x31\xe0\x90\xe5\x03\xb1\xc0\xb4\x23\x9c\x47\x56\xb2\xbd\x94\x1e\x74\xa7\xb9\x36\x05\x17\xe4\x36\xac\xc4\x34\x3d\xdd\x4d\xef\x99\xa8\x12\x34\xc8\x1f\x6b\x4b\xc8\x2c\x6d\x77\xb6\xdc\xc4\x19\xe5\xde\x21\x05\x66\x21\x78\x99\x65\x77\x95\x8a\x72\x93\x26\x75\xf2\xb3\x71\xd6\x2e\xbd\x27\x0d\xf6\xb6\x1e\x89\x6f\x5e\x04\x02\xd0\x8c\x7b\x46\x22\x30\x0d\xf2\xa2\x80\xba\x25\x08\x8b\x67\x62\xe8\x03\xe1\xbc\x97\xba\xcb\x43\x12\x0f\x49\xcc\x34\x20\x76\x21\xe9\x0e\x83\xce\x43\x46\x76\x41\xe5\x4f\x0c\x51\xe1\x54\xff\x5e\xed\x7e\x09\xbd\xa9\x51\xb3\x07\xad\xb3\x11\x0f\xfd\xb9\x20\x4f\xd4\xfe\x17\x99\xee\xd2\xb0\xfd\x77\x41\xed\x6a\xff\xf4\x46\x45\x9a\x13\xa7\xee\x3a\x35\xd0\xc3\x4d\x7a\x2e\x5c\x97\xca\xbc\x71\x6d\x26\x53\x3b\x8a\x8f\x40\x64\x50\x4f\xca\x63\x3d\xca\x6f\xd0\x9c\xe3\x09\xd9\x9f\xce\x94\xa2\x5f\x10\x9b\xf5\xc6\x4f\x4d\x66\xa0\xc1\x81\xb8\xac\x04\xe9\xd9\x51\x19\xc4\xd8\x73\x61\x32\x15\xee\x07\x21\xb2\x12\xa4\x07\xe3\xb1\xf8\x70\xe3\xfe\x34\x46\xeb\xd3\x98\xf3\x48\x34\xe6\x64\x69\x2c\xd9\x47\xe0\xfb\xd3\x98\xf3\x85\xd1\x98\xf3\xe4\x34\xe6\x1c\x8c\xc6\x4a\x90\x9e\x1d\x8d\x39\xcf\x87\xc6\x9c\x83\xd1\x58\x09\xd2\x83\xd1\x18\x6d\x4c\x63\xf2\x32\x6a\x5d\x1e\xd3\x3b\x07\x8f\x40\x64\xb2\xa2\x94\xc9\xe0\x2d\x64\xcb\xfd\x59\x4c\xab\xf9\x05\xd1\x18\x18\xfc\xd4\x3c\x26\x55\x38\x10\x91\x95\x41\x3d\x3b\x26\x93\x71\xf6\x5c\xa8\x4c\xc7\xfc\x41\xb8\xac\x0c\xea\xc1\xc8\x2c\xd9\xca\xbc\x3f\x9b\x45\xbc\x36\x99\x0d\xf8\xe3\x70\x19\xd4\x93\x52\xd9\x80\x85\x30\x21\xe3\x75\xe6\x64\x4a\xcf\x2f\x88\xcc\x06\xfc\xa9\xb9\x0c\x34\x38\x10\x95\x95\x20\x3d\x3b\x26\x83\x18\x7b\x2e\x44\xa6\xc2\xfd\x20\x3c\x56\x82\xf4\x60\x34\x16\xf1\xa6\x2c\xb6\x98\xd4\x66\xb1\x4f\x93\xc7\x61\x31\xa8\x27\x65\xb1\x4f\x78\xc2\x70\xfa\x79\xe4\x6e\x0e\x53\x5a\x7e\x41\x1c\xf6\x69\xf2\xd4\x1c\x06\x1a\x1c\x88\xc3\x4a\x90\x9e\x1d\x87\x41\x8c\x3d\x17\x0e\x53\xe1\x7e\x10\x0e\x2b\x41\x7a\x30\x0e\x5b\x4c\x9a\x70\x18\xaf\x79\xb5\x20\xe2\x19\xa2\xbb\xda\x7e\xa9\x20\xe2\xe6\x4e\x41\x44\xe5\x95\x82\x88\xb7\x06\x4e\xaf\xe2\xeb\x22\x43\x60\xf2\x62\x74\x2c\xbb\xcf\x11\xbd\x91\xbf\x2e\xc8\xbf\x48\xe2\x8b\xab\x8f\x88\x6a\x81\x0d\x18\x0d\x19\x15\xcb\x5a\x85\x2e\xa8\xbb\xeb\x7a\x68\xbe\xc0\x15\xfd\x5c\xaf\xc0\x25\xe1\x14\xf8\x57\x94\x17\x72\x89\xdc\x3b\xb4\xb2\xc6\x0f\x69\xe1\xd6\x6a\x36\xb3\x70\xa5\xb5\xd1\xbd\x86\x78\x14\xad\x7d\xad\x41\x0d\xf7\x4f\x7c\xfb\x7c\xc0\xd5\xed\x73\x88\xba\xfb\x5f\xbb\x96\x18\xc7\xc8\xba\x6e\x8a\xf1\x0a\x30\xae\xfa\x97\x75\x6f\xb1\xcb\xa2\x27\x60\xc2\x65\xb3\xda\x5f\x23\xeb\xc2\x69\x06\xf1\x3d\xb2\x3e\x39\x97\xc3\x66\x20\xff\x40\xd6\x65\xff\xaa\x19\xc6\x1b\x64\x0d\x9d\xf3\x7e\x0c\x62\x7a\x47\x5d\x94\x7f\x22\xeb\xfd\xc7\xf3\xf3\xb3\x8b\x9e\x76\x49\xa3\x5b\x26\x86\x6a\x9b\x5f\x32\x59\x4c\xd4\x4d\x4e\x4b\xf3\xee\x0d\x59\xca\xcf\x89\x75\x52\xcc\x0c\xb9\xdb\x85\xaf\x13\x56\x30\xff\x44\x43\x4f\x05\xd5\xd5\xb8\x52\x0a\xd8\x43\x8b\x64\xe4\x30\x43\xc3\x62\x92\xb9\x71\x66\x2a\x39\xc7\xee\x54\x16\xdb\x3e\x50\x2c\xb4\x90\x19\x2d\xe6\x73\x35\x5c\x00\x4c\xeb\xfa\x3a\x33\x60\x24\xb4\x95\xe6\x6c\x23\x35\x99\xbb\x71\x51\x3f\x97\x0b\x2b\xf9\x05\xd0\x28\x2b\x97\xb8\x12\x58\x54\x00\x18\xa3\xc6\xd4\x97\xb3\x7f\x31\xdd\x45\xa0\x7b\x34\x22\x87\x61\xd7\x9d\xee\x33\x00\xd3\x31\x22\x7f\xa1\x4d\x17\x7a\x48\xb0\x39\x29\x09\xed\x42\xc8\xa0\x1c\x62\x95\x7c\x12\xab\xf7\x1d\x14\xe2\x69\x49\xed\x41\x41\xcd\x9f\x0e\x7c\x3f\xb7\x57\xb8\x5c\x96\x66\xc9\x88\x29\xcd\x8c\x03\xa6\x54\x40\xc5\x4b\x69\x6e\x8f\x32\xe2\x0a\xb5\x0f\x7e\xa0\x9b\x6a\x49\xbc\x34\x60\x91\x98\xed\xa4\x0b\xa6\xd9\xeb\x98\xe6\xff\x4c\x41\xd8\x9d\xf9\x74\x12\x98\x6f\xd9\x35\xa7\xe0\xe4\xb3\xf7\x0f\x50\x76\xdb\xa7\xef\x32\x3d\xfd\xfc\x5d\xd3\x8d\x4c\x33\x5f\xe3\xab\x15\x41\xfe\x5b\x79\xcc\x88\xc8\x96\xc8\x4f\xf7\x4f\xf5\x52\x55\x5f\x53\x8c\xed\xfa\x5f\x00\x00\x00\xff\xff\x01\x8c\xf4\x96\x9b\x4f\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 20379, mode: os.FileMode(384), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

