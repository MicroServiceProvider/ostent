// Code generated by go-bindata.
// sources:
// index.html
// DO NOT EDIT!

// +build bin

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x3d\x7b\x73\xdb\x36\xf2\xff\xf7\x53\xa0\x98\xf6\xd7\x64\x26\xa4\x6a\xc7\xe9\x2f\x97\x4a\xbe\x49\x6c\x5f\x4f\x53\xdb\xd1\xc4\x76\xee\x7a\x9d\xce\x15\x22\x21\x09\x31\x45\xf2\x00\x50\xb6\x4f\xa3\xef\x7e\x0b\x80\x4f\x89\xb2\x48\x59\xaf\xd8\xce\x8c\x63\x12\x5c\xec\x1b\x8b\xdd\x05\x2d\x8d\xc7\x2e\xed\x31\x9f\x22\x6c\x7e\xff\x3b\x0a\x25\x1b\x52\x3c\x99\x34\x45\x48\xfc\xc3\xf1\xd8\x3e\x26\x92\xd8\x66\x18\x46\x1b\xf1\x30\xf5\xdd\xc9\x64\x66\xf6\x20\x10\xd2\x27\x66\x3e\x41\x03\x4e\x7b\x2d\xdc\xc0\x68\x3c\xbe\x64\xd2\xa3\x1d\xb8\x67\xb7\xd4\x45\x38\x81\x43\x18\x19\xfc\xc9\xc0\x64\x92\x92\xcc\x86\x9a\x0d\x32\x97\xa2\x47\xb0\x1a\xfd\x2e\x44\xef\x5a\x31\xae\x90\x70\x32\x14\x93\xc9\x37\x4d\x97\x8d\x90\xe3\x11\x21\x5a\xb8\xcf\x99\x6b\x75\xbd\xc0\xb9\x06\xb6\x2c\x19\x84\xf8\xf0\x1b\x84\xf2\x10\x4e\xe0\x59\x1e\x47\x1e\xe1\x7d\x6a\xed\x21\x49\x6f\xa5\xc5\x59\x7f\x20\xf1\xa1\x06\x1b\x8f\x8f\x14\x60\x27\x10\x4c\xb2\x11\x45\xdf\x85\xf6\x29\xf1\x41\x16\xe6\x52\x4b\x0c\x82\x1b\x75\x81\x11\x56\x97\xd9\x3d\x08\x04\x74\x80\xd2\x60\x2f\x21\x34\x38\x30\xc8\x83\x11\xe5\x3d\x2f\xb8\xc1\x06\x02\x60\x08\x10\xf9\x3b\x28\xe9\x12\x90\xc7\xf8\x27\x13\x24\x95\xee\x5a\xf8\x34\x20\x2e\x22\xa3\x3e\x72\x99\x08\x3d\x72\x87\x02\xb0\x49\xe0\x8b\x6c\xba\x32\x0d\x60\xd0\x64\x26\x93\x16\x4e\x98\xb0\xd4\x7f\x08\x2e\x25\x05\x10\x87\x5a\x21\xa7\x08\x28\x13\x69\x79\xb4\x07\xf2\xd9\xb6\x8d\x62\xcb\x26\x54\x94\xce\x0d\xe3\x8d\xc1\xde\x61\xb3\x01\x1a\xd0\x0a\x4b\x2f\xe6\x6a\x6e\x6f\x35\xfa\x2a\xb5\x5d\x26\x6b\xe4\x25\x4f\x87\xd4\x8f\x50\x2a\xaa\xba\x48\xa1\x00\xce\x63\xd9\x4d\x11\x2b\xf3\xc3\x48\x5a\x7d\x1e\x44\x21\xce\xc3\xcc\x85\xb2\x3c\xd2\xa5\x1e\x12\x43\xe2\x79\xc6\x82\x7e\x70\xc3\x09\xcc\x76\x29\xd8\x23\x55\xcd\x62\x44\xdd\x48\xca\xc0\x07\x3d\x91\xe4\xa9\x19\x89\x71\x0b\xea\x04\xbe\x4b\xf8\x9d\x32\x35\xe9\x7a\xd4\xc5\x87\xca\xc5\x41\x7f\xae\x59\x0d\x4b\xd0\x1a\x8f\x6f\x98\x1c\xa0\x53\x2a\xc4\x71\xea\x5e\xb0\x14\x0b\x94\xf3\x52\xc1\x02\x42\x85\x7f\xc0\x6d\xe0\x1f\x79\xcc\xb9\x6e\x8d\xe5\x80\x09\x7b\x40\x7c\xd7\xa3\x7a\x64\x62\x16\x3b\xac\x5d\xe5\xbf\xe0\xb4\x99\x1b\xc2\xd8\x91\xb9\x9c\xc2\x87\x90\x5a\xeb\x1f\x88\xdb\xa7\x7a\x82\x7d\x09\xd4\x0b\xab\xbd\x28\xe0\xd2\x32\x9f\x05\x9c\xee\x94\xcc\x46\x50\x94\x49\x5f\x59\xe6\xa9\x81\x66\x23\xef\xdf\x9b\x71\x76\x1e\xdc\x88\x8d\xf8\xba\x6f\xbf\xef\x8a\xc0\x8b\x24\x5d\x85\xd3\x9f\x67\x31\x75\xca\x01\x44\xe4\x38\x00\xf0\x88\x9d\x7f\x27\x65\x5f\xcb\x22\x68\x36\x22\x2f\xd9\xb7\x14\x50\x7e\x27\x3a\x0f\xfc\x7f\x51\x1e\xa4\x8a\xc0\x66\x2f\x5a\xb0\xe5\x20\xd8\xa5\x25\x73\x08\xe8\x4a\x72\x16\xd2\x6c\x0b\x2a\x07\x97\x03\x4a\xc0\x87\xcd\x66\x1c\x3f\xa6\xb7\x70\xe3\x22\xd8\x27\x8d\xda\xa7\xd2\x8b\x0e\xe5\x2c\x70\xe3\x0d\xb8\xce\x44\xf4\x99\x78\x11\xbd\x7f\x22\xb0\x12\x3f\xcf\x6b\x6d\x3c\x66\xbd\x38\x5d\x82\x3c\xc0\x85\x0d\x3f\x55\xfa\x78\xcc\x89\xdf\x87\xfd\xda\x23\x59\x4e\x15\x03\xd9\xa7\x4c\xc8\x1c\xe4\x17\x71\x8b\xfe\x34\x3e\xa1\x9e\xbc\x50\xb0\x2f\xed\x21\x09\x5f\xf4\x22\xdf\x51\xe9\xc9\x0b\x40\xf3\x0a\xb1\x97\x68\x8c\x38\x95\x11\xf7\xd1\x8b\x3f\x53\x04\xb1\x75\x7e\xa5\x77\x08\x7b\xc4\x82\xc8\xd2\xbd\xb3\x42\xad\x0d\xac\xe8\xdb\x46\x33\x05\xaf\x2a\x64\x03\x75\x94\x05\x51\x25\x87\x71\xb8\x8c\xba\x0d\x0a\xad\xf4\x34\x15\x9e\x83\x00\x12\x22\x45\xd2\x28\xe8\x8b\x30\xd9\xaa\xb0\x2f\x20\x39\xbd\xf6\xe0\xf2\xc5\x18\x96\xcb\x3b\xc4\x5e\x29\xe0\x77\xe8\x07\x8d\xf4\x87\xc9\xcb\xc9\x9f\x19\xe6\xa2\xc1\x34\xaa\x97\x3f\x1b\x90\x74\x34\xbf\x5c\xf2\x77\xb1\xfb\xe7\xfe\xcf\xb2\x37\xf3\x6b\x5e\x46\x3d\xa4\xc3\x2d\xa6\xd4\x67\x74\xb8\xde\x9c\x5a\x11\xc8\x92\x6a\xb8\x0b\xcc\xde\xb3\xbe\x94\xda\xd0\x58\x4b\x42\x5d\x4b\x5b\xcf\x19\xf5\x6c\x96\x01\x0a\x5c\x69\x4a\xad\xf0\x6d\x3f\xbf\xdc\x70\x4e\xbd\x1b\x42\x3f\x27\xd5\x95\xdc\x7d\x3d\x59\xb5\x09\x44\xbb\x92\x5a\x6e\x38\xad\xde\x2d\xe1\xb7\x99\x57\x1b\x4d\x6c\x33\xb1\xc6\xe9\x76\x5b\x3f\xbd\xbb\x0c\x24\xf1\x96\x99\x78\x25\xe8\x52\xe9\xfb\xdf\x38\x5d\x90\xbd\xcf\xa5\xf7\xfd\x03\xb3\xfe\xa1\xd6\xd2\x6c\xd2\x0f\xe3\x59\xda\x67\x80\x96\x49\xfa\x61\x66\xa5\xac\x1f\xe0\xe2\xb4\xff\x9a\xf9\x2a\xe9\x87\x01\xfb\x57\xe6\x2f\x9f\xf3\xeb\x48\x97\x61\x59\x32\xcd\x57\x08\xb4\x3b\x3c\x08\x83\xf2\x8b\x07\x21\x50\x0e\x32\x85\x20\xa7\x95\x7b\x91\xa0\x6e\xdf\x8a\x04\x0d\x1d\x89\x91\x0b\x16\x8a\x6f\x5a\x19\x6b\x1d\x07\xac\x9a\xe7\x55\x0f\x2c\x70\xac\xba\x75\x8d\x41\xbb\x13\x85\x8d\xdb\xdb\x62\x5d\x73\xdc\x5b\x6f\x59\x03\xf8\xb3\xaa\xe6\x98\x89\x6b\x14\x09\x02\x0b\x7a\xad\x95\x4d\x46\x67\x2d\xd5\x4d\x1d\x9d\x3d\x17\x37\xb3\xd9\xde\x71\x6f\xa5\xb5\x0d\xa0\xdb\x7e\x96\xbf\xe1\xd2\x66\x27\x64\x7e\xae\x6c\xaa\xf8\xfa\x7a\x0a\x1b\x1d\x83\x76\x25\xb5\xdf\x70\x5d\xb3\x53\xb2\x6f\xb3\xac\xd1\x8a\xd8\xfe\x71\x41\xb2\xa4\x62\x53\x7d\x86\x7c\xeb\x3a\x35\xd5\x35\xda\x43\xf8\x98\x8e\x98\x43\x8b\x26\xa9\x66\x8e\x53\xc0\x55\x66\x12\x35\x5e\x66\x96\xc3\xf8\x59\xec\x87\x53\xd9\x84\xb2\x25\x81\xcc\x3f\x9e\x99\x15\x23\xa9\xc9\xea\x24\xc5\x0b\xe4\xde\x47\xf8\x2c\x88\x7c\x09\xb1\xe0\x51\x0a\x3e\x75\x8a\x51\xaa\x83\x9f\x10\xd6\xe5\xca\xd3\xd5\xc0\x1b\x84\x55\xb9\xf5\x74\x15\xf0\x1a\xe1\xf7\x23\xc2\x9e\xb0\x0b\x1c\x68\x17\xf8\xfe\xeb\x57\xc0\xc2\xee\x0d\x24\x3f\xd7\x57\xaa\xee\x9a\x6d\xe0\xb8\xbd\xac\xbc\x4d\xc1\x96\x69\xe1\xb8\xbd\x4a\x1d\x1c\xb7\x17\x37\x70\x5c\xc6\xf5\xab\x7f\x8a\x05\xfb\x98\xf1\x73\xfd\xee\xde\x83\x4e\x6e\xb3\xb2\x17\x72\x3c\x85\x95\x8e\xce\xc9\x70\xe1\xd9\xeb\x3c\x24\x28\xc6\x92\xf0\xb6\x0c\x96\x7c\x87\xa5\xcf\xc9\xdd\x94\x24\xa6\x50\xce\x75\x71\x80\x5e\x59\x1f\x29\x2e\xd4\xdb\x7e\xe0\x52\x48\xa7\x74\xe8\x4e\xe0\xcd\x60\xae\x5b\xb2\x11\x2e\x4b\x7a\x55\x45\x26\x23\x15\x5d\x53\x1e\xa3\x02\xf8\x66\x58\xd4\xe1\xed\x5e\x1e\x7b\x9c\xd2\x8c\xc7\x5e\xa1\x7b\x56\xb3\x89\x36\x8f\xcf\x7b\xfa\x6a\x46\x8b\xa6\xad\x56\x45\xdf\x25\xfd\xb6\x19\x95\x7f\x5f\x50\x79\x71\xc6\x63\x6d\xd4\x39\x61\xb4\xc5\x4e\xdd\x51\xe7\x6a\xbd\xad\x3a\x45\x20\xeb\xd5\xc1\xdd\x7a\x9b\x74\x40\x60\x2d\xdd\xb9\x5a\x7a\x7a\x6e\xcf\xcd\xb6\x2c\x40\x81\x2b\xed\xcf\x29\x7c\xdb\x6f\x56\x6d\xb8\x41\xb7\x1b\x42\x3f\x77\xe8\x2a\xb9\xfb\x7a\x5a\x74\x26\x10\xed\x4a\x9f\x6a\xc3\x3d\xba\xdd\x12\x7e\x9b\x4d\x3a\xa3\x89\xed\xbe\x7b\x70\x04\x96\x59\xf2\x40\x9f\x2f\x38\x78\x2d\x9f\x78\x71\x27\x96\x9a\xf7\x0f\xc2\xe4\x52\x13\xdb\xe0\x24\x0f\x7d\xf7\x00\xf2\xbb\xd9\xba\x15\x06\xb3\x6c\x0f\x6e\x96\x29\x59\x61\x5a\xa5\x9a\x15\xe0\xe2\xa2\xd5\xc7\x9a\xb2\x7d\xfe\xc0\x4a\x35\x6b\x51\x26\xe8\x1e\x7a\x68\x9f\x2c\x85\xa9\x1a\x43\x61\x57\xde\x92\x1d\xde\x17\x46\x12\xd3\xcc\x4b\x20\x57\x40\x1d\x5c\xae\x48\x3c\x19\xd8\x00\x6d\xe5\xb6\x45\xe2\xe9\xc8\x8a\xa8\x5b\xcc\x87\xd8\x20\xe8\x7d\x5c\xa8\x35\x50\xe4\x22\x1d\x59\xf1\xdb\x13\x31\xde\x1f\x5e\x21\x00\x25\x91\x27\x2f\xc2\x40\x8a\x77\x48\xf2\x88\xee\x42\xa5\xc6\xb6\xf9\x4a\x45\x7b\xcd\xaf\x54\xb4\xf3\xaf\x54\xb4\x7d\x09\xf0\x50\x6a\x89\xf5\x56\x6b\x19\x9d\xb5\x14\x6d\x75\x74\xf6\x5c\xb3\xcd\x26\xb1\xed\xd5\xbe\x52\xd1\xde\x85\xd7\x0b\x36\x5c\xb1\xed\x84\xcc\xcf\x05\x5b\x15\x5f\x5f\x4f\xbd\xd6\xde\xa5\xd7\x0a\x36\x5c\xae\xed\x94\xec\xdb\xac\xd6\xda\xdb\x7e\xa5\x02\x67\x5b\xed\x52\x75\x50\xa7\xac\x6f\x7f\xcc\x83\x50\xbc\x3a\xe1\x3c\xe0\x02\xb5\xfd\xc6\xc7\x48\xa2\x90\xf2\x78\x8d\xe1\xb9\xc8\xf7\xf3\xb9\x68\x61\xad\xa3\xd3\x00\x9c\xa3\xfd\x11\x85\xa2\x8c\x60\x87\x38\xd7\x54\xae\x8a\x56\x8a\x6d\x1e\xb9\x0f\x6c\x65\xb4\x80\x46\x93\x1d\x76\x9b\x0d\x76\x38\x45\xab\x7e\x41\xc9\x7a\xc4\x75\xb9\x98\x2d\x2a\x59\xee\x30\x34\x06\x5a\xa6\xae\x64\xd5\x8e\x42\x59\x72\x14\x1a\x9f\x83\xb2\x9e\xbd\xea\x43\xd0\x14\xe5\x03\x8f\xdc\x12\x64\xed\x4e\x45\x54\xf3\x2d\xf9\x7f\x7e\x57\x84\x3f\x17\xdc\x44\x9f\x78\x22\x57\x2f\x06\x6a\x16\xc3\x30\x70\x23\x2f\x40\x07\xbf\xe0\x6c\xc5\x66\x87\x7e\xb3\xf3\xc0\xcb\x72\x73\x62\x6e\xf5\xf2\x6a\xfb\x33\xc5\x75\x12\x5c\xce\x99\x87\x52\x38\xe5\xa3\xf9\x08\xd3\x28\x16\x88\xda\x78\x35\xe6\x97\xf1\xa8\x40\xca\x99\x84\x27\x29\x97\x39\x82\xaf\x4a\xc4\xa5\x49\xb4\x98\x45\x65\x02\x49\x4e\xe0\xc6\xfc\xf9\xa5\xbc\x18\x04\x79\x66\xe2\x5f\xc6\x68\xdf\x94\x2a\xe2\xbd\xe7\x99\x28\xad\x84\xa1\x9e\x24\xb1\xda\xa7\x06\x14\xc1\x74\x24\xe1\x74\x7a\x44\x2b\x51\x5b\x3a\x3d\x13\xcd\x87\x4a\x25\x75\x2e\x8e\x24\x1a\xcc\x11\x5d\x6c\xeb\x02\x43\xf7\x1a\xbc\x36\x8a\x22\xaf\x53\x41\x6f\x86\xd9\x52\x9b\x17\x2d\x9e\xee\x0c\xf3\x10\x2d\xb0\xf8\x49\x66\xeb\x7b\x11\x94\x58\x7c\x85\xab\x7c\xd1\x02\x0e\xd3\x4d\x69\xd6\x23\xe3\x2d\x66\x81\x4f\x27\x18\x4a\x9d\x3a\x46\x31\xd7\xab\xe7\x6c\x90\xf3\x34\xb6\x88\xa3\x4e\x8e\x97\xfb\x51\x94\x69\x7d\x03\xea\xfe\xf0\xdb\xe5\xc9\x45\xa9\xb2\x3f\xdc\x49\xba\x48\xd5\x66\x76\xa9\xa2\xf5\xf4\x6a\x6a\xfe\xd0\xbe\xbc\xb8\x47\xc7\x2a\x6f\x98\xcb\x87\x9e\x7b\x8f\x76\xd5\xe4\xea\xaa\xad\xdb\x62\x33\x24\x62\x49\xcf\xa3\xe1\x4e\xbc\x01\x11\x8a\x2d\xf6\xd5\x3a\x62\xbd\x7d\x35\xc0\x9f\x85\xd6\x0e\x0f\x54\xf9\xb3\xee\xb6\x5a\x4a\x66\x2d\x5d\xb5\x3a\x1a\x7b\xee\xaa\xcd\x76\x1a\x3a\x62\xa5\x5d\x35\x40\xb7\xfd\x0e\xd3\x86\xbb\x6a\x3b\x21\xf3\x73\x57\xad\x8a\xaf\xaf\xa7\xab\xa6\x63\xd0\xae\x74\x96\x36\xdc\x55\xdb\x29\xd9\xb7\xd9\x55\xd3\x8a\xd8\x95\x3f\x54\x5a\xf4\xca\x7e\x47\xe8\xbf\x59\xea\xb4\x8f\xbf\xfe\x37\xf6\x97\x95\x7f\x1f\xe1\xab\xc7\x2a\xff\x5c\xa1\x5f\x83\xd0\x17\x27\x9f\x1e\xa7\xd4\x55\xac\x7e\x00\x5e\xff\x84\xc5\x7f\x83\xf0\x79\xfb\xe9\x8a\xff\x13\xc2\x9f\xdb\x9f\x2e\x9f\xae\x02\xfe\x1f\xe1\x4f\x27\x17\x8f\x59\x7e\x87\xaa\xb3\xa5\xb9\x0a\x78\x8b\xf0\x65\xfb\xec\xe4\x71\x6a\x60\xae\xd4\x7f\x41\xf8\xe8\xe3\xd9\xd9\xfb\xf3\xaf\x6a\xbf\x9b\x73\xe4\x14\xf2\xc0\x29\x39\x70\x0a\x45\xae\x63\xa3\x40\x96\x39\x6e\x0a\x45\xa5\xe3\xa6\x50\x24\x9f\x98\xca\xd4\x27\x27\x85\xc2\x86\x54\x6a\x65\x9f\x95\x9a\xa0\x5b\xf2\xd3\x8b\x60\xfa\x55\xf5\xe9\xd9\x1c\x41\xf9\x43\x68\x76\x38\x0b\x38\x93\x77\x0f\xc1\x71\xce\x9c\x9a\x07\x6c\xc5\xf9\x17\xec\xbf\x0f\x9a\xff\x89\x0a\x48\xdf\x7d\x59\x0f\x47\x12\x72\x62\x24\x97\x6c\xf1\x29\x61\x26\x71\xe1\x48\x71\x23\x2d\xcf\xe6\xb7\xc7\x1f\x8f\x2e\x7f\xeb\x9c\xa0\x81\x1c\x42\x69\xd3\x34\xbf\x54\x4b\x11\xea\x8c\xb8\x70\x19\x52\x09\xd5\xf5\x80\x70\x41\x65\x0b\x47\xb2\x67\xbd\x8d\xcb\x94\xa6\x6e\x1f\xaa\x35\x3e\xf5\x5d\x11\x08\xae\x40\x13\xcd\x86\x01\xc8\xe1\x19\x48\x19\x5a\xf4\x3f\x11\x1b\xb5\xf0\x3f\xad\xab\xf7\xd6\x51\x30\x0c\x89\x64\x50\x9b\x63\xd0\x86\xaf\xa6\xb5\x70\xfb\xa4\x45\xa1\x6a\xc3\xf9\x99\x0a\x73\x0b\x8f\x18\xbd\x09\x03\x2e\x73\xc0\x37\xcc\x95\x83\x96\xab\x3f\x74\xc1\xd2\x37\xb0\x70\x7d\x26\x19\xf1\x2c\x01\xa5\x15\x6d\xed\xd9\x3f\xc2\xca\xfb\xd6\xb2\x7e\x87\xc8\xd1\x3e\xf9\x23\x46\xab\x23\x23\xa7\x9e\x6e\x66\x72\xe9\x44\x12\x31\xc0\x8a\x93\xaf\xcc\xe8\x91\x91\xba\xb7\xe1\x3f\x35\xfd\x77\x50\x19\xeb\xfd\x61\x59\x33\xd3\xcd\x2c\x01\x1e\x07\x96\x7d\xbd\x7f\xfb\x7a\x3f\xc5\x01\xba\xf9\xa8\x75\xf1\x99\x72\x01\x71\x65\x32\x49\xd0\x8a\xe4\xc2\x7a\xbd\x6f\x87\x7e\x1f\xc9\xbb\x90\xb6\xd8\x90\xf4\x69\x03\x6e\xf1\x0c\x15\x12\x86\x1e\xb5\x64\x10\x39\x03\xab\x40\x71\x6f\xff\xc7\x5b\xf8\xa9\x45\x13\xe0\xed\x9a\x54\x0e\x0e\x6e\xe1\xa7\x1e\x95\x83\x83\xba\x54\xde\xec\xdf\xc2\x4f\x3d\x2a\x6f\xf6\xeb\x52\x79\x0b\x1a\x7b\x5b\x53\x63\x6f\xe7\x68\x4c\xc8\x3b\x8f\x8a\x01\xa5\xe0\x94\xda\x86\x58\x85\x82\x86\x23\xc4\x7d\xf8\xe1\x71\x83\xf9\x2e\xbd\xb5\x15\xa0\x59\xa0\xc9\xa2\x6b\x76\x03\xf7\x6e\xb6\x6d\x20\x83\xd0\xea\x12\x5e\xda\x23\x88\x9f\xc5\x3d\xf7\xac\x7b\x51\xec\x64\x17\xba\x73\x53\x0d\x3d\xb5\xe8\xf7\x91\x16\x06\x80\x09\xef\x33\xdf\xea\x06\x52\x06\xc3\x77\xe8\x47\x9c\x1d\x30\x24\x7b\x98\x7e\x25\xdb\x9c\x94\xb4\x66\xbe\x79\x26\x01\x8f\x42\x00\xa3\x42\xed\x65\x92\x0e\x43\x0f\x6e\x66\xbf\xa6\x06\xd9\x69\xd8\x43\x4d\x1d\x4e\x75\x48\x61\xaa\x25\xd2\xd5\x8f\xf4\x18\xe8\x67\xbf\xd8\xa8\x99\xea\x48\xc2\x6d\x21\xc6\xea\xe0\x1a\x85\x85\xf0\x5b\xc6\x75\xfc\x6d\x3b\xb9\x69\x28\xe6\x7b\xea\x5c\xa3\x54\x8c\x64\xb6\x9d\x8b\xdd\x85\xbe\x69\xda\x34\x9a\xea\x2d\x95\x99\x2f\xde\x83\x2a\xdb\x0f\xb2\xb6\x82\xc5\xb4\xa9\x8c\xd3\xa9\x48\x2b\xde\x35\x1a\x37\x37\x37\x36\x68\x9a\xc3\x8f\xed\x04\xc3\x86\x09\xcd\x0d\x70\x5d\x4a\x04\x15\x0d\x25\x8c\x90\x7f\x75\x86\x61\x6b\xd6\x4d\xf1\x74\x5b\x35\x6d\xa8\x0e\x02\x4f\x9f\x2f\x25\x91\x9e\x54\x13\x3b\x7f\xa9\xe4\x2f\xb3\x87\x47\x66\xfd\x07\x95\x68\x5e\xc1\x19\xb5\x2f\xc6\xa9\x3e\x4f\xbd\x8a\x53\x6a\xb8\x8a\x38\xdd\x5e\x35\x3e\x15\x5c\x55\x9c\xea\xaf\xae\xab\xf0\xa9\xe1\x2a\xe2\x64\x15\xf9\x64\x35\xf8\x0c\x45\x35\x9c\x0a\x6e\x1a\xa7\x70\x38\x0b\x65\x3e\x56\x7e\x21\x23\x62\x46\xf1\xe1\x88\x70\xa4\xd2\x09\xd4\x42\x71\x62\x31\x99\xfc\x0c\x2b\x4b\x3f\xae\x82\x61\x3a\x57\x41\x82\x3b\xe5\x31\xf8\x8b\x68\x98\x62\xe2\xf2\xfd\x2f\xbf\x9c\x1c\x77\x19\x0c\x0e\x99\xdf\xe8\x46\xaa\xf4\xb1\xe1\xd2\xfe\x22\x20\x55\xf2\x04\xe4\x34\x80\x25\x79\xa0\x07\x55\xfe\xa4\xdf\x89\x4b\x19\x6b\x36\x4c\xdc\x86\x40\xa5\xd2\xa8\xff\x05\x00\x00\xff\xff\xde\x25\x96\x03\xd6\x6b\x00\x00"

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 27606, mode: os.FileMode(420), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

