// Code generated by go-bindata.
// sources:
// index.html
// DO NOT EDIT!

// +build bin

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5c\x6d\x73\xdb\x36\xf2\x7f\xef\x4f\x81\x3f\xff\xed\xbd\xe8\x54\xd2\x39\x0f\x77\xbd\x54\xf2\x8d\x63\xb9\x29\xa7\xb1\xa3\xf1\x43\xee\x7a\x6f\x3a\x10\x09\x51\x88\x29\x92\x25\x21\x39\xae\x46\xdf\xfd\x76\x01\x90\x22\x29\x52\x12\x1f\xec\x5a\x97\x64\x26\x16\x09\x62\x17\xbb\xc0\xe2\xb7\x0b\x62\x89\xfe\xff\x0d\x3f\x9c\xdd\xfc\x3a\x3a\x27\x53\x31\x73\x8f\x4e\xfa\xf2\x87\x10\xb8\x60\xd4\x86\x0b\xbc\x9c\x31\x41\x89\x35\xa5\x61\xc4\xc4\xc0\x98\x8b\x49\xe7\x07\x23\xfd\x68\x2a\x44\xd0\x61\xbf\xcf\xf9\x62\x60\xfc\xbb\x73\x7b\xda\x39\xf3\x67\x01\x15\x7c\xec\x32\x83\x58\xbe\x27\x98\x07\x74\xe6\xf9\x80\xd9\x0e\xcb\x50\x7a\x74\xc6\x06\xc6\x82\xb3\xfb\xc0\x0f\x45\xaa\xf2\x3d\xb7\xc5\x74\x60\xb3\x05\xb7\x58\x47\xde\x7c\x4f\xb8\xc7\x05\xa7\x6e\x27\xb2\xa8\xcb\x06\xc7\x31\x23\xc1\x85\xcb\xe4\x35\xdc\x2d\x97\xdd\x21\x15\xb4\xfb\xb3\x1f\x09\x64\xbe\x5a\x11\xb8\x02\x96\xfd\xde\xba\xde\x49\xdf\xe5\xde\x1d\x09\x99\x3b\x30\x38\x34\x69\x10\xf1\x10\x80\x1c\x7c\x46\x1d\xd6\x0b\x3c\xc7\x20\xd3\x90\x4d\x06\x46\x6f\x42\x17\x58\xa1\x8b\x65\x1b\xa4\x91\x78\x70\x59\x34\x65\x4c\xc4\x0c\x04\xfb\x2c\x7a\x56\x14\x25\xf4\x70\xdd\xe3\x9e\xcd\x3e\x77\xb1\x54\x73\x88\xac\x90\x07\x22\x4d\xf2\x89\x2e\xa8\x2a\x35\xf2\xfd\x4c\xa2\xd0\x02\x46\x9f\xa2\x5e\x88\x3d\x1c\x32\xb8\x7a\xd1\x3d\xee\x1e\xff\x10\x17\x74\x67\xdc\xeb\x7e\x82\x36\x6d\x50\xbc\x33\xa3\xdc\x53\xf5\x97\x4b\x3e\x21\xdd\x9b\xd3\x77\xef\xce\x87\x63\xee\xad\x56\x50\x4f\x0b\xa3\x28\x96\x4b\xe6\x46\xd0\x43\xd0\x42\x6f\xc6\xdd\x3b\xfd\x50\x3e\xf0\xec\xd5\xca\x88\x3b\xb5\xdf\x53\xc2\x69\xf9\x7b\xda\x34\x4e\xfa\x63\xdf\x7e\xd0\x85\x1e\x5d\x10\xcb\xa5\x51\x34\x30\xe0\x72\x4c\x43\xa2\x7e\x3a\x36\x9b\xd0\xb9\x2b\xe2\xdb\x48\x80\x61\x58\x1d\xe1\x07\x06\x09\x7d\x18\x47\xac\xce\x1d\x28\x84\x71\x48\x1a\xb4\x79\xc2\x0d\x4d\x02\x74\x62\x61\x67\xe2\xce\xb9\x1d\xd7\xc9\xd5\xd2\xdc\x51\x32\x16\x82\x19\xb9\x9d\x99\xdd\x39\x26\x01\xb5\x6d\xee\x39\x1d\x97\x4d\x60\xf0\xe3\x21\x88\xe9\xc7\x73\x21\x7c\x2f\xc7\x42\xf8\x8e\xe3\x32\x64\xe1\xd2\x20\x62\x76\x3c\xb6\xaa\xb2\xee\x65\x55\x09\x85\x53\xb5\xe2\x62\x1a\x3a\x38\x74\xff\xaf\x79\x25\x8f\x53\xcd\x4a\x0b\x08\x68\xd2\x6c\x14\x76\x7c\xcf\x7d\xc8\x56\x81\x4a\x37\x4a\x8e\x75\xef\xc0\x28\x00\xd9\x16\x4e\x68\xa9\x1d\x68\x76\x83\xd5\xb3\xa1\xec\xa9\x4e\xcc\x0c\x02\x25\xdc\x1e\x18\x53\xe8\xd9\xec\x38\x8c\x43\xea\xd9\x50\xc6\xc1\x50\xe4\x4c\x1b\x18\x33\xfa\x59\x61\xc1\x1b\x72\xfc\xc2\x9a\x26\xb3\x0c\x86\x08\xe7\x36\x70\xd1\xb3\x9e\x6c\xc2\x40\x6e\x08\x36\x2b\xf4\x7b\x34\x23\x57\x0f\xac\x2b\x67\x6b\x28\x68\x7e\x64\xd7\x66\xaa\x0a\xc8\x96\xa1\x3f\xe9\xcf\xdd\x94\x96\x71\x55\xf8\xc9\x1b\x88\xcb\xe3\x7a\xd4\x12\x7c\xc1\x36\xbb\x97\x6a\xe5\x11\x7b\xa3\x37\xbd\xde\xfd\xfd\x7d\x17\x74\x09\xe1\x7f\xd7\xf2\x67\x3d\x85\x7a\x80\x11\x2e\xa3\x11\x8b\x7a\x2e\x15\x2c\x12\xff\xb4\x66\xc1\x20\xd6\xfd\xe3\xf9\xd5\xb5\xf9\xe1\x32\xdf\x37\x92\x7f\x0c\x9a\x74\x73\x5c\x5d\x5e\x2a\x6c\x3c\x85\x00\xd3\x48\xea\x1a\x40\x29\x74\xb8\x87\x13\x90\x4c\x78\x18\x09\x59\xba\xa9\x93\xe5\xdb\x2c\xc7\x0a\x8b\x00\x71\x37\x3a\x40\x8a\x98\x0c\xf3\xd0\xbc\xbe\xb9\x32\xdf\xe2\x20\x22\x41\xcb\x32\x37\x15\x94\x07\x7f\xf1\xc6\x51\xf0\xa3\x9a\x38\x68\x44\x60\xd3\x1b\xd5\x52\x46\x69\x8e\x50\x93\x8d\xf9\xa3\x75\x79\x86\x1a\xce\x37\x34\x9c\x6f\xd7\xf0\x36\x10\x5c\x4d\xba\x03\xd2\xd2\xa5\x79\x2d\x5d\xba\x55\xcb\xf7\xa7\x2d\x68\xd8\x9b\xbb\xdb\x70\x29\x75\x0b\x37\xa0\x84\xf6\xc7\xbb\x3d\x68\xa6\x4e\xe8\xdf\xe7\x3d\x2b\x2a\x38\x63\x33\x70\x6a\x2a\x8e\x4b\x70\x0e\x5d\xeb\xab\xd8\xc7\xfa\x93\x09\x44\x2b\x9d\xe3\x0c\xce\x2d\x97\x82\xcd\x02\x84\x1c\x62\x80\xff\x87\xb6\xa3\x37\x6f\xd4\xc5\x6f\xd0\x1b\xcc\x05\xbe\x06\xe9\x62\xef\x14\xa3\xac\x3d\x29\x6e\xf6\x75\xb3\x66\xed\x49\x61\xab\x99\x3e\xdc\xdd\x29\x56\x30\x7f\x94\x4e\x01\xbe\x5b\x3b\x85\x3f\x4e\xa7\xf0\x56\x3a\x25\x88\x8a\x85\x3b\xfe\x6b\x33\xe9\x82\xa8\x0d\xe9\x16\xce\xe3\x48\xb7\x70\x76\x4b\x97\xdc\xec\x88\xfc\x63\x82\x05\xc4\xce\x08\x1f\x64\x10\xfb\xb7\xd5\xea\xc7\x7c\x08\xae\x23\x6f\x0c\xc6\xe5\xba\x6d\xb9\xec\x7d\x77\xf4\x5d\x6f\xb5\x5a\x2e\x95\x7c\x29\x81\xc7\x14\x96\x5d\x36\xae\x5b\x30\x0c\x36\x40\x5c\x1d\x3c\x00\xfb\x9f\xe1\x17\xd7\x48\xde\x99\xcb\xad\xbb\xc1\x52\x4c\x79\xd4\x9d\x42\xe4\xe5\x32\x59\xb2\x02\x19\x64\x97\xad\x56\x58\xfd\x0c\x2f\x89\x31\x16\x1e\x81\xff\x71\x6c\x0f\x2c\x41\x96\xa3\x24\x36\x5c\x93\x18\x9f\x5d\x3a\x66\x2e\x51\x3f\x49\xfd\x23\xdd\xbb\xdd\xb7\x28\x5a\x0a\x24\x4f\x50\xe5\x1b\xe8\x18\x15\x8f\x9d\xe8\x95\xc8\x7e\xda\x85\xdc\x99\x3e\xae\x7a\x89\x70\xa4\xb1\xa2\xfb\xaa\xa7\xad\x0d\xb0\x01\x4c\x3b\x32\xb0\xce\x3d\x17\x53\x82\x77\x60\xb0\x68\x7d\xc0\x1e\xff\xa8\xc5\xdc\x72\x09\x71\xb3\xc3\xc8\x37\xfc\x7b\xf2\x8d\xe5\x87\x8c\xbc\x19\x10\xe5\x8e\xce\x46\xb7\xdd\xf7\x3c\xc2\xbe\x15\x21\xc8\x7e\x2a\x44\xf8\x0b\x7b\x20\x12\xd0\x80\xdf\xf8\xa1\x73\x69\x28\xa2\xee\xa5\xd4\x19\x16\xd7\x76\x3c\x63\xa4\x33\x95\x5d\x4c\x3c\xff\x3e\xa4\x41\xa2\x5c\x42\x01\x6b\x6c\xbb\x94\x2a\x59\xfd\xe6\x3a\x6e\x1e\xb1\x80\x85\x16\x44\x9b\x2a\x2a\x54\x2b\xa9\x75\xe9\x20\x6e\xe0\x36\x62\xa1\x94\x2a\xd3\xac\x2a\x4d\x79\xd9\x93\xc7\x95\xe2\xfa\x21\xda\x14\x42\x16\x3e\x9d\x0c\xff\xa2\x5c\x6c\x0a\xa1\x4a\xdb\x96\xa2\xc3\xbd\x05\x0b\x93\x15\x6e\x81\x34\x26\x4c\xa6\x4d\x69\x54\x69\xa1\x34\x3d\x11\xa6\x4c\x3f\xfb\xb3\xcf\x44\x50\x48\x8e\x95\xbe\x09\xd6\xd6\x3d\xa2\x21\x9d\xe1\x30\xc8\xc7\x04\x1f\x76\xd1\xc2\xe5\x9c\xbe\xf4\xbd\x3f\x58\xe8\x13\x28\x83\x59\xe0\x11\x43\x55\x92\x7f\x3b\x53\x1f\x34\x34\x48\xb2\x84\xeb\x4c\xb9\x6d\x33\xcf\x88\xa7\x40\xea\x4d\x18\x48\x1e\xc3\xba\x98\xa6\x01\x3f\xb9\xc3\x07\x3b\xa6\x8c\xac\x86\x76\x9b\x59\x49\xcf\x3d\x9e\x59\x12\x9d\x7c\x9b\x0b\x1d\xeb\xb4\x02\x86\xf9\xf8\x8d\xa0\xe1\x3d\x7e\x2b\x68\x50\x4d\x5a\xe9\xe9\xb1\x93\xa5\xf1\x0b\x2c\xb1\x7e\x83\xb5\xcd\xd7\xc7\xe8\xab\x7c\xbd\x58\x3b\x5f\x69\x40\x55\x70\xdc\x9e\x8c\x1f\x60\x21\xfe\x5b\x45\x30\xb7\x79\x74\xb7\x36\xf5\xe1\x4f\x92\x49\x31\x98\xeb\x16\x34\xa0\xdb\x3c\xc4\xd7\x1b\x86\x62\xd1\x1d\xf2\xf0\x52\xbe\xed\xd0\xb0\x90\x40\xb8\x7a\xca\x16\x97\xfa\x5d\x48\x02\x1c\xb9\x1a\x31\xfd\x3e\xd0\x12\x13\x9d\x2e\x28\x77\xf7\x25\x29\x1f\x84\x35\xf4\xc4\xda\xc0\x1c\x1a\xa9\x92\xd5\x4a\x2d\xcd\xe2\x26\xe1\x89\x5d\x4d\xc8\x1b\x5f\xd0\xb4\x90\x8d\x40\x2a\x1e\xe5\x1a\x48\x75\x43\xc7\x88\x52\xc3\x89\xa7\x7e\x04\x79\xd1\x02\x5a\x15\xf6\xab\x7a\x59\xca\xbc\xf9\x0c\xa3\x27\x03\xdb\xfb\x28\xdf\x6e\xcb\x86\xef\xc8\x31\x31\x86\xf2\x05\x3c\xb4\x26\x95\xa8\xc1\x03\x84\xbf\xf0\xe7\x9e\xc0\xf7\xa8\xb5\x99\xbc\x24\x86\xb4\x21\x60\x91\x1a\xbf\x9a\xcc\x5e\x11\xe3\x56\xbe\xd6\x6d\x81\xd7\x6b\x62\x48\xbb\xc9\x33\x6b\x04\x36\x19\x88\x68\x03\x71\xb8\xe7\xdb\xcd\x21\x47\x71\x29\xc3\x1c\xf5\xf4\x19\x81\x8e\x39\x09\xd9\xde\x24\x55\x40\xc7\x9c\x97\xa2\x0e\x3e\xaa\x08\x3b\xa6\xec\xb7\xf6\x70\x47\x8f\x75\x2b\xc0\x73\xdc\x4e\x98\x14\xf7\x81\x9a\x4c\x29\x8f\xae\xc0\xa5\x24\x14\xd8\xa8\xad\x61\x64\x6b\x75\x92\xef\x67\x59\x4d\x62\x47\x0d\x3a\x84\x89\x1a\x64\x12\x11\x5a\x0b\x3d\xb2\xd3\xb7\x39\x1c\xf0\x7a\x01\x08\x9f\xac\xcd\xc8\xdc\x16\x7e\xf0\x4c\xf8\xa1\x61\x80\x4f\xba\xc5\x08\x90\x3c\xd8\x73\xce\x40\xfd\x21\x73\x05\x35\xbd\xca\x24\x1f\xe6\xa2\x0a\x4d\xb5\x16\xb2\xcc\x1b\xcd\x61\xde\x38\x76\x30\xd5\x14\x36\x61\x0a\xbf\x6c\x7b\xa5\x63\xc2\x1c\x0c\x27\xb4\x74\xda\x6e\x46\xf0\xf1\xde\xdc\x5b\xf3\xe6\x9a\x00\x96\x92\x88\x59\xbe\x97\xde\xc7\x35\xbd\xed\x71\x7d\x3f\xf7\x4a\x7c\xdc\xef\xa5\x4b\x4e\x82\xa8\xf6\xf2\x62\xb7\x70\x30\xb2\x7f\xba\x74\x02\x11\x85\xbc\xfd\xf5\xe6\xfc\x9a\xcc\x7c\x7b\xee\xfa\xe4\xd5\xbb\x06\x1d\xf8\x36\x27\xe2\xb7\xaf\xde\x3d\xba\x8c\x95\xfb\xb1\xaa\x90\x4d\x40\x96\xb7\x1b\x72\xf1\x09\x0b\x43\x3f\x6c\x08\xb2\x8a\x47\x19\xca\xaa\xa7\x5f\x61\xb6\x3e\xcc\xea\x31\x6a\x05\x67\xdb\x58\xa3\xb5\x84\xb3\x25\x10\x9b\xde\xba\x2c\x9b\x82\x2d\x40\x55\x19\x86\x3e\x51\xf3\xc5\xe8\xb8\x4f\xe3\x6d\x60\x60\x09\xee\xb5\xd1\x7c\x33\x74\x4b\xc3\x51\x1b\xf0\x16\x50\xeb\x8e\x89\x86\xf8\xa6\x99\x94\x01\x9c\x7e\xfc\x15\xe1\xea\x23\x5c\x3c\x4c\xad\x40\x5c\x4b\xab\xc1\xaf\x10\xd7\x4a\xa0\xf5\xe7\x02\x5d\xb9\x0c\xcf\x02\xee\x32\xf0\xd4\x1c\xef\x66\x6c\x56\x63\xef\x15\xa8\xd6\x73\xed\xe2\xfc\xa2\x18\xe7\x30\xc1\x46\x21\xdc\x1d\x07\x83\x92\x64\xdd\x5f\x38\x4a\x96\x87\xb8\xf5\x93\x3d\xe1\x04\x09\x7e\x6a\xff\x2d\x18\xb2\x2d\x7c\xf3\xae\x1f\x54\x13\xb0\xd5\xf7\xee\xc0\xb0\xd9\xe6\xe0\x05\x9b\x3d\xfd\xe6\x60\x6a\xfa\xe0\x70\x55\xa9\xbf\xe5\x15\xd5\x13\xbc\x9b\x8a\x27\x46\xf3\x29\x96\xe4\x3f\x95\x0e\x1c\x66\xf2\xe0\xbf\xec\xd0\x8d\xd6\x3b\xba\x30\x46\x92\x0b\x91\x7f\xb3\xb9\x1b\x27\x84\x68\x06\x3b\xc9\x65\x0a\x39\xf7\x1c\x43\x6f\x69\x9f\xe0\x9f\x3e\x4d\x93\x62\x52\x89\xca\xce\xbe\x64\x98\x9a\xbd\x60\x31\x9b\x55\x3a\x9f\x44\xf3\x93\x90\x29\xd3\x49\xc6\xae\x6f\xdd\x25\x69\x3e\xea\xa7\x3f\x2e\x17\x69\xfa\xca\xc0\x3f\x64\xec\x74\xb8\x37\xf1\x8d\x64\x93\x1d\xa8\xa1\x46\xbf\x37\x4e\xf3\x8a\x73\x75\x51\x57\x9d\x72\x84\x97\x45\x06\x3f\xca\xef\x83\xe7\x8d\x5b\x97\x27\x7d\x80\xa0\xa5\xcd\x4a\x29\x05\xde\x6f\xc2\x9d\x75\x26\xe1\x7a\x9e\xeb\x74\xaa\x17\x65\x79\xfa\xd2\x91\x14\xbe\x38\x25\xf8\x46\xd8\xa5\x0f\x05\xfe\x43\xe6\xf8\x6c\x64\x70\x2b\x25\xec\x82\x1c\xcb\xcd\x2c\x49\x8d\xa3\x29\x48\xdd\x10\x0d\x87\xc8\x09\xfd\x79\xa0\xbd\x9d\xba\x89\xbf\x52\x50\x37\x47\x19\x01\x0a\x66\x46\x2e\xd7\x0a\x3b\xfa\x3d\x8b\xa2\x21\x49\x84\xdd\x41\xa6\x3a\x45\x62\x91\x1f\xb2\x14\xdd\x76\x95\x36\xf2\xda\x0c\xb4\x44\xdf\xc5\x8e\x41\x5b\xcc\x8c\x47\x9a\x74\x3d\xff\x9f\x68\x8c\xaf\x00\x31\x2a\x0e\xb1\xd7\x3d\x1d\x47\xbe\x3b\x17\x45\x19\xc3\xcf\x6e\xac\x2f\xd7\x68\x50\x69\xac\x53\x74\xcf\x40\xa5\xb5\x6c\xff\x01\xdf\xb8\xb7\x6c\x9b\x76\xb8\xcb\xee\x10\xae\x94\xbf\x90\x37\x3b\xd2\x30\x74\x16\x67\x92\x73\x59\xd5\xc7\xd8\x93\x5a\x2e\x06\x77\xc5\xea\x7b\x98\x0c\x75\x6d\x07\x03\x5c\xda\xf2\x2f\x52\xa0\x6d\xee\x65\x88\x9b\xbf\xf3\x88\x3a\xac\xa1\x97\x91\x2d\x1d\xb8\x93\x19\x4e\x0e\xc7\xc7\x48\x59\xab\xbb\x18\xad\xe2\x97\xe9\x61\xc0\x46\x0f\xcf\xc1\x48\x34\xa8\xee\x5f\x24\xd9\x33\x50\xa8\xc0\xbd\xec\x21\x5a\x75\xef\xd2\x9e\xcd\x95\x18\xdb\x35\x73\x99\x25\x76\x88\x9d\x99\x28\x2f\xd3\x0d\x6c\x7c\x10\xd8\x09\xb8\xeb\xe6\xbe\x53\x75\xf9\x3e\xb9\x1a\xfa\x4b\x41\x99\x66\x95\xb7\xf2\x82\xb1\x28\xcb\x6a\x92\xbc\x54\x5a\x8a\xe2\x95\xfb\x26\x69\x2f\x71\x5e\xb4\x28\x0e\xf0\x7a\x8b\xbb\x73\x25\xd2\xa4\xbf\x8f\x6a\x1e\x62\xe4\x32\x68\x30\xd0\x38\xda\x45\x91\xde\xaf\xaf\x1f\x99\xf0\x7a\x91\x89\xd9\x28\x32\x31\x5b\x89\x4c\xcc\xf6\x22\x13\x73\x57\x64\x92\xbc\x35\x8e\x1a\x46\x26\xe6\xff\x40\x64\x62\x1e\x50\x64\x62\xd6\x8b\x4c\xcc\x2f\x39\x32\x31\x0f\x31\x32\x31\xeb\x45\x26\xe6\xf3\x8d\x4c\xf6\x10\xed\x6b\x64\xb2\x65\xdf\xb0\x95\x50\x40\xf3\x1a\xa9\xbd\x9d\x8a\xa1\x49\x36\x55\xa3\x35\x79\x80\xd7\xb9\xdc\x5a\xaf\x2f\xce\xcb\x16\xc5\x79\xf9\x94\x91\x52\x7e\x7b\x79\x8f\x50\x29\x97\x73\xb3\x17\x45\x3b\xc1\x15\x7e\x6f\x5e\x27\xba\x52\xfb\x41\xb5\xc3\xab\x2c\x79\xed\xf8\x0a\xd9\xb4\x15\x60\x29\x91\xb6\x45\x58\x50\xc3\x0f\x1f\x1a\x46\x57\xe9\x8d\xb4\x83\x0d\xaf\x40\x89\xc3\x89\xaf\x94\xb0\xd5\x03\xac\x58\xc9\x2f\x33\xc2\x42\x3b\x3d\xbc\x10\x4b\x01\x42\xf5\x18\x4b\xd1\x3d\x03\x95\x0a\x82\xac\x7d\x64\x7b\xd4\xdd\x85\x24\x79\xa0\xbe\x9b\x09\xa2\x5a\x5e\x66\x14\x35\x71\x32\x19\xea\xda\x3e\x06\xb8\xb4\xe5\x62\xa4\x40\xdb\x3c\xcc\x28\xf4\x61\xfd\x1e\x35\x5e\xc2\xcb\x86\x0e\xdc\xc7\x8c\xa2\xc3\x71\x31\x52\xd6\xea\x1e\x46\xab\xf8\x65\x3a\x18\xb0\xd1\xc3\xf3\x2f\x12\x0c\xaa\xbb\x17\x49\xf6\x0c\x14\x2a\xf0\x2e\x7b\x88\xf6\xa8\xce\x25\x88\x9a\xfa\x96\x85\x53\xcb\xb7\x7c\x74\x9a\xf8\x96\x0c\x75\x6d\xdf\x02\x5c\xda\xf2\x2d\x52\xa0\x6d\xbe\xe5\x23\x75\x42\x8a\x27\x17\x36\xf2\x2c\xb2\x99\x03\xf7\x2c\x1f\x9d\xc3\xf1\x2c\x52\xd6\xea\x9e\x45\xab\xf8\x65\x7a\x16\xb0\xd1\xc3\xf3\x2c\x12\x0a\xaa\x7b\x16\x49\xf6\x0c\x14\x2a\xf0\x2c\x7b\x88\xf6\xa8\x9e\x65\xe1\x34\xf1\x2c\x51\xc5\xcc\xf6\x00\x42\xf7\x94\x03\xba\x96\x6d\x17\xa7\xb6\x07\xf1\xb7\x3b\x01\xc7\xc4\x76\xa4\xec\x8e\xcc\xe1\x96\x83\xc5\x74\x66\xb8\x04\xe4\xa4\xf6\x3e\xb9\xe4\x09\xc5\x6d\x8e\xe2\x28\x99\x2e\xf2\xa9\x3e\x2b\xac\x02\xc3\x51\xc8\xfd\x90\x8b\x87\x8a\x64\x97\xdc\xda\x33\xed\x3e\x21\xb9\xe6\x7f\x54\x25\xb9\x62\x11\xb7\x65\x0e\x7e\x19\x19\x66\xe8\xc7\xa7\x28\x24\xdd\x70\xc3\xcb\x8e\xdb\x50\xb2\x67\xbf\xa3\x6a\x94\x90\x1f\x87\x3d\x75\xf3\xf1\x53\x2b\xbc\xa7\x3c\xfd\x66\x14\xc9\xd3\x6f\xc0\xfe\x1a\x1f\x13\x83\xac\x7e\x20\xc6\x6d\x4b\xac\xfe\x01\xac\xae\xcf\xaf\x6a\x1e\xa6\x83\x1c\x5e\x80\x5e\x57\xad\xc8\xf2\x92\x18\x97\x66\x2b\x9c\x5e\x11\xe3\xa3\x79\x75\xd3\x0a\xaf\xd7\xc4\xb8\x3a\xbf\x6e\x85\xd5\xdf\x88\x71\x63\x5e\x9c\xc7\xbc\xf4\x64\xaa\xc9\xec\xef\xc4\x38\xfb\x70\x71\x71\x7a\x39\x8c\xb7\x67\x1a\x7c\x79\xa1\x71\xbb\xf9\x87\x17\xa9\x2f\x7b\x80\x55\xfe\x2c\x40\x79\x98\x65\xd1\xc9\x7f\x6a\xe7\xe6\x44\x5e\xc4\xc7\xae\x55\x68\x75\xe1\xc8\x8d\x20\x43\xf9\x8c\x3b\xf6\x80\x27\xb4\xaa\xa2\x18\xc5\x32\x41\xda\xeb\x04\xc1\xf4\xc9\xe5\x2a\xc8\x97\x7b\x6f\xa5\x50\xb5\x87\x14\x89\xf3\xd3\xde\x6d\x46\xad\xe9\x1a\xa4\x74\x2b\x17\x50\x88\x74\xc5\x5e\x6e\xa1\x2a\x69\x57\x37\x9f\x4b\x5f\x87\x7c\xba\xb7\xb7\x29\x67\x97\x40\x6c\xea\x51\x11\x02\xcb\xc7\xe5\xe7\x21\xc9\xc7\xa3\xd0\x5f\x00\xee\x87\x5b\xaa\x80\x5f\x16\xdb\x58\x68\xd5\x26\xdc\xc5\xd5\xa5\x98\xee\xc2\xfb\x3d\xfa\x32\x82\x00\xc2\x9a\xee\x13\x4a\xf0\x09\x61\xbf\x93\xcd\x91\xb4\x89\x08\xe7\xac\x64\x7a\xe5\x2c\x87\x64\x38\x6e\xab\x9f\x4c\x94\xba\x3e\x2c\x0e\xb0\xea\xfa\xb0\xd4\x5a\xb2\xb5\x4f\x67\x87\xb9\x8f\xbe\xd6\x8f\xd0\x76\x4a\x1f\xc6\x96\x53\x5a\x41\xda\x4d\xe9\xd3\x21\x0f\x99\x25\xe4\xe6\x60\x4b\x5f\x90\x25\x66\xd3\x00\xc9\x12\xc8\x5d\xa5\x4f\xfe\x7d\x0f\x25\x3b\x4f\xff\xd5\x18\x86\x75\xab\x1d\x3a\x9c\x03\x7b\x34\x82\x69\x1a\x38\xf5\xf9\x50\xc0\xfb\xd4\xe5\x8e\x77\xa6\xca\x15\xb8\x15\xca\x98\x39\x86\x18\xcb\x35\x49\xbc\x1c\xc8\x4a\x99\xc3\x69\x3c\xb9\x98\x86\x4c\xa4\x69\x64\x27\xa6\x0f\x5f\xa5\xba\x5f\xa7\x89\x82\xff\x0d\x00\x00\xff\xff\xec\xc7\xa9\xdf\xfc\x67\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 26620, mode: os.FileMode(384), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

