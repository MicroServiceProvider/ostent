// Code generated by go-bindata.
// sources:
// index.html
// DO NOT EDIT!

// +build bin

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5c\x6d\x73\xdb\x36\xf2\x7f\xef\x4f\x81\x3f\xff\xed\x4d\xdb\x29\xa5\x3a\x71\xee\x7a\xa9\xe5\x1b\xc7\x72\x12\x4d\x63\x47\xe3\x87\xcc\xf5\x55\x07\x22\x41\x09\x31\x45\xb2\x00\x28\xc7\xa7\xd1\x77\xbf\xc5\x13\x1f\xf5\x4c\xda\xf5\x4d\xfa\x22\x31\x09\x2c\x16\x8b\x05\xf6\xb7\x0b\x60\xc5\xe3\xff\xeb\x7f\x3c\xbb\xf9\x6d\x78\x8e\x26\x62\x1a\x1e\x9c\x1c\xab\x3f\x08\xc1\x03\xc1\x3e\x3c\xc8\xc7\x29\x11\x18\x79\x13\xcc\x38\x11\x3d\x27\x15\x81\xfb\xb3\x53\xac\x9a\x08\x91\xb8\xe4\x8f\x94\xce\x7a\xce\xbf\xdd\xdb\x53\xf7\x2c\x9e\x26\x58\xd0\x51\x48\x1c\xe4\xc5\x91\x20\x11\xb4\x1b\x9c\xf7\x88\x3f\x26\xa5\x96\x11\x9e\x92\x9e\x33\xa3\xe4\x3e\x89\x99\x28\x10\xdf\x53\x5f\x4c\x7a\x3e\x99\x51\x8f\xb8\xea\xe5\x47\x44\x23\x2a\x28\x0e\x5d\xee\xe1\x90\xf4\x0e\x2d\x23\x41\x45\x48\xd4\x33\xbc\xcd\xe7\x9d\x3e\x16\xb8\xf3\x3e\xe6\x42\x32\x5f\x2c\x10\x3c\x01\xcb\xe3\x6e\x4e\x77\x72\x1c\xd2\xe8\x0e\x31\x12\xf6\x1c\x0a\x5d\x3a\x48\x3c\x24\x20\x07\x9d\xe2\x31\xe9\x26\xd1\xd8\x41\x13\x46\x82\x9e\xd3\x0d\xf0\x4c\x12\x74\x64\x59\xad\x29\x17\x0f\x21\xe1\x13\x42\x84\x65\x20\xc8\x17\xd1\xf5\x38\xcf\xda\xc3\x73\x97\x46\x3e\xf9\xd2\x91\xa5\x86\x03\xf7\x18\x4d\x44\xb1\xc9\x67\x3c\xc3\xba\xd4\xa9\xea\x19\x71\xe6\x01\xa3\xcf\xbc\xcb\xa4\x86\x19\x81\xa7\x17\x9d\xc3\xce\xe1\xcf\xb6\xa0\x33\xa5\x51\xe7\x33\xf4\xe9\xc3\xc0\xdd\x29\xa6\x91\xa6\x9f\xcf\x69\x80\x3a\x37\xa7\xef\xde\x9d\xf7\x47\x34\x5a\x2c\x80\xce\x08\xa3\x5b\xcc\xe7\x24\xe4\xa0\x21\xe8\xa1\x3b\xa5\xe1\x9d\xa9\x54\x15\x91\xbf\x58\x38\x56\xa9\xc7\x5d\x2d\x9c\x91\xbf\x6b\x96\xc6\xc9\xf1\x28\xf6\x1f\x4c\x61\x84\x67\xc8\x0b\x31\xe7\x3d\x07\x1e\x47\x98\x21\xfd\xc7\xf5\x49\x80\xd3\x50\xd8\x57\x2e\x60\x61\x78\xae\x88\x13\x07\xb1\x18\xe6\x51\x92\xd3\x31\x14\xc2\x3c\x64\x1d\xfa\x34\xe3\x26\x97\x04\x8c\x89\x30\x37\x08\x53\xea\x5b\x9a\x0a\x95\xe1\x2e\x25\x23\x0c\x96\x51\xe8\x4e\x7d\xf7\x10\x25\xd8\xf7\x69\x34\x76\x43\x12\xc0\xe4\xdb\x29\xb0\xed\x47\xa9\x10\x71\x54\x61\x21\xe2\xf1\x38\x24\x92\x45\x88\x13\x4e\x7c\x3b\xb7\x9a\xd8\x68\x59\x13\x49\xe1\x34\x95\x2d\xc6\x6c\x2c\xa7\xee\xff\x0d\xaf\xac\xba\xd0\xad\x5a\x01\x09\xce\xba\xe5\xcc\x8d\xa3\xf0\xa1\x4c\x02\x44\x37\x5a\x8e\x5c\x3b\x30\x0b\xd0\x6c\x0d\x27\xb9\x52\x5d\xe8\xb6\xc6\xea\xd9\xb4\xec\x6a\x25\x96\x26\x01\x23\xea\xf7\x9c\x09\x68\xb6\x3c\x0f\x23\x86\x23\x1f\xca\x28\x2c\x14\x65\x69\x3d\x67\x8a\xbf\x68\x2c\x78\x8d\x0e\x5f\x78\x93\xcc\xca\x60\x8a\xa4\x6d\x03\x17\x63\xf5\xa8\x0e\x03\x95\x29\xa8\x13\x1c\x77\x71\x49\xae\x2e\xac\xae\xca\x5a\x93\x82\x56\x67\x36\x5f\xa6\xba\x00\xad\x99\xfa\x93\xe3\x34\x2c\x8c\xd2\x92\xc2\x9f\xea\x02\x09\xa9\xa5\xc3\x9e\xa0\x33\x52\x57\x2f\x36\x83\x97\xd8\xcb\x5f\x77\xbb\xf7\xf7\xf7\x1d\x18\x0b\x83\x7f\x1d\x2f\x9e\x76\x35\xea\x01\x46\x84\x04\x73\xc2\xbb\x21\x16\x84\x8b\x7f\x79\xd3\xa4\x67\xc7\xfe\xe9\xfc\xea\x7a\xf0\xf1\xb2\xaa\x1b\xc5\xdf\x82\x26\xae\xcf\x6b\x48\x57\x0a\x6b\x4d\x08\x30\x0d\x15\x9e\x01\x94\xd8\x98\x46\xd2\x00\x51\x40\x19\x17\xaa\xb4\x3e\x26\x2f\xf6\x49\x85\x95\x2c\x02\xc4\xad\x29\x40\x89\x98\x4d\x73\x7f\x70\x7d\x73\x35\x78\x23\x27\x51\x36\x68\x59\xe6\xa6\x82\xd2\xe4\x6f\xd1\x88\x27\xbf\x68\xc3\x91\x8b\x08\xd6\x74\x8d\xac\xb0\x28\x07\x43\x39\x92\x9a\xfd\x98\xb1\x3c\xc3\x11\xa6\xb5\x11\xa6\xeb\x47\x78\x9b\x08\xaa\x8d\xee\x7f\x68\x94\x21\xae\x8e\x32\xc4\x6b\x47\xf9\xe1\xb4\x85\x11\x76\xd3\x70\x1d\x2e\x15\x5e\xe1\x05\x06\x61\xfc\xf1\x66\x0f\x5a\xa2\x61\xf1\x7d\xd5\xb3\xca\x01\x4e\xc9\x14\x9c\x9a\x8e\xe3\x32\x9c\x93\xae\xf5\xc8\xfa\xd8\x38\x08\x20\x5a\x71\x0f\x4b\x38\x37\x9f\x0b\x32\x4d\x24\xe4\x20\x07\xfc\x3f\xf4\xcd\x5f\xbf\xd6\x0f\xbf\x83\x36\x48\x08\x7c\x1d\xd4\x91\xda\x59\x8e\xb2\x7e\xb0\xbc\xdb\x57\xcd\xba\xf5\x83\xa5\xbd\x96\x74\xb8\x59\x29\x5e\x92\x3e\x8a\x52\x80\xef\x5a\xa5\xd0\xc7\x51\x0a\x6d\x45\x29\x09\x5f\x2e\xdc\xe1\x4f\xcd\xa4\x4b\x78\x1b\xd2\xcd\xc6\x8f\x23\xdd\x6c\xbc\x59\xba\xec\x65\x43\xe4\x6f\x1b\xcc\x20\x76\x96\xf0\x81\x7a\xd6\xbf\x2d\x16\xbf\x54\x43\x70\x13\x79\xcb\x60\x5c\xed\xdb\xe6\xf3\xee\x0f\x07\x3f\x74\x17\x8b\xf9\x5c\xcb\x57\x17\x18\x96\x17\x68\x87\x3b\x92\xe6\x9e\x8a\x09\x92\x6f\x30\x66\x39\x00\xe8\x48\xfe\xa7\xf7\x03\xf3\x39\x84\x5e\x63\x82\xbe\xa1\x3f\xa2\x6f\xbc\x98\x11\xf4\xba\x87\x34\xa2\x9d\x0d\x6f\x3b\x1f\x28\x17\x30\x64\xc1\x40\x3c\x55\xdd\xb9\xec\x9c\x0a\xc1\x7e\x25\x0f\x48\xd9\x06\xf0\x1d\x3d\xb8\x97\xd0\x91\x92\x50\xf8\x56\xe9\x0a\x8f\x19\x1d\x4f\x00\xa1\xe3\x7b\x86\x8d\x8f\x38\xc9\xf8\x48\x4d\x0a\x7f\x65\xab\x6c\x03\x25\xf1\x77\x3e\x57\xf5\x8b\x05\x38\x1b\x4e\x12\xc2\x3c\x08\x58\x74\x60\xa1\x83\xf1\xbc\xb4\x67\x3b\xb8\xe5\x84\x29\xa9\x4a\xdd\xea\xd2\x02\x50\x9f\x3c\xae\x14\xd7\x0f\xbc\x2e\x84\x2a\x6c\x5b\x06\x97\x46\x33\xc2\xb2\xed\xc9\x12\x59\x06\x7e\x48\xea\xc2\xe8\xd2\xa5\xd2\x74\x05\x93\xab\x4d\x6d\x10\xab\x7f\xb6\x59\x82\xda\x0c\xe5\xfa\x91\x0f\xd9\xc8\xd4\x8b\xfa\xdf\x9d\xc4\x20\xb3\xa3\x87\x5e\x38\x84\x80\x7e\xad\x45\x89\x49\xd1\xd6\xb2\x37\x59\xb1\x61\xa9\x29\x32\x39\xdf\xa5\x4d\x4c\x1a\xd1\x52\x34\x7a\xf2\x6d\xc5\x6b\xef\xd3\x0b\x4c\xe8\xe3\x77\x22\x27\xaa\x49\x2f\x5d\xa3\x55\x55\x6a\x77\xf5\x22\xdf\xd6\xaf\x03\x40\x8b\x27\x1a\x00\x45\x8e\x48\x6a\x1a\x0b\x8b\x64\xe3\xb2\xf0\x83\xd1\x03\xec\x4e\x7e\xdf\x11\x9e\x7c\xca\xef\x72\x68\xea\xbf\x55\x4c\xca\xf0\x24\x49\x3a\x7d\xca\x2e\x61\x8b\x97\x83\x94\xe9\xcf\x00\x95\x4f\x99\xdc\x01\xe6\x70\x95\x81\x92\x6e\x4d\x66\x97\x66\x83\x98\x19\x64\x85\x42\xf3\xdf\x0e\xbc\x6c\xa3\xd3\x19\xa6\xe1\xb6\x4d\x56\x4f\x42\x6e\xd2\x8e\x56\x88\x44\xb3\xa1\x2e\x59\x2c\x74\xbc\x6a\xbb\x84\x1a\x7f\x37\x21\x6f\x62\x81\x8b\x42\x36\x32\x7e\x3b\xcb\x16\x01\xa0\x93\x24\x9f\xbe\x21\x66\x78\xca\x1b\xe1\xc2\x52\x3d\xe9\x13\x21\x12\xa5\x53\x79\x70\x07\x4a\x4a\x3a\x9f\x30\xa3\x92\x08\x1e\xfb\xc1\x1d\x3a\x44\x4e\x5f\x9d\x33\x3a\xc8\x51\x62\xed\xc5\xe5\x05\x72\x2e\xe2\x34\x12\xf2\xc0\xa8\x01\x9b\x97\xc8\x51\x2b\x03\x98\x14\x66\x65\x6f\x76\x47\xc8\xb9\x55\x67\x58\xad\x70\x7b\x85\x1c\xb5\x22\xaa\xec\x1a\xc1\x48\xc9\xf8\xdb\xc0\x12\x1a\xc1\xc6\xaa\x31\x98\x68\x2e\xdb\xa1\x89\xa6\xfd\x53\xe1\x64\x10\x30\xb2\x75\x93\x5d\xe0\x64\x90\xae\xc4\x13\x59\xb5\x23\xa0\x0c\x94\xa6\xda\x43\x14\x33\xd7\xed\x04\x15\xb6\x9d\x36\x84\x82\x97\xd5\xf0\xb0\xc2\x3d\xd7\xa8\x0d\x0c\xac\x25\x47\x55\x0d\x29\x32\x65\xf9\x7b\xb4\x93\x26\xbe\x47\x33\x65\xcb\xad\x85\x03\x65\xc3\x6b\x6e\xc8\x74\xbf\xa0\x80\x06\xb9\x15\x0f\x96\x85\x04\x34\xe8\x94\xed\x97\x96\xa2\x81\x15\xb6\x6b\x5a\x6d\xbd\xda\x81\xbe\x4f\x42\x81\x07\xd1\xce\x4d\x3e\xa6\x62\x97\x36\xbb\xf5\x50\x66\xde\xc8\xfa\x68\xc5\x9f\xb7\x15\xd1\x0f\xc0\x7a\x58\x80\x57\x1a\x5c\x3d\x1e\xb6\xc7\xff\x6f\x06\x37\xd7\x08\xf0\x0b\x71\xe2\xc5\x51\xf1\xaa\x68\x10\xad\x8f\x92\x8f\x2b\xa7\x6e\xa3\xe3\x6e\xb1\xe4\x24\xe1\x7b\x07\xeb\x9b\x85\x83\x39\xf9\xd3\xa5\x13\x12\x0b\xd0\x9b\xdf\x6e\xce\xaf\xd1\x34\xf6\xd3\x30\x46\x47\xef\x1a\x28\xf0\x4d\x45\xc4\x6f\x8f\xde\x3d\xba\x8c\x3b\xeb\x71\x57\x21\x9b\xc0\x23\x6d\x37\xcc\xa1\x01\x61\x2c\x66\x0d\xe1\x51\xf3\xd8\x88\x8f\x9a\xec\x2f\x80\xdc\x19\x20\xcd\x1c\x3d\x1f\x84\x5c\x01\x8e\xc5\x7b\x8d\x55\xc6\xd3\x02\xc8\xac\x42\xbf\x27\xea\x7e\x39\xae\x6d\xd3\x79\x1b\xe8\xb5\x02\xb1\xda\xe8\xbe\x19\x2e\x15\x81\xa4\x0d\x60\x4a\xb0\x77\x47\x44\x43\x64\x32\x4c\x36\x42\x93\xa1\xfb\x0b\x9b\x76\xc6\x26\x3b\x4d\x7f\x81\xd3\xb3\x00\x27\x1d\xdc\xfc\xb9\x10\xb5\x5a\x86\x67\x01\x54\x25\x60\x69\x8e\x54\x53\x32\xdd\xe3\x3e\x0c\x5a\xe5\x38\x75\x71\x7e\x51\x46\x28\xa8\xed\xfc\x4a\x23\x3f\x87\x28\x79\x83\xae\xc1\xe9\x0e\xca\x97\x80\x93\x6d\xb2\x35\x10\xc8\x06\x6f\xdb\x3f\xed\x91\x6c\x97\x9e\x1d\x9b\x8a\xdd\x04\x6c\xf5\xe4\x18\x18\x3e\xf9\xb5\x51\x61\xf1\x4b\x65\xef\x42\xbf\xe6\x38\xe6\x09\xce\x61\xec\xb2\x6e\x6e\x20\x59\x52\xc2\xca\xb3\x7a\x7d\xb3\x7d\x72\x9c\xdf\x70\x63\x3d\x04\x49\xaf\x6c\xe0\x3d\x23\x81\xc9\x64\x84\x92\xb3\x38\x0a\xe8\x18\x58\x2e\x16\xc5\x5b\xcb\x91\x88\xdc\x51\x18\x7b\x77\xd9\x1d\x38\x42\xf6\x6a\xd3\xf0\x39\x93\xb4\x97\x25\x1e\xc8\x99\x1c\xa1\xd1\xd8\xa5\x51\x10\x3b\xf2\xc5\xc9\x2e\x32\x81\xc3\xd9\xf0\xb6\x04\x45\x27\x36\x97\x2d\xbb\x90\x2f\x8a\x2d\xf3\x04\xd6\xf7\xe5\xa9\x47\x93\x4d\xa4\xb2\x57\x6b\x45\x59\xce\xa8\x3b\xa1\xbe\x4f\x22\x90\xc7\xe6\x8b\x68\xd2\x3c\xf3\x26\x88\xd9\x34\xef\xf0\xd4\x93\xf9\x9d\x6f\xa1\xac\xac\x17\x49\x05\xc3\x2b\xa7\x23\xc1\x2e\x36\x4a\x52\x91\x1d\xf0\xa9\xae\x5c\x9e\x8e\xa6\x34\xcb\x43\x36\x6f\x85\x36\x85\x14\x09\xa9\x6d\x11\xc7\x61\x25\x6b\xb3\x46\x33\x66\x71\x9a\xa0\xec\xc9\xe5\x53\x9b\xb1\xab\xde\xab\x29\x8b\x78\x99\x02\xdf\x53\x9f\x28\xf5\x01\x1b\xc5\xca\x66\x03\x9b\xb4\xc6\x5a\x85\x99\xc3\x15\xeb\xc7\xb0\x2b\xcc\xb3\xe9\xfd\xbd\xd2\x42\x35\x5d\x71\x99\x50\x79\x1e\xc3\xf9\x17\x58\x1d\xbe\x34\x0a\x78\xab\x0b\x52\x97\xd9\xa7\x5c\x52\xfb\xeb\x65\xd4\x6c\x97\x4a\x69\xf3\xc2\xf2\xde\x25\x1e\xc0\x5b\x35\xfb\xb4\xb0\x4a\x5b\x9a\x9e\x75\x88\x01\xe2\x33\xc2\x27\x0e\xfa\xee\x6c\x82\x69\xa4\x55\x84\x9c\x2b\x5d\x2c\x01\xe0\xfb\x6a\x8a\x4b\x4d\x40\x78\x95\xab\xf5\xa0\x56\xb9\x8b\xb9\x65\xab\xa5\x6a\x48\xea\x46\xed\x60\x8b\xa1\x64\x09\x06\xe5\xac\x9c\x82\x10\xea\x61\x57\x10\xf4\x83\x9d\x31\x70\x2d\x02\xfa\xc1\x26\x00\xdc\x00\x7f\x7e\xb0\x1e\xfd\xfa\xf2\x36\x2b\xe5\x78\x4c\xda\x02\x41\xd9\x63\x03\x0c\xf4\x83\xaf\x19\x02\xa5\xf2\xda\x43\x40\xb9\x7a\x9a\x02\x60\x0e\x7e\xfd\xb7\x6d\x63\xdf\x32\xf9\x2c\xf4\xe5\xb0\xd7\x7f\xfb\x9c\x51\x0f\x2c\x7e\x77\xd0\xab\x65\xf7\xcb\xa4\x43\x8e\x6a\x66\x53\x60\x10\xd2\xca\x04\xdd\xa8\xcb\x76\xad\x75\xae\x2f\xde\x85\x4c\x51\xc8\x96\x8b\x53\x52\xee\xf2\x21\xae\xbe\xc4\x57\xbc\xf4\x2d\xac\xe6\x55\xca\x38\xde\x56\x9e\x17\x2d\xca\x03\xbc\xde\xc8\x93\xf1\xa5\xe2\xe4\xc9\xcf\x0d\x5c\x8a\x86\xae\x35\x1e\x65\x49\xe3\x55\xd3\xe0\xd4\x59\x15\x71\x77\xab\x0b\xd2\x65\x1e\x6a\x07\x29\x5e\x34\x94\xa2\x78\x6b\x57\x17\xa2\x35\x9f\x49\x77\xf7\x99\x1b\xbc\x26\xdd\xe8\x35\x37\x6e\x1b\xe8\x06\xbf\x99\x1d\x5e\xf1\xb6\xfc\x26\x6d\xe6\x37\xe9\x57\xed\x37\x69\xab\x7e\x93\xb6\xea\x37\x07\xad\xfb\xcd\x65\xf2\xd5\xfd\xe6\xe0\x59\xfb\x4d\xfa\x6c\xfc\xe6\xa0\x45\xbf\x69\x78\x0d\xf5\x01\xe4\x9e\x8e\x73\xd0\xa2\xe3\x34\xbc\xce\xd5\xd5\x4d\x03\x79\x5e\xb6\x28\xcf\xcb\x47\x77\xe4\xb4\x0d\x47\x3e\x68\xec\xc8\xab\x77\x27\x7b\x79\xf2\x41\x63\x4f\x5e\xb9\x5e\xde\x5b\x8a\x97\x0d\xa5\x78\xa2\x78\x42\xfe\x64\xac\xe5\x80\x02\x58\x36\x8e\x28\xe4\x7d\xc0\xda\x90\xe2\x82\x4c\x63\xf6\xd0\x56\x38\xa1\xba\x6b\x10\x4f\x40\xfb\xaf\x39\xa0\x50\xea\x6b\x2f\xa2\xd0\x0b\x68\xff\x98\xc2\xb0\xe1\xf7\x38\x69\x53\x2c\xc9\x6f\x69\xa8\x43\x90\xac\x7a\xbe\xd1\x83\xb4\xf1\x27\x3c\x6b\x34\xc6\xb4\xe7\x59\x63\x76\x2b\xd5\xee\x59\x63\xc2\xdb\x3d\x6b\x4c\x78\xc3\xb3\xc6\x84\xaf\x07\xb8\x21\x8b\x61\xbf\xc4\xdb\xdb\x32\xc9\x0e\x1b\x40\x5c\xc2\xbf\x66\x84\x93\xca\x6b\x0f\x49\x12\xde\x7c\xcb\x34\xbc\x56\x66\x02\x7f\xa3\x58\xf4\x89\xc7\x08\x56\x7b\xa2\xa6\xdb\xa7\x0f\xf2\x73\x12\xf0\x3e\xe4\x51\x5d\x48\x77\x4f\xf9\xf2\xfd\xdd\x1e\xe2\x95\xe5\xbb\x90\xbf\x9c\x5d\x25\x9f\xdd\xd7\xe5\x9d\x27\x61\xca\x6f\x60\x7f\xf7\x9c\x77\x77\x80\x4d\x4f\x08\xcf\x1a\x07\xf6\x44\xe7\x84\x3f\x06\x38\xcf\xc6\x6d\xc7\xa0\xb3\x71\xe3\x10\x74\x36\x5e\x0f\xd0\x9f\xf0\x98\x61\xf9\x31\x97\x76\xe0\x59\x76\xd7\x00\x9e\x67\xe3\xaf\x19\x9e\xa5\xf2\xda\x83\x67\xb9\x78\xb6\x85\xe7\xe7\x82\x21\x60\x42\x4f\x88\x21\x7a\xb1\xee\x89\x21\xb3\x71\xdb\x18\xc2\x77\xcc\x38\x4b\x20\xb6\x2a\x40\x8d\x71\x16\xa5\x94\x33\x49\xd2\x19\x0e\xfa\x79\xca\x59\x62\xd3\x61\x13\xea\xaf\xfb\x08\x83\xc9\xd8\x2a\x32\xd9\x2e\xc7\x2b\x6b\x71\x5b\x69\x71\x60\x54\x6a\x6a\xcd\x77\x15\x76\x60\x38\x64\x34\x66\x54\x3c\xec\xd8\xec\x92\x7a\x5b\xa6\xc3\x65\x4d\xae\xe9\x7f\x76\x6d\x72\x45\x38\xac\xa8\x68\x4d\x82\xaf\xcc\x9c\xb3\xbf\x05\xcc\xd4\x70\x43\x57\xfd\xdc\x53\xcb\x5e\xce\x4c\x6e\x94\x28\x67\x9d\xde\xf3\xf8\x71\xf5\x90\xab\x1f\x57\xc3\xb2\x6a\xe1\xf7\xc7\x92\xd9\xcf\xc8\xb9\x6d\x8d\xd9\x3f\x81\xd9\xf5\xf9\xd5\xde\xbf\xd6\x96\x3c\x5e\xc0\xe8\xae\x5a\x92\xe7\x25\x72\x2e\x07\x2d\xf1\x3a\x42\xce\xa7\xc1\xd5\x4d\x4b\xdc\x5e\x01\x76\x9f\x5f\xb7\xc4\xec\xef\xc8\xb9\x19\x5c\x9c\x5b\x6e\xc6\x62\xf6\x66\xf7\x0f\xe4\x9c\x7d\xbc\xb8\x38\xbd\xec\xdb\x63\xe7\x06\xa9\x93\x06\x9e\x9b\x67\x4e\x5a\x0f\xa8\xec\x50\x7e\x7a\x45\x9a\xe2\x77\xea\xf3\x9a\xa8\x83\x7e\xfa\x5e\x95\x47\xa5\xc2\xc3\xef\x73\xa3\x55\x4d\x4a\x81\x65\xc5\xbd\xe9\x2a\x75\xfa\x5f\x22\xee\xe8\x0b\x01\x04\xbc\x1d\x15\x18\x19\xaf\x5e\x78\x06\xbf\x8e\x8c\x78\xa6\x72\x82\xb9\x7b\x8f\x59\x44\xe5\x77\x4f\xb7\x6e\x66\x1d\x4b\xe9\x63\x90\x05\x7a\xec\xfb\xf6\x83\x9e\x27\xc6\xf3\x67\x01\xa8\x0c\x69\x75\xdc\x56\x8d\xef\xe4\xa7\xca\x20\xe8\xc8\xba\xd2\x54\xea\x9b\x8f\x6e\x10\xa7\x4c\x7e\x36\x2c\xff\x7a\x92\x83\x60\x22\x3d\x32\x89\x43\x58\x25\x3d\xa3\xea\xce\x05\x8d\x4c\x87\x2a\x80\x34\x7a\x93\x30\x6b\x8a\x41\x3d\xc5\x9a\x4f\x38\x4c\x4b\x55\x07\x6a\x99\x7c\xe6\x5f\xce\xc2\x98\x13\xa3\x12\xc7\x86\x00\x3b\x2c\x83\x42\x7e\x35\xb4\xae\x7e\xab\x27\xc4\x23\x12\x2e\xfb\x32\x4f\xc7\x8a\x00\x0f\xf6\xf3\x2d\x3b\xf4\x3a\x1b\xab\x7b\x01\x47\x47\x08\x77\xe4\x41\xc6\xdc\xba\xc8\xfa\x2c\x90\x22\x0e\x25\x5f\x29\xc7\xab\xcc\x5f\x99\xcf\x42\xea\xed\x82\x5a\x4a\x2b\x1d\xd3\x16\x52\x64\xa1\x8e\x89\x65\xa6\xd8\x9b\xe4\x2e\xc9\xf4\x72\x01\x85\xb2\x5d\x25\x8d\x1e\x4a\x3b\xb7\xb7\xc5\xa0\x66\xa6\xe9\x4d\x64\x93\xa6\x74\x69\x2e\xbd\x6d\xb7\xdc\xdf\xaa\xea\xd5\x5f\x5f\x50\xd5\x43\x16\xcf\xc0\xcb\xb3\x35\x24\x10\x85\x89\x75\x2c\xcc\xd0\x02\x1a\xca\x5d\xa3\x98\x6c\xf2\xee\x5b\xe8\x92\x43\xb8\xe8\x4d\xb6\x09\x1c\x69\x80\xc8\x1f\xa8\x3e\x93\x3e\x12\x2c\x25\x2b\x70\xb6\xb2\x72\x50\x89\xe3\x3a\xfa\x0c\x2f\xf7\x8d\x58\x6c\x88\xdd\xe2\xef\x8f\xfa\x95\xdc\xfb\xbc\x4a\x4e\xfd\xca\x4a\x3b\xf1\x2b\x09\xd4\xb4\xaf\xac\xed\x53\x46\x3c\xa1\x6e\x7a\x5a\x4a\xe4\xcf\x66\xbd\x81\x3f\xca\x5c\x27\x70\x30\x5f\x8c\x85\xf5\xf2\x01\x4a\xe4\x66\x52\x7e\x1c\x3b\x3a\x0b\xa9\x77\xd7\x9b\x8b\x09\xe5\x9d\x09\x8e\xfc\x90\xa8\x12\x0b\x41\x92\x36\x3f\x96\xda\xa6\xcf\x8a\xd3\x96\x33\x3b\x29\xe2\x9e\xf9\x24\x05\xf0\x3e\x0d\xe9\x38\x3a\xd3\xe5\x7a\x7e\x97\xca\x98\xb7\x35\xe5\xa6\x49\x06\x5b\xb9\x8c\x07\xf9\x61\x49\xa1\xcd\x19\x66\x44\x14\x1b\x29\x2d\x16\x3f\x6e\x86\x8d\x62\x27\xd9\x08\xff\x1b\x00\x00\xff\xff\x73\xc9\xbb\xec\x19\x5d\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 23833, mode: os.FileMode(384), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

