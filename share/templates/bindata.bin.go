// Code generated by go-bindata.
// sources:
// index.html
// DO NOT EDIT!

// +build bin

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5c\x6d\x73\xdb\x36\x12\xfe\xee\x5f\x81\xf2\xda\x9b\xb4\x13\x52\x89\x63\xf7\x72\xa9\xe5\x1b\x27\x72\x5b\x4d\x63\x47\x93\xd8\xbd\xeb\x75\x3a\x0d\x44\x42\x12\x62\x8a\xe4\x01\xa0\x6c\x55\xc3\xff\x7e\x0b\x10\x7c\x15\x69\x91\x94\xa2\x78\x26\xf9\x20\x4b\x24\xb0\x2f\x58\x2c\x76\x1f\x2c\x48\x9f\x7c\x35\x78\xf3\xea\xea\xb7\xd1\x39\x9a\x89\xb9\x7b\x70\xba\x5a\x7d\xbd\x40\x2f\xfa\xc8\x7a\xc3\x05\xf1\xc4\xaf\x84\x71\xea\x7b\x51\x74\xa2\x9a\x11\x3a\x3d\x99\x11\xec\xc0\x0f\xf9\x73\x4e\x04\x46\xf6\x0c\x33\x4e\x44\xdf\x08\xc5\xc4\x7c\x6e\xe8\x26\x41\x85\x4b\xd4\x6f\xb8\x5a\xad\xac\x01\x16\xd8\x9a\xf9\x5c\x78\x78\x4e\xa2\x08\xf9\x8a\xfd\x49\x2f\xeb\xa7\xd9\xcd\x84\x08\x4c\xf2\xbf\x90\x2e\xfa\xc6\x7f\xcc\xeb\x33\xf3\x95\x3f\x0f\xb0\xa0\x63\x97\x18\xc8\xf6\x3d\x49\xd6\x37\x86\xe7\x7d\xe2\x4c\x89\x91\xa7\x94\x9c\xfb\xc6\x82\x92\xdb\xc0\x67\x22\xd7\xf9\x96\x3a\x62\xd6\x77\xc8\x82\xda\xc4\x54\x17\x8f\x11\xf5\xa8\xa0\xd8\x35\xb9\x8d\x5d\xd2\x7f\x6a\x3d\xd1\xac\x56\xab\x9f\xaf\x2e\x5e\x23\xe3\xe4\x2b\x23\x8a\x4c\xf3\x77\x3a\x41\xc3\xf3\x3f\x4e\x4f\x5c\xea\xdd\x20\x46\xdc\xbe\xc1\x67\xc0\xdd\x0e\x05\xa2\x20\xc0\x40\x33\x46\x26\x7d\xa3\x37\xc1\x0b\x79\x6d\xc1\x9f\x2a\x4e\xbf\x13\xcf\xa1\x93\x3f\x4c\x33\xcf\x29\x66\xc0\xe9\x5f\x84\xf7\x8d\x67\x87\x77\xcf\x0e\x53\x76\x72\x1a\xa2\x28\xe1\xca\x93\x1f\xe6\xb3\x43\x2b\xf0\xa6\x06\x12\xcb\x00\xc6\x4a\xe7\x78\x4a\x7a\xf2\x86\xb6\x43\xc6\x1b\x07\x81\x4b\x4c\xe1\x87\xf6\xcc\x2c\xc8\x79\x7a\xf8\xe4\x0e\x3e\x1b\x25\x41\x1f\xab\x25\xe7\xa3\xa3\x3b\xf8\x6c\xe6\x7c\x74\xd4\x96\xf3\xf1\xe1\x1d\x7c\x36\x73\x3e\x3e\x6c\xcb\xf9\x39\x58\xe3\x79\x03\x6b\x3c\xaf\xb1\x06\x17\x4b\x97\xf0\x19\x21\x22\x99\x14\x41\xee\x44\xcf\xe6\xbc\xcc\x13\x6e\xf5\xa8\xe7\x90\x3b\x4b\x36\x6a\x46\x3d\xbd\x9a\x4e\x4f\xc6\xbe\xb3\xd4\x37\x1d\xba\x40\xb6\x8b\x39\xe8\x27\xfc\xc0\x1c\x63\x66\x24\x2b\xa9\xa2\xcd\x74\xc9\x44\x24\x1d\x64\x97\xd0\x4d\x7a\xcc\x89\x17\x66\x2d\xb1\xe2\xb9\xcb\x12\xbf\x30\x70\xb0\x20\xa0\x37\x7c\x61\xd3\x21\x13\xea\xc1\x70\xe2\xef\x3f\x93\xa5\x6b\x14\xe8\x95\x9b\x0b\x32\x0f\x5c\xa0\x44\xba\x2f\x7f\xf1\xa2\x4c\x84\x2c\x88\x20\x3d\x90\x55\x92\xde\x2b\xe8\x53\xad\x5e\x59\xe0\x49\xc0\x48\xe9\x1e\xdc\xf5\x39\x92\x51\x86\x72\xc1\xe8\x58\x0a\x5b\xef\x75\xfa\x71\x35\x08\x83\xbf\x7b\x63\x1e\xfc\x70\xc2\x03\xec\x35\xb2\x69\x18\x08\xba\x6e\x51\xc5\xec\x3e\xab\x6a\xb2\xd8\xa6\x52\xd8\xba\x2e\x9f\x60\xf8\x2e\x6e\x3b\x7c\xd7\xc7\x0e\x5e\x4c\x5b\x8f\x3f\xa1\xfb\x28\x06\xe8\x85\xee\x41\x25\x41\xe5\xd2\x63\x74\x3a\xeb\xbe\xf6\x70\xda\x17\xb3\x29\xf5\xcc\x27\x68\x1c\x0a\xe1\x7b\x88\x13\x88\x39\x0e\x66\x4b\x34\xf3\x5d\xd7\xbf\x4d\x42\x89\xcc\x8d\xfc\x45\xaf\x77\x7b\x7b\x6b\xc1\xd2\x62\xf0\xb1\x6c\x7f\xde\x8b\x93\x69\x0f\x02\x12\xc1\x9c\xf0\x9e\xb4\x1b\x17\xff\xb2\xe7\x41\x3f\x0e\x3e\x6b\xab\x36\x49\xbf\xb8\xbb\x39\xd2\x8b\x82\x65\x98\x7f\x8b\x5c\x18\x0e\x81\x04\x52\x19\xb5\x6c\xdf\x0d\xe7\x5e\xd2\xe7\x49\xce\x78\xa0\x6a\xa0\xa0\x87\xc2\x0a\x01\x66\x78\xce\x61\x86\x4b\xcc\x03\xec\x38\xd4\x9b\x9a\x72\x0a\x9e\x1c\x7f\x5f\x34\x71\xae\xaf\x16\x00\x96\x33\xc7\x3e\x73\x08\x93\x14\x46\x79\xb8\x45\x87\x88\x19\x50\x47\xce\xde\xdc\xa8\xd6\xf8\x29\xba\xd7\xa9\xc1\x1b\x89\xab\xa8\x55\x2b\x78\x27\xbb\x31\x79\x38\xbe\x21\xcb\xbe\x71\xcd\xc9\xc8\x16\x25\x25\xee\x73\xf5\x8c\x5b\x45\x00\x2d\xa9\xbf\x36\x0d\xfb\xb1\x94\x33\xd9\xc2\x50\x40\xdc\xd2\x18\x52\xdc\x83\xb5\x85\x1d\x84\x5b\x18\x43\x52\xb7\xb4\x86\x12\xf8\x60\xcd\x41\xb7\x71\x0d\xda\xda\x35\xe8\x43\x76\x8d\x80\x6f\x61\x8b\x80\xb7\xb5\x85\x14\xd7\xc4\x16\x75\x09\x2e\x56\xee\xb0\x3e\xb5\xa1\x05\x61\x82\xc2\xe6\x09\x8d\xa7\xa6\x2b\xd3\xa0\x39\x65\x78\xb9\x31\xe3\xc5\x89\xec\x6f\x32\xa6\x95\x73\xd2\x05\x99\xfb\x6c\xb9\x39\x27\xd5\x73\x2d\x87\x13\x68\x04\x44\x78\x83\x42\x0e\xfb\xa4\x6d\x18\xaf\x2d\x4d\x68\x7d\x35\xba\xde\x86\x65\xd9\xbf\xa1\x71\x08\xfb\x55\x36\xc1\x36\xe1\xdb\x30\x2e\x3b\x0b\x34\x8e\x98\x0f\x4c\x79\x13\xbe\xcd\x12\x3e\xb7\x19\x0d\x44\x7e\xc3\xf3\x01\x2f\x70\x7c\x37\xcd\xfa\x0b\xcc\x90\x4c\xe5\xa8\x8f\x74\x01\x20\x8a\x7e\x00\xc0\xa6\x7a\x35\x61\x54\x2e\x2d\x20\xce\xec\x6c\x3f\xf5\x81\xc3\x2f\xd8\x9e\x5b\x57\x67\x3f\xfd\x74\x3e\x18\x53\x2f\x8a\xe6\xd4\xeb\x8d\x43\xcf\x71\x89\x05\x3f\xad\x0f\x7c\xb5\x22\x2e\x27\x51\x04\x94\x49\x83\xba\xe9\x39\x19\x28\x3a\x2d\xe9\xd4\xd3\x5b\x31\xb9\x3b\xd3\x35\x91\xde\x77\x07\xdf\xf5\xa2\x68\xb5\x8a\xd7\x58\x6e\xd1\x61\xb9\x15\xfc\x73\x8c\x9d\x29\x51\xfb\x30\x58\x73\x7a\x26\x60\xcc\x3f\xc3\x77\x14\xc1\xe8\xd5\xc2\x89\x22\x79\xef\x55\xfc\x13\xf9\xde\x2b\x97\xda\x37\xfd\x95\x98\x51\x6e\xcd\xb0\xd4\x4d\xdd\x89\x10\x3a\x88\x6b\x26\x2f\x25\x57\x45\x6f\x5d\x81\x69\xe4\x72\xc6\x52\x1b\xa5\x7d\x43\xa5\x62\x84\xba\x4b\xad\x62\x55\x50\xa6\x5f\x53\xad\xca\x9b\x42\xa5\x54\xa6\x85\x31\x3b\x36\xe0\xf2\x4a\x16\x84\x46\xa0\x22\xbd\x23\x0e\x32\x92\xde\xc8\x40\x6b\x35\x24\xbd\xbf\x36\x0e\xf2\x9b\x92\x8a\x62\x53\xb2\x19\x38\x6d\xa9\x69\xb2\xd1\x00\x0e\x7a\x97\x91\x32\xd7\x4d\xe9\x06\xa4\x05\xd7\x34\x71\xcb\x4e\x75\x88\xf7\x20\x89\xc7\xab\x95\x9a\x9a\x91\xcf\xa9\xa0\x0b\x82\xbe\x0e\x2c\x08\x3c\x1e\x32\x04\x1e\x73\x24\xff\xe8\x6c\x84\xe2\x52\x80\xac\x3b\xac\xb5\x81\xa8\x38\xb9\xc8\x7b\x15\x45\x06\xd9\x53\x15\xe2\x90\x0c\xed\xb2\x97\xa9\xb3\x62\xb6\x46\xe4\x54\x49\xcf\xb9\x02\x15\x12\x2d\xa2\x28\x17\x2b\x66\xc7\xa5\xed\xcc\xd8\x87\xcd\xcc\xdc\x7c\x52\xc8\x09\x2a\x6a\xce\x8e\xf3\x31\x06\x57\x45\x98\x2c\xdb\x4c\xc0\xd6\x42\x15\x39\xe4\x10\x51\x7e\x5f\x25\xc3\x60\x3e\x29\x99\x32\x82\x18\xd5\xa9\x9e\x7a\x41\x28\x73\x94\x1f\x06\xe8\x3e\x05\x0b\xfb\xd7\x1c\x91\xe9\xe2\x31\x71\x4b\x79\xd8\x21\x2e\x5e\xae\xed\x41\x37\xf0\x40\xf1\xdf\x74\x93\xb7\x96\xdb\x63\xeb\x3a\x15\xbb\xdb\xea\xc4\x5f\x8e\x41\xe8\x35\xb8\xc1\x20\x9b\x27\x58\x46\x35\x1b\x4b\x24\x0d\x66\x7a\xfe\x2d\xc3\x01\xca\x2b\x1a\xf7\x57\x2e\x7a\xbf\xc0\x38\xbe\xa0\x0b\x9f\x91\x1d\x49\x5c\x83\x28\x69\x86\xfa\xe4\xd3\x0d\x70\x91\x7f\xa4\xd9\xf6\xac\xb3\x31\x07\x60\x28\xc8\x76\xd3\x7e\x99\x5b\x9e\xfb\x99\xf6\x1d\x49\xbc\x6f\xda\x13\x50\x92\x46\x88\xd3\x13\x88\x51\x10\xae\x74\x74\xbc\xf4\xbd\xff\x12\xe6\x67\x5a\xcc\x7c\x80\xa7\x08\xb2\x3a\x08\x37\xef\xd6\x1c\x00\x3a\x50\x47\x26\x20\xcd\x55\xa4\x67\x1a\xea\x8a\xe5\xd4\x10\xb3\x22\x3c\xca\x5d\xcb\xc6\x34\x84\xca\xe1\x95\xaa\x41\xd0\x03\x36\xfc\xec\x9b\xb6\x44\xef\x96\xbc\x35\xcd\xbf\x31\x15\xad\x89\x86\x90\xdc\xcb\x44\xbd\x74\xf4\x6a\xb0\xd9\x59\x8f\x48\x0b\xd4\xca\x1f\x25\xf0\x52\x59\x0b\x32\x99\x74\x17\x86\xbd\x29\x64\x27\xb8\xca\x12\x1a\x5c\x58\xaf\x29\x17\xb2\xfd\x03\xbf\x43\xef\x63\x54\x21\x6f\x3d\x92\x1d\xbe\xb5\xe6\x38\x78\x34\x09\x3d\x5b\x50\xdf\x7b\x24\x89\xbf\x45\x2b\xc4\x88\x08\x99\xf7\x1e\x5c\x42\x30\x98\xe1\x5f\xc8\x12\xc9\x9d\xb5\x09\xab\x6f\xbc\x34\x2f\x0d\x25\xc5\xba\x2c\x24\x1f\xe1\xac\x8f\x35\xef\x73\x46\x71\x35\x25\x1c\x60\x88\x4e\x91\x4b\x0e\x8f\xe4\x38\xc1\x1e\x27\xe4\x24\x88\x6b\x37\x2a\x93\xc6\x97\x7d\xcd\x4a\xce\xf3\xc8\x16\x39\x95\x32\x31\x69\xdb\x37\xbb\x92\x06\x0e\x52\x27\x2c\x69\xda\x99\x2c\xe9\x58\x75\xc2\xd2\xb6\xf6\xd2\x4c\xea\xc1\x0a\xe5\xa4\x46\xaa\xf4\xcc\x3a\xa9\x69\x5b\x59\x6a\xce\x75\xb5\xbf\x45\xdf\x46\xef\xa5\xf3\x69\x68\xa6\xbe\xa0\x5b\xee\xa8\xa5\xa7\xe2\xc8\x41\x1a\x5a\xda\xe2\x38\xd8\x71\x76\x85\x71\x83\xc9\x03\x40\x71\xa0\x44\x07\x10\x97\xdf\x54\x7f\xc1\x72\x9b\xb2\xfb\x60\xb2\x23\x28\x07\x8c\xf6\x8b\xe4\xb6\x13\xf8\x19\x02\x39\x58\x4e\x3b\xc6\x71\x2a\x4a\xec\x13\xc6\x6d\x27\x70\x47\x28\x4e\x29\xb1\x25\x88\x2b\x00\x82\x32\x0a\x90\xd3\xc5\x64\xcc\xce\x63\xa3\x1a\x7b\x89\xd9\x42\x5a\xcc\x40\xbf\xaa\x63\xff\xc4\x4c\x37\xe8\x29\x32\x06\xea\xa1\x12\xd0\xa5\x35\xf1\x21\x32\x2e\xfc\xd0\x13\xc4\xe9\x42\xfd\x0c\x19\x67\x0b\x4c\x5d\x00\x43\xac\x2d\xed\x11\x92\x07\x51\xdf\x74\x21\x3d\x56\xa4\x4e\x17\xd2\xef\x91\x71\xe5\x0b\xac\x35\x6e\x8f\x33\x1d\xc8\x39\xd7\x32\xe5\xe4\xd0\xa6\x33\xc9\xd2\x6e\xda\xde\x0a\x72\x3a\x93\x3a\xc4\xe9\x4c\x34\xe0\x74\x28\x8b\x9f\x61\x80\xce\xd6\x80\xb2\x4b\x55\x53\xca\x3c\x09\xa1\x2a\xbc\x53\x0d\x3b\x25\x07\xb2\xb8\xd4\x55\xa9\x3c\x7a\x69\xcb\x25\xd1\x63\x1d\x79\x35\xc7\xc1\x85\x78\x37\x0f\x55\x10\x46\x0a\x41\xf4\x8d\xa1\xe7\x3b\x84\xa3\x09\x23\x64\x3d\xd0\x81\x02\x43\xd9\x52\x15\xe2\x50\xdc\xae\xbc\xb3\x03\xc0\x2e\x28\x5b\x86\x86\xc0\x37\x3e\x42\x2d\x02\xc3\x06\xe3\x08\xa5\xc3\x57\x8e\x23\xe4\x29\x9a\xac\x19\xca\x35\xaf\xc6\x9b\xbb\xb6\x75\x28\x57\x56\x9d\x8e\x95\x10\x22\x53\xd0\xf9\xe8\x9e\x20\xd4\xe2\xad\x54\x4f\x75\xb8\x47\x3f\xb5\xee\xd7\x14\xfc\x14\x70\x9d\x76\x87\xeb\xc3\x87\x00\xd7\x87\x9d\xe0\x7a\xfe\x5c\xe9\x0b\x5c\xdf\x84\xe1\x86\xbb\x82\xeb\xc3\x7d\xc3\xf5\xed\x04\x7e\x86\x70\x7d\xb8\x73\xb8\x3e\xdc\x37\x5c\xdf\x4e\xe0\x8e\xe0\xfa\x70\x07\x70\xbd\xb6\xe6\x9a\x46\xaf\xd6\xe5\xcd\x51\x03\x8a\x82\x8d\x6c\xdf\x35\xe7\x8e\xf9\x2c\xcd\x7d\x2f\xa9\xe0\x68\xe8\xf5\xde\x84\x02\x05\x72\x74\xca\xc2\x45\x29\x6f\xd0\x49\xe9\x2c\x7e\x7c\xd2\x2b\x1c\xaa\x07\x7c\x6b\x45\x46\xd8\xbe\x21\x1b\x75\x49\x7b\xbd\x41\x3b\x90\x39\x60\x7e\xc0\x1f\x9f\x33\xe6\xb3\x4d\x82\x5f\xfb\xbc\x5a\x6a\x6b\x98\x4f\x27\x90\x03\x19\xcf\x81\x7c\x9a\x03\xf9\xba\xb5\x15\xc4\xa7\xb5\x10\x9f\x26\x10\x5f\xe3\x7b\x3a\xb1\xca\xe0\xbe\x39\x28\x4f\x89\x1b\xe0\xb0\x0a\xda\xe1\x68\xf7\x08\xae\xe8\x95\x71\x0f\x3d\xb7\x0a\x92\xa1\x97\xbf\x5d\x9d\xbf\x83\xa9\x45\x73\xdf\x09\x5d\x1f\x1d\xfd\x54\xf1\x78\xb7\xd4\xee\xe5\x52\x10\x3e\xf4\x2a\x9f\xb7\x3d\xed\xd5\x72\x96\x1e\xd3\x88\x35\x74\xac\xe6\x5d\x81\x29\x0b\xd2\x5e\x0e\xaf\xd4\x00\xaa\xfd\x32\x15\x32\x20\xae\xc0\x72\x31\x57\x8e\xa1\x34\x02\xc5\xb3\xde\xd9\xd7\x99\x56\x6b\x7f\xba\xf7\xe9\x0c\xd2\x20\xb1\xd1\xea\x3a\x52\xb4\x99\xd2\x84\x7b\x93\x49\xd5\xec\x3b\x4f\x6b\x16\xee\x1a\x4d\xc2\x7d\xa3\x29\x8d\x65\x94\x1b\x45\x0b\xd6\x7b\x9a\xe2\xa2\xc5\x1d\x15\x80\x49\x1c\x80\x6b\x4c\x5e\xe5\x07\x8a\xae\x89\x17\xa8\x08\x5f\xe7\x03\x31\xe3\x2c\xd9\x5f\x52\x17\xa5\x44\xd2\x7c\x46\x29\xa7\x17\x6c\xbe\x25\xc3\xaa\x01\x35\x71\xbc\x84\x57\xf5\x90\x1e\x57\x18\x8b\x24\xf9\x6d\x23\xef\x38\x13\xb6\x59\x32\x9a\x77\x13\xc5\x63\xe6\xed\x17\x8c\x36\xe7\x99\xeb\xc6\x60\x2c\xf1\x5b\x3d\xb5\xa5\x1b\x52\x93\xf4\x4e\x32\x9e\xf2\x1d\x35\x15\xda\x21\x4b\x53\x5b\xf4\xb6\x41\xe2\x67\x75\x0b\xa9\xb8\x94\xba\x79\x5b\x41\xf7\x9d\xb9\x5c\x1d\xd7\xe2\xd0\xee\x0b\x12\x15\x63\x6b\xe8\x77\x29\xa2\x6a\xc8\xbb\x8d\xdf\x9d\x67\x1e\xd7\x86\x79\x0b\xbf\x7b\x00\x55\x1c\xf9\xf0\x70\xd7\x32\xce\x05\x99\x3f\x80\x3a\x8e\xd4\xa2\x43\x21\x27\x79\x42\xfa\x4b\x11\x67\xd3\xce\x1e\x2c\xb5\xa3\x2a\x8e\xe4\xb4\xdf\x32\xce\x96\x12\x3f\xc3\x3a\x8e\x5c\x4e\x3b\x2e\xe4\xc4\x71\x62\x9f\x95\x9c\x2d\x25\xee\xa8\x94\x13\x6b\xf1\x50\x9e\x9f\x53\x30\xaa\xc3\x43\x77\x4e\x5b\x9a\x1f\x19\x69\x5d\x5f\x92\x87\xa8\xb5\x34\x93\xd0\x75\x8d\x7b\x86\xde\xba\x30\x32\x57\xb1\x3f\x57\x17\x81\x1b\x59\xfa\x8b\x5b\x5b\xd5\x45\x80\xe4\x31\xa2\x75\xb5\x11\x68\xd5\xc5\x91\x1b\xea\xc9\x03\x5f\xb8\x61\xfd\x42\x65\x9a\x2e\x6c\x78\x4a\x95\x8c\xac\x57\x87\x32\x88\x24\xae\x3e\x2b\x6a\x4a\xdd\xf8\x24\xac\x8a\xf8\x47\x7d\xa2\xd9\xf6\xc1\xb9\xf2\x29\xa5\x56\xa4\xea\xf9\xb5\x7c\x53\xfd\x71\xe2\xba\xef\xe4\x02\xf3\x8c\xa8\x97\xad\x9e\xb2\xf2\x1b\x54\x09\xfe\x5a\x71\xf7\x11\x55\x18\xac\xe2\xed\xaf\x4f\x8e\xdd\x02\xde\x19\xba\x8d\xf8\x03\x40\x6e\xa0\x44\x07\xe0\x96\x7b\x01\xeb\x0b\x76\xdb\x94\xcd\x47\x7c\x47\xd0\x0d\x18\xed\x17\xb9\x6d\x27\xf0\x33\x04\x6e\xb0\x9a\x76\x8c\xdb\x54\x90\xd8\x27\x6c\xdb\x4e\xe0\x8e\x50\x9b\x52\xe2\x93\x3c\x2f\xf7\xb5\x9d\xdd\xb5\x89\x3c\xaa\x6b\xf5\x2c\xdb\x88\xab\xc7\xe8\x46\xc3\x41\xdb\x67\xca\x24\xe5\x21\x32\xae\xbb\x51\x3e\x03\xca\x77\xe7\x6f\xdb\x3e\x7a\x27\x49\x8f\x40\xdd\xb7\x5d\x64\x1e\x23\xe3\x72\xd8\x85\xf0\x7b\x64\xfc\x3a\x7c\x7b\xd5\x85\xf4\x1f\xc8\x78\x7b\xfe\xae\x0b\xe5\x73\x64\x5c\x0d\x2f\xce\xe5\xdb\x16\x6d\x49\xff\x89\x8c\x57\x6f\x2e\x2e\xce\x2e\x07\xb1\x7d\xdb\x83\xdd\x00\xf2\x65\xfe\x0c\x30\xe0\x39\xb8\x20\xdb\x5a\x21\xdd\x80\xd7\xa1\xdc\x80\x6b\x90\x1b\x50\x89\x71\x03\x6e\x81\x27\x6e\x7c\xb1\xa4\x10\x47\xe5\x33\x4e\x09\x5d\x5b\xe0\xa9\x69\xaf\x2b\x69\x4b\xd0\x51\xf6\xe3\x84\x75\x16\x32\x62\xd4\x67\x54\x2c\x3b\x33\xb8\xa4\x76\x87\xd3\x4d\x4d\xfc\x8e\xfe\xd5\x9d\xf8\x2d\xe1\x10\xb9\x3c\xb1\x89\x81\x8e\x3f\xeb\x86\xbb\xa2\x95\x07\xb3\xeb\x1d\x2b\x4f\x70\xf7\x0c\x93\xf5\xbf\x77\xaa\x78\xe9\x38\x6e\x69\xf5\xce\x71\xb2\x46\xa5\xd7\xcf\x0a\x2f\x5b\xc3\x22\x24\x72\x1d\x58\x67\x2e\x9d\x7a\xfa\xfd\xef\xf8\x55\xea\xec\x55\xf1\xd7\x40\x5b\xf5\xba\xb8\xbc\xdf\xf0\x95\xf1\x58\x7f\x49\xa0\xdf\x61\xd7\x25\xf9\xfc\xcb\xe7\x18\xd6\xa6\x66\x97\xc5\x89\x14\x0b\x68\x98\x1c\xef\xa0\x93\x41\xff\x3f\x00\x00\xff\xff\x2f\x13\x38\xb3\xb8\x50\x00\x00"

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 20664, mode: os.FileMode(420), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

