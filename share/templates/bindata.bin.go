// Code generated by go-bindata.
// sources:
// index.html
// DO NOT EDIT!

// +build bin

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xe4\x5c\x69\x73\xe3\x36\xd2\xfe\xee\x5f\x81\xf0\x9d\xbc\x95\xa4\x42\x2a\x3e\x26\x3b\x3b\x91\xbc\x65\x5b\x4e\xc2\x8a\x0f\x95\x2d\x67\x37\x9b\x4a\x65\x28\x12\x92\x30\xa6\x48\x2e\x00\xca\x76\x54\xfa\xef\xdb\x00\xc1\x53\xa4\x45\x68\xe4\xa3\x66\x3f\x78\x24\x02\xe8\x07\x8d\x46\xa3\xfb\x01\x40\x4d\xf7\x8b\xfe\xe5\xc9\xf0\xb7\xc1\x29\x9a\xf2\x99\xbf\x73\xb8\x58\xbc\x99\xa3\xf7\x3d\x64\x5d\x32\x8e\x03\xfe\x2b\xa6\x8c\x84\xc1\x72\xd9\x95\xd5\x08\x1d\x76\xa7\xd8\xf1\xe0\x8b\xf8\x3a\xc3\xdc\x41\xee\xd4\xa1\x0c\xf3\x9e\x11\xf3\xb1\xf9\xce\x50\x55\x9c\x70\x1f\xcb\xef\xf0\xb4\x58\x58\x7d\x87\x3b\xd6\xcf\x17\xcb\x25\x0a\x25\x70\xb7\x93\xb7\x50\x40\x53\xce\x23\x13\xff\x27\x26\xf3\x9e\xf1\x2f\xf3\xe6\xc8\x3c\x09\x67\x91\xc3\xc9\xc8\xc7\x06\x72\xc3\x40\x88\xf5\x0c\xfb\xb4\x87\xbd\x09\x36\x8a\x92\x81\x33\xc3\x3d\x63\x4e\xf0\x5d\x14\x52\x5e\x68\x7c\x47\x3c\x3e\xed\x79\x78\x4e\x5c\x6c\xca\x87\x6f\x11\x09\x08\x27\x8e\x6f\x32\xd7\xf1\x71\x6f\x57\x01\x2d\x16\x3f\x0f\xcf\xcf\x90\xd1\xfd\xc2\x58\x2e\x4d\xf3\x77\x32\x46\xf6\xe9\x1f\x87\x5d\x9f\x04\xb7\x88\x62\xbf\x67\xb0\x29\x60\xbb\x31\x47\x04\xe0\x0d\x34\xa5\x78\xdc\x33\x3a\x63\x67\x2e\x9e\x2d\xf8\xa7\x0e\xe9\x77\x1c\x78\x64\xfc\x87\x69\x16\x91\x12\x00\x46\xfe\xc2\xac\x67\xec\xef\xdd\xef\xef\x65\x70\xc2\xfc\xcb\x65\x8a\xca\xd2\x2f\xe6\xfe\x9e\x15\x05\x13\x03\xf1\x87\x08\x46\x4a\x66\xce\x04\x77\x44\x81\xb2\x42\x8e\xed\x44\x91\x8f\x4d\x1e\xc6\xee\xd4\x2c\xf5\xb3\xbb\xf7\xdd\x3d\xfc\xad\xed\x09\xda\x58\x9a\xc8\x07\x07\xf7\xf0\xb7\x1e\xf9\xe0\x40\x17\xf9\xed\xde\x3d\xfc\xad\x47\x7e\xbb\xa7\x8b\xfc\x0e\xac\xf1\xae\x85\x35\xde\x35\x58\x83\xf1\x07\x1f\xb3\x29\xc6\x3c\x9d\x14\x8e\xef\x79\xc7\x65\xac\x8a\x09\x45\x1d\x12\x78\xf8\xde\x12\x95\x0a\x88\xb9\x94\x44\xbc\x28\xf9\xd1\x99\x3b\x49\xa9\x51\x5d\x52\x88\x51\x37\xc7\xfb\xc8\x3a\x54\xac\x12\x8a\xe1\xdb\x9e\xb5\x6b\xed\x7d\x97\x16\x58\x33\x12\x58\x1f\x41\x03\x0f\x56\x9b\x39\x73\x48\x50\x12\x5b\x2c\xc0\xab\xad\xe1\xd1\x4f\x3f\x9d\xf6\x47\x04\x16\x35\x34\x57\xaa\x25\x82\x8b\x05\xf6\x19\x5e\x2e\xa1\x3f\x55\x2e\xcb\x02\x6f\xb9\x34\xd2\xb5\xdc\xed\x24\x5a\xaa\x81\x74\x54\x38\x38\xec\x8e\x42\xef\x41\x15\x06\xce\x1c\xb9\xbe\xc3\xc0\xd0\xf0\x75\xe4\x50\x94\x7c\x98\x1e\x1e\x3b\xb1\xcf\xd3\x47\xc6\x61\x79\xbb\x30\x3f\x91\x81\x68\x08\xab\x51\x34\x27\x13\x28\x84\xa9\xca\x3a\xf4\x48\x86\x26\x16\x36\x8c\x0a\x53\x73\xec\xc7\xc4\x4b\xdb\x54\x5a\x29\x74\xa1\x19\xa6\x10\x0c\x7c\x73\xe6\x99\xbb\x28\x72\x3c\x8f\x04\x13\xd3\xc7\x63\x88\x3c\xe9\x5c\xa4\xf2\xa3\x98\xf3\x30\xa8\x40\xf0\x70\x32\xf1\xb1\x80\xf0\x9d\x88\x61\x2f\x9d\xeb\xa4\xb1\xb2\x73\xd2\x48\x28\x97\xb4\x4a\x8b\x1d\x3a\x11\x73\xf8\x7f\x0a\x2b\xab\x2e\x74\x2b\x5d\x21\x72\xb2\x6e\x19\x35\xc3\xc0\x7f\x28\x37\x81\x46\xc3\x44\x8f\xdc\x3a\x30\x0b\x20\xf6\x08\x92\xf4\x5e\xe8\x76\x05\xea\xd5\x48\x76\x12\x23\xee\x34\xa1\xc5\x11\x98\x11\xa7\xce\x0c\x9e\x03\xf3\xde\x33\x92\xcf\x3f\xc5\x42\x1c\x51\x27\xf0\x2a\xd6\x5c\x2c\x38\x9e\x45\x3e\x08\x22\xd5\x94\xbd\x7f\xbf\x22\x83\x2c\x48\x68\x55\x9d\x40\x23\xf0\xa1\x8a\x47\x11\x2f\xf3\x85\x7c\x7a\x33\x67\x4c\x0a\xd0\x23\x13\x7c\xd8\x8d\xfd\x82\x4f\xa5\x4d\xe1\xa3\xea\x06\x3e\x49\xdb\x39\x2e\x27\x73\xbc\x6a\x44\x47\x05\x16\x91\x27\xd9\xfb\x4e\xe7\xee\xee\xce\x82\x64\x4a\xe1\xcf\x72\xc3\x59\x27\x49\xac\x10\x0b\x7c\xec\x30\xcc\x3a\xc2\x0a\x8c\xff\xc3\x9d\x45\xbd\x24\x06\x54\x21\x01\x34\x4d\xc6\xce\xea\x94\xf9\xa4\x51\xc3\x74\x75\x40\xdc\x42\x85\xef\x10\x71\xe8\x84\x04\x62\x6d\xa1\x31\xa1\x8c\xcb\xd2\xd5\x81\xb8\xa1\x87\x2b\x50\xa2\x08\xe6\x67\x65\xd4\x52\x45\x94\xf2\x87\xbe\x7d\x3d\xbc\xb2\x8f\xc5\xe4\x09\x81\x2d\xeb\xfc\xa9\x8a\xc6\xd1\xff\x07\x23\x16\xfd\xd0\xde\x8b\x45\xc3\x38\x5a\x85\x5a\xe3\xc8\x4a\xac\xd6\x8b\x33\x53\xbc\x42\x03\xf9\xce\x26\x06\xf2\x9d\x8d\x0c\x04\x62\x5b\x31\x50\x27\xf6\x1f\x0b\x12\x85\x47\x78\x00\x1b\xa8\x14\xb8\x3e\x69\x95\xda\xd0\xf0\xae\x21\x99\xa9\xf4\x75\x90\xe6\xb1\x70\x3c\x06\x6a\x00\xe9\xec\x51\xc3\xc1\x98\xb1\x3f\xc3\xb3\x52\x2c\x7a\xcc\x64\x99\x40\x62\xb4\xd5\x48\x58\x56\xe7\xfb\x16\xdd\x7b\x63\xbd\xde\xa1\x7d\x5d\xe7\x25\x0b\x3f\xb5\xc9\xdc\x28\xd6\x53\x5a\x08\x6c\xcf\x64\x44\xd3\x64\x64\xcb\x26\xdb\xfd\x6e\x03\x9b\x45\x4c\x4f\x69\x68\xbf\x56\xe9\xec\x61\x0d\x55\x4e\x05\xe6\xc0\x31\x45\x8a\x40\xbd\x34\x59\x2c\x97\x3f\x54\xa9\xaa\x62\xa8\x82\xb4\xaa\xbd\x6e\xe7\x9b\x9d\x6f\x3a\xcb\xe5\x62\x91\xe8\x57\x50\xd8\x11\x6c\xe1\xcf\x91\x03\x5b\x4d\xc1\x17\x61\x2b\x97\xe6\x5f\xc0\xff\x19\x3e\x61\x27\xbb\x58\x48\xeb\x2d\x97\xa2\xec\x24\xf9\x8a\xc2\xe0\xc4\x27\xee\x6d\x6f\xc1\xa7\x84\x59\x53\xa0\x1b\x3e\x96\x25\x4b\x84\x76\x92\xbd\xf0\xb1\x40\x95\xf2\xd6\x10\xc6\x23\x4c\xe1\x08\x6d\x24\xd1\x6e\xa9\x14\x25\x93\xe9\x76\xb5\x4a\x54\x41\xb9\x7e\x6d\xb5\x5a\xa1\x57\x52\xab\x5c\x8d\x34\x33\xc8\x4a\x70\x38\x12\xed\xe6\x5b\x3a\x03\xa6\x66\xb1\x18\x8a\xb3\x80\x01\x94\x90\x7b\xec\x21\x63\x0a\xb4\x44\xec\xe9\x11\x38\x4a\x76\x70\xb0\x53\x39\x48\xd0\x54\x2f\x5b\xad\xa2\xd1\x9b\x48\x9e\x71\x48\xac\x81\x43\x9d\x19\xe8\x29\x97\xc3\x62\x21\x2d\x36\x08\x19\x11\x24\x0c\xbd\x89\xac\x93\xc1\x4d\x80\x0c\x03\x19\x12\x01\xc9\x7f\xd3\x8d\x8c\x91\xa8\x55\x5c\x49\xd3\x83\xd2\x46\xc3\xf4\xc9\x2d\x36\x13\x21\xb1\x21\x21\xf9\x66\x52\xd8\x48\xcc\xd9\x10\x7a\x49\x3b\x92\x78\xb2\x1a\x9e\x52\x5a\x96\x2d\x07\xc9\x26\x9b\x75\x9c\x12\xcf\xc3\xb0\x2b\x31\x7c\x02\xdc\x6b\x42\x43\x20\x09\x0a\xb0\x98\xe8\xf3\x5a\x93\xc0\x52\x45\x32\xcb\x07\xe1\x1d\x75\x22\xc4\xa7\x79\x7a\xca\x99\xab\x94\x00\x0e\x50\x4a\xeb\x02\x72\x85\xbc\x57\x92\xe7\xa8\x9a\x60\xfb\xd8\x77\x1e\x60\x25\x96\xdb\xa1\x12\x23\x90\xfe\xbd\xc2\x35\xc4\xa4\x89\x71\x7a\xb5\x39\x7d\x75\x8b\x01\xa0\x85\x59\x19\xf1\x40\x19\xa4\xc5\x7e\xa1\xba\xf6\xd1\x19\x90\x9f\x7e\x3e\x4b\xe0\xa1\x80\x87\x04\x66\xee\x07\xeb\x90\x92\x05\x8b\xce\x43\x8a\xd7\x41\x95\x23\x63\x95\x96\x6c\x64\xf7\xab\xf0\x8e\x7d\x92\xd9\x03\xeb\x68\xc4\x42\x3f\xe6\xf8\x85\xec\x7f\x51\x58\x25\x9f\x68\xff\x75\x50\xeb\xec\x9f\x53\xc2\xbc\x26\x2d\x3d\xec\x72\x67\x04\x5b\x75\xb5\x48\x2f\xc2\xe0\xdf\x98\x86\x79\x6f\x49\xad\xfc\xd7\x9c\x86\x73\x4c\x8d\x6c\xdd\x66\x4b\x95\x67\x47\xac\xf2\x89\x16\xba\xe6\xd3\xb2\x5e\x85\x67\x51\x99\x9a\x5b\x2e\xe9\x64\xc4\xc5\xf6\x37\x0c\x53\x5d\x99\xeb\x07\xa6\x2b\xf2\x4f\x87\x70\x5d\x19\x1b\x12\x52\x45\xa6\x93\x8d\x5c\x0e\x34\x3f\x76\xe6\xd9\x51\x93\xf4\x20\x48\x2b\x13\x88\x82\x10\xdb\xf3\xa0\x0e\xc6\xb6\xce\x20\x6a\x09\xbf\xf8\xc8\xee\xd1\x87\x24\xf1\x89\xa2\xaf\x44\x83\xaf\xad\x99\x13\x7d\x35\x8e\x03\x57\x9c\xa6\x7c\x25\x84\xbf\x46\x0b\x44\x31\x8f\x69\xf0\x01\x5c\x80\x53\x98\xc2\x5f\xf0\x03\x32\xa0\xca\x04\xe2\x34\x7a\x30\x2f\x0c\xd9\x8b\x75\x91\x45\x69\xa9\x8d\xb7\x3a\xb4\x62\x4c\xad\x90\xa3\x14\x01\x86\xe4\x95\x51\x0a\x19\xb3\x80\x34\x9a\x98\x31\xc3\x91\x2b\xcd\x25\x39\x58\xf2\xd8\x53\x50\x62\x4e\x07\x2e\x2f\xa8\x94\x77\x93\xd5\x7d\xb9\xad\xde\xc0\x1b\x9a\x3a\x4b\xab\xb6\xd6\x97\x70\xa3\xa6\xce\xb2\x3a\xfd\xde\x20\x91\xc1\xb2\x4b\x8e\x69\x6a\x7a\x15\x8e\xd8\xd4\x6b\x56\x57\xed\xb5\xe0\xaa\xca\xdf\x96\x5f\x2f\x3f\x08\xe7\x93\xf4\x04\xea\x0b\xa7\xa3\x1d\xb9\xfa\x77\xb2\xbc\xae\x4b\x62\x60\x9f\xa4\xcb\x61\xfa\xe3\xe7\xa1\x30\xd0\x4f\xce\x60\xfa\x84\xdd\xa2\x98\x39\x13\xdc\x9e\xc8\x48\x45\x3f\x7f\x1e\xd3\x1f\xbf\x34\x8d\x01\x0d\xb6\xc4\x62\x1a\x90\x5e\x1d\x89\x01\xd7\x7a\x2d\x1c\x46\x7a\xf9\x56\x28\x4c\x03\xd2\xd3\x30\x18\xd9\xd9\x26\x04\xa6\x94\x20\xab\x59\x51\xcc\x0e\x15\xa1\xac\x48\x0d\x1a\x8c\xc1\xa7\x73\x61\x0e\x03\xfd\x2a\x6f\xe2\x52\x1b\xdc\xa2\x5d\x64\xf4\xe5\x2d\x2f\x68\xa3\x2d\xbc\x87\x8c\xf3\x30\x0e\xb8\xb8\xdf\xd1\x97\xde\x47\xc6\xd1\xdc\x21\x3e\x90\x03\xaa\x2b\x7b\x80\x0c\xc8\xd1\x5f\x6e\x22\xfa\x56\x8a\x7a\x9b\x88\x7e\x8f\x8c\x61\xc8\x1d\xa5\xb1\x2e\xcf\xf2\xc6\x79\xde\xe9\xff\xa8\xc5\xb2\xbc\x71\x13\xc9\xf2\xc6\x8a\x63\x79\x84\x8a\x9d\xbf\x21\xfa\xb1\xfa\x84\x5e\xc0\x43\x91\x6e\x21\x54\x97\xe2\x55\xd4\x4f\xcf\x16\xe4\xab\x05\x22\xa1\x0b\x0c\x3c\xaf\x60\x24\x2e\x57\xac\x2a\x67\x73\xfd\x2e\x56\xd4\xcc\xbb\x48\xab\x56\x69\x4a\x7b\xd2\x58\x8a\x70\xb3\x58\x5e\xaa\x28\x05\x0c\x3b\x08\x3d\xcc\xd0\x98\xe2\xea\xc5\x62\xa2\x80\x2d\x6a\xea\x6e\xbb\x50\x52\x2f\x5d\x77\x03\x36\x5a\x52\xb6\x42\xa3\x00\x16\x5c\x73\x85\x44\xb5\x18\x46\x2c\x16\x43\xed\x30\x62\x96\x31\xaf\x86\x91\xdc\xb0\x7a\x6e\xb6\x6d\x53\xc7\x62\xd5\x35\xe9\x58\x97\xd6\x0b\x0a\x7a\x4f\xee\x08\x5c\x2e\xec\x5a\xf5\x64\x83\x47\xf4\x93\x31\x61\x45\xc1\x67\xa5\xb6\x44\x9f\xda\xda\xcf\x44\x6d\xed\x22\xb5\xb5\x21\x59\xd0\xb1\xe3\x62\xd6\x9e\xda\xda\xff\x1b\xd4\xd6\x7e\x71\x6a\x6b\x6f\x8d\xda\x36\x20\xbd\x3a\x6a\x6b\xbf\x1e\x6a\x6b\x6f\x8d\xda\x36\x20\x3d\x0d\xb5\xb5\x37\xa5\xb6\x8d\x67\x73\x59\x88\xd0\x3e\x09\x1b\xb4\x90\x28\x45\x04\x75\x65\xb7\x9f\xe5\x82\x63\xc2\x19\xb2\x83\xce\x65\xcc\x51\x84\x29\x62\xd8\x0d\xcb\xaf\xca\x1c\xda\x97\xa8\x5b\xb9\xea\x1e\x75\x3b\x25\xc7\x8d\xda\x1c\xfc\x3d\xae\xc8\xc0\x71\x6f\xf1\x5a\x5d\xb2\x56\x97\x68\x0b\x7d\xf6\x69\x18\xb1\x6f\x4f\x29\x0d\xe9\xba\x8e\xcf\x42\x56\xdf\xab\x26\x25\x26\x05\x4a\x6c\xeb\x51\x62\xd2\x48\x89\x49\x4a\x89\x15\x1f\x26\x63\xab\x4a\x86\x75\x78\xea\xaa\x78\x12\x3d\xb2\xf2\x16\xc4\xa4\x7a\x94\x09\xb2\xf6\x60\xfb\x94\xa6\x12\xba\x64\x0b\x35\xb9\x92\xa3\xa0\xe3\xdf\x86\xa7\xd7\x30\xb7\x68\x16\x7a\xb1\x1f\xa2\x83\x9f\xea\xe2\x22\x68\x77\xfc\xc0\x31\xb3\x83\xfa\x98\xd8\x69\x44\x16\x2e\xd3\x0a\x1a\x1a\xb6\x8f\xb7\xc5\xde\x8e\xed\xa1\x1c\x40\xbd\x63\x66\x9d\x40\x2e\xe6\x8e\x58\xcd\xb5\x63\xa8\x8c\x40\x62\x36\x7b\xfb\x2a\x68\xbd\xf6\x87\xcf\x3e\x9d\x51\x16\x25\xd6\x5a\x5d\x85\x0a\x9d\x29\x4d\xd1\xdb\x4c\xaa\x82\xdf\x78\x5a\xf3\x78\xd7\x6a\x12\x1e\x1b\x4d\x65\x2c\x83\xc2\x28\x34\xa0\x9f\x69\x8a\xcb\x16\xf7\x64\x04\xc6\x49\x04\x6e\x30\x79\x9d\x1f\x48\xb9\x36\x5e\x20\x43\x7c\x93\x0f\x24\xc0\x79\x8a\xbf\x20\x3e\xca\x84\x84\xf9\x8c\x95\xb4\x5e\xb2\xfa\x27\x43\xd6\x0d\xaa\x8d\xf3\xa5\x68\xf5\xc3\xfa\xb6\xc6\x60\x38\x4d\x72\x6b\xb1\x93\x74\xa8\xb3\x6c\x14\x76\x1b\xc5\x13\x70\xfd\x45\xa3\x0c\x7a\xe4\xfb\x09\x0d\x4b\x7d\x57\x4d\x6f\xa5\x40\x68\x92\x95\xa4\xe3\xa9\x96\xc8\xc9\x50\x4e\x59\x99\xdc\xb2\xc7\xf5\x53\x5f\x6b\x5a\x4c\xe5\xe5\xb4\x99\xc7\x95\x74\xdf\xa2\xdb\x35\xe3\x96\x87\xf7\x58\xb0\xa8\x19\x5f\x4b\xdf\xcb\xa8\x55\x4b\x6c\x1d\xdf\x3b\xcd\xbd\x4e\x07\x5c\xc3\xf7\x5e\xf2\x78\x43\xbc\x5f\xa9\x7b\xbe\x71\x8e\x67\xcf\x73\xc0\x21\x3a\xca\x4f\x38\xe0\x29\xa4\x0f\xed\x4f\x37\x12\x35\x3f\xff\xe3\x0d\x18\xe7\x4b\x9f\x6f\x08\x15\xb6\x74\xc0\xd1\x04\xf5\xea\x4e\x38\x84\x7b\xbd\x96\x23\x8e\xc4\xd5\xb7\x72\xc6\xd1\x04\xf5\x34\x87\x1c\x49\x6f\x2f\xfa\x06\xd2\x8f\x14\x6b\x1f\x88\x88\x1b\xb2\x0d\x64\x3c\x5d\x19\xc9\x7b\x3e\xed\x20\x00\x02\x7c\x1e\xd9\xcf\x4f\xcf\xb5\x8e\x02\x40\xb8\xe9\x2c\x00\xaa\xd4\x61\xc0\x2d\x11\xbf\x5f\x12\x6d\xad\x5f\x88\xc8\x3d\x25\x1a\x5f\xd9\x9f\xe7\xad\x36\xd8\xdc\x0b\xe1\x1f\xd5\xe5\x91\xee\x0b\x3d\x95\x0b\x21\x01\x55\x77\x23\x54\xa9\x6a\x73\x73\x53\xa7\x65\xeb\x8b\x95\x3a\xe1\x57\x70\xeb\x11\x31\x6d\x56\x30\x60\xcf\x43\x0a\xa0\x9f\x9c\x13\x0c\x68\xe8\x42\x1c\xd4\xb9\xf4\x90\x7a\x7e\xfe\xac\x60\xc0\x5e\x9a\x14\x80\x06\x5b\xe2\x04\x0d\x48\xaf\x8e\x12\x80\x6b\xbd\x16\x46\x20\xbd\x7c\x2b\x84\xa0\x01\xe9\x69\xf8\x80\xec\xec\xf9\xde\xe7\x79\xe3\xe6\xa5\x2e\x16\xd7\x23\x5a\xef\xda\x0c\x98\x7c\xcd\x67\x60\xf7\x75\xdf\x79\x11\x92\x7b\xc8\xb8\xd9\x4c\x72\x1f\x24\xaf\x4f\xaf\x74\x5f\x0d\x12\xa2\x07\xa0\xee\xd5\x26\x7d\xbe\x45\xc6\x85\xbd\x89\xe0\xf7\xc8\xf8\xd5\xbe\x1a\x6e\x22\xfa\x37\x64\x5c\x9d\x5e\x6f\x22\xf9\x0e\x19\x43\xfb\xfc\x54\xbc\x1d\xad\x2b\xfa\x77\x64\x9c\x5c\x9e\x9f\x1f\x5d\xf4\x13\xfb\xea\x12\xae\x88\x15\x72\xe6\xb5\x16\xdd\x8a\x58\x13\xdb\x8a\x98\x22\x5b\x11\x11\x5c\x2b\x62\x16\x38\xdd\xda\x77\xbe\x4b\xe4\x42\xbc\x52\x91\xca\xe9\x12\x13\x25\x7b\x53\x2b\x5b\x61\x30\xa2\x1d\xc3\x74\xe3\x4e\x06\x94\x84\x94\xf0\x87\x8d\x01\x2e\x88\xbb\xc1\xdd\x91\x12\xbe\x26\x7f\x6d\x2e\x7c\x85\x19\x81\x28\xc5\xd7\x01\xa8\x50\xb3\x6a\xb8\x21\xa9\xbd\xf6\x5a\x6d\x58\x7b\x3f\xf6\x5c\x0c\x51\xfd\x96\x19\x10\x55\x32\xcb\x7e\x04\x77\x76\x94\xa5\x3d\x4d\x3c\xc9\xbf\x56\xf0\x6e\x06\x5a\x78\xe9\x9a\x16\x4b\x67\x5a\xdc\x11\xa8\xff\x77\x03\x60\x8f\x7c\x32\x09\xd4\x4f\x10\x8d\x9d\x84\x5f\xa6\xbf\x56\x3c\x03\xd9\xba\x5f\x2c\x8a\xf2\x96\xbf\x5a\x4c\x74\x17\x02\xea\x67\x94\xea\xbc\xb4\xf8\xfb\x47\x07\x16\xb8\x82\xcb\xe3\x4a\x46\x0b\x0e\x13\x26\x9b\x6c\x63\xd3\x41\xff\x37\x00\x00\xff\xff\xcd\x4b\x55\x1a\x13\x49\x00\x00"

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 18707, mode: os.FileMode(420), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

