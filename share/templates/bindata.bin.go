// Code generated by go-bindata.
// sources:
// index.html
// DO NOT EDIT!

// +build bin

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xe4\x5b\xdb\x72\xe3\x36\xd2\xbe\xf7\x53\x20\xfc\x27\xff\x45\x6a\x28\xc6\x1e\x4f\xd6\x3b\x91\xbc\x65\x5b\x4a\xc2\x8a\x0f\x2a\x5b\xce\x6e\x36\x95\x4a\x41\x24\x24\x21\xa6\x48\x2e\x00\xc9\x56\x54\x7a\xf7\x6d\x1c\x78\xd4\x91\x32\x3d\x76\xcd\x5e\xd8\x22\x41\xf4\x87\x46\x77\x03\x5f\x03\x04\x9b\x5f\xb5\x6f\x2e\x7a\xbf\x76\x3b\x68\x24\xc6\xc1\xc1\x69\x53\xfd\x20\x04\x17\x04\xfb\x70\x21\x2f\xc7\x44\x60\xe4\x8d\x30\xe3\x44\xb4\xac\x89\x18\xd8\x27\x96\x79\x24\xa8\x08\x88\xba\x86\xbb\xf9\xbc\xd1\xc6\x02\x37\x7e\xba\x5e\x2c\x50\xc4\x05\x09\x45\xd3\xc9\x6a\x18\xa0\x91\x10\xb1\x4d\xfe\x33\xa1\xd3\x96\xf5\x2f\xfb\xfe\xcc\xbe\x88\xc6\x31\x16\xb4\x1f\x10\x0b\x79\x51\x28\xc5\x5a\x96\xdb\x69\x11\x7f\x48\xac\xbc\x64\x88\xc7\xa4\x65\x4d\x29\x79\x8c\x23\x26\x72\x95\x1f\xa9\x2f\x46\x2d\x9f\x4c\xa9\x47\x6c\x75\xf3\x1e\xd1\x90\x0a\x8a\x03\x9b\x7b\x38\x20\xad\x43\x03\x34\x9f\xff\xd4\xbb\xba\x44\x56\xf3\x2b\x6b\xb1\xb0\xed\xdf\xe8\x00\xb9\x9d\xdf\x4f\x9b\x01\x0d\x1f\x10\x23\x41\xcb\xe2\x23\xc0\xf6\x26\x02\x51\x80\xb7\xd0\x88\x91\x41\xcb\x72\x06\x78\x2a\xef\x1b\xf0\x6f\x15\xd2\x6f\x24\xf4\xe9\xe0\x77\xdb\xce\x23\x69\x00\x4e\xff\x22\xbc\x65\x7d\x38\x7a\xfa\x70\x54\x86\xe3\xc9\x85\xfd\xe1\xa8\x11\x87\x43\x0b\x89\x59\x0c\x5d\xa4\x63\x3c\x24\x8e\x2c\x30\xdd\xcf\x40\x71\x1c\x07\xc4\x16\xd1\xc4\x1b\xd9\x85\x06\x0e\x8f\xbe\x7d\x82\xbf\xf5\x4d\xc0\xc3\x46\x45\xc8\xe3\xe3\x27\xf8\xdb\x00\x79\x7c\x5c\x15\xf2\xe3\xd1\x13\xfc\x6d\x80\xfc\x78\x54\x15\xf2\x04\x3a\x7e\xb2\xa9\xe3\x27\x6b\x3a\xce\xc5\x2c\x20\x7c\x44\x88\x48\x0c\x2f\xc8\x93\x70\x3c\xce\x53\x30\xb8\x76\x68\xe8\x93\xa7\x86\x2c\x35\x08\xdc\x63\x34\x16\x79\x91\x3f\xf1\x14\xeb\x52\xab\x3c\x50\x10\x67\x1e\x00\xfd\xc9\x1d\x26\x83\x9e\x11\xb8\x3a\x6a\x1c\x36\x0e\x4f\x92\x82\xc6\x98\x86\x8d\x3f\xa1\x4d\x1f\x06\x8f\x3d\xc6\x34\xd4\xf5\xe7\x73\x88\xce\x46\xef\xec\xc7\x1f\x3b\xed\x3e\x0d\x17\x0b\xa8\x67\x94\xd1\x12\xf3\x39\x09\x38\x59\x2c\xa0\x05\x67\x4c\x83\x07\xf3\x50\x3d\x08\xfd\xc5\xc2\x4a\x06\x66\xd3\xd1\xca\x19\xfd\x1d\x33\xb6\x4f\x9b\xfd\xc8\x9f\x99\xc2\x10\x4f\x91\x17\x60\x0e\x16\x85\xcb\x3e\x66\x48\xff\xd8\x3e\x19\xe0\x49\x20\x92\x5b\x2e\x60\xac\x7a\xe0\x88\xd8\x42\x2c\x82\xa1\x25\xab\xd3\x21\x14\x82\x4f\xd2\x06\x7d\x9a\xa2\xc9\x51\x0a\x7d\x22\xcc\x1e\x04\x13\xea\x27\x75\x4a\xb5\x0c\xba\xd4\x8c\x30\x18\xd9\x81\x3d\xf6\xed\x43\x14\x63\xdf\xa7\xe1\xd0\x0e\xc8\x00\xa6\x91\xc4\x05\x89\x7c\x7f\x22\x44\x14\x96\x20\x44\x34\x1c\x06\x44\x42\x04\x38\xe6\xc4\x4f\x7c\xab\x2b\x1b\x2b\xeb\x4a\x52\x39\x5d\x2b\x29\xc6\x6c\x28\x5d\xf7\x7f\x06\x2b\x7d\x9c\x6b\x56\x45\x40\x8c\xd3\x66\x39\xb3\xa3\x30\x98\x15\xab\x40\xa5\x9e\xd6\x23\xb3\x0e\x78\x01\xc4\x36\x20\xa9\x68\x85\x66\x97\xa0\xde\x8c\xa4\xa3\x8d\x58\x70\x02\x46\xd4\x6f\x59\x23\xb0\x6c\xd1\x0f\x7d\x86\x43\x1f\xca\x68\x7c\x98\x8d\x77\x70\x86\xe4\x03\xa8\x0f\xfc\x20\xe7\x73\x94\x27\x8d\x92\x99\xf3\x8f\x9a\x0e\x2e\xb4\xea\x40\xec\x94\x22\x49\xaa\x51\xf6\x5b\x16\x84\xba\x00\x6d\x70\xec\x69\x73\x12\xe4\xfa\x90\x54\x85\x9f\xb2\xfb\x03\x9a\xd4\xc3\x9e\xa0\x53\xb2\x6c\x3c\x6c\x3a\x2c\xc9\x8e\x7f\x72\x9c\xc7\xc7\xc7\x06\xf4\x98\xc1\x5f\xc3\x8b\xc6\x8e\x66\x47\x98\x01\x02\x82\x39\xe1\x4e\x80\x05\xe1\xe2\x1f\xde\x38\x6e\x25\xbd\xfe\xa5\x73\x7b\xe7\xde\x2c\x59\x45\xe1\x27\xe4\x8a\x97\xbd\x16\xd0\xb5\xca\x26\x03\x04\x66\x2c\x94\xbb\x86\x29\x87\x0d\x69\x28\x87\x17\x1a\x50\xc6\x85\x2a\x5d\xee\x93\x17\xf9\xa4\x04\x25\x8b\x60\x3e\x5d\x32\x80\x52\x31\x75\x6d\xdb\xbd\xeb\xdd\xba\xe7\xd2\x89\x52\xa0\x66\x9d\x9f\xab\xe8\x24\xfe\xff\xb0\xcf\xe3\xef\xf5\xb0\x90\x41\x34\x89\x97\xab\xe5\xc2\xf1\xbe\x2b\x7b\xb2\x34\x3a\x4c\x5f\xde\x60\x0f\x03\x5c\xee\x61\x80\x37\xf6\xf0\xf2\xac\x86\x1e\x3a\x93\x60\xd3\x88\xcd\xdd\xc2\x0d\x74\xc2\xf0\xd0\x76\xe6\x28\xd4\x61\xd1\x63\x99\x51\x64\x07\xc7\x64\x9c\x1f\xfb\x92\x4c\x8e\x13\x56\x89\x06\x03\xe0\x67\xfb\xb0\x30\xf6\xe7\x73\x41\xc6\xb1\x1c\x86\xc8\x02\xc6\x83\x56\xf9\xa7\x4f\xfa\xe2\x0f\xb0\x03\x09\x14\x62\x43\xda\x65\xf5\xcc\xe3\x0f\xca\x0d\x7e\x57\xad\x01\x09\xb0\x02\xbf\x60\xa7\xed\x1d\xf7\xe2\x49\xcd\x1d\x57\x88\x1b\x3a\x4e\x9f\xdb\x71\x5a\x4b\xc7\x63\x5e\x56\xe3\xf0\xdb\xe7\x75\x5c\x22\x6e\xd3\x2b\xbd\xd9\x92\x15\x26\x02\x53\xc8\xab\xe4\x10\x43\xad\x64\x76\x5c\x2c\xbe\x2f\xa7\x67\x26\x2b\x93\x89\x9a\x5a\x94\xcd\xe7\xce\x37\x07\xdf\x38\x8b\xc5\x7c\xae\xf5\xcb\x29\x8c\x65\x3a\xfb\x47\x1f\xc3\x5a\x49\xe6\x48\xb0\x16\x49\xb8\x07\xf0\x7f\x82\x5f\x58\x8a\xcd\xe7\xca\x30\x8b\x85\x2c\xbb\xd0\x97\x28\x0a\x2f\x02\xea\x3d\xb4\xe6\x62\x44\x79\x63\x04\x5c\x1d\x10\x55\xb2\x40\xe8\x40\xcf\x05\xe7\x12\x55\xc9\x37\x7a\xd0\x1f\x4d\xc2\xa7\x26\xb9\xdc\x51\x29\x46\x87\xa3\x7a\xb5\xd2\xaa\xa0\x4c\xbf\x5d\xb5\x32\xbe\x85\x78\x86\x10\xe2\x96\xac\xf3\x48\xc5\x08\xc9\x3b\x08\x0f\xe9\x6b\x00\x95\xff\x74\x5a\x3d\x9f\x43\x06\x33\x24\xe8\x1d\x7d\x8f\xde\x81\x14\xfa\xd4\x42\x7a\x7e\xbc\xe8\xde\x37\x2e\x29\x97\x16\x11\x0c\x34\xf9\x99\xcc\x90\x1c\x79\x36\x40\xf5\x67\xf6\xb5\xa5\xea\x37\x80\xbb\x95\x1b\x85\x9f\x44\xa6\x9a\xd8\x95\x49\x90\xba\x0c\xa3\x47\x86\xe3\x74\x45\x99\x48\xc1\xaa\xd9\x4f\x24\x33\x33\xe5\xa5\xfb\x43\x7b\xc2\x49\xec\xa9\xc8\x52\xa9\xab\xbe\x6d\x19\x90\x7b\x4e\x58\xd7\x13\x4a\x81\x0c\x3a\x2d\xfd\xfa\xf9\x2d\xdc\xcd\xf8\x72\x03\x49\x61\x0d\xf8\xff\xc4\x54\x2c\x37\x90\x96\x56\x69\xc1\xa6\xe1\x94\x30\x9d\xec\xad\x68\xc9\x85\x18\x5b\x6e\x29\x2d\xcd\x5a\x72\x04\xcb\x05\x5a\xf1\x67\x6b\xd8\xf9\x83\x8a\x51\xe7\x0f\xb2\x80\x6b\xff\xb0\x1c\x6f\xfe\xc0\x84\x9b\x4f\x99\xcc\xa4\x2d\x29\xd2\x68\x53\x76\x0d\x37\x3a\xf2\x10\x5a\x65\x1d\x1d\x74\x69\x66\xae\x13\x72\xe8\xb5\x94\x26\xd3\x54\x5a\x9b\x22\x5f\x98\x18\xa2\x3a\x6c\x4e\xa9\x0c\x36\x29\xcc\x7b\x72\x97\x71\x52\x58\xbf\x8c\x27\x2a\x59\x4d\x96\x15\x6e\x08\xc9\x09\xa4\xb1\x8c\xa4\x89\x90\x69\xce\x95\x65\x85\xb4\xe6\x14\xe9\x27\x67\x53\x4c\x83\x4a\x83\xae\xa0\x54\x29\xa2\x00\x10\x86\x59\x2e\x9e\x76\x50\x17\xa4\xbf\x2e\xab\x3b\xe1\x69\xf8\x2d\x69\x7c\xcf\xcb\xa1\x59\x9f\xe9\x26\x72\xc9\xbc\xac\x8b\xbf\xd2\x74\xf7\xe6\x41\xed\x5a\x88\x48\xe0\xa0\xac\x86\x7a\xb4\x52\x8f\x9e\xac\x9e\x53\xe4\x59\x23\x95\x56\x1d\xa9\x34\x37\x52\xdd\x15\x23\x95\x26\x23\xd5\x0c\x53\x3a\x68\x64\x63\xb4\xca\x50\xca\x0b\x6a\xb3\xa4\x25\x1b\x7d\x60\xe5\xeb\xbb\xdd\x7a\x3c\x96\xe6\x40\xea\x99\x71\x9f\x72\x04\x3a\xff\xb5\xd7\xb9\x43\x6e\x88\xc6\x91\x3f\x09\x22\x74\xfc\x63\x2e\x63\xd3\x5a\x9c\xcf\x60\xc1\xeb\x86\xa5\x75\xc6\xa9\xb3\x16\xed\x66\x22\xb6\xc1\x41\x95\x32\x5e\x21\x56\x0a\xd8\xe7\x6e\x4f\xa9\x18\x13\x86\x38\x81\xa5\x46\x21\xea\xa9\x9c\xf6\x02\x81\xcf\xa9\x28\x6b\x59\xd2\x51\xe1\x48\xe5\xb6\x03\x95\xf5\x3b\x7d\x61\x37\xc4\xd8\x7b\x20\x82\x6f\x76\x44\x57\x57\xda\xcd\x15\x09\xe2\x66\x67\x18\xc8\x4a\xee\xe8\x66\xba\x6e\x36\xe4\x6a\x7d\x4b\xda\x76\x73\x7a\xee\x04\xf7\x22\xae\x29\xda\xce\x67\x51\xcc\xdf\x13\xc6\x22\xc6\x97\x8d\xb7\xca\x7f\x4a\x62\xb3\xf7\xda\xb2\xca\xb2\xef\x34\xd8\x7c\xae\xd2\xea\xeb\x28\xbc\xa6\x01\x4a\xab\x4b\xa3\x58\x16\xb2\x46\xd4\xf7\x49\x68\x99\xd9\xc4\x58\xf1\x19\x30\xab\x94\xdf\x1c\x28\x09\x4e\x59\xfd\xf7\x2b\x8c\x61\x0c\xb7\xd1\x1a\x1d\x55\x67\xb7\x50\x36\x78\x9b\x15\xd4\x80\xbb\x05\xb2\x31\xd3\x59\x10\xfc\x9b\xb0\x08\xa5\x11\x66\x5c\x54\x2a\x90\xed\xa6\x25\x89\xde\xe5\x12\x65\x62\x13\x4c\xa9\x9b\x8a\x91\xd2\x4e\x62\x64\x39\xcc\x8b\x81\x5e\x35\x52\x0a\x9a\x3e\x33\x5c\xd6\x63\x15\xbb\xb1\x7a\xb8\xae\xe8\xc7\xd6\x98\xe9\xa4\xd1\xb2\x0d\x6f\xb7\x98\xe9\x64\xd1\xb2\x1b\xe0\x96\x98\xa9\x27\x53\x19\x93\xf1\x1e\x4b\x59\x90\xca\xf2\x95\xab\xce\xd5\x72\xc2\x02\x35\x4c\xc6\xf2\x40\xa1\x9b\x4a\xa4\xf1\x33\x95\x5a\x99\x39\x31\x4d\x28\xb2\x27\x3b\x66\x20\x52\xe0\x07\x93\x8a\xef\xbe\x46\x2c\x25\xd9\x12\xa4\x98\x65\x97\x0a\x37\x67\xc6\x56\x59\xa6\x9a\xfa\xb5\x66\x9b\xe9\x1e\x9b\xac\xf4\x2e\xce\x3c\xd3\xc5\x0c\x8f\x65\xba\x2b\x77\xb8\xcc\xa0\xea\x46\x9c\xca\x17\x0e\xe8\x5d\x2c\x37\x21\x42\x35\x98\x14\x02\x52\xff\x93\x97\x75\x96\x71\x54\x6e\xdb\x6c\x74\x5c\x78\x99\x66\x07\xf4\x81\xd8\x5a\x48\xbe\x74\xa3\xd9\x0b\x52\x0c\xad\xc9\x3d\x9a\x1e\xb4\x92\x34\x94\xcd\x3e\x70\x97\xbc\x77\x48\xb7\xbf\xd4\x9b\x93\xf5\x3a\x9a\xd1\x8e\xac\x00\x02\xcd\x1e\xb2\x68\x12\x5b\xe9\xea\x28\xdb\x08\xcf\x9e\xda\x54\x40\x8c\xe6\x53\x61\x31\xca\x88\x32\x7b\x4b\xa3\x24\x68\x58\xdc\xf6\x96\x90\xf9\x7d\xbe\xe6\x8a\xf7\x58\xfd\xc2\x3d\x94\xc0\xc8\xc5\xb3\xa6\x53\x2c\x4f\x66\x76\xd3\x9a\xda\xcf\x5a\xda\x8b\x97\x4e\x93\xfd\xf4\x57\x6e\x99\x2f\xbf\x46\x03\xd0\x9c\x57\xfa\x22\x34\x06\x39\x28\xa1\xae\xd8\x9c\x2c\xef\xf5\xa1\x4b\xc2\x79\x3b\xf3\x92\x8f\x24\x1e\x92\x98\x59\x1c\x6c\x43\xd2\xf1\x8d\xae\x22\x46\xb6\x41\x15\x77\x42\x51\x69\xd7\x7f\x2f\xbb\xdf\xc2\x84\xf5\x2c\xb3\x87\x8d\xb3\x3e\x8f\x02\xe0\xc8\x57\xb2\xff\x75\x6e\x94\x3c\xd3\xfe\xdb\xa0\xb6\xd9\x3f\x7b\xe3\x92\x3d\x49\x4a\x61\x5e\xc3\xfd\x80\xe4\xd8\x59\x67\x29\x49\x6b\xfa\xa9\xfa\x6f\x8f\xa2\x29\x61\x4b\x8c\x0f\x08\xe9\x99\x20\x75\xc7\x72\x4d\x8b\x51\x51\xaf\xdc\xbd\x7c\xb8\x6e\x46\x35\x35\xe4\xbe\x64\x55\x99\xbb\x19\xaf\x2a\x22\x37\x0f\xab\xca\xc8\x6d\xc0\x92\x8c\x93\xf6\x5c\x75\x34\x3b\x27\x25\xd2\xe3\x14\xeb\x22\xa8\xb4\x05\xad\x5f\x2f\x88\xdc\x29\x0c\x47\x79\xe0\x20\x9d\x5b\x2b\xec\x6b\x27\x2f\x91\xaa\xf2\x48\x7b\xf0\x79\x68\x04\xda\xc9\x58\xa4\x4d\xf9\x03\x9a\x70\x3c\x24\xbb\x93\x89\x52\xf4\xcb\xe7\x92\xf6\xe0\xb5\xa9\x04\x34\xa8\x89\x49\xd6\x20\xbd\x39\x22\x81\xd0\x7a\x2b\x3c\xa2\xa2\xbc\x16\x1a\x59\x83\xf4\x32\x2c\xa2\x1a\xdb\x87\x44\x0a\xf3\x6f\x7e\x4b\x25\xf1\x0e\x93\x53\x59\x7e\x7a\x5e\x63\x0c\x31\x9a\x4a\x73\x58\xe8\x17\x75\xc2\x2f\xb1\xc1\x03\x3a\x44\x56\x5b\x1d\x0d\x05\x6d\x2a\x0b\x1f\x21\xeb\x2a\x9a\x84\x42\x9e\x23\xab\x2e\xfd\x01\x59\xea\xed\x02\x2c\xa1\x58\x55\xd9\x63\x64\xdd\xcb\xf7\x02\x7b\x88\x7e\x54\xa2\xfe\x3e\xa2\xdf\x21\xbd\x3f\xa2\x65\x6b\xe0\x3a\xf3\xde\xab\x7e\xaa\xa3\xd5\xa9\xce\xfd\x4c\x54\xe7\xe6\xa9\xce\x85\xe0\x61\x03\xec\x11\xbe\x3b\xd5\xb9\xff\x1b\x54\xe7\xbe\x3a\xd5\xb9\xb5\x51\xdd\x1a\xa4\x37\x47\x75\xee\xdb\xa1\x3a\xb7\x36\xaa\x5b\x83\xf4\x32\x54\xe7\xee\x4b\x75\x6b\xd7\x4b\xe9\x14\x51\x79\x75\xd2\xdd\x41\xa2\x30\x23\x98\x13\x51\x1f\xd2\x97\x13\xf2\xc5\x14\x72\x43\x67\xdd\xd6\xa6\x6c\xe5\x06\x35\x4b\xa7\xfb\xfa\x4d\xa7\x10\xb8\xf1\x2e\x8b\xb1\xcd\x8a\x64\x6f\x80\x36\xe9\x92\xd6\xba\x41\x35\xb4\xa9\x36\x93\xdf\xa7\x9b\xc5\x9b\x1a\xbe\x8c\xf8\xea\x56\x9f\x4f\x91\xf4\xa5\x28\x52\x9e\x59\xac\xca\x91\x57\x64\xfc\x79\x48\x52\x36\x94\xb1\x24\xdc\x45\x6c\xb6\x3b\x43\x6a\x35\xbf\x7c\x8a\x84\x7e\xbe\x36\x47\x4a\x15\x6a\x22\xc9\x75\x50\x6f\x8e\x25\x65\x78\xbd\x15\x9a\xd4\xa1\x5e\x0b\x4f\xae\x83\x7a\x19\xa2\xd4\xad\xbd\xea\xce\xa2\x7c\xd3\xb4\xc7\x6e\xe4\xd7\x7b\xc8\xf8\x55\x65\xd4\x3a\xab\x76\x32\x49\xde\x09\xd6\xcf\x26\x31\xaf\x4c\x26\x5d\xfe\x79\xb8\x04\xda\xc9\xa8\xa4\xcb\x22\x58\x6c\xf1\x2a\xeb\x2d\xa5\xe7\x97\x4f\x26\x5d\xfe\xda\x5c\x02\x1a\xd4\x44\x25\x6b\x90\xde\x1c\x93\x40\x68\xbd\x15\x22\x51\x51\x5e\x0b\x8f\xac\x41\x7a\x19\x1a\x51\x8d\x7d\xbe\xad\xc5\x77\x5e\x56\xea\x11\xb9\x32\xab\xb4\xed\xd7\xe5\x6a\xc7\xb1\xeb\xb6\xab\x6e\xbf\x49\xc9\x23\x64\xdd\xef\x27\xf9\x01\x24\xef\x3a\xb7\x55\x77\x29\xa5\xe8\x31\xa8\x7b\xbb\x4f\x9b\x1f\x91\x75\xed\xee\x23\xf8\x1d\xb2\x7e\x71\x6f\x7b\xfb\x88\xfe\x0d\x59\xb7\x9d\xbb\x7d\x24\x4f\x90\xd5\x73\xaf\x3a\xf2\xe3\x8c\xaa\xa2\x7f\x47\xd6\xc5\xcd\xd5\xd5\xd9\x75\x5b\xdb\xb7\x06\x9e\x8e\xf9\x0b\xd0\x34\xaf\x78\x1c\x28\xe6\x39\x2e\xbf\x5b\x3e\x08\x14\x73\x73\x0e\x28\xa6\x72\x37\x39\xe6\x0d\x88\xeb\x0d\x5f\xb5\x18\x7e\x96\xa7\xb2\x93\xba\xbb\x9c\xab\x31\xf5\xef\x4b\xf5\x0f\xd2\x59\x94\xab\x4f\x57\x2a\x81\x75\x19\x8d\x18\x15\xb3\x4a\x42\xd7\xd4\xdb\xf1\x2c\xb5\x11\xb8\xa3\x7f\x55\x13\xb8\x25\x9c\xc2\xa4\x25\xd6\x0b\x99\x39\x27\xdf\xf9\x1e\x2d\x1d\xf1\xce\x3f\x2c\x9d\xff\xde\xef\x30\x52\x12\xf9\xd2\xfb\xa3\xfc\x69\x2c\xf3\x41\x3e\x84\xcf\x59\x40\x87\xa1\xf9\x4e\xcb\x3a\xd0\x59\x58\xf2\x49\xd7\x25\xc8\xae\xfa\xac\x4b\x96\xef\xf8\x69\x97\xea\x8f\x12\x30\xdf\x9a\x99\xc3\x84\xf9\x8f\xc4\x30\x23\xc2\xc0\x1d\x2c\x93\xe7\xa9\xce\xf7\xf4\x1a\x21\x31\xc1\x7f\x03\x00\x00\xff\xff\xb9\xcf\x5a\xaf\xe1\x44\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 17633, mode: os.FileMode(384), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

