// Code generated by go-bindata.
// sources:
// index.html
// DO NOT EDIT!

// +build bin

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5c\xeb\x73\xe3\x36\x92\xff\xee\xbf\x02\xc7\x4b\xee\x43\x2a\x92\xce\xf3\xb8\xcb\x4e\x24\x6f\xd9\x96\x33\x61\x65\xec\x51\xf9\x31\xbb\xd9\x2f\x29\x88\x04\x29\xc4\x14\xc9\x80\x90\x3c\x8e\x4a\xff\xfb\x36\x1e\xa4\x48\x8a\x94\xf8\xb2\x63\xed\xcc\x54\x8d\x45\x82\xe8\x46\x37\xd0\xf8\x75\x83\x68\x62\xf8\x5f\xe3\x8f\xe7\xb7\xbf\x4e\x2e\xd0\x8c\xcf\xbd\xa3\x93\xa1\xfc\x41\x08\x2e\x08\xb6\xe1\x42\x5c\xce\x09\xc7\xc8\x9a\x61\x16\x11\x3e\x32\x16\xdc\xe9\xfd\x60\xa4\x1f\xcd\x38\x0f\x7b\xe4\x8f\x05\x5d\x8e\x8c\x7f\xf6\xee\x4e\x7b\xe7\xc1\x3c\xc4\x9c\x4e\x3d\x62\x20\x2b\xf0\x39\xf1\x81\xce\xbc\x18\x11\xdb\x25\x19\x4a\x1f\xcf\xc9\xc8\x58\x52\xf2\x10\x06\x8c\xa7\x2a\x3f\x50\x9b\xcf\x46\x36\x59\x52\x8b\xf4\xe4\xcd\xf7\x88\xfa\x94\x53\xec\xf5\x22\x0b\x7b\x64\x74\x1c\x33\xe2\x94\x7b\x44\x5e\xc3\xdd\x6a\xd5\x1f\x63\x8e\xfb\x3f\x07\x11\x17\xcc\xd7\x6b\x04\x57\xc0\x72\x38\xd8\xd4\x3b\x19\x7a\xd4\xbf\x47\x8c\x78\x23\x83\x42\x93\x06\xe2\x8f\x21\xc8\x41\xe7\xd8\x25\x83\xd0\x77\x0d\x34\x63\xc4\x19\x19\x03\x07\x2f\x45\x85\xbe\x28\xdb\x22\x8d\xf8\xa3\x47\xa2\x19\x21\x3c\x66\xc0\xc9\x67\x3e\xb0\xa2\x28\xa1\x87\xeb\x01\xf5\x6d\xf2\xb9\x2f\x4a\x35\x87\xc8\x62\x34\xe4\x69\x92\xdf\xf1\x12\xab\x52\x23\xdf\xcf\x28\x62\x16\x30\xfa\x3d\x1a\x30\xd1\xc3\x8c\xc0\xd5\xab\xfe\x71\xff\xf8\x87\xb8\xa0\x3f\xa7\x7e\xff\x77\x68\xd3\x06\xc5\x7b\x73\x4c\x7d\x55\x7f\xb5\xa2\x0e\xea\xdf\x9e\xbe\x7f\x7f\x31\x9e\x52\x7f\xbd\x86\x7a\x5a\x18\x45\xb1\x5a\x11\x2f\x82\x1e\x82\x16\x06\x73\xea\xdd\xeb\x87\xf2\x81\x6f\xaf\xd7\x46\xdc\xa9\xc3\x81\x12\x4e\xcb\x3f\xd0\xa6\x71\x32\x9c\x06\xf6\xa3\x2e\xf4\xf1\x12\x59\x1e\x8e\xa2\x91\x01\x97\x53\xcc\x90\xfa\xe9\xd9\xc4\xc1\x0b\x8f\xc7\xb7\x11\x07\xc3\xb0\x7a\x3c\x08\x0d\xc4\x02\x18\x47\x51\x9d\xba\x50\x08\xe3\x90\x34\x68\xd3\x84\x9b\x30\x09\xd0\x89\xb0\x9e\xe3\x2d\xa8\x1d\xd7\xc9\xd5\xd2\xdc\x85\x64\x84\x81\x19\x79\xbd\xb9\xdd\x3b\x46\x21\xb6\x6d\xea\xbb\x3d\x8f\x38\x30\xf8\xf1\x10\xc4\xf4\xd3\x05\xe7\x81\x9f\x63\xc1\x03\xd7\xf5\x88\x60\xe1\xe1\x30\x22\x76\x3c\xb6\xaa\xb2\xee\x65\x55\x49\x08\xa7\x6a\xc5\xc5\x98\xb9\x62\xe8\xfe\x5b\xf3\x4a\x1e\xa7\x9a\x95\x16\x10\xe2\xa4\xd9\x88\xf5\x02\xdf\x7b\xcc\x56\x81\x4a\xb7\x4a\x8e\x4d\xef\xc0\x28\x00\xd9\x0e\x4e\xc2\x52\x7b\xd0\xec\x16\xab\x17\x43\x39\x50\x9d\x98\x19\x04\x8c\xa8\x3d\x32\x66\xd0\xb3\xd9\x71\x98\x32\xec\xdb\x50\x46\xc1\x50\xe4\x4c\x1b\x19\x73\xfc\x59\x61\xc1\x3b\x74\xfc\xca\x9a\x25\xb3\x0c\x86\x48\xcc\x6d\xe0\xa2\x67\x3d\xda\x86\x81\xdc\x10\x6c\x57\x18\x0e\x70\x46\xae\x01\x58\x57\xce\xd6\x84\xa0\xf9\x91\xdd\x98\xa9\x2a\x40\x3b\x86\xfe\x64\xb8\xf0\x52\x5a\xc6\x55\xe1\x27\x6f\x20\x1e\x8d\xeb\x61\x8b\xd3\x25\xd9\xee\x5e\xac\x95\x17\xd8\x1b\xbd\x1b\x0c\x1e\x1e\x1e\xfa\xa0\x0b\x83\xff\x7d\x2b\x98\x0f\x14\xea\x01\x46\x78\x04\x47\x24\x1a\x78\x98\x93\x88\xff\xdd\x9a\x87\xa3\x58\xf7\x4f\x17\xd7\x37\xe6\xc7\xab\x7c\xdf\x48\xfe\x31\x68\xe2\xed\x71\xf5\x68\xa9\xb0\xf1\x14\x02\x4c\x43\xa9\x6b\x00\x25\xe6\x52\x5f\x4c\x40\xe4\x50\x16\x71\x59\xba\xad\x93\x15\xd8\x24\xc7\x4a\x14\x01\xe2\x6e\x75\x80\x14\x31\x19\xe6\xb1\x79\x73\x7b\x6d\x9e\x89\x41\x14\x04\x1d\xcb\xdc\x56\x50\x1a\xfe\x8f\x3f\x8d\xc2\x1f\xd5\xc4\x11\x46\x04\x36\xbd\x55\x2d\x65\x94\xe6\x44\x68\xb2\x35\x7f\xb4\x2e\x2f\x50\xc3\xc5\x96\x86\x8b\xdd\x1a\xde\x85\x9c\xaa\x49\x77\x40\x5a\x7a\x38\xaf\xa5\x87\x77\x6a\xf9\xe1\xb4\x03\x0d\x07\x0b\x6f\x17\x2e\xa5\x6e\xe1\x06\x94\xd0\xfe\x78\xbf\x07\xcd\xd4\x61\xc1\x43\xde\xb3\x0a\x05\xe7\x64\x0e\x4e\x4d\xc5\x71\x09\xce\x09\xd7\xfa\x26\xf6\xb1\x81\xe3\x40\xb4\xd2\x3b\xce\xe0\xdc\x6a\xc5\xc9\x3c\x14\x90\x83\x0c\xf0\xff\xd0\x76\xf4\xee\x9d\xba\xf8\x0d\x7a\x83\x78\xc0\xd7\x40\x7d\xd1\x3b\xc5\x28\x6b\x3b\xc5\xcd\xbe\x6d\xd7\xac\xed\x14\xb6\x9a\xe9\xc3\xfd\x9d\x62\x85\x8b\x27\xe9\x14\xe0\xbb\xb3\x53\xe8\xd3\x74\x0a\xed\xa4\x53\xc2\xa8\x58\xb8\xe3\xff\x6d\x27\x5d\x18\x75\x21\xdd\xd2\x7d\x1a\xe9\x96\xee\x7e\xe9\x92\x9b\x3d\x91\x7f\x4c\xb0\x84\xd8\x59\xc0\x07\x1a\xc5\xfe\x6d\xbd\xfe\x31\x1f\x82\xeb\xc8\x5b\x04\xe3\x72\xdd\xb6\x5a\x0d\xbe\x3b\xfa\x6e\xb0\x5e\xaf\x56\x4a\xbe\x94\xc0\x53\x0c\xcb\x2e\x5b\xac\x5b\x44\x18\x6c\x80\xb8\x3a\x78\x00\xf6\x3f\xc3\xaf\x58\x23\xf9\xe7\x1e\xb5\xee\x47\x2b\x3e\xa3\x51\x7f\x06\x91\x97\x47\x64\xc9\x1a\x64\x90\x5d\xb6\x5e\x8b\xea\xe7\xe2\x12\x19\x53\xee\x23\xf8\x1f\xc7\xf6\xc0\x12\x64\x39\x4a\x62\xc3\x0d\x89\xf1\xd9\xc3\x53\xe2\x21\xf5\x93\xd4\x3f\xd2\xbd\xdb\x3f\x13\xa2\xa5\x40\xf2\x44\xa8\x7c\x0b\x1d\xa3\xe2\xb1\x13\xbd\x12\xa9\xa6\x1d\xa3\xee\xec\x69\xd5\x4b\x84\x43\xad\x15\xad\xaa\x9e\xb6\x36\xc0\x06\x30\xed\xc8\x10\x75\x1e\x28\x9f\x21\x71\x07\x06\x2b\xac\x0f\xd8\x8b\x3f\x6a\x31\xb7\x5a\x41\xdc\xec\x12\xf4\x0d\xfd\x1e\x7d\x63\x05\x8c\xa0\x77\x23\xa4\xdc\xd1\xf9\xe4\xae\xff\x81\x46\xa2\x6f\x39\x03\xd9\xe5\xe3\xfe\x55\xff\x94\x73\xf6\x0b\x79\x44\x12\xd8\x80\xef\xf4\xb1\x77\xa5\x74\x86\xc5\xb5\x1d\xcf\x18\xe9\x4c\x65\x17\x23\x3f\x78\x60\x38\x4c\x94\xd3\x7c\x84\x76\xdc\x2e\xa5\x4a\x56\xbf\xb9\x8e\x5b\x44\x24\x24\xcc\x82\x68\x53\x45\x85\x6a\x25\xb5\x29\x1d\xc5\x0d\xdc\x45\x84\x49\xa9\x32\xcd\xaa\xd2\x94\x97\x3d\x79\x5a\x29\x6e\x1e\xa3\x6d\x21\x64\xe1\xf3\xc9\xf0\x0f\x4c\xf9\xb6\x10\xaa\xb4\x6b\x29\x7a\xd4\x5f\x12\x96\xac\x70\x0b\xa4\x31\x61\x32\x6d\x4b\xa3\x4a\x0b\xa5\x19\x70\x96\x32\xfd\xec\x4f\x95\x89\xa0\x90\x5c\x54\xfa\x26\xdc\x58\xf7\x04\x33\x3c\x17\xc3\x20\x1f\x0b\xf3\x0e\xa5\x65\xcb\x39\x7d\x15\xf8\x7f\x12\x16\x20\x28\x3b\x0f\x17\x3e\x32\x54\x25\xf9\xb7\x37\x0b\x40\x43\x03\x25\x4b\xb8\xde\x8c\xda\x36\xf1\x93\x29\x90\x7a\x13\x06\x92\xc7\xb0\xce\x67\x69\xc0\x4f\xee\xc4\x83\x3d\x53\x46\x56\x13\x76\x9b\x59\x49\x2f\x7c\x9a\x59\x12\x9d\x7c\x9b\x0b\x1d\x9b\xb4\x02\x86\xf9\xf4\x8d\x08\xc3\x7b\xfa\x56\x84\x41\xb5\x69\x65\xa0\xc7\x4e\x96\xc6\x2f\xb0\xf8\xe6\x0d\xd6\x2e\x5f\x1f\xa3\xaf\xf2\xf5\x7c\xe3\x7c\xa5\x01\xd5\xc1\x71\xdb\x99\x3e\xc2\x42\xfc\xb7\x9a\x60\x6e\xd3\xe8\x7e\x63\xea\xe3\x9f\x24\x93\x2c\x98\x8b\x2a\xfd\x31\x65\x57\x78\x4e\x36\x90\xae\xdb\xd3\xb0\x6e\x53\x26\x5e\x76\x6c\xc0\x3d\x81\x70\x45\x4d\x96\x57\xfa\x5d\x48\x02\x1c\xb9\x1a\x8a\x7f\x35\xa8\x8f\x89\x4e\x97\x98\x7a\x55\x49\xca\x07\x61\x03\x3d\x86\xea\x10\x81\xfd\x13\x55\xb2\x5e\xab\xa5\x59\xdc\x24\x3c\xb1\xeb\x09\x79\x1b\x70\x9c\x16\xb2\x15\x48\xc5\xa3\xdc\x00\xa9\x6e\xf1\x54\xa0\xd4\xd8\xf1\xd5\x0f\x47\xaf\x3a\x40\xab\xc2\x7e\x55\x2f\x4b\x89\xbf\x98\x8b\xe8\xc9\x10\xed\x7d\x92\x6f\xb7\x65\xc3\xf7\xe8\x18\x19\x63\xf9\x02\x1e\x5a\x93\x4a\x34\xe0\x01\xc2\x5f\x06\x0b\x9f\x8b\xf7\xa8\x8d\x99\xbc\x46\x86\xb4\x21\x60\x91\x1a\xbf\x86\xcc\xde\x20\xe3\x4e\xbe\xd6\xed\x80\xd7\x5b\x64\x48\xbb\xc9\x33\x6b\x05\x36\x19\x88\xe8\x02\x71\xa8\x1f\xd8\xed\x21\x47\x71\xa9\x86\x39\xaa\xee\x5f\x0a\x3a\xa6\xc3\x48\x65\x92\x3a\xa0\x63\x2e\x4a\x51\x47\x3c\xaa\x09\x3b\xa6\xec\xa9\xee\x70\x47\x8f\x75\x27\xc0\x73\xdc\x4d\x98\x14\xf7\x81\x9a\x4c\x29\x8f\xae\xc0\xa5\x24\x14\xd8\xaa\xad\x61\x64\x67\x75\x94\xef\x67\x59\x4d\x62\x47\x03\x3a\x01\x13\x0d\xc8\x24\x22\x74\x16\x7a\x64\xa7\x6f\x7b\x38\xa0\xcd\x02\x10\xea\x6c\xcc\xc8\x2c\x0a\x3f\xa8\xd3\xcf\xa2\x00\xcd\x44\x1e\x25\x08\xa0\xa9\x2a\xcf\x19\xa8\x3f\x26\x1e\xc7\xa6\x5f\x9b\xe4\xe3\x82\xd7\xa1\xa9\xd7\x42\x96\x79\xab\x39\x4c\x5b\xc7\x0e\xa6\x9a\xc2\x26\x4c\xe1\xd7\x5d\xaf\x74\x4c\x98\x83\xcc\xc1\xa5\xd3\x76\x3b\x82\x8f\xf7\xe6\xce\xcc\xdb\x1b\x04\x58\x8a\x22\x62\x05\x7e\x7a\x1f\xd7\xf4\x77\xc7\xf5\xc3\xdc\x2b\xf1\xe9\x70\x90\x2e\x39\x09\xa3\xc6\xcb\x8b\xfd\xc2\xc1\xc8\xfe\xe5\xd2\x71\x81\x28\xe8\xec\xd7\xdb\x8b\x1b\x34\x0f\xec\x85\x17\xa0\x37\xef\x5b\x74\xe0\x59\x4e\xc4\x6f\xdf\xbc\x7f\x72\x19\x6b\xf7\x63\x5d\x21\xdb\x80\x2c\xed\x36\xe4\xa2\x0e\x61\x2c\x60\x2d\x41\x56\xf1\xd8\x8b\xb2\xaa\xda\x57\x98\xad\x0d\xb3\x7a\x8c\x3a\xc1\xd9\x2e\xd6\x68\x1d\xe1\x6c\x09\xc4\xa6\xb7\x2e\xcb\xa6\x60\x07\x50\x55\x86\xa1\xcf\xd4\x7c\x31\x3a\x56\x69\xbc\x0b\x0c\x2c\xc1\xbd\x2e\x9a\x6f\x87\x6e\x69\x38\xea\x02\xde\x42\x6c\xdd\x13\xde\x12\xdf\x34\x93\xbd\x00\xa7\xeb\x7d\x45\xb8\xda\x08\x17\x0f\x53\x27\x10\xd7\xd1\x6a\xf0\x2b\xc4\x75\x12\x68\xfd\xb5\x40\x57\x2e\xc3\x8b\x80\xbb\x0c\x3c\xb5\xc7\xbb\x39\x99\x37\xd8\x7b\x05\xaa\xcd\x5c\xbb\xbc\xb8\xcc\xe2\x1c\x3c\xed\xff\x42\x7d\x7b\x03\x74\x22\xd5\x46\x41\xdc\x3d\x94\x17\x40\x5c\x4c\x52\x19\x4e\x04\xc1\x4f\xdd\xbf\x05\x13\x6c\x0b\xdf\xbc\xeb\x07\xf5\x04\xec\xf4\xbd\x3b\x30\x6c\xb7\x39\x78\x49\xe6\xcf\xbf\x39\x98\x9a\x3e\x62\xb8\xea\xd4\xdf\xf1\x8a\xea\x19\xde\x4d\xc5\x13\xa3\xfd\x14\x4b\xf2\x9f\x4a\x07\x4e\x64\xf2\x88\x7f\xd9\xa1\x9b\x6c\x76\x74\x61\x8c\x24\x17\x24\xff\x66\x73\x37\x4e\x10\xd2\x0c\xf6\x92\xcb\x14\x72\xea\xbb\x86\xde\xd2\x3e\x11\x7f\x86\x38\x4d\x2a\x92\x4a\x54\x76\xf6\xcf\x50\x37\x66\xb1\x4e\xe7\x92\x68\x5e\x12\x2e\x65\x2a\xc9\xd4\x0b\xac\xfb\x24\xc5\x47\xfd\x0c\xa7\xe5\xe2\xcc\xde\x18\xe2\x0f\x9a\xba\x3d\xea\x3b\x81\x91\x6c\xb0\x03\xf5\xf9\xe4\x6e\x38\x98\xa6\x79\xc5\x79\xba\x42\x4f\x9d\x6e\x24\x2e\x8b\x8c\x7d\x92\xdf\x03\xcf\x1b\xb6\x2e\x4f\xf4\x17\x80\xa5\x4d\x4a\x29\x05\x9e\xcf\xa1\xee\x26\x8b\x70\x33\xc7\x75\x2a\xd5\xab\xb2\x1c\x7d\xe9\x44\x0a\x5f\x9a\x22\xf1\x36\xd8\xc3\x8f\x05\xbe\x43\xe6\xf7\x6c\x65\x6f\x2b\x25\xec\x82\xfc\xca\xed\x0c\x49\x8d\xa1\x29\x38\xdd\x12\x4d\x0c\x91\xcb\x82\x45\xa8\x3d\x9d\xba\x89\xbf\x50\x50\x37\x47\x19\x01\x0a\x66\x45\x2e\xcf\x4a\x74\xf4\x07\x12\x45\x63\x94\x08\xbb\x87\x4c\x75\x8a\xc4\xa1\x80\x91\x14\xdd\x6e\x95\xb6\x72\xda\x0c\x61\x89\x81\x27\x3a\x46\xd8\x62\x66\x3c\xd2\xa4\x9b\xb9\xff\x4c\x63\x7c\x0d\x68\x51\x73\x88\xfd\xfe\x19\xc0\xca\x21\x8c\xf3\xd5\x06\x09\x6a\x8d\x73\x8a\xee\x05\xa8\xb4\x91\xed\x5f\xe0\x13\x2b\xcb\xb6\x6d\x83\xfb\x6c\x4e\x40\x95\xf2\x13\xf2\x66\x4f\xfa\x85\xce\xde\x4c\x72\x2d\xeb\xfa\x16\xdb\x69\xe4\x5a\xc4\x6e\x58\x73\xcf\x92\xa1\x6e\xe4\x58\x80\x43\x57\x7e\x45\x0a\xb3\xcb\xad\x8c\xc5\x86\xef\x22\xc2\x2e\x69\xe9\x5d\x64\x4b\x07\xee\x5c\xc6\xce\xe1\xf8\x16\x29\x6b\x7d\xd7\xa2\x55\xfc\x32\x3d\x0b\xd8\xe8\x61\x39\x16\x89\x04\xf5\xfd\x8a\x24\x7b\x01\x0a\x15\xb8\x95\x0a\xa2\xd5\xf7\x2a\xdd\xd9\x5b\x89\xa1\xdd\x10\x8f\x58\x7c\x8f\xd8\x99\x49\xf2\x3a\xdd\xc0\xd6\x07\x80\xbd\x90\x7a\x5e\xee\xbb\x54\x8f\x56\xc9\xcd\xd0\x5f\x06\xca\xb4\xaa\xbc\x85\x17\x8c\x45\x59\x16\x93\xe4\xa5\xd2\x50\x14\xaf\xdc\x37\x48\x95\xc4\x79\xd5\xa1\x38\xc0\xeb\x4c\xec\xc6\x95\x48\x93\xfe\x1e\xaa\x7d\x68\x91\xcb\x98\x11\x01\xc6\xd1\x3e\x8a\xf4\xfe\x7c\xf3\x88\x84\x36\x8b\x48\xcc\x56\x11\x89\xd9\x3a\x22\x31\xbb\x8b\x48\xcc\x7d\x11\x49\xf2\x86\x38\x6a\x19\x91\x98\xff\x01\x11\x89\x79\x40\x11\x89\xd9\x2c\x22\x31\xbf\xe4\x88\xc4\x3c\xb4\x88\xc4\x6c\x16\x91\x98\x2f\x37\x22\xa9\x20\xda\xd7\x88\x64\xc7\xfe\x60\x27\x21\x80\xe6\x35\x51\x7b\x38\x35\x43\x92\x6c\x4a\x46\x67\xf2\x00\xaf\x0b\xb9\x85\xde\x5c\x9c\xd7\x1d\x8a\xf3\xfa\x39\x23\xa4\xfc\x36\x72\x85\x10\x29\x97\x5b\x53\x89\xa2\x9b\xa0\x4a\x7c\x57\xde\x24\xaa\x52\xfb\x3e\x8d\xc3\xaa\x2c\x79\xa3\xb8\x4a\xb0\xe8\x2a\xb0\x52\xe2\xec\x8a\xac\xa0\x46\xc0\x1e\x5b\x46\x55\xe9\xcd\xb2\x83\x0d\xab\x40\x89\xc3\x89\xab\x94\xb0\xf5\x03\xab\x58\xc9\x2f\x33\xb2\x12\x76\x7a\x58\xa1\x95\x02\x83\xfa\xb1\x95\xa2\x7b\x01\x2a\x15\x04\x57\x55\x64\x7b\xd2\x5d\x84\x24\x39\xa0\xb9\x7b\x09\xa3\x46\xde\x65\x12\xb5\x71\x2e\x19\xea\x46\xbe\x05\x38\x74\xe5\x5a\xa4\x30\xbb\x3c\xcb\x84\x05\xb0\x5e\x8f\x5a\x2f\xd9\x65\x43\x07\xee\x5b\x26\xd1\xe1\xb8\x16\x29\x6b\x7d\xcf\xa2\x55\xfc\x32\x1d\x0b\xd8\xe8\x61\xf9\x15\x09\x04\xf5\xdd\x8a\x24\x7b\x01\x0a\x15\x78\x95\x0a\xa2\x3d\xa9\x53\x09\xa3\xb6\x3e\x65\xe9\x36\xf2\x29\x9f\xdc\x36\x3e\x25\x43\xdd\xc8\xa7\x00\x87\xae\x7c\x8a\x14\x66\x97\x4f\xf9\x84\x5d\x86\xc5\x69\x84\xad\x3c\x8a\x6c\xe6\xc0\x3d\xca\x27\xf7\x70\x3c\x8a\x94\xb5\xbe\x47\xd1\x2a\x7e\x99\x1e\x05\x6c\xf4\xb0\x3c\x8a\x84\x81\xfa\x1e\x45\x92\xbd\x00\x85\x0a\x3c\x4a\x05\xd1\x9e\xd4\xa3\x2c\xdd\x36\x1e\x25\xaa\x99\xa9\x1e\x42\xb8\x9e\x72\x3c\x37\xb2\xed\x6c\xaa\xba\xa8\xd2\x9f\x98\xe3\x4d\xaa\x7a\x18\x7f\x8c\x13\x52\x7b\xd7\x41\x61\x3a\xd3\x3b\xcd\xa4\x5a\x6e\x78\x42\x71\x97\xa3\x38\x4a\xa6\x8a\x7c\xaa\xcf\xfe\xaa\xc1\x70\xc2\x68\xc0\x28\x7f\xac\x49\x76\x45\xad\x8a\x69\xf4\x09\xc9\x0d\xfd\xb3\x2e\xc9\x35\x89\xa8\x2d\x73\xea\xcb\xc8\x44\xc6\x7d\x7c\x2a\x42\xd2\x0d\xb7\xb4\xec\xf8\x0c\x25\x7b\xf6\xbb\xa8\x56\x09\xf6\x71\xb8\xd3\x34\xbf\x3e\xb5\xaa\x7b\xce\xd3\x6c\x26\x91\x3c\xcd\x06\xec\xaf\xf5\xb1\x2f\x82\xd5\x0f\xc8\xb8\xeb\x88\xd5\xdf\x80\xd5\xcd\xc5\x75\xc3\xc3\x71\x04\x87\x57\xa0\xd7\x75\x27\xb2\xbc\x46\xc6\x95\xd9\x09\xa7\x37\xc8\xf8\x64\x5e\xdf\x76\xc2\xeb\x2d\x32\xae\x2f\x6e\x3a\x61\xf5\x7f\xc8\xb8\x35\x2f\x2f\x62\x5e\x7a\x32\x35\x64\xf6\xff\xc8\x38\xff\x78\x79\x79\x7a\x35\x8e\xb7\x61\x5a\x7c\x49\xa1\x71\xbb\xfd\x87\x14\xa9\x2f\x75\x80\x55\xfe\x6c\x3f\x79\x38\x65\xd1\x49\x7e\x6a\x87\xe6\x44\x5e\xc4\xc7\xa8\xd5\x68\x75\xe9\xca\x0d\x1f\x43\xf9\x8c\x7b\xf2\x28\x4e\x5c\x55\x45\x31\x8a\x65\x02\xb4\xb7\x09\x82\xe9\x93\xc8\x55\x80\x2f\xf7\xd8\x4a\xa1\xaa\x82\x14\x89\xf3\xd3\xde\x6d\x8e\xad\xd9\x06\xa4\x74\x2b\x97\x50\x28\xe8\x72\x1f\x64\x41\x69\xff\xee\x2e\xed\xe6\x96\xaa\xbe\xf6\x75\x8b\x05\x2d\xfc\x2a\x2b\xa6\x2b\x46\x60\xf9\xb8\xfc\x7c\x23\xf9\x78\xc2\x82\x25\xe0\x3e\xdb\x51\x05\xfc\x32\xdf\xc5\x42\xab\xe6\x50\x4f\xac\x2a\xf9\x6c\x1f\xde\x57\xe8\xcb\x08\x02\x08\x6b\x56\x25\x94\xa0\x0e\x22\x7f\xa0\xed\x91\xb4\x11\x67\x0b\x52\x32\xbd\x72\x96\x83\x32\x1c\x77\xd5\x4f\x26\x4a\x53\x1f\x16\x07\x58\x4d\x7d\x58\x6a\x1d\xd9\xd9\xa7\xb0\xe3\xdc\x47\x5c\x9b\x47\xc2\x76\x4a\x1f\xc6\x96\x53\x5a\x41\xda\x4d\xe9\xd3\x31\x65\xc4\xe2\x72\x23\xb0\xa3\x2f\xc2\x12\xb3\x69\x81\x64\x09\xe4\xae\xd3\x27\xf9\x7e\x80\x92\xbd\xa7\xf9\x6a\x0c\x13\x75\xeb\x1d\x22\x9c\x03\x7b\x61\x04\xb3\x34\x70\xea\xf3\x9e\x80\xf7\xa9\x47\x5d\xff\x5c\x95\x2b\x70\x2b\x94\x31\x73\xac\xb0\x28\xd7\x24\xf1\x72\x20\x2b\x65\x0e\xa7\xc5\x49\xc4\x98\x11\x9e\xa6\x91\x9d\x98\x3e\x4c\x15\xeb\x7e\x9d\x25\x0a\xfe\x3b\x00\x00\xff\xff\x5d\x0b\x8d\xdf\xcc\x67\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 26572, mode: os.FileMode(384), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

