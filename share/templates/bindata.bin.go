// Code generated by go-bindata.
// sources:
// index.html
// DO NOT EDIT!

// +build bin

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5d\x7b\x6f\xdb\x38\x12\xff\xbf\x9f\x82\x2b\xb4\x87\x76\x51\x49\x89\x93\xee\xf5\xba\xb6\x0f\x6d\xe2\xeb\x19\x97\xa4\x46\x93\xf4\x6e\xb1\x58\x1c\x68\x89\xb6\xd9\xc8\x92\x56\xa4\xf2\x38\xc3\xdf\xfd\x86\x7a\x3f\x2d\xf9\x25\xbb\x49\x0a\x24\xb5\x49\xce\xeb\xc7\x21\x39\x33\x94\xe3\xd9\x4c\x27\x23\x6a\x12\x24\xf9\xff\xff\xd7\xb5\x39\x9d\x12\x69\x3e\x6f\x33\x1b\x9b\xdd\xd9\x4c\x39\xc5\x1c\x2b\x7e\x33\xb4\xaa\x41\x33\x31\xf5\xf9\x3c\x47\x3d\xb1\x18\x37\xb1\x4f\x8f\xd1\xc4\x21\xa3\x8e\xa4\x4a\x88\x53\x6e\x90\x8e\x14\xf6\xa2\x90\x6b\xd8\x30\x9f\x4b\xdd\x7c\x5b\x5b\xc5\xa5\x82\x0c\x2c\x89\xd6\x97\x36\xfa\xd0\x41\x3e\xa1\x8d\x1d\x3c\x65\xf3\xf9\x8b\xb6\x4e\x6f\x91\x66\x60\xc6\x3a\xd2\xd8\xa1\xba\x3c\x34\x2c\xed\x06\xb4\x91\xb9\x65\x4b\xdd\x17\x08\x25\x47\x68\x96\x21\x1b\x0e\x32\xb0\x33\x26\xf2\x21\xe2\xe4\x9e\xcb\x0e\x1d\x4f\xb8\xd4\xf5\x86\xcd\x66\xde\xc0\xf9\xbc\x23\xcd\x66\x74\x84\x5e\xda\xca\x19\x36\x95\x0b\x32\xc6\x9c\xde\x82\x9a\x6c\x62\xdd\xc9\xe2\xd7\x84\xea\x04\xf4\x35\x18\x34\x8a\xd7\xc9\x46\x61\x84\x27\x1a\x84\x4f\x0e\x43\xd9\x93\x63\x5f\x9e\x75\x4b\x9c\x91\x61\xdd\x81\x48\x1c\x82\x75\x66\x61\x1d\xe1\xdb\x31\xd2\x29\xb3\x0d\xfc\x80\x2c\x98\x02\xcb\x64\x12\x68\xf4\x4f\x00\xf6\x0a\x34\x09\x94\x99\xcf\xbb\xde\x6c\x25\x75\x0d\x65\xcb\xe2\x17\x82\x97\x9c\xc0\x10\x8d\xc8\xb6\x43\x10\xc8\xc2\x5c\x36\xc8\x08\x8c\x54\x14\x05\x05\xb3\x1a\x8a\x14\xc0\xfb\xaa\xaa\x93\xc3\x6e\x5b\x05\x18\x3c\xd4\xa2\x17\xa5\xf0\x1d\x6e\x0d\xb4\xc2\x39\x0d\x3a\xa1\xdb\x35\xc2\xde\x29\x31\x5d\x14\x59\x2f\x5e\x44\xa3\x60\x9c\x41\xe3\x37\x69\xae\xd4\xb4\x5d\x2e\x8f\x1d\xcb\xb5\xa5\xe4\x98\xd2\x51\xb2\x81\x87\xc4\x40\x6c\x8a\x0d\xc3\x9f\x46\xd3\xba\x73\x30\x50\xeb\x04\xe6\x2b\x42\xab\x9a\xd1\xd0\xe5\xdc\x32\xbd\xc9\x0f\x7a\xfd\x96\x80\x37\x23\x9a\x65\xea\xd8\x79\x10\xae\x80\x87\x06\xd1\xc5\x6a\xf1\x20\xd5\xfd\x55\xb2\x82\xac\xd9\xec\x8e\xf2\x09\x3a\x23\x8c\x9d\x46\x9e\xa4\xa3\xb4\xe4\xa4\x55\xb0\xb0\x50\xea\x1f\x68\x6b\x99\x27\x06\xd5\x6e\x3a\x33\x3e\xa1\x4c\x99\x60\x53\x37\x88\xd7\x32\xf7\xd7\x3e\xac\x69\xe1\xaa\xf3\x79\xc2\x21\xa0\xed\xc4\x7f\x99\xe1\x87\x90\xd8\x03\x3e\x61\x7d\x4c\x3c\x02\xe5\x0a\xa4\xa7\x76\x81\xb4\x81\x2b\xdb\x7c\x6e\x39\x64\xaf\x6c\xf6\x0d\x45\xb1\xf5\xb5\x6d\xce\x34\xb4\xd5\xa4\x7f\x37\xe3\xec\x8e\x75\xc7\x1a\xf1\x75\x53\xf9\x38\x64\x96\xe1\x72\xb2\x09\xa7\xbf\x88\xb7\xcf\x8c\x03\x30\x57\xd3\x60\xc0\x23\x76\xfe\xbd\xb4\x7d\x2b\x8b\xa0\xad\xba\x46\x78\x94\x89\x41\x85\x87\x13\xf9\x13\x65\x1c\x0c\x1d\xf8\x87\x51\x9d\x33\x08\xc1\xd9\xcd\xa9\x86\x01\x3c\xee\x50\x9b\xc4\x67\x52\xf1\x70\x3e\x21\x18\x9c\xda\x3f\xb0\x83\x6e\x72\x0f\x6f\x74\x04\x67\xa9\x3f\x0f\x32\x9c\xa3\x03\xe2\x50\x4b\x0f\x4e\xe6\x8a\xd1\xa9\xa8\x05\x7d\xc3\x86\x4b\x16\x13\x82\xfc\xa0\x3f\x89\x9d\x87\x86\x1f\x4c\x41\x80\xa0\x43\x24\x10\x41\x3f\x9b\x39\xd8\x1c\x13\xf4\xd2\xc0\x71\xc4\x15\x0c\x52\xce\x28\x13\xbe\x9a\xc1\x36\x79\x4c\x57\x5a\xfb\xa2\xc8\x8d\x63\xab\xd0\x1d\xd5\xf9\x44\x3e\x72\xc8\xd4\xdb\x0f\x0c\xac\xf8\xf8\xcc\xe7\xd3\x60\x66\x57\x00\xca\x67\xe4\xc1\x15\x45\xb6\x25\x0c\x20\xc6\xc9\x60\x96\x76\xcd\xe4\xbb\x50\xa1\xf8\x77\x1c\x3c\xa5\x68\x73\x51\xed\x14\xcc\xdb\x5d\x58\x7b\x4e\xa6\x0d\xc4\xb5\x20\xc5\xf2\xb7\xf7\x45\x51\xad\xd0\x65\x53\x61\xad\x2f\x71\x2b\x41\xed\xba\x90\x3d\x47\xb5\xf9\x93\x1e\x30\xdd\x68\x58\x2b\xf8\xed\x3e\xc6\x6b\x38\xae\xdd\x0f\xa3\x9f\x03\xdb\x5a\xee\xbe\x9d\xc8\x56\x30\xde\x9f\xf0\xae\xe1\xd0\x76\xbf\x8c\xdf\x75\x6c\x9b\xf2\xb1\x7d\x08\x6e\xc3\x23\x79\xf9\x98\xed\xca\xe2\xd8\x58\x85\xf0\x9a\x91\x95\xa2\xe9\x7f\x38\xa4\x22\x98\x2e\x95\xf7\x6a\xcd\x20\x7c\xea\xa1\x94\x8f\xc1\xa1\x3d\x8e\x0f\xfd\x41\x9b\x88\xc1\x61\x3b\x02\x66\xca\xbf\xa8\xa9\x57\x85\xc3\xa5\xf1\xb4\x60\xe0\x4d\xd1\x5a\x1c\xc4\x5c\xad\xc5\x40\x4c\x5a\x86\x41\x02\x95\x85\x4c\xd0\x70\x2c\xbb\x8c\xd8\x1a\x97\x90\x0e\x00\x07\x6f\x3a\xb1\x6a\x03\x0d\x90\x4e\xea\xea\x35\x54\x4c\x76\x33\x09\x84\x3e\xda\x61\xfe\x70\x3a\x6a\x20\x7d\x38\xa5\xec\x06\xb9\x0c\xc3\x3a\xa8\x48\x21\x40\x9d\x4d\x65\x10\xb1\xd0\xad\x64\x11\x6b\x02\xf7\x9c\x44\xe4\xa3\xaa\xd3\xd1\x46\x73\x08\x60\xb7\xfb\x68\xba\xe1\x14\x62\x2f\x6c\x7e\xce\x20\xea\xf8\xfa\x76\x12\x08\xe0\xbb\x3f\x21\x74\xc3\xf9\xc3\x5e\xd9\xbe\xeb\xf4\x21\xe9\x60\x0d\x64\x0f\xb3\x99\xfa\x33\xb2\xad\x1b\x82\x6c\xd7\xa1\xa3\x07\x8d\xb1\x0f\x29\x12\xdd\xb1\x6c\xb1\x3a\x53\x87\x2d\x76\x08\x44\x6c\x6a\xe0\xfb\xe8\x67\x35\x78\x84\xa1\x2a\x72\x0c\x17\x6b\xe0\x04\xdf\x0c\x6a\xde\x44\x4e\x70\x83\x0e\x91\x74\x4a\x6e\xa9\x46\xd2\x93\x5d\x6f\xa2\xcf\x80\x57\xd1\x64\x8b\xf6\xa2\x09\xef\x06\x7d\x81\x87\x67\x42\x17\xe1\x25\xc2\xca\x80\x32\x8e\x26\x23\x67\x58\x26\x62\xae\xb0\xbb\x85\xa4\x73\xcb\x35\x39\xec\x32\x8f\xd2\xf0\x54\x44\x5b\x82\xc1\x2f\x48\xf2\x72\x99\xa7\x8b\xc0\x3b\x24\x89\x5c\xec\xe9\x02\x70\x84\xa4\x8f\xb7\x98\x3e\x61\x17\x38\xf6\x5c\xe0\xd5\x8f\x0f\x40\x65\xb9\x05\xc2\xaa\x9b\x6b\x91\xe4\xe5\x2b\x2e\xfa\x28\x4e\xa8\xa3\x61\xeb\xd7\x5c\xb2\x69\x2e\x84\x73\xfa\x48\x81\xf3\xe6\x02\x4f\x2b\xaf\x24\xcb\x98\xa0\x80\x0b\x75\x56\xe7\x92\xac\x87\x8c\x1d\xfc\x90\xb1\xc4\x4f\x93\x13\x35\x17\x90\x57\x54\xf5\x09\x72\xf6\xbe\x69\xe9\x04\x22\x27\x6f\x2f\x0d\xc7\xfb\x8d\x31\x41\x33\x5a\x16\x54\x96\xd2\x4a\xba\x62\xbb\x8b\x74\x74\x53\xc3\x9b\x51\xd1\xdb\x6f\x16\xea\x38\x72\x08\x89\x75\x1c\xa5\x6a\x5d\x4b\x96\xbc\xca\xf4\x5c\x50\x05\xf3\x51\xf4\x8b\x60\x75\xf0\x2e\xa8\x8e\xe5\x20\x7f\x95\x82\x3c\x4d\xb1\x07\x65\x35\xcd\x76\x77\x58\x57\x3b\x19\x5c\x37\x50\x58\x03\x29\x55\x15\x35\xa1\xc8\xa6\x4a\x6a\xc0\x6b\x2b\xb5\xb4\x75\xc1\x7a\x2e\xa6\xe5\x0b\x0c\x80\xe9\x46\xab\x69\x82\xdf\xee\x4b\x4b\x0d\x97\xd3\xf6\xc3\xe8\xe7\x7a\x5a\x2d\x77\xdf\x4e\x41\x4d\x30\xde\x9f\xaa\x52\xc3\x15\xb5\xfd\x32\x7e\xd7\x25\xb5\x94\x8f\xed\xc3\x8d\xfc\x09\x4c\xd5\x8a\xd7\xdc\x4e\xc5\xd5\x67\x31\xe1\xe5\x03\x5b\x89\xee\xdf\x98\xf2\x95\x08\xfb\xe0\x35\xeb\xde\xc8\x43\x20\x98\x4f\x0e\xa1\x31\x0e\x0b\xe1\xcd\xa6\xf2\xc2\xb8\x42\x27\x44\x28\x17\xeb\x5f\x68\x87\x5e\x9b\x89\xe8\x05\x77\x31\x8f\xf1\xc5\x76\xaa\x25\x04\x2d\x74\xb4\x2d\x48\x07\x67\x48\x0b\x0f\x1b\x1a\x90\x2d\x1c\x2a\x2d\x3c\x6a\xd9\x90\x74\x99\x9a\xb0\x6a\x19\x59\xa4\x85\xf0\xce\xb4\x16\x51\xcb\x5e\x3c\x59\x40\x77\xf9\x64\x41\xbf\x89\x27\x0b\xfa\x26\x87\x46\x48\x5b\x58\x55\x1e\xd4\xdf\xdc\x93\x05\xb1\xd0\xad\x64\x43\x6b\x02\xf7\x9c\x0c\xe5\xa3\xc3\xfe\x66\x9f\x2c\xe8\xef\xc3\x2d\x7b\xc3\xa9\xd0\x5e\xd8\xfc\x9c\x09\xd5\xf1\xf5\xed\x24\x42\xfd\x7d\xba\x5d\x6f\x38\x0f\xda\x2b\xdb\x77\x9d\x06\xf5\x9b\x7d\xb2\xa0\x32\x0b\x8a\x8e\xe3\x95\x12\x8c\x41\x51\x91\xfb\xd4\xb1\x6c\xf6\xb6\xe7\x38\x96\xc3\x50\xdf\x54\xbf\xb8\x1c\xd9\xc4\x09\x16\x9d\x54\xca\xbc\x95\x0c\x25\x53\x8b\x1f\x9d\x59\xe0\x2d\xfd\x2f\xc8\x66\x45\x02\x07\x58\xbb\x21\x7c\x53\xb2\x22\x6e\x65\xe2\x3e\xd1\x8d\xc9\x02\x19\x6d\xda\x1d\xb6\x55\xda\xcd\xc8\x5a\x3e\x53\xa3\x23\xac\xeb\x0e\xcb\x67\x6b\x34\x71\x95\x17\x0c\xda\xca\x45\x1e\x1d\x29\x1b\xb9\x7f\x0b\x99\xf5\x07\x35\x59\x95\x03\xfc\x17\x73\xc8\xec\x5f\x53\xb3\xe7\xdd\xda\x21\xdd\xf3\x51\xe2\xfb\xe8\xd4\xd2\x5d\xc3\x42\xc7\x9f\xa5\x78\x21\xc5\x17\x57\x79\x3a\x98\xfc\x04\x4d\xa0\xad\xe7\xf5\x7d\xb3\x3c\x65\x8d\x36\x81\x70\xb0\xf0\x1f\x09\xd6\x60\x66\x13\x50\xd7\x64\x50\xa4\xb0\x18\x59\xac\x31\xf4\x44\x2a\xbf\x2d\x30\x98\x84\xcb\x38\x4f\xef\xaf\xf0\x84\xc9\x6a\x39\x7d\xa1\x02\x3e\x83\xa4\x06\xc1\x7f\xc9\x69\xcb\x02\x20\xa6\xfe\x75\x88\x02\x31\x38\x0e\x80\x47\xd2\x81\xf4\x06\xbd\xb6\x9c\x82\xde\x10\xa8\x37\x65\x7d\x40\x9a\xe9\x0b\x8d\x0b\xd8\xe6\xbb\x42\xba\xf9\x5c\x38\x4b\x34\x7b\xf9\x9d\x50\x60\x97\xd8\x26\x42\xf0\x13\xaa\xd7\xf4\x99\x9c\x39\x2b\x39\x4e\x05\x97\xb4\xea\x99\x2d\x2e\xa7\x7b\xb9\xf7\x44\xdb\x7f\x19\x7d\x85\xf7\xf4\x62\xbf\x59\xc8\xa0\xc0\x7b\x36\xb8\x67\x54\x6d\x07\x76\x74\xf2\xe4\xbd\x3b\x38\x47\x2a\xd6\x47\xc8\xa1\x70\x81\x04\x2c\x2a\x56\x48\xee\x14\x2c\x43\xac\x4a\xa3\x41\x42\x97\xc5\x2c\x8a\x50\x6f\x00\xee\x4f\xbf\x5d\xf5\x2e\x0b\xc1\xfe\xf4\xc0\x49\x15\xd4\x3e\x75\x21\xd0\x1e\x79\x3d\x98\x3f\xf5\xaf\x2e\x17\x60\x2c\x82\x83\x52\x3d\x3c\xda\x05\xe8\x0a\xe2\xfa\xd0\x36\x53\x06\xb3\xd9\x0e\xcb\x60\x03\xd6\x40\x19\x6c\xe0\x58\x22\x1b\xa9\xae\x82\x81\x36\x9b\xaa\x82\x45\x32\xb7\x52\x04\x5b\x13\xb6\xe7\x22\x58\xbe\x30\x30\x60\x1b\x2d\x82\x01\xbb\xdd\x17\x84\x1a\x2e\x82\xed\x85\xcd\xcf\x45\xb0\x3a\xbe\xbe\x9d\x22\x18\xf0\xdd\x9f\x42\x50\xc3\x45\xb0\xbd\xb2\x7d\xd7\x45\xb0\xa4\x83\x3d\xd2\x8f\xd7\x54\x3d\x68\x3e\x60\xde\x27\x6d\x06\xfd\xd3\x1f\xff\x39\xf3\x55\xed\x6f\x21\xe9\xfa\xb1\xda\x5f\x6a\xf4\x11\x18\x7d\xd9\xfb\xfa\x38\xad\xae\x33\xeb\xc7\xe0\xf5\x4f\xd8\xfc\x77\x48\xba\xe8\x3f\x5d\xf3\x7f\x41\xd2\xb7\xfe\xd7\xab\xa7\x0b\xc0\x5f\x91\xf4\xb5\x77\xf9\x98\xed\xd7\x88\xb8\x53\x2a\x05\xe0\x3d\x92\xae\xfa\xe7\xbd\xc7\x89\x40\xa9\xd5\x7f\x43\xd2\xc9\x97\xf3\xf3\x8f\x17\x3f\xd4\x79\x57\x72\xd5\x64\x3b\x96\x56\x70\xd1\x64\xb3\x44\x8d\x48\x0c\xd9\xd4\x35\x53\x7c\x2d\x64\x33\x05\x42\xa6\x95\xff\x52\x0e\x90\x5f\xd7\x27\x8f\x69\x18\x71\xd6\x91\x39\x70\xa8\xe5\x50\xfe\xb0\x0e\x8f\x0b\xaa\x2d\x79\xb5\x96\xa6\xbf\xa4\xff\x5b\x8b\xfe\x2b\x61\x10\xa5\x9b\x7c\x39\x1e\xe1\x5e\x10\x30\xb9\xa2\xd5\xf7\x83\xb1\xc5\xa9\xcb\xc4\x4d\x15\x38\xdb\x3f\x9d\x7e\x39\xb9\xfa\x6d\xd0\x43\x13\x3e\x85\x84\xa5\xed\xff\x27\xaa\x85\x90\x2c\x04\xd9\xc7\x94\x70\xc8\x99\x27\xd8\x61\x84\x77\x24\x97\x8f\xe4\xf7\x61\x62\xe2\x15\x0d\xc5\xfa\xca\xfc\xed\x7e\x04\xaf\xc0\xd8\xb6\xea\x0f\x48\xf0\x99\x70\x6e\xcb\xe4\x4f\x97\xde\x76\xa4\xff\xc8\xd7\x1f\xe5\x13\x6b\x6a\x63\x4e\x21\xe3\x96\xc0\x60\x53\x90\x75\xa4\x7e\xaf\x43\x20\x17\x93\x92\x94\x82\x73\x47\xba\xa5\xe4\xce\xb6\x1c\x9e\x18\xec\xfd\x71\xd8\x8e\xee\x7d\x4c\x5f\xf6\xde\xbc\x45\xd4\xa4\x9c\x62\x43\x66\x90\x1f\x91\xce\xa1\x72\x00\x8b\xeb\x27\x59\xfe\x1d\x56\x6d\xbf\xf7\x47\xc0\xd6\xdb\x95\x1c\x62\x78\x55\x4b\x87\x6b\x2e\x47\x14\xb8\x4a\xe1\x37\x17\x8c\xf0\xad\x78\xaf\xc0\x2f\x41\xfe\x3b\x40\x46\x47\x7f\xc8\x72\x8e\xdc\xa7\x62\xe0\x54\x30\x79\x47\xad\xfb\xa3\x56\xc4\x03\xb0\xf9\xe2\x61\xf1\x8d\x38\x8c\x5a\xe6\x7c\x1e\xb2\x65\xe1\x0b\xf9\xa8\xa5\xd8\xe6\x58\x42\xfc\xc1\x06\x0b\x2f\xf0\x85\x94\x93\x80\x6d\xdb\x20\x32\xb7\x5c\x6d\x22\xa7\xa4\x1d\xb6\x0e\xee\xe1\x67\x29\x79\x30\xde\x13\xb8\x84\x94\xe3\xe3\x7b\xf8\x59\x4e\xca\xf1\xf1\xb2\x52\xde\xb5\xee\xe1\x67\x39\x29\xef\x5a\xcb\x4a\x79\x0f\x88\xbd\x5f\x12\xb1\xf7\x25\x88\x31\xfe\x60\x10\x36\x21\x22\x3b\xf6\xa7\x4f\xac\x74\x15\x92\xea\x45\xfc\xa1\x5b\xa5\xa6\x4e\xee\x15\x31\xd0\x5f\x9c\xe1\x82\x6b\x0f\x2d\xfd\x21\x9f\xf7\x73\xcb\x96\x87\xd8\x29\x4c\xf2\x83\xbe\xa0\xb0\x1e\xd7\x23\xd2\xb5\xe9\x54\xbd\x2d\x53\xa2\x13\x0b\xbe\x95\xb8\x1e\x98\x62\x67\x4c\x4d\x79\x68\x71\x6e\x4d\xe5\x83\xf0\x64\xf2\x1e\x5c\xf6\xaf\x42\x3a\xb9\xef\xfc\x08\xc9\x5d\x1b\x86\x11\x26\x4e\x28\x4e\xa6\xb6\x01\x6f\xf2\x5f\x10\x82\x94\x68\x33\x43\x6d\x6f\x93\xf4\x76\x11\x2a\x4a\x19\x43\xaf\xcb\x6b\x03\x58\x5a\xe9\x8a\x4b\xa6\xb4\x08\x6f\x53\x3b\xa7\xb7\x65\xba\x76\x6a\x53\x2d\xd2\x3a\xf8\x9e\x93\x04\x19\x0a\xf4\xce\xdc\x59\x14\x9a\x11\x52\x2b\x89\x1d\x39\x55\x00\x8d\xaa\x3f\x99\x22\x51\xd1\xac\x05\x27\x4b\xed\x69\x8b\xbe\x59\x45\x6c\xa5\xec\x83\xaa\xde\xdd\xdd\x29\x80\xab\x03\x3f\x8a\x66\x4d\x55\x7f\xef\x55\xc1\x3f\x09\x66\x84\xa9\x42\x75\xc6\xff\xae\x4d\xed\x4e\xde\x17\xa5\x6c\x35\x34\xaa\x83\x4e\x2c\x43\x3c\x8a\x12\xb8\x02\xf8\x40\xb8\xa7\xe3\x7a\xd6\x86\x07\x0d\x6c\xb9\x26\x41\xaf\x0d\x62\x22\xa5\x77\x2f\xf6\x6e\x6a\x8e\xdf\x88\x4a\xd7\xa2\xe2\x56\xe2\xda\x2c\x3b\x2a\xb8\xf2\x91\xba\xa5\xd0\x86\x97\x42\xd1\xc5\x60\xac\xeb\x72\xa5\xb4\x05\x24\xb5\x9e\x29\x6b\x49\xdd\xc8\x64\xc4\xad\x82\xeb\xdd\xa1\xa8\x39\xc6\xa8\x0b\x77\x4b\x23\xb5\xe4\xe7\xcf\x61\x9e\x7a\xa6\x6e\x5b\x54\xcc\x54\x2a\x58\x08\xe2\x52\x20\xb1\xbc\xc8\x34\x21\xa1\xd2\xda\x1a\x76\x42\x98\x22\x58\x2f\xf5\xd4\xd3\x41\x4c\x16\x2a\xbd\x30\xc6\xc9\xae\xa6\xbc\xb3\x25\x62\x20\x61\x48\xd1\xd2\x37\x70\x7e\xab\x42\x05\x8b\x5c\x8c\xf3\x57\x78\x2c\xa5\x8c\xa7\xf8\xcb\xed\x75\xf6\x3f\x6f\x5c\x4d\x9e\xfa\xa8\x9e\x9e\x62\x5c\x5d\x9e\xe2\x93\xec\x75\xf4\xf4\xc6\xd5\xe4\x49\x6b\xea\x49\x97\xd0\xd3\x66\xf5\x78\x8a\x71\x59\x9e\x4c\x83\x25\xcc\x93\xa7\xf1\x77\x7c\x8b\xfd\x56\xa9\x7b\x8b\x1d\x24\x82\x55\xd4\x41\x41\xd8\x3a\x9f\xff\x0a\x2e\xe7\x75\xd7\xe1\x90\x8d\x84\x11\x73\xb4\xe2\x53\xfe\x3b\x53\xfd\x34\xf1\xea\xe3\xe7\xcf\xbd\xd3\x21\x85\xc6\x29\x35\xd5\xa1\x2b\x92\x5a\x05\x5e\x2a\xdf\x59\x78\x05\x0d\x5c\xc2\x0e\xaf\x31\x78\x80\x2a\xa1\x58\x5b\xf5\x23\x03\x38\x13\x45\x90\xfe\xff\x00\x00\x00\xff\xff\x39\xf6\xa1\x70\xbb\x6b\x00\x00"

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 27579, mode: os.FileMode(420), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

