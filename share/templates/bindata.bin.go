// Code generated by go-bindata.
// sources:
// index.html
// DO NOT EDIT!

// +build bin

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x1d\x6b\x73\xe3\xb6\xf1\xfb\xfd\x0a\x84\x93\x74\x92\x34\x24\xcf\x3e\xa7\xbd\x49\x24\x75\xee\x6c\x35\xe5\xf4\xce\xa7\xb9\xb3\xaf\xcd\x64\x32\x1d\x48\x84\x24\x9c\x29\x92\x01\x40\x3f\xea\xd1\x7f\xef\x82\x24\xf8\x10\x29\x53\x7c\x88\xd2\x74\xfc\xc1\xb6\x08\x60\x9f\xd8\x05\x76\x17\xa0\xf5\xf8\x68\x93\x39\x75\x09\xd2\xa2\xbf\xff\x09\x7c\x41\x57\x44\x5b\xaf\x07\xdc\xc7\xee\xe8\xf1\xd1\xb8\xc0\x02\x1b\x51\x33\xb4\x9a\x71\x33\x71\xed\xf5\xba\x00\xbd\xf4\xb8\x70\x71\x04\x8f\xd1\x92\x91\xf9\x50\x33\x35\x24\xa8\x70\xc8\x50\x53\xbd\x48\x61\x55\x0d\xeb\xb5\x36\x2a\xb6\x0d\x4c\xbc\x95\x90\x83\x35\xd9\xfa\xb5\x8f\x7e\x1a\xa2\x08\xd0\xc7\x0c\xaf\xf8\x7a\xfd\x62\x60\xd3\x5b\x34\x73\x30\xe7\x43\x6d\xc1\xa8\xad\x4f\x1d\x6f\x76\x03\xdc\xe8\xc2\xf3\xb5\xd1\x0b\x84\xb2\x23\x66\x9e\xa3\x3b\x0c\x39\x98\x2d\x88\x7e\x82\x04\xb9\x17\x3a\xa3\x8b\xa5\xd0\x46\xd9\x61\x8f\x8f\x74\x8e\xbe\xf6\x8d\x77\xd8\x35\x2e\xc9\x02\x0b\x7a\x0b\x2c\xf2\xa5\x77\xa7\xcb\x5f\x4b\x6a\x13\xe0\xd5\xe1\xd0\x28\x3f\x67\x1b\xa5\x00\x21\x59\x20\xbc\x3c\x51\x08\x97\x67\x11\x2d\xef\x96\xb0\xb9\xe3\xdd\x01\x39\xac\x14\xf5\xce\xc3\x36\xc2\xb7\x0b\x64\x53\xee\x3b\xf8\x01\x79\xa0\x7e\xcf\xe5\x5a\xa4\x52\xa5\xaa\x48\x62\xe3\xca\xa1\xee\x0d\x97\x9c\xad\xd7\xa3\x70\xda\x14\x0d\xc5\x84\x2e\x7f\x21\xf8\x28\x08\x74\xcf\x88\xee\x33\x82\x80\x28\x16\xba\x43\xe6\x20\xa9\x61\x18\x28\x9e\x5a\x45\x5b\x6a\x3f\xe2\xd9\x5c\x9e\x8c\x06\x26\xe8\x22\x54\x5d\xf2\x61\xab\x0e\x4f\xf6\xa2\xb9\xd2\x49\x8d\x3b\xa1\x3b\x70\x54\xef\x8a\xb8\x01\x4a\x24\x97\x1f\x92\x51\x30\xce\xa1\xe9\x43\x1e\x2b\x75\xfd\x40\xe8\x0b\xe6\x05\xbe\x96\x1d\xb3\x75\x94\xee\xe0\x29\x71\x10\x5f\x61\xc7\x89\xe6\xd2\xf5\xee\x18\x06\x68\x9b\xc0\xa4\x25\x9a\xaa\x46\x34\x0d\x84\xf0\xdc\xd0\x02\xe2\xde\xa8\x25\xc6\xcd\xc9\xcc\x73\x6d\xcc\x1e\xa4\x3d\xe0\xa9\x43\x6c\xe9\x2e\xa1\x4a\xed\xc8\x4d\x1a\xd0\xca\x0d\x86\xe1\xb8\xd4\xb6\x2e\x94\x6d\xd9\xc6\x3b\xc2\xb9\xf1\x0f\x18\xb3\x5e\x2b\xbc\x19\xa1\x51\x8e\xe3\x0a\x2c\xe3\x7b\xc1\xf0\xb9\xc4\x01\xf3\xbb\xc1\x08\x42\x23\xbd\x0a\xfe\x0a\xe8\x46\x82\xe7\x45\xee\x41\x0b\xef\x3d\x46\xda\x6b\x21\xc4\x52\xa1\x85\x0a\xe8\x48\x07\xe8\xcf\xd5\x5a\xd8\x68\x18\x98\x59\x1f\xe8\xc7\x21\x98\x77\xc7\x7b\xf1\x07\xd7\x78\x33\xe5\x9e\x13\x08\xb2\x67\xc7\xb8\x4c\x16\xdd\x5a\x8e\xc1\x83\xd9\x0c\x86\x6f\x9a\xc6\x26\xb6\xba\x0e\xb2\x09\xdf\xb7\x83\x64\xe8\xd7\x71\x90\x6a\x6d\x34\x70\x94\x4d\xe8\x4e\x1c\x65\x60\x06\x8e\xda\x0e\xe5\xa0\xc2\x06\x47\xfe\x40\x1b\x06\x88\x5e\x46\x1b\xda\x2e\xfb\x18\x82\x20\x40\xd0\x19\x06\x95\x08\x46\x7d\x92\xee\x6b\xe5\xc3\xc5\x92\x60\x30\xfa\xdc\x66\x4f\xee\xe1\xc1\x46\xb0\x17\x47\xda\xd5\x61\x1f\x9e\x10\x46\x3d\x3b\xde\xd9\x2b\x46\xe7\x42\x1f\xf4\x19\x3b\x01\x79\x1a\x10\xe8\xc7\xfd\x59\xbd\x85\xda\x88\x26\x04\x02\x0c\x1b\x22\x09\x08\xc9\x54\x17\xc3\xee\x82\xa0\xaf\x1d\x9c\x86\x6d\xf1\x20\xe3\x1d\xe5\xd2\x64\xb7\x6c\xf3\x95\x92\xbe\x28\x33\xe8\x54\x22\x74\x47\x6d\xb1\xd4\x5f\x31\xb2\x0a\xd7\x0a\x07\x1b\x91\x6e\xd6\xeb\x55\x3c\xa3\x0d\x94\x14\x21\x0a\x55\x95\x84\xc6\x5b\x10\x40\x7c\xb4\xa1\xaf\xd8\x2e\x12\xdd\xa4\x4f\x8a\xa1\xf4\x77\x1a\x78\xe5\x60\x0b\x61\xf1\x0a\xc4\x3b\x4c\x5c\xfc\x9e\xac\x7a\x08\x8c\x81\x8a\x17\x2d\xfb\x3b\x87\xc5\x92\xb1\x2e\xe2\xe2\x88\x74\xe7\x51\x71\x5b\xbd\x3d\x87\xc5\xc5\x30\x00\x74\xda\x53\x5c\x2c\x29\x75\x10\x18\xa7\x68\x1a\x46\xc6\x29\x82\x03\x85\xc6\x21\x03\xed\x63\xe3\x14\x4d\xa3\xe0\x38\x05\x7f\x8e\x8e\x4b\xdd\xa2\xef\xf0\x38\x24\xd9\x5d\x7c\x9c\xa2\x6b\x18\x20\xa7\x08\x0e\x14\x21\x87\x0c\x74\x17\x22\xa7\xe8\x1a\xc5\xc8\x29\x78\x9f\x41\x72\xce\x0e\x8f\x21\x4a\x56\x5b\x7b\xfd\x00\xf0\xca\x13\xd8\x69\x02\x78\xcd\x49\xa3\xb0\xfc\xef\x8c\x54\x44\xe5\x5b\xe9\x7d\xd3\x32\x9a\x5f\x85\x5a\x2a\x06\xf3\xd0\x9e\x06\x9b\xd1\xa0\xb6\xc1\x3c\x2c\x57\x80\xc8\xf8\x27\x75\xed\xaa\xb8\x7a\x6b\x60\x2e\x11\x84\xd3\xd3\x0a\x83\x9c\xa7\x56\x08\xe4\x84\x35\x40\x80\xa6\x0b\x3d\xe0\xc4\x9f\x09\x0d\xd9\xa0\xd8\xf8\x61\x98\xb2\x35\x99\x81\x86\xb3\x7c\x86\x0d\x15\x93\xdc\x4f\x16\x62\xcf\x0f\x94\x84\x5c\xcc\x7b\xc8\x41\x2e\x28\xbf\x41\x01\xc7\x60\xfb\x75\xf2\x10\xe0\xad\x8b\x34\x24\xa5\xde\x79\x2a\xd2\x52\x7b\xcf\x99\x48\x31\xe4\xba\x98\xf7\x94\x88\x00\xa1\x0e\xf2\x90\x04\x4b\xc3\x34\x24\x81\x3f\x50\x16\x22\xe9\xb7\x4f\x42\x12\x2c\x8d\x72\x90\x04\xfa\x39\x05\x29\xf3\x87\xbe\x33\x10\x49\xb1\xbb\x04\x24\xc1\xd6\x30\xff\x48\xe0\x0f\x94\x7e\x48\xfa\xdd\x65\x1f\x09\xb6\x46\xc9\x47\x02\xdd\x67\xee\x91\x35\xc0\x1e\x52\x8f\xc7\x47\xf3\x7b\xe4\x7b\x37\x04\xf9\x01\xa3\xf3\x87\x19\xe7\x3f\xe5\x40\x6c\xe6\xf9\xd2\x7b\x73\x9b\x35\x66\x04\xc2\x3e\x33\xf6\x0d\xf4\xbd\x19\xdf\xc6\xa8\x8a\x1c\x95\x33\x3f\x3e\xde\x51\xb1\x44\x10\x3d\x93\xfb\x5c\xfc\x65\x7c\x56\xaa\xbf\x91\xc2\xbf\xc8\x99\x8d\xe7\x9e\x3b\x74\x76\x33\x7c\x14\x4b\xca\x8d\x25\x50\x70\x48\xd8\xb2\x4e\x2c\xea\x1d\x40\xe7\x2c\x27\x6e\x8b\xa7\x3e\x37\x79\xa3\x0b\x72\x4b\x67\x24\xcb\x38\x8c\x3e\x97\xb2\xc5\xc3\xd3\x40\x34\xb9\xe7\x51\x27\x4e\xae\x25\xed\xc9\xbe\xa5\x7d\xef\x05\xae\x80\x9c\x6e\xcf\xe2\xe6\x42\xe0\x9d\x24\xff\x71\xdf\x92\x47\x39\xf0\xd1\xc9\x7d\xb6\x6f\xb9\xc3\x14\xfe\xe8\xc4\x3e\xdd\xb7\xd8\x6f\x6e\x31\x3d\xc2\xe9\x7e\xd5\xc3\x74\x7f\xd3\xa5\xd8\x95\xf5\x16\x08\x9d\x6e\xae\x65\xa2\x57\x2c\xb9\xd8\xf3\x34\xb3\x4e\x86\xb5\x2b\xba\x6c\xe6\xbb\x10\xae\xd9\x73\x03\xd6\xf0\x4b\xbc\xaa\x59\xc0\x48\x91\xa0\x18\x0b\x65\xcd\xb1\x64\x8b\x22\x0b\x86\x1f\x36\x24\x89\xd2\xe4\x4c\xd1\x05\xe8\x95\x95\x7d\xe2\xe4\xdd\x72\x3d\x9b\x70\x24\xe4\x88\x64\x7c\xd4\x98\x02\xf4\xc3\x65\x49\x69\x29\xcf\x64\xc0\x65\xdc\xac\x78\x0c\x72\xc3\xfb\x61\x31\xf4\xf5\x27\x79\x9c\x33\x42\x52\x1e\xe7\xb9\x62\x57\x07\x3c\x3e\x51\x06\x8b\x34\x18\x55\xc1\x76\xd1\x75\x49\x79\xac\xa0\xee\x6f\x72\xea\xce\x43\x1c\x41\x5d\x6d\xe6\x07\x07\x2a\xac\x9d\x4f\xae\x7b\xa8\xac\x01\x95\x5a\x25\x35\xc9\x55\x17\x35\x35\xc0\xd3\x79\x31\xad\xad\xc6\x9e\xab\x69\xc5\xea\x01\xe8\xb4\xa7\x72\x9a\xa4\xd4\x41\x3d\x2d\x45\xd3\xb0\xa0\x96\x22\x38\x50\x45\x2d\x64\xa0\x7d\x49\x2d\x45\xd3\xa8\xa6\x96\x82\x3f\x17\xd5\x4a\xdd\xa2\xef\xaa\x5a\x48\xb2\xbb\xb2\x5a\x8a\xae\x61\x5d\x2d\x45\x70\xa0\xc2\x5a\xc8\x40\x77\x95\xb5\x14\x5d\xa3\xd2\x5a\x0a\xde\x67\x6d\x2d\x67\x87\xc7\x70\xae\x7f\x0e\x1a\x68\x78\x58\xce\x2a\x0e\x52\xcb\x01\x3f\x3d\xf0\x46\x70\xff\xc2\x54\x34\x02\xb4\x20\xa9\x6d\x7b\xae\x0f\x51\x65\x31\xc3\x84\xc6\x34\xc6\x84\x87\x2e\x92\xcb\xb4\x60\x27\xd1\x1b\x97\xed\x8e\xc5\x95\xa5\x6e\xa4\x05\x12\xb3\x9c\xbf\xf4\x78\x3c\xd7\xa2\x94\xa5\x0c\xac\x63\xca\x60\x00\x79\xc2\xaa\x61\xcf\x74\xa5\x01\xe5\x09\x27\x2d\x1d\x50\xd6\xa9\x0b\x1e\xca\xc9\x53\x1c\x48\x4b\xcc\x73\x90\xb4\x1c\xc5\x9d\x04\x7a\xa8\x3b\x09\x56\x1f\x77\x12\x2c\x57\x40\x23\xa4\x39\xbc\x56\x02\x65\x75\x73\x27\x21\xa5\xde\x79\x1a\xd5\x52\x7b\xcf\x59\x54\x31\x5c\xb4\xfa\xba\x93\x60\x75\x72\x27\xc1\x6a\x79\x27\xc1\x3a\xf0\x9d\x04\xab\x93\x3b\x09\x56\xab\x3b\x09\xd6\xf3\x9d\x84\xa7\xfc\xa1\xef\xec\xc9\xea\xf4\x4e\x82\xd5\xf2\x4e\x82\x75\xe0\x3b\x09\x56\xa7\x77\x12\xac\x56\x77\x12\xac\x43\xdc\x49\xb0\xfa\xbd\x93\x50\x99\x36\x25\xdb\x79\xa3\x8c\x64\x52\x56\x62\xbf\x60\x9e\xcf\x7f\x18\x33\xe6\x31\x8e\x2c\xd7\xfc\x10\x08\xe4\x13\x16\x3b\xa5\xb6\x15\xf9\x69\x36\x1e\xcd\x2d\x0e\xe8\x9d\x07\x36\x60\x7d\x40\x3e\x2f\x23\x38\xc1\xb3\x1b\x22\xba\xa2\x95\x60\xdb\x46\xee\x2d\xed\x8c\x16\xd0\x18\xd0\xd1\x74\x60\xd2\xd1\x06\xad\xfa\xa9\x1d\x9d\x63\xdb\x66\xbc\x98\xde\xd1\xcc\x01\x62\x3c\xa8\xf3\xe3\x43\x3a\x37\x3a\x39\xf5\x53\xc8\xac\xc9\x8e\xa8\xb6\x2b\xf7\x4f\xee\x94\xfb\x3f\xe7\x66\x2e\x3c\x2b\x44\x76\x68\x9f\x24\xb2\xcf\x95\x67\x07\x8e\x87\xce\x7e\xd1\x52\x45\xa4\xc7\x65\x45\x38\x98\xf8\x0c\x4c\xcc\x6d\x68\xf1\x96\x5b\xce\x72\xe2\xfc\x6a\xa0\xb4\x1b\x0d\x7c\x6f\xc3\xf9\xcd\x16\xc0\x65\x8c\xca\x91\xe5\x9c\x42\x4f\xc2\xea\x0f\x25\x82\x12\xe5\xba\x45\xf8\xc8\xab\x33\xa2\x9a\xdb\xe1\x4b\x19\x88\x10\x64\x39\x88\xff\x64\xa7\x2b\x2b\xbc\x9c\xee\x6f\x95\x06\x88\x23\x70\xac\x6c\xa4\xbd\xd4\xbe\x43\xdf\x7a\xac\xa4\x57\x29\xe9\xbb\x6d\x7d\x00\xba\xd1\xa7\x04\x8b\xd1\x16\xbb\x14\xdc\x7a\x2d\x0d\x24\x99\xb5\xe2\xca\x27\xf5\x96\x59\x16\x94\xe2\x33\xac\xef\x60\x27\x05\x51\x6a\x1b\x4b\x05\x86\x3c\xcb\x1b\x4b\x59\x81\xe7\xed\x16\x93\x2c\xf3\xdb\xe0\x2b\x2c\x66\x9c\xda\xca\x93\x08\x4a\x2c\xa6\xc3\xf5\xa1\xca\xf5\xfd\x64\x87\x29\x5a\x74\xbc\x5f\x54\xf8\x84\xc2\x50\xea\x14\x31\x8a\x0a\xaf\x28\xec\x76\xdb\x34\x56\xc5\xd1\x24\xc3\xcb\xd3\x28\xca\xb4\xde\x83\xba\xdf\xfe\x7a\x35\xfe\x54\xaa\xec\xb7\x0f\x82\x54\xa9\x3a\x82\x2e\x55\x74\x08\xbe\x9b\x9a\xdf\x5a\x57\x9f\x9e\xd0\xb1\x0c\x02\xb6\xf2\x11\xc2\x3e\xa1\x5d\x09\xbc\xbb\x6a\xfb\xa9\x99\xf9\xfc\x40\x35\xb3\x09\xef\xa1\x66\x36\x61\x9e\xcc\x23\x6a\x96\xcc\x80\xb5\x2e\x4a\x66\x09\xf1\xce\x2b\x66\x2d\x75\xf7\x5c\x31\x2b\x56\x08\x26\xbc\xa7\x8a\x19\x10\xea\xa0\x62\x96\x60\x69\x58\x31\x4b\xe0\x0f\x54\x31\x93\xf4\xdb\x57\xcc\x12\x2c\x8d\x2a\x66\x09\xf4\x73\xc5\xac\xcc\x1f\xfa\xae\x98\x49\x8a\xdd\x55\xcc\x12\x6c\x0d\x2b\x66\x09\xfc\x81\x2a\x66\x92\x7e\x77\x15\xb3\x04\x5b\xa3\x8a\x59\x02\xdd\x67\xc5\x2c\x6b\x80\xff\xa7\x6f\xf1\xd4\xbb\x01\x3f\xe1\x3d\xbc\xd0\x33\xb1\x2e\x8e\xeb\xde\xbf\x94\x7a\xef\x2f\xf6\x5c\xef\x5f\xea\x1d\x45\xdd\xfb\xab\x1d\xd7\x9f\xc6\x1f\x8f\x6f\x86\xf7\xfe\x66\xc7\xe4\x08\x85\xde\xfb\xdb\x4b\x97\xd6\xf1\x09\xbd\xf7\x57\xd5\x3e\x5b\x1f\xaf\x8e\x4f\xec\xbf\xec\x5b\xec\x8f\xe3\x4f\xfd\x48\x3d\x23\xf2\xe8\x68\x47\xb1\xff\xba\xf7\x17\x13\xad\xf7\xe3\x23\x59\xba\x5f\xef\x5b\xd6\xf3\x0f\xef\xdf\xbf\xb9\x6c\xb8\x53\x6d\x39\x3d\xf2\x99\x37\x2b\x39\x3b\xf2\x79\xa6\x1c\x24\x87\x74\x71\x72\x94\x9e\xf4\xf8\xa0\x31\xeb\xa2\xf1\xff\xdc\x01\xf0\xeb\xdd\xc1\x53\x18\x4e\x58\x1b\x9a\x13\x46\x3d\x46\xc5\x43\x1b\x1c\x97\x74\xd6\xe4\x5f\x05\x25\xf0\x9f\xe8\x7f\x5b\xc1\x7f\x24\x1c\xe2\x68\x57\xd4\xc3\xa1\x7c\x3e\x46\x72\x45\xab\x8f\xfc\x52\x89\x73\xe7\x83\x5d\xd5\x31\x07\x5f\x5d\x7c\x38\xbf\xfa\x75\x32\x46\x4b\xb1\x82\x74\x62\x10\xfd\x91\x85\x41\x08\xe7\xe3\xfc\x60\x45\x04\x64\xbd\x4b\xcc\x38\x11\x43\x2d\x10\x73\xfd\xb5\x4a\x1d\xc2\xfa\x60\xc9\xf7\x11\x20\xf8\x04\xc2\x0e\xcc\x68\x40\x06\xcf\x52\x08\x5f\x27\x7f\x04\xf4\x76\xa8\xfd\x5b\xbf\x7e\xa3\x9f\x7b\x2b\x1f\x0b\x0a\x39\xb3\x06\x02\xbb\x12\x6c\xa8\x59\xe3\x21\xb1\x17\x2a\xe9\x88\x20\x25\xe6\xa1\x76\x4b\xc9\x9d\xef\x31\x91\x19\x1c\xfe\xbf\xda\xa1\x1d\xbe\x43\xaf\x87\x0f\x3f\xc0\x1a\x43\x05\xc5\x8e\xce\x21\x83\x21\xc3\x13\xe3\x25\x38\xd7\x57\xba\xfe\x1b\x78\xac\x35\xfe\x3d\x46\x2b\x17\x1d\xc4\x88\x13\xd6\x25\x99\x98\x05\x02\x51\xc0\xaa\xa9\x6f\x63\x98\xe3\x5b\xf9\x6c\xc0\x2f\x09\xfe\x1b\xa8\x8c\xce\x7f\xd7\xf5\x02\x78\x04\xc5\xc1\xa8\x60\xf2\x5e\x9d\xde\xbf\x3a\x4d\x70\x80\x6e\x3e\x84\xba\xf8\x4c\x18\xa7\x9e\xbb\x5e\x2b\xb4\x5c\x7d\xd0\x5f\x9d\x1a\xbe\xbb\xd0\x90\x78\xf0\x41\xc2\x4b\x7c\xa9\x15\x28\x60\xdf\x77\x88\x2e\xbc\x60\xb6\xd4\x73\xd4\x4e\x4e\x5f\xde\xc3\x4f\x2d\x7a\x30\x3e\x24\x58\x83\xca\xd9\xd9\x3d\xfc\xd4\xa3\x72\x76\x56\x97\xca\x8f\xa7\xf7\xf0\x53\x8f\xca\x8f\xa7\x75\xa9\xbc\x06\x8d\xbd\xae\xa9\xb1\xd7\x5b\x34\xc6\xc5\x83\x43\xf8\x92\xc8\xfc\x35\x9a\x3e\xe9\xe9\x26\xa4\xbd\x4f\xe1\x87\x6e\x33\xdc\x05\x0d\x39\x30\x72\x4e\xe5\x70\x83\xa9\x67\x3f\x14\x33\x73\xe1\xf9\xfa\x14\xb3\xd2\x34\x3c\xee\x8b\x4b\xe7\x69\xb5\x20\x5f\x81\xce\x55\x4e\x36\x8a\x6c\xd2\xe1\x4f\x33\x27\x01\x2b\xcc\x16\xd4\xd5\xa7\x9e\x10\xde\x4a\x7f\xa9\x76\xa6\xf0\x32\x73\x74\xe2\x31\x2c\x7c\x8f\x89\x02\x0f\x7c\x18\x46\xb8\xdc\xa1\x04\x59\xf9\x0e\x3c\x14\xbf\xf4\x04\x19\xc9\x62\x86\x06\xe1\x22\x19\xae\x22\x54\x16\x1b\xa6\x61\x57\xd8\x06\x6a\x39\xcd\xd7\x43\x36\x8a\x83\xf0\x98\x5b\x39\xc3\x25\x33\xf0\x73\x8b\x6a\x19\xd7\xf1\x77\xb7\x64\xc0\x50\xcc\xf7\xc6\xa9\x44\xa9\x18\x0a\xda\xc8\xac\xc8\xb9\x12\x66\x52\x9b\xd9\x28\xe1\x94\xcd\x5a\xbc\xb3\xec\x3c\x6d\xc9\xb7\xc5\xc8\xa5\x94\xff\x64\x9a\x77\x77\x77\x06\xe8\x95\xc1\x8f\x31\xf3\x56\x66\xb4\xf6\x9a\x60\x9f\x04\x73\xc2\x4d\xc9\x3a\x17\x7f\x9b\xad\xfc\x61\xd1\x16\xb5\xcd\x7a\x66\x52\xc9\x5c\x7a\x8e\xbc\x5d\x12\x9b\x02\xd8\x80\x5a\xd3\xf1\x6e\xd2\xaa\x8d\x06\x96\x5c\x97\xa0\x6f\x1d\xe2\x22\x63\x7c\x2f\xd7\x6e\xea\x2e\xbe\x4b\x6a\x30\xd5\xa7\x63\x9b\xa3\xe2\x43\x1d\x6d\xb4\x55\xb5\xea\xd8\x27\x39\xff\x4b\x79\xad\x57\xec\x7a\x02\x64\xa7\x2b\x62\xa7\xda\x28\x11\x19\x09\xaf\xe4\x14\x77\x8a\x61\x9f\x4b\xb5\x2e\xcd\x2d\xaf\xa9\x9a\x2f\x89\xc3\x3c\x8d\x5d\xdb\xf7\xa8\x9c\xa9\x5c\xb0\x10\xc7\xa4\x00\xe2\x85\x51\x69\x86\x42\xa5\xb4\x3b\xc8\x09\x61\x8a\x44\x5d\xeb\x22\xd3\xcb\x14\x4c\x31\xfd\x64\x8c\xb3\xe9\x4d\x45\x63\xcb\xc4\x40\x52\x90\x32\xd7\x77\x70\x71\xa9\x42\x25\x4e\x2e\xc7\x45\x1e\x9e\x52\xd9\x86\x53\xfe\x33\xf9\x5d\xd6\xbf\x70\xdc\x8e\x38\xed\xf9\x6e\x7c\xca\x71\xbb\xe2\x94\xaf\xc5\xef\xc2\x67\x38\x6e\x47\x9c\x74\x47\x3e\x69\x0d\x3e\x7d\xbe\x1b\x4e\x39\x6e\x13\x27\x9f\x81\x0b\x8b\xec\x6e\xfc\x05\xdf\xe2\xa8\x55\x1b\xdd\x62\x86\x64\xb0\x8a\x86\xaa\xc6\xbf\x5e\xff\x0c\x26\x17\x76\xef\x82\x61\x33\x12\x46\x9c\xcd\xca\x77\xf9\x2f\xdc\x8c\x52\xc4\xab\x37\xbf\xfc\x32\xbe\x98\x52\x68\x5c\x51\xd7\x9c\x06\x32\x85\x35\xe0\xa3\xf1\x85\xab\x83\x66\xc0\xa2\x3a\xc2\xc6\xf8\x7e\x54\x86\xb1\x81\x19\x45\x06\xb0\x27\xca\x20\xfd\x7f\x01\x00\x00\xff\xff\xf7\x3b\x45\x47\x8f\x6c\x00\x00"

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 27791, mode: os.FileMode(420), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

