// Code generated by go-bindata.
// sources:
// index.html
// DO NOT EDIT!

// +build bin

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5c\x5b\x73\xdb\xb6\xb6\x7e\xf7\xaf\xc0\xe1\x69\xcf\xb4\x9d\x8a\xaa\x73\x39\xa7\x27\xb5\xbc\xc7\xb1\xdc\x84\xd3\xd8\xd1\xf8\x92\xd9\xdd\x2f\x1d\x88\x84\x24\xc4\x14\xc9\x12\x90\x1c\x57\xa3\xff\xbe\x17\x6e\xbc\x53\x12\x45\xc6\xb5\x77\xf2\x60\x8b\x04\x81\x85\x85\x85\x85\x0f\x1f\xc0\x45\x1c\xfd\xd7\xf0\xfd\xe9\xf5\xef\xa3\x33\x34\xe3\x73\xff\xe0\xf8\x48\xfe\x20\x04\x17\x04\x7b\x70\x21\x2e\xe7\x84\x63\xe4\xce\x70\xcc\x08\x1f\x58\x0b\x3e\xe9\xfd\x6c\x65\x1f\xcd\x38\x8f\x7a\xe4\xcf\x05\x5d\x0e\xac\x7f\xf6\x6e\x4e\x7a\xa7\xe1\x3c\xc2\x9c\x8e\x7d\x62\x21\x37\x0c\x38\x09\xa0\x9c\x73\x36\x20\xde\x94\xe4\x4a\x06\x78\x4e\x06\xd6\x92\x92\xbb\x28\x8c\x79\x26\xf3\x1d\xf5\xf8\x6c\xe0\x91\x25\x75\x49\x4f\xde\xfc\x88\x68\x40\x39\xc5\x7e\x8f\xb9\xd8\x27\x83\x43\x23\x88\x53\xee\x13\x79\x0d\x77\xab\x95\x3d\xc4\x1c\xdb\x6f\x43\xc6\x85\xf0\xf5\x1a\xc1\x15\x88\x3c\xea\xa7\xf9\x8e\x8f\x7c\x1a\xdc\xa2\x98\xf8\x03\x8b\x42\x95\x16\xe2\xf7\x11\xe8\x41\xe7\x78\x4a\xfa\x51\x30\xb5\xd0\x2c\x26\x93\x81\xd5\x9f\xe0\xa5\xc8\x60\x8b\xb4\x52\x51\xc6\xef\x7d\xc2\x66\x84\x70\x23\x80\x93\x4f\xbc\xef\x32\x96\x94\x87\xeb\x3e\x0d\x3c\xf2\xc9\x16\xa9\x5a\x02\x73\x63\x1a\xf1\x6c\x91\x8f\x78\x89\x55\xaa\x55\xb4\x33\x62\xb1\x0b\x82\x3e\xb2\x7e\x2c\x2c\x1c\x13\xb8\x7a\x66\x1f\xda\x87\x3f\x9b\x04\x7b\x4e\x03\xfb\x23\xd4\xe9\x41\xc3\x7b\x73\x4c\x03\x95\x7f\xb5\xa2\x13\x64\x5f\x9f\xbc\x79\x73\x36\x1c\xd3\x60\xbd\x86\x7c\x5a\x19\x55\x62\xb5\x22\x3e\x03\x0b\x41\x0d\xfd\x39\xf5\x6f\xf5\x43\xf9\x20\xf0\xd6\x6b\xcb\x18\xf5\xa8\xaf\x94\xd3\xfa\xf7\xb5\x6b\x1c\x1f\x8d\x43\xef\x5e\x27\x06\x78\x89\x5c\x1f\x33\x36\xb0\xe0\x72\x8c\x63\xa4\x7e\x7a\x1e\x99\xe0\x85\xcf\xcd\x2d\xe3\xe0\x18\x6e\x8f\x87\x91\x85\xe2\x10\xfa\x51\x64\xa7\x53\x48\x84\x7e\x48\x2a\xf4\x68\x22\x4d\xb8\x04\xb4\x89\xc4\xbd\x89\xbf\xa0\x9e\xc9\x53\xc8\xa5\xa5\x0b\xcd\x48\x0c\x6e\xe4\xf7\xe6\x5e\xef\x10\x45\xd8\xf3\x68\x30\xed\xf9\x64\x02\x9d\x6f\xba\xc0\x94\x1f\x2f\x38\x0f\x83\x82\x08\x1e\x4e\xa7\x3e\x11\x22\x7c\x1c\x31\xe2\x99\xbe\x55\x99\xb5\x95\x55\x26\xa1\x9c\xca\x65\x92\x71\x3c\x15\x5d\xf7\xdf\x5a\x56\xf2\x38\x53\xad\xf4\x80\x08\x27\xd5\xb2\xb8\x17\x06\xfe\x7d\x3e\x0b\x64\xba\x56\x7a\xa4\xd6\x81\x5e\x80\x62\x1b\x24\x09\x4f\xed\x41\xb5\x25\x51\x8f\xa6\x64\x5f\x19\x31\xd7\x09\x18\x51\x6f\x60\xcd\xc0\xb2\xf9\x7e\x18\xc7\x38\xf0\x20\x8d\x82\xa3\xc8\x91\x36\xb0\xe6\xf8\x93\xc2\x82\x57\xe8\xf0\x99\x3b\x4b\x46\x19\x74\x91\x18\xdb\x20\x45\x8f\x7a\x54\x86\x81\x42\x17\x94\x33\x1c\xf5\x71\x4e\xaf\x3e\x78\x57\xc1\xd7\x84\xa2\xc5\x9e\x4d\xdd\x54\x25\xa0\x0d\x5d\x7f\x7c\xb4\xf0\x33\xad\x34\x59\xe1\xa7\xe8\x20\x3e\x35\xf9\xb0\xcb\xe9\x92\x94\xcd\x8b\x75\xe3\x05\xf6\xb2\x57\xfd\xfe\xdd\xdd\x9d\x0d\x6d\x89\xe1\xcf\x76\xc3\x79\x5f\xa1\x1e\x60\x84\x4f\x30\x23\xac\xef\x63\x4e\x18\xff\x87\x3b\x8f\x06\xa6\xed\x1f\xce\x2e\xaf\x9c\xf7\x17\x45\xdb\x48\xf9\x06\x34\x71\xb9\x5f\x7d\x5a\xab\xac\x19\x42\x80\x69\x28\x73\x0d\xa0\x14\x4f\x69\x20\x06\x20\x9a\xd0\x98\x71\x99\x5a\x6e\x93\x1b\x7a\xa4\x20\x4a\x24\x01\xe2\x96\x0c\x20\x55\x4c\xba\x79\xe8\x5c\x5d\x5f\x3a\xaf\x45\x27\x8a\x02\x1d\xeb\xdc\x56\x51\x1a\xfd\x4f\x30\x66\xd1\x2f\x6a\xe0\x08\x27\x02\x9f\x2e\x65\xcb\x38\xa5\x33\x12\x2d\x29\x8d\x1f\xdd\x96\x47\xd8\xc2\x45\xa9\x85\x8b\xcd\x2d\xbc\x89\x38\x55\x83\xee\x09\xb5\xd2\xc7\xc5\x56\xfa\x78\x63\x2b\xdf\x9d\x74\xd0\xc2\xfe\xc2\xdf\x84\x4b\x99\x5b\xb8\x81\x46\xe8\xf9\x78\xfb\x0c\x9a\xcb\x13\x87\x77\xc5\x99\x55\x34\x70\x4e\xe6\x30\xa9\x29\x1e\x97\xe0\x9c\x98\x5a\x5f\x98\x39\x36\x9c\x4c\x80\xad\xf4\x0e\x73\x38\xb7\x5a\x71\x32\x8f\x04\xe4\x20\x0b\xe6\x7f\xa8\x9b\xbd\x7a\xa5\x2e\xfe\x00\x6b\x10\x1f\xe4\x5a\xc8\x16\xd6\xa9\x46\x59\x6f\x52\x5d\xed\xcb\x76\xd5\x7a\x93\xca\x5a\x73\x36\xdc\x6e\x14\x37\x5a\x7c\x16\xa3\x80\xdc\x8d\x46\xa1\x9f\xc7\x28\xb4\x13\xa3\x44\xac\x5a\xb9\xc3\x9f\xda\x69\x17\xb1\x2e\xb4\x5b\x4e\x3f\x8f\x76\xcb\xe9\x76\xed\x92\x9b\x2d\xcc\xdf\x14\x58\x02\x77\x16\xf0\x81\x06\x66\x7e\x5b\xaf\x7f\x29\x52\x70\xcd\xbc\x05\x19\x97\xeb\xb6\xd5\xaa\xff\xc3\xc1\x0f\xfd\xf5\x7a\xb5\x52\xfa\x65\x14\x1e\x63\x58\x76\x79\x62\xdd\x22\x68\xb0\x05\xea\x6a\xf2\x00\xe2\xdf\xc2\xaf\x58\x23\x05\xa7\x3e\x75\x6f\x07\x2b\x3e\xa3\xcc\x9e\x01\xf3\xf2\x89\x4c\x59\x83\x0e\xd2\x64\xeb\xb5\xc8\x7e\x2a\x2e\x91\x35\xe6\x01\x82\x3f\xc3\xed\x41\x24\xe8\x72\x90\x70\xc3\xb4\x88\xf5\xc9\xc7\x63\xe2\x23\xf5\x93\xe4\x3f\xd0\xd6\xb5\x5f\x0b\xd5\x32\x20\x79\x2c\x9a\x7c\x0d\x86\x51\x7c\xec\x58\xaf\x44\x76\x6b\x5d\x4c\xa7\xb3\xcf\xdb\xbc\x44\x39\xd4\xba\xa1\xbb\x36\x4f\x7b\x1b\x60\x03\xb8\x36\xb3\x44\x9e\x3b\xca\x67\x48\xdc\x81\xc3\x0a\xef\x03\xf1\xe2\x9f\x5a\xcc\xad\x56\xc0\x9b\xa7\x04\x7d\x43\x7f\x44\xdf\xb8\x61\x4c\xd0\xab\x01\x52\xd3\xd1\xe9\xe8\xc6\x7e\x47\x99\xb0\x2d\x8f\x41\x77\xf9\xd8\xbe\xb0\x4f\x38\x8f\x7f\x23\xf7\x48\x02\x1b\xc8\x1d\xdf\xf7\x2e\x54\x9b\x61\x71\xed\x99\x11\x23\x27\x53\x69\x62\x14\x84\x77\x31\x8e\x92\xc6\x69\x39\xa2\x75\xdc\xab\x2d\x95\xac\x7e\x0b\x86\x5b\x30\x12\x91\xd8\x05\xb6\xa9\x58\xa1\x5a\x49\xa5\xa9\x03\x53\xc1\x0d\x23\xb1\xd4\x2a\x57\xad\x4a\xcd\xcc\xb2\xc7\x9f\x57\x8b\xab\x7b\x56\x56\x42\x26\x76\xad\x43\x8f\x06\x4b\x12\x27\x6b\xcb\x0a\x5d\x1c\x70\xe3\xb2\x32\x2a\xb5\x52\x9b\x3e\x8f\x33\x4e\x97\xff\xd9\xc5\x05\x15\x86\x0a\xff\x11\x17\x49\xcb\xe4\x8d\xfc\xdf\x9b\x85\xa0\xb3\xa5\x9a\x9e\xd9\x41\x82\x7a\x0d\x1c\xf2\x59\x16\x28\x93\x3b\xf1\x60\x8b\xab\xc9\x6c\xa2\xbf\x73\x2b\xd0\x45\x40\x73\x4b\x89\xe3\x6f\x0b\x94\x6b\x9f\x5a\xa0\x43\x3f\x7f\x25\xa2\xa3\xda\xd4\xd2\xd7\x56\x95\xa9\x66\x4b\x86\xa7\x7b\x32\x9b\x66\x2f\x83\x27\x6a\xf6\xe2\xe9\x74\x22\xbb\xb1\x09\x32\x79\x93\xf1\x3d\x2c\x2d\xff\x68\x08\x4f\x1e\x65\xb7\x29\x34\x0d\x7f\x95\x42\xf2\xf0\x24\xb2\xd8\x43\x1a\x5f\xc0\xfa\x3c\x05\x29\x5d\x9f\x06\x2a\x8f\xc6\x62\xf9\x9e\xc2\x55\x02\x4a\xaa\x34\x59\x5e\xe8\xd5\x7d\x32\x20\x0b\x39\x94\xfc\xdd\xc0\xcb\x14\x3a\x59\x62\xea\xef\x5a\xa4\xbe\x13\xd2\x21\x6d\x29\x83\x08\x34\x1b\xa9\x94\xf5\x5a\x2d\x36\x4c\x95\xf0\xc4\x6b\xa6\xe4\x75\xc8\x71\x56\xc9\x56\x83\xdf\xf4\xb2\x41\x00\xa8\x24\x4a\xbb\x6f\x84\x63\x3c\x67\x09\x2e\x88\x87\xb2\xc3\xe4\x7c\x7a\x8d\xc7\x08\xee\x87\x93\x40\xfd\x70\xf4\x0c\x55\x60\x06\x4a\xb6\x50\x7a\x33\xea\x79\x24\x48\xfa\xb4\x12\x47\x2a\xed\xaa\xb6\xff\x48\xb0\x98\x0b\x3e\x60\x89\xfa\x3e\xc8\xfd\x5a\x59\xf1\x2d\x3a\x44\xd6\x50\x6e\x29\x43\x6d\xb2\x11\x7b\xc8\x00\xe5\xcf\xc3\x45\xc0\xc5\xce\xe0\xde\x42\x9e\x23\x4b\xfa\x10\x88\xc8\xf4\xdf\x9e\xc2\x5e\x20\xeb\x46\x6e\x54\x76\x20\xeb\x25\xb2\xa4\xdf\x14\x85\xb5\x02\x9b\x1c\x44\x74\x81\x38\x34\x80\xb5\x73\x6b\xc8\x51\x52\x76\xc3\x1c\x95\xf7\x6f\x05\x1d\x67\x12\x93\x9d\x8b\x34\x01\x1d\x67\x51\x8b\x3a\xe2\x51\x43\xd8\x71\xa4\xa5\xba\xc3\x1d\xdd\xd7\x9d\x00\xcf\x61\x07\xc0\x93\x99\xdc\xd5\x60\xca\xcc\xe8\x0a\x5c\x6a\xa8\x40\x29\xb7\x86\x91\x8d\xd9\x51\xd1\xce\x32\x9b\xc4\x8e\x3d\xca\x09\x98\xd8\xa3\x98\x44\x84\xce\xa8\x47\x7e\xf8\xb6\x87\x03\xba\x1f\x01\xa1\x93\xd4\x8d\x9c\x2a\xfa\x41\x27\x76\x1e\x05\x68\x8e\x79\xd4\x20\x80\x2e\xb5\xf3\x98\x81\xfc\x43\xe2\x73\xec\x04\x8d\x8b\xbc\x5f\xf0\x26\x65\x9a\xd5\x90\x17\xde\x6a\x0c\xd3\xd6\xdc\xc1\x51\x43\xd8\x81\x21\xfc\xbc\x9b\x21\x9c\x61\xe1\x30\x06\xe3\x09\xae\x1d\xb6\x65\x06\x6f\xde\x36\xbd\x76\xae\xaf\x10\x60\x29\x62\xc4\x0d\x83\xec\x9b\x49\x27\xd8\xcc\xeb\x8f\x0a\x9b\xbc\xe3\xa3\x7e\x36\xe5\x38\x62\x7b\x2f\x2f\xb6\x2b\x07\x3d\xfb\xb7\x6b\xc7\x05\xa2\xa0\xd7\xbf\x5f\x9f\x5d\xa1\x79\xe8\x2d\xfc\x10\xbd\x78\xd3\xc2\x80\xaf\x0b\x2a\x7e\xfb\xe2\xcd\x67\xd7\xb1\xb1\x1d\x9b\x2a\xd9\x06\x64\x69\xb7\x94\x8b\x4e\x48\x1c\x87\x71\x4b\x90\x55\x32\xb6\xa2\xac\xca\xf6\x15\x66\x1b\xc3\xac\xee\xa3\x4e\x70\xb6\x8b\x35\x5a\x47\x38\x5b\x03\xb1\xd9\x97\x71\x75\x43\xb0\x03\xa8\xaa\xc3\xd0\x07\xaa\xbe\x1a\x1d\x77\xa9\xbc\x0b\x0c\xac\xc1\xbd\x2e\xaa\x6f\x87\x6e\x59\x38\xea\x02\xde\x22\xec\xde\x12\xde\x12\xdf\xb4\x90\xad\x00\xa7\xf3\x7d\x45\xb8\xc6\x08\x67\xba\xa9\x13\x88\xeb\x68\x35\xf8\x15\xe2\x3a\x21\x5a\x7f\x2f\xd0\xd5\xeb\xf0\x28\xe0\x2e\x07\x4f\xed\xf1\x6e\x4e\xe6\x7b\xbc\x4d\x84\x52\xe9\x58\x3b\x3f\x3b\xcf\xe3\x1c\x3c\xb5\x7f\xa3\x81\x97\x02\x9d\x08\x1e\x51\x10\x77\x0b\xe9\x15\x10\x67\x8a\xec\x0c\x27\xa2\xc0\xaf\xdd\xef\x82\x09\xb1\x95\x3b\xef\xfa\x41\x33\x05\x3b\xdd\x77\x07\x81\x0f\xfe\xd2\x2d\xe3\xfc\xc2\xd8\x4d\xf2\x6f\xd8\x60\x7a\x80\x9d\x25\xe3\xd6\xed\x07\x48\x12\x8f\x53\x3b\xc5\xa8\xa0\x8e\xe3\xa3\x34\xb8\x03\xab\x26\x24\xb3\x8e\x88\x3d\xd0\x41\xbc\x90\x72\x1a\x06\x13\x3a\x05\x91\xeb\x6c\xcc\x81\x08\x35\xe8\x8d\xfd\xd0\xbd\x4d\xc2\x3f\x50\x12\x5b\x90\x9d\xbd\x2e\x72\x32\x90\x35\x7b\x81\xc6\xd3\x1e\x0d\x26\xa1\x25\x6e\xac\xe4\x35\x30\x48\x38\x1d\xdd\xe4\xa0\xe8\xd8\x84\x71\x26\xb1\x28\x59\xb5\x45\x88\xcc\xe6\xba\x5c\x79\xa9\x03\xe9\x64\xe0\x76\x29\x09\x95\x27\x4d\x13\x2a\xa5\xb2\xa6\x41\x67\x93\x30\x9e\xa7\x15\x9e\xb8\x22\xb4\xf9\x57\x48\xcb\xdb\x45\xe4\x82\xe6\xe5\x23\xf1\x60\x45\x1d\x44\x0b\x9e\x6c\x59\xca\xaa\x7a\x6c\x31\x9e\xd3\x24\x04\x5f\xdf\x65\xca\x64\xa2\x83\x84\xb5\x79\x18\xfa\x85\x80\xe5\x52\x9e\x69\x1c\x2e\x22\x94\x5c\xf5\xd8\xdc\x04\xab\xcb\xfb\x62\xb4\x2e\xae\x32\xe0\x5b\xea\x11\x69\xbe\x42\x34\x09\xd2\x11\xbd\x35\x61\x26\x75\xfe\xa3\xc5\x65\xfa\x59\xd7\xfe\x56\x5a\xa1\x18\xa9\x5b\xa5\x54\x1a\x05\x72\xf6\x09\xbc\xc3\x13\x83\x02\xee\xca\x8a\x94\x75\xf6\x28\x13\xb9\xbd\xcd\x3a\x2a\xb1\x95\x5a\x9a\x90\xc8\xb4\x76\x81\x07\x70\x57\x0c\xbc\xce\x78\x69\x47\xdd\xb3\x09\x31\x40\xfd\x98\xb0\x99\x85\xbe\x3b\x9d\x61\x1a\x28\x13\x21\xeb\x52\x25\x0b\x00\xf8\xbe\x18\xdd\x55\x52\x10\x6e\x85\xb7\x1e\x94\x1e\x36\x19\x6e\x89\xb7\x14\x07\x92\x7c\xc7\x78\xb0\x43\x53\x92\xf0\x8c\x7c\x40\x5a\x46\x09\x79\xd1\x14\x04\xbd\xc9\x46\x0c\x94\x7a\xe5\xdb\x33\x32\x2f\x5d\x2c\x50\x5e\xca\x40\xf2\x7f\xde\xcf\x05\xce\xa9\xf2\xdb\x4a\xcb\x8f\x3a\x68\x30\x35\x76\x38\x16\xff\x24\xda\x56\xb8\xe1\x5b\xc8\xab\x25\xe4\x01\x45\x89\x92\x6c\x0f\x55\x81\xae\x14\x3a\xae\x55\x06\x20\x36\x07\xba\x59\xbc\x1d\x8a\xf7\x8a\x0b\x86\xa7\x30\x55\x8e\xb3\x12\x13\xdc\x15\x97\xba\x17\xe0\xb2\x6a\x75\x92\xd6\xa4\x67\xf9\x92\x1b\x18\x1a\x90\x4c\xee\x66\x44\xa8\x96\x15\x61\x36\xe5\x29\x3a\xc0\xf1\x59\xdd\x97\x33\x92\x08\x57\xbe\xf8\x11\x6d\x23\x3e\xbe\xaf\xe0\xbf\x32\xea\xae\x34\xd0\x64\x1b\xbc\x8a\xa0\xe7\xf2\x90\xd1\x34\x30\xc3\x08\x37\x0c\x75\xa5\xa3\xba\xa9\x1d\xea\xd5\xa3\xa3\x10\xfc\x28\xcc\xfc\x8e\x30\x36\x44\x46\xd7\x2d\xa5\x94\x49\x44\xee\xf3\x30\x26\x69\xb1\xcd\x0d\x2a\x85\x99\x5a\xc2\x17\x43\x5f\x98\x45\x78\x63\xae\x33\xb2\x45\x53\xfa\xf3\x40\x1d\x7c\x09\x84\xa9\x59\xff\x06\xf6\x6b\x20\x56\x4f\xa1\x93\x2f\x12\x24\x68\xd4\xc9\x69\xb1\x47\xd0\xa0\x54\xb5\x7f\x91\x38\xdc\x55\xb5\xb2\xff\x3d\x9c\xbf\xd5\x38\xda\x15\xf1\x89\xcb\xb7\xa8\x9d\x1b\x24\xcf\xb3\x15\x94\xbe\x9c\xea\x45\xd4\xf7\x0b\x1f\xf4\xf9\x74\x97\x10\x80\x84\x80\x59\x05\x9e\x52\xdd\x17\x75\xc1\x32\x52\x96\x8a\x76\x50\xb2\x0a\x1f\x6f\xec\xa4\xce\xb3\x0e\xd5\x01\x59\xaf\xc5\x4b\x9f\x1a\x6d\xb2\x1f\x92\xd4\x38\x81\x98\xa7\xd4\x5a\x49\xde\xec\xf4\x16\x3f\x25\x1d\x07\xdb\x4a\x64\x5f\x03\xa7\x2c\xa5\x29\x23\xa1\xfb\x31\x12\xa7\x15\x23\x71\x5a\x33\x12\xa7\x3b\x46\xe2\x6c\x63\x24\xc9\x46\x24\x6b\xc9\x48\x9c\xff\x00\x46\xe2\x3c\x21\x46\xe2\xec\xc7\x48\x9c\x2f\x99\x91\x38\x4f\x8d\x91\x38\xfb\x31\x12\xe7\xf1\x32\x92\x1d\x54\xfb\xca\x48\x36\xbc\x86\xea\x84\x02\x68\x59\x23\xf5\xaa\xa0\x21\x25\xc9\xbf\xf9\xef\x4c\x1f\x90\x75\x26\xdf\xd4\xee\xaf\xce\xf3\x0e\xd5\x79\xfe\x90\x0c\xa9\xf8\xb6\x72\x07\x8a\x54\x08\xe1\xd8\xa9\x44\x37\xa4\x4a\x7c\x90\xdb\xf1\x5e\x37\x88\x6c\xbd\xd7\x2d\x5e\x39\x6d\xdc\xeb\x3e\x27\xf3\x30\xbe\xef\x6a\xbb\x5b\x56\xd7\x62\xbb\x1b\xca\x7f\xc9\xdb\xdd\xd2\x7c\xdd\x6d\x77\x2b\x07\xca\x55\x8e\x9a\xec\x77\x6b\x31\xec\x0e\xb8\x46\x87\x6a\x09\x79\x95\xdb\xf0\x04\x89\x47\x8f\x77\x3b\x5b\x8c\xf1\x07\xdc\xce\xd6\x83\x69\xcf\xed\xec\xe4\xc5\x67\xb7\xdb\xd9\x11\xdb\x6b\xf1\x38\x62\x6d\x16\x8f\xb9\xd2\x7b\x2d\x1e\x41\x42\x57\x8b\x47\xa9\xcc\xa6\xc5\xe3\x28\x0e\x61\xe1\xc8\x5a\xaf\x1d\x65\x45\x4f\x7c\xed\x38\x62\x4f\x67\xed\x28\x75\x6d\xbe\x76\xd4\x4d\xfc\x32\xd7\x8e\xe0\xa3\x4f\x6b\xed\x28\x81\xa0\xf9\xda\x51\x16\x7b\x04\x0d\xaa\x58\x3b\xee\xa0\x5a\xf3\xb5\x63\x03\x9a\x1e\xb1\xb6\xdc\x79\x39\xed\x9a\x3a\x2f\xa7\xad\x99\xf3\x72\xba\x99\x38\x7f\xc0\xd3\x18\x8b\x13\xbe\xba\x61\xce\xa2\xba\x16\xc4\x79\x39\xfd\x92\x79\xb3\x30\x5e\x77\xfc\x54\x38\xcf\xae\xa4\xf9\xb1\x50\x53\x18\x42\x0f\xc8\x4c\x95\xb3\xee\x49\x4c\x97\xd3\xae\x79\x29\x6b\x18\x8b\x19\x01\x41\xcb\x40\xcd\x95\xd4\x27\x1f\x8c\x29\xb2\xd8\x23\x67\x98\x06\x63\x46\x26\xdc\x3c\xa2\xde\xa6\xc3\x5d\x74\x2c\x63\x56\xc8\x6e\xd1\x8f\x49\x89\x9b\x42\x89\x03\x6d\x52\xfd\x54\x9f\xd7\xd2\x40\xe0\x28\xa6\x61\x4c\xf9\x7d\xc3\x62\x17\xd4\xdd\x31\x50\x34\x29\x72\x45\xff\x6a\x5a\xe4\x92\x30\xf0\xa8\x60\x43\x00\xbd\x88\x29\x35\xdf\xfd\x26\x66\xb8\xa6\x75\x1f\x88\x2b\xdd\xf3\x91\xff\xad\x42\x48\xcd\x04\xd7\x28\x5a\xfe\x22\x0c\xfe\x82\x19\xba\xc0\xe3\x1f\xf2\xbc\x86\x11\x93\xe7\x35\x80\xff\xb5\x3e\xd8\x40\x88\xfa\x19\x59\x37\x1d\x89\xfa\x7f\x10\x75\x75\x76\xb9\xe7\xf1\x0f\x42\xc2\x33\x68\xd7\x65\x27\xba\x3c\x47\xd6\x85\xd3\x89\xa4\x17\xc8\xfa\xe0\x5c\x5e\x77\x22\xeb\x25\x00\xfb\xd9\x55\x27\xa2\xfe\x17\x59\xd7\xce\xf9\x99\x91\xa5\x07\xd3\x9e\xc2\xfe\x0f\x59\xa7\xef\xcf\xcf\x4f\x2e\x86\x66\x07\xb8\x45\xb4\xb1\xc6\xed\xf6\xc1\xc6\x66\x6a\x94\x03\x54\x9c\xf5\x24\xc6\xe8\x77\xf2\x30\x66\x64\xa3\x9f\xbe\x97\xe9\x41\x2e\xf1\xf0\xfb\x74\x34\xcb\x22\xf9\x5d\x8c\xc2\x6a\x5c\x3e\x92\xfb\xf0\xb9\xcc\xb6\xda\x9a\x47\x20\xdb\x92\x8c\x49\x4f\xf7\x99\x6b\x98\xf0\x91\x56\x4f\x3f\x9c\x61\xd6\xbb\xc3\x71\x20\x76\x30\x76\x2f\x66\xb0\x21\x77\x74\x70\x26\x3f\xf6\x3c\x73\xfc\xf3\xb1\xa6\x04\x99\x33\xe1\x90\x26\x74\x45\xe2\x27\x0e\xb6\x04\x36\x92\x54\xa5\x72\xc9\x13\x82\x7b\x93\x70\x11\x8b\x43\x26\xd3\xb3\xf6\x2c\x04\x1d\xe9\x92\x59\xe8\x83\x8f\x0c\xb4\xa9\xed\x73\x1a\xe8\x0a\x25\xb3\xd4\x76\x13\xf8\xab\x93\xc1\x3c\xd9\x27\x1f\xb0\xbf\xc8\x3d\x3a\x90\x6e\xf2\x91\x7d\x3a\xf5\x43\x46\xb4\x49\xac\x3d\xd6\x12\x99\x4f\x12\xa0\x74\xf1\x70\x30\x79\xae\x5c\xd5\x51\x60\xb6\x51\x01\x2e\xcc\x79\x51\x0d\x6a\x5d\x4e\xe5\x2b\x07\x4b\x51\x87\x5b\x72\x2f\xc8\xb8\x4a\x32\x93\x59\x6e\xad\xff\x32\x99\xc8\xf4\x21\xc2\x6a\x1d\x21\x5d\xa9\x76\xc6\xda\x41\x8b\x84\x03\x69\x92\x33\xc7\xee\x2c\x9d\xab\x74\x2d\xe7\x90\x28\xca\x15\xbe\x3c\x81\x54\xfb\xe6\x26\xcb\x76\x96\x2a\xbf\xa6\x3c\x8b\x05\xad\xfc\xfc\xc4\x94\xab\x9e\x88\xe5\xe3\xfa\x83\x5c\xe4\xe3\x51\x1c\x2e\x61\xfa\x8f\x37\x64\x01\x7a\xc6\x37\x89\xd0\x4d\x9b\x50\x5f\x2c\x27\xf9\x6c\xdb\xb4\xbf\x83\x2d\x19\xf0\x48\x77\xb6\x0b\xa3\xa4\x13\x44\xfe\x44\xe5\x9e\xf4\x10\x8f\x17\xa4\x06\x65\x0b\x9e\x83\x72\x12\x37\xe5\x4f\xf0\x72\x5f\x2a\x63\xb8\x77\x77\x1f\xc3\x38\xc3\xc2\xe7\x2a\xe9\x23\xd1\xf5\xb5\x0f\x4d\xc7\xd7\x66\x90\xdd\x5e\xfb\x74\x48\x63\xe2\x72\xf9\xe6\xaa\xa3\x6f\x5f\x92\x5e\x6f\x31\x1f\x25\x13\x67\xee\x0c\xcd\x77\x90\xb2\xf5\x1c\x4d\x0d\x41\x22\x6f\xb3\xe3\x3b\x0b\x53\xb6\xe8\xd9\x59\x16\xf7\xf4\xb9\x34\x20\xfb\xc4\xa7\xd3\xe0\x54\xa5\xab\xfe\xad\xd4\x31\x77\xa0\xa7\x48\xd7\x45\xcc\xc6\x50\x5e\xcb\x02\xcc\x8a\x33\x40\x71\x4c\x78\xb6\x8c\x34\x62\xf6\x30\x45\xac\xed\x3a\x4b\x1a\xf8\xef\x00\x00\x00\xff\xff\xb3\x81\xef\x25\x46\x63\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 25414, mode: os.FileMode(384), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

