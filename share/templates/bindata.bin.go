// Code generated by go-bindata.
// sources:
// index.html
// DO NOT EDIT!

// +build bin

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xe4\x3c\xeb\x72\xdb\xb8\xd5\xff\xf3\x14\x58\x7e\xdf\x76\x76\xb7\x4b\x32\x76\xec\x36\x93\x95\xd4\x49\x6c\x75\x97\x53\xdb\xd1\xc4\x76\xda\x1d\x57\x93\x81\x44\x48\x42\x42\x91\x5c\x00\xf4\xa5\x4f\xdf\x03\x80\x57\x89\x92\x28\x8a\x64\xdc\x89\x67\x2c\x91\x04\xce\x1d\x38\x37\x52\xbc\xbb\x73\xc9\x8c\xfa\x04\x19\xfa\xfb\x53\x14\x0a\xba\x24\xc6\x78\xdc\xe3\x21\xf6\x07\x77\x77\xd6\x39\x16\xd8\xe2\x4f\x5c\x90\xe5\xa7\x00\x3e\x7d\x61\xe9\x49\x9f\x66\x01\x5b\x62\x01\x53\xed\x78\x2e\xf1\xdd\xf1\x78\x0d\xe5\x02\xa0\x7c\xac\x91\x62\xb4\x60\x64\xd6\x37\x6c\x03\x09\x2a\x3c\xd2\x37\x92\x51\x54\x4e\x2a\x19\xfe\xc4\x17\x01\x03\x5a\xc6\x06\x96\x56\xe7\xf5\x6c\xbc\x91\x21\x0f\x03\x2b\x2f\x7a\x2e\xbd\x47\x53\x0f\x73\xde\x37\x58\xf0\x80\xc8\x23\x08\xe1\x12\x17\x38\x34\x27\x81\x10\xc1\xd2\x18\xbc\x40\x28\x3f\x6d\x1a\x78\xd1\xd2\x47\x7c\x89\x3d\xcf\x3c\x42\x82\x3c\x0a\x93\xd1\xf9\x42\x18\x83\xfc\xb4\xbb\x3b\x3a\x43\x9a\xc9\x10\x33\xbc\xe4\xd6\x05\xf6\xad\x2b\x32\xc7\x82\xde\x93\xf1\x18\x58\x7c\x30\xe5\xc7\x82\xba\x04\x98\xf4\x38\x5c\x94\xc7\xf9\x8b\x92\x73\xc5\x00\xb0\xb0\x38\x4a\x50\x2f\x4e\x35\xd5\xe0\x9e\xb0\x99\x17\x3c\x00\x61\x9c\x68\xf2\x22\xc0\x2e\xc2\xf7\x73\xe4\x52\x1e\x7a\xf8\x09\x05\x60\xa6\xc0\xe7\x86\xd6\x79\xa2\xb7\x98\xa5\x1b\x8f\xfa\x5f\x14\x67\xe3\xf1\x40\x19\x3b\xa1\x91\x30\x61\xca\x0f\x04\x87\x82\xc0\xf0\x94\x98\x21\x23\x08\x88\x62\x61\x7a\x64\x06\x32\x5b\x96\x85\x62\xdb\x27\xb4\xa5\xda\x35\xcf\xf6\xe2\x68\xd0\xb3\x41\x2b\x4a\x89\xe9\xc1\xba\x36\x3d\xcc\xe6\xc4\x3c\x3a\x6a\x59\x87\x91\x97\x37\xf6\x92\xf8\x11\x4a\x05\x95\x07\xf1\x3c\x98\xe9\xd1\xe4\xb0\xc8\x2f\xf5\xc3\x48\x98\x73\x16\x44\xa1\x91\xcd\xd8\x38\xc7\xf4\xf0\x84\x78\xda\x5c\x7e\xf0\xc0\x30\x40\x01\x69\x9e\xea\x62\x17\xfc\x24\x82\x45\xe8\x2b\x0b\xc7\xa3\xfa\x8a\x5e\x7f\x88\x93\x69\xe0\xbb\x98\x3d\x49\x7b\xe3\x89\x47\xdc\x6c\x6f\xe4\x54\xf6\x76\xc2\x41\xcf\x82\xe8\x2d\xb1\x37\xf1\xdc\x54\x98\x8c\x4b\x97\xd2\x55\xba\x94\xac\x0b\xc2\xb9\xf5\x1b\xcc\x81\x0d\x86\x8a\x7f\x31\x91\x9c\x3e\x50\x51\x9e\x68\x3a\x05\x68\xb4\x03\xf9\xf0\x51\x30\x7c\x26\x71\x81\x6d\x57\x68\x0c\xcc\x5d\xd0\x37\x40\x5d\x6b\x22\xaf\x83\x96\x95\x72\x19\x30\xd2\x9a\x52\x14\xf2\xad\x4a\xd9\x01\xab\x55\x82\xfe\xbc\x5d\x29\x85\xd3\x9e\x9d\xec\x91\x9e\x1d\x79\xeb\xfb\x96\xfc\xb1\xbe\x75\x93\x75\x88\x5e\xea\x7d\xba\xb2\x3d\x73\x28\xb8\x60\x34\x24\xd9\x7e\x5c\xf1\xd3\x62\x41\x30\x2c\xf5\x82\xcb\xd2\xbe\x1b\x81\x47\x49\x9c\xb3\x31\x18\x11\x46\x03\x37\xf6\x4f\x3b\x66\x17\x5c\x39\xfa\x88\xbd\x88\x6c\x07\x04\xfa\xf1\xb8\xd2\x4b\xce\x5b\x79\x58\x46\x1c\x86\xfd\x39\x41\xff\xef\x61\xf4\xa6\x9f\x0e\x58\x17\x94\xcb\xd5\x57\x14\xa8\x82\x28\xa5\xee\x28\x63\x19\x3d\x50\x57\x2c\xcc\x57\x8c\x2c\xa5\x0b\x00\xaa\x96\x16\x7e\x3c\x5e\x6a\xfe\xea\x68\x41\x23\x52\xba\x48\x43\xfc\x06\x04\xa6\xc7\xd6\x14\x12\x87\x5e\xf5\xf5\x22\x5b\x41\xf9\xcf\x2c\x30\xac\x00\xad\xc4\xeb\x25\xc8\xd5\x71\xc0\xbe\x24\xcb\x0e\x22\x36\x50\x09\xb4\xff\xae\x1c\xaf\x25\x63\x4d\x04\x6c\x4d\xba\xc5\x70\x7d\xa8\x06\xbf\xc5\x78\xad\x74\xd6\x5d\xc0\x56\xe4\x5a\x8b\xd8\x19\xf6\x5a\x21\x3b\x03\xef\x3c\x66\x2b\xd2\xad\x05\xed\x0c\x7b\x8d\xa8\x9d\x01\x77\x10\xb6\x0b\xcb\xb1\xb3\xb8\x9d\x78\xa6\xfd\x23\xd6\x4d\x20\xb0\x57\x07\xf0\x96\x93\x5a\x89\xc2\xdf\x19\xd9\x91\x27\x6c\xa4\xf7\x7d\xdd\xfc\x02\x82\x61\x2e\xc1\x80\xb3\x2c\xc3\x80\x93\xda\x29\x06\x44\x7b\x09\xfe\x0f\x2a\x8d\x5b\x33\x5d\x90\x08\x94\x0d\x0e\xc2\x20\x8d\x71\x10\x02\x69\x95\x1a\x08\xd0\x64\x6e\x46\x9c\x84\x53\x61\x20\x17\xd4\x19\x9f\xf4\x33\xb6\x46\x53\x50\x6d\x9e\x4f\x75\x61\x87\x25\x5b\xce\x8d\xdc\x59\xd7\xa9\xd1\xf9\xac\x83\xcc\xe8\x9c\xf2\x2f\x28\xe2\x18\xd6\xf8\x3e\xd9\x11\xf0\xd6\x44\x72\x94\x51\x6f\x31\x41\x3a\x50\x8f\xdf\x62\x7e\x24\x55\xd6\x5d\x7a\x24\xa9\xb5\x96\x1d\xa5\xc8\x6b\x25\x47\x29\x74\xe7\xb9\x91\xa4\xdc\x5a\x6a\x94\x22\xaf\x91\x19\xa5\xb0\x1d\x24\x46\xf9\x75\xd8\x54\x5e\x74\x77\x67\xff\x84\xc2\xe0\x0b\x41\x61\xc4\xe8\xec\x69\xca\xf9\x9b\xc2\x5c\x97\x05\xa1\xdc\xa9\x05\x97\x83\x19\x81\x70\x65\xc7\xfb\x00\xfd\x64\xc7\x8d\xfb\x5d\x11\x2f\xd9\xc0\x77\x77\x0f\x54\x2c\x10\x44\x7d\xf2\x58\x94\xf1\x63\xa2\xd6\x2f\x52\xc2\x17\xa5\xeb\xe3\x02\xa6\xe8\x75\x10\xd3\x8b\xaf\xc5\x96\x2b\x18\x6e\x70\x4e\xee\xe9\x94\xe4\xb9\x83\xd9\x67\x52\x80\x78\x7a\x16\x25\xd3\xd6\xfd\x3e\x41\x7c\x2f\x91\x8e\x1a\x11\xe9\x32\x88\x7c\x01\xa9\x63\xcb\x32\x15\x82\x73\x25\xf1\x4e\x1b\x11\x4f\xe7\xd3\xcf\x4e\xb8\x93\x46\x84\x53\x39\xff\xb3\x93\xed\xb8\x11\xd9\xde\xde\x63\xfa\x0c\x0d\xf7\xaa\x29\xc3\x7d\xdf\xa4\x6c\x9b\x4b\x2d\x77\x96\xab\xb4\xdc\x59\x56\x68\xb9\xb3\x9a\x75\xd6\x6a\xc2\x0b\xa5\x04\xe0\x02\xcf\x78\x85\x97\x7b\xd6\x2c\x19\x12\x14\x63\xa1\xac\x3e\x96\x7c\x1d\x34\x67\xf8\x69\x45\x12\x9d\x27\xe7\xea\x2c\xa0\x57\x56\xe9\xc5\xd9\xbb\xe3\x07\x2e\xe1\x48\xc8\x19\xe9\x7c\x7d\x31\x03\xe8\x86\xcb\x92\x6a\xb2\xc8\x24\x54\x79\x6e\xc6\x63\x54\x98\xde\x0d\x8b\x6a\xb7\x6e\xe5\x71\x06\x15\x6d\xc6\xe3\xac\x50\xdf\x36\xc0\xe3\x96\xca\x57\x6b\x50\x17\xbe\x55\x74\x5d\x52\x11\xaf\xa9\xfb\xfb\x82\xba\x8b\x10\x5f\xb3\x94\x9e\x86\x51\xd7\xb5\xf4\xd9\xe8\xb6\x83\x62\x1a\xa8\xec\x55\x45\x4b\xae\x9a\x28\xa3\x01\x4f\x8b\xf5\xf3\xa1\xba\xfb\x16\x0b\x68\xa5\xb3\xee\x2a\x68\x45\xae\xb5\x12\x3a\xc3\x5e\xab\x86\xce\xc0\x3b\x2f\xa2\x15\xe9\xd6\xaa\xe8\x0c\x7b\x8d\x32\x3a\x03\xee\xa0\x8e\x2e\x2c\xc7\xce\x6e\x30\x9c\x81\x74\x35\xbb\xf6\x6c\x47\xb3\xb7\x1c\xf0\xfa\x89\xd7\x82\xfb\x27\xa6\xa2\x16\xa0\xe3\x7a\xf5\x6f\x30\x40\x18\xcc\xa5\xbd\x70\x96\xe5\xbd\x70\x72\x50\xe2\x9b\x95\xe8\x12\xaf\x75\x75\x58\x97\x3e\x59\x83\x2b\x29\x8b\xc4\x2c\x4d\x95\x75\xeb\x0b\x57\x12\xbd\x24\x8b\xa8\x61\xca\x60\xeb\x22\xe1\xe4\x42\xcb\x74\xe5\x5a\x29\x12\x4e\xaf\x34\x40\xd9\xa4\x3e\xe4\x15\x9c\x6c\xe3\x40\x2e\xba\x22\x07\xe9\x95\xaf\x7b\x8b\x84\x76\x7e\x8b\xc4\xe9\xe2\x16\x89\xe3\x0b\xb8\x08\x29\x18\xdf\x2b\xb9\x73\x9a\xb9\x45\x92\x51\x6f\x31\xc5\x3b\x50\x8f\xdf\x62\x86\xe7\x74\x7a\x8b\xc4\x69\xf3\x16\x89\x73\xd0\x2d\x12\xe7\xab\xdd\x22\x71\xda\xbc\x45\xe2\x1c\x70\x8b\xc4\xe9\xf0\x16\x89\xd3\xc2\x2d\x92\x9d\x99\x5d\xea\x94\x6a\x25\x4d\xa3\xb2\xb6\xc5\x39\x0b\x42\xfe\xf3\x90\xb1\x80\x71\xe4\xf8\xf6\xfb\x48\xa0\x90\xb0\x78\x2b\x1a\x1b\x91\x1f\xe7\xe3\x68\xc1\x21\xa0\x8b\x00\xac\xeb\xbc\x47\x21\x2f\x23\x38\xc2\xd3\x2f\x44\x34\x45\x2b\xc5\xb6\x89\xdc\x3b\xda\x18\x2d\xa0\xd1\xa3\x83\x49\xcf\xa6\x83\x15\x5a\x7b\x64\x9f\x3e\x81\x10\x96\xcb\x3f\x69\xae\xed\xaa\xc6\x9a\xeb\xbc\xd2\x99\xd5\x48\xc3\x34\x41\xe6\x8c\x2a\xa2\xda\xac\xc3\x3f\xf9\x13\x1e\xfe\x52\x30\x90\x6a\xb3\x22\x57\x2d\x43\xa2\x97\xe1\x32\x70\x23\x2f\x40\x27\xbf\xa6\x66\xca\x77\x1a\xd7\xe1\xc0\xbe\x39\x98\x98\x5b\xb5\xb0\x1d\x3f\x65\xd9\xde\x08\x2d\x97\x46\x39\x38\x8c\xa4\xf0\x3f\x97\xc0\x93\x64\xdb\xac\xc3\xeb\x1d\xb5\x83\x7e\x0c\x5f\xca\x80\x46\x90\xe7\x20\xfe\xca\xeb\x30\xef\xa1\xa4\x0d\x7e\x00\x37\xa5\xb8\x27\x9e\xc0\xb1\x06\x90\xf1\xd2\xf8\xb1\x64\x44\x52\x5d\x1f\x4a\xf8\xde\x38\x94\x80\x8d\xc7\xd2\x28\xa9\xcb\x5b\x77\x2a\x52\x2d\xb9\x1d\x97\xe8\x35\xc7\xd9\x06\xdd\x9c\xa7\x56\xd9\x06\xbe\xd9\x36\xa9\x33\xdb\x04\xbf\xc3\x36\xc3\xcc\x2a\x5b\x11\x94\xd8\xa6\xc1\xed\xb1\x6b\xe5\x87\xa9\x1f\x5d\x5f\x3b\xb1\x57\xdc\xb1\xfa\x12\x0c\xa5\xcb\x2f\x46\xb1\x63\xfd\xad\xf9\xf4\x4d\x1a\xdb\xc5\xd1\x28\xc7\xcb\x76\x14\x65\x5a\xef\x40\xdd\xef\x7e\xbf\x19\x5e\x97\x2a\xfb\xdd\x13\x94\x13\x3b\x54\xad\xa1\x4b\x15\xad\xc0\xab\xa9\xf9\x9d\x73\x73\xbd\x45\xc7\x32\xd4\x6d\xe4\x43\xc1\x6e\xd1\xae\x04\xae\xae\xda\x96\x2b\xda\x90\x77\x5d\xd1\x8e\x78\x07\x15\xed\x88\x05\x32\xf3\xdd\xb3\xa0\x05\xd6\x9a\x28\x68\x53\xe2\x2d\xd6\xb3\x07\x6a\xf1\x5b\xac\x67\xa5\xca\xba\xab\x67\x25\xb5\xd6\xea\xd9\x14\x79\xad\x7a\x36\x85\xee\xbc\x9e\x95\x94\x5b\xab\x67\x53\xe4\x35\xea\xd9\x14\xb6\x83\x7a\x36\xbf\x0e\xff\x97\x1f\xf9\xdb\xef\xa9\x9d\x11\x6f\xea\xe9\xbf\x91\x73\xfe\xbc\x1e\x48\x92\xa2\x35\xf3\x14\xe0\x6d\xfb\xa2\x55\x94\xa7\x99\xa7\xc7\x6e\xaf\x87\x1f\x9e\x9f\xad\x9a\x79\x78\x6c\xf4\x0c\x25\x6b\xe6\x79\xc6\x2b\xe7\xf9\x49\xd6\xcc\x63\xa8\x1f\x9d\x0f\x37\xcf\x4f\xb6\xbf\x34\x22\xdb\x87\xe1\x75\x37\xa2\x4d\x89\xec\x8d\x56\x94\xed\xaf\xcd\x3c\x3e\xec\x5c\x0e\x9f\x89\x63\x7c\xdd\x88\x40\x67\xef\x2f\x2f\xdf\x5e\xd5\x74\xf6\xab\x8d\xce\x10\xea\x0d\x9e\x6b\x74\x86\x3c\x6b\x74\xaa\xb1\x83\x1a\x9d\x59\x63\x32\x04\x0d\x38\xe7\xb5\x7f\x50\x07\xe0\xb7\xd5\xc1\x33\x18\x4e\xd8\x21\x34\x47\x8c\x06\x8c\x8a\xa7\x43\x70\x5c\xd1\x69\x9d\xdf\x01\xa6\xf0\xd7\xf4\x3f\x07\xc1\x7f\x20\x1c\x92\x44\x5f\xec\x87\x23\xd9\xa8\x31\x92\x1b\xba\xbb\x43\x9d\x49\x5c\x68\x67\x1f\xdc\x77\xe8\x7d\x77\xfe\xfe\xec\xe6\xf7\xd1\x10\x2d\xc4\xd2\x83\x41\xfd\x25\xeb\x79\xc8\x5f\xe3\xac\x77\x49\x04\x14\x77\x0b\xcc\x38\x11\x7d\x23\x12\x33\xf3\x75\x92\x10\xab\xb2\xbe\xe2\xfb\x9a\x90\xbe\xde\xb3\x35\x50\x0e\xf7\x42\x88\xd0\x24\x7f\x44\xf4\xbe\x6f\xfc\xcb\xbc\x7d\x6b\x9e\x05\xcb\x10\x4a\x68\x28\x17\x0d\x90\xde\x97\x60\x7d\xc3\x19\xf6\x89\x3b\x4f\x52\x6e\x0d\x29\xf1\xf7\x8d\x7b\x4a\x1e\x42\xa0\x91\x9b\xac\xde\x97\xd1\x77\xd5\x0f\x52\x4c\x75\xf2\x33\x38\x10\x2a\x28\xf6\x4c\x3e\xc5\x1e\xe9\x1f\x59\x2f\x61\xa7\x7d\x67\x9a\x72\xc3\x3a\xc3\x71\x8c\x56\x7a\x14\xc4\x88\xa7\x5a\x0c\x4c\x4c\x23\x81\x28\x60\x35\x92\xb7\x5a\xcd\xf0\xbd\x3c\xb7\xe0\x43\x82\x4b\x35\xd2\xd9\xd8\x34\xd7\xc0\x35\x14\x87\x15\x06\x96\x7c\x75\xfc\xf8\xea\x38\xc5\x01\xfa\x7a\xaf\x74\xf1\x91\x30\x4e\x03\x7f\x3c\x4e\xd0\xf2\xe4\xc0\x7c\x75\x6c\x85\xfe\xdc\x40\xe2\x29\x04\x09\xaf\xf0\x95\xb1\x46\x01\x87\xa1\x47\x4c\x11\x44\xd3\x85\x59\xa0\x76\x74\xfc\xf2\x11\xfe\xf7\xa2\x07\xf3\x15\xc1\x3d\xa8\x9c\x9c\x3c\xc2\xff\x7e\x54\x4e\x4e\xf6\xa5\x72\x7a\xfc\x08\xff\xfb\x51\x39\x3d\xde\x97\xca\x6b\xd0\xd8\xeb\x3d\x35\xf6\x7a\x83\xc6\xb8\x78\xf2\x08\x5f\x10\x59\xc4\x69\xf3\xc9\x6d\x6f\x43\xed\xb7\x0d\x3f\x0c\xdb\x2a\xc4\x59\x72\xa2\xde\xb0\xc9\x26\xec\x4d\x02\xf7\x69\xbd\x06\x15\x01\x54\xfb\x98\x95\x16\xa1\xf1\x98\xa9\x36\x5b\xfe\xfd\x32\x8b\xe3\x5c\xa3\x6e\x89\xd9\x9c\xfa\x71\x2f\xd1\x7c\x99\x84\x1e\xf5\xec\x8f\xee\x44\xf6\xd7\xde\xf1\x96\x80\x47\x21\x4c\x23\x5c\x86\x20\xd8\xf5\xa1\x07\x27\xeb\x2f\x84\x43\x56\xea\xad\xd2\xa0\x6c\xc8\xfd\xce\xdf\xd8\xf6\xc3\xc3\x83\x05\x13\x19\xfc\x5b\xd3\x60\x69\x6b\x07\x61\x83\x12\x09\xe6\x84\xdb\x12\x25\x17\x7f\x9b\x2e\xc3\xfe\xba\xc2\x8c\x41\xe2\x4f\x64\xc3\x68\x71\x9c\x95\xfd\x59\x18\xd6\x20\xb7\xe1\x9c\x61\x97\xa4\xb1\xbe\x4c\x4d\xba\x59\xd8\x34\x87\xe9\xb5\x94\x85\xac\xbd\x95\xf7\xd7\x9a\xa7\xf2\x86\x5e\xc2\x61\x1c\x79\xf2\x49\xce\x2e\x53\xca\xa0\xa3\x9c\x33\x95\xdd\x8a\x09\xb8\xe0\x28\x44\x9b\x2d\x1c\xbf\x18\x70\xc5\xbe\x2b\xcd\xd5\x52\x73\x27\x90\x56\xbe\x79\xae\xa8\xe7\x2d\xb3\xd6\x9f\x49\x4f\xf2\x87\x52\xf4\x32\xee\x3c\xbc\xbe\xf2\x50\x09\x2f\x72\x9e\x66\x64\x37\x4e\xf9\xda\xa1\x2a\xcb\x59\xcd\xab\x88\xd3\x9d\x55\xe3\x53\xce\xab\x8a\x53\xfe\x6e\xa1\x0a\x9f\x6a\x5e\x45\x9c\xb4\x22\x9f\x74\x0f\x3e\x43\x5e\x0d\xa7\x9c\x97\xe1\x54\x7b\xd5\x27\xe8\x07\x8f\xf8\xc8\x1a\x3e\xca\x50\x4e\xfd\xf9\x8f\x69\x5f\xaa\xe2\x6d\x90\xd5\xa9\x2b\xad\xfb\x38\x09\x0b\x66\x33\xc8\x63\x8a\xef\xdc\x5a\x9c\x0e\x52\xb2\xb0\x62\x4f\xcb\x77\xe2\x4a\xcb\x2f\x1d\x56\xfe\xbe\x6f\xcc\x20\xf7\x30\x1f\x88\xdc\xa6\x6f\x20\xd7\x58\x10\xc8\x6e\x8d\x8a\xcf\xb8\xc4\xf9\xe1\x71\xba\x6b\x57\x5b\xb0\xa8\x07\x7b\x6f\x70\x17\x44\x22\x8c\x04\x87\x64\xcf\xf8\xb7\x2f\xdf\xb6\x49\x07\x72\xf0\xff\x50\x32\x62\x69\x0f\x35\x46\x7e\x20\x20\x1b\x52\x3f\x5e\x85\x63\xa6\x6e\x23\xf8\x16\x3a\x8b\x2f\xf5\x26\xa0\xf6\xa2\xbe\x65\x86\xa6\x90\x24\xf6\x38\x5a\xb3\xc8\x78\xcc\xd3\x9a\x67\x32\x78\x23\x9f\x03\xe9\xd9\x92\xb1\x6c\xbb\x17\x12\xd3\xb8\xf0\x01\x21\x03\x55\xfa\xe4\x68\x6d\x68\x64\x6f\xac\x7f\x2a\x6a\x48\xc9\xa5\x08\x5a\xbf\x81\xb6\x75\x89\x92\x5d\x4b\x3a\xeb\x5b\x78\xce\x7b\xe5\x5d\x1e\xab\x90\x73\xf3\x29\x2c\x0f\x91\x8f\xf8\x9f\xf1\x3d\xd6\x57\x8d\xc1\x3d\x66\x48\x26\xc9\xa8\x9f\xb4\xc9\xc7\xe3\x5f\x80\xb4\x1a\x1e\x54\xc0\xb0\x9a\x81\x23\xce\xa6\xe5\x99\xc4\x67\x6e\xeb\xf0\x77\xf3\xf6\xd7\x5f\x87\xe7\x13\x0a\x17\x97\xd4\xb7\x27\x91\xef\x7a\xc4\x82\x43\xeb\x33\x4f\xee\x46\x01\x96\x64\xe0\x33\xcf\x9e\x65\xc8\x31\x06\xfa\x53\xd9\x07\x6c\x0c\x59\x1c\xfc\x37\x00\x00\xff\xff\xa2\xc6\xcd\x3c\x50\x56\x00\x00"

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 22096, mode: os.FileMode(420), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

