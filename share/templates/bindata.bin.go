// Code generated by go-bindata.
// sources:
// index.html
// DO NOT EDIT!

// +build bin

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xe4\x5b\x69\x73\xdb\x38\xd2\xfe\xee\x5f\x81\xe1\xeb\x79\x3f\x4c\x85\x64\x7c\x24\x9b\xcd\x48\xde\xb2\x2d\x4d\xc2\x1a\x1f\x2a\x5b\xce\xee\xec\xd4\xd4\x14\x44\x42\x12\x62\x8a\xe4\x02\x90\x6c\x8d\x4a\xff\x7d\x1b\x20\x78\xea\xa4\x4c\xc7\xae\xec\x07\x5b\x22\x88\x7e\xd0\xe8\x6e\xe0\x69\x1c\x6a\xfc\xd0\xba\x3e\xef\xfe\xd6\x69\xa3\xa1\x18\xf9\x7b\x27\xb3\xd9\xfe\x04\x7d\x6c\x22\xeb\x9a\x0b\x12\x88\x2f\x84\x71\x1a\x06\xf3\x79\x43\xbd\x46\xe8\xa4\x31\x24\xd8\x83\x2f\xf2\xeb\x88\x08\x8c\xdc\x21\x66\x9c\x88\xa6\x31\x16\x7d\xf3\x83\xa1\x5f\x09\x2a\x7c\xa2\xbe\xc3\xd3\x6c\x66\xb5\xb0\xc0\xd6\xe7\xab\xf9\x1c\x85\x0a\xb8\x61\x67\x35\x34\xd0\x50\x88\xc8\x24\xff\x19\xd3\x49\xd3\xf8\x97\x79\x77\x6a\x9e\x87\xa3\x08\x0b\xda\xf3\x89\x81\xdc\x30\x90\x62\x4d\xc3\x69\x37\x89\x37\x20\x46\x5e\x32\xc0\x23\xd2\x34\x26\x94\x3c\x44\x21\x13\xb9\xca\x0f\xd4\x13\xc3\xa6\x47\x26\xd4\x25\xa6\x7a\x78\x83\x68\x40\x05\xc5\xbe\xc9\x5d\xec\x93\xe6\x81\x06\x9a\xcd\x3e\x77\x2f\x2f\x90\xd1\xf8\xc1\x98\xcf\x4d\xf3\x77\xda\x47\x4e\xfb\x8f\x93\x86\x4f\x83\x7b\xc4\x88\xdf\x34\xf8\x10\xb0\xdd\xb1\x40\x14\xe0\x0d\x34\x64\xa4\xdf\x34\xec\x3e\x9e\xc8\x67\x0b\xfe\x2d\x43\xfa\x9d\x04\x1e\xed\xff\x61\x9a\x79\xa4\x18\x80\xd3\xbf\x08\x6f\x1a\x47\x87\x8f\x47\x87\x29\x9c\x34\xff\x7c\xae\x41\x79\x82\x6e\x1e\x1d\x5a\x51\x30\x30\x90\x98\x46\xd0\x51\x3a\xc2\x03\x62\xcb\x02\x6d\x84\x0c\x1a\x47\x91\x4f\x4c\x11\x8e\xdd\xa1\x59\x68\xe6\xe0\xf0\xed\x23\xfc\x95\x1a\xb2\x17\x5a\x82\x3a\x56\x45\xe4\xe3\xe3\x47\xf8\xdb\x8c\x7c\x7c\x5c\x15\xf9\xdd\xe1\x23\xfc\x6d\x46\x7e\x77\x58\x15\xf9\x03\x58\xe3\xc3\x16\xd6\xf8\xb0\xc2\x1a\x5c\x4c\x7d\xc2\x87\x84\x88\xc4\x29\x82\x3c\x0a\xdb\xe5\xbc\x8c\x09\x45\x36\x0d\x3c\xf2\x68\xc9\x97\x1a\x88\xbb\x8c\x46\x22\x2f\xf9\x15\x4f\x70\x5c\x6a\x94\x47\x14\xe2\xcc\xcd\xf0\xbe\x72\x9b\xc9\x41\xc2\x08\x7c\x3b\xb4\x0e\xac\xc3\xb7\x49\x81\x35\xa2\x81\xf5\x15\x34\xf0\x60\xb0\x99\x23\x4c\x83\x82\xd8\x6c\x06\x41\x6d\x75\x4f\x3f\x7d\x6a\xb7\x7a\x14\xc6\x34\x54\xd7\xaa\xc5\x82\xb3\x19\xf1\x39\x99\xcf\xa1\x3d\x5d\xae\xca\x02\x6f\x3e\x37\x92\xa1\xdc\xb0\x63\x2d\x75\x47\x6c\x3d\x1b\x9c\x34\x7a\xa1\x37\xd5\x85\x01\x9e\x20\xd7\xc7\x1c\x0c\x0d\x5f\x7b\x98\xa1\xf8\xc3\xf4\x48\x1f\x8f\x7d\x91\x3c\x72\x01\xa3\xdb\x05\xff\x44\x06\x62\x21\x0c\x46\x59\x9d\x0e\xa0\x10\x5c\x95\x36\xe8\xd1\x14\x4d\x8e\x6b\xe8\x15\x61\x66\xdf\x1f\x53\x2f\xa9\x53\xaa\xa5\xd1\xa5\x66\x84\xc1\x5c\xe0\x9b\x23\xcf\x3c\x40\x11\xf6\x3c\x1a\x0c\x4c\x9f\xf4\x61\xe2\x49\x7c\x91\xc8\xf7\xc6\x42\x84\x41\x09\x42\x84\x83\x81\x4f\x24\x84\x8f\x23\x4e\xbc\xc4\xd7\x71\x65\x6d\xe7\xb8\x92\x54\x2e\xae\x95\x14\x63\x36\x90\x3e\xfc\x3f\x8d\x95\xbe\xce\x35\xab\x42\x21\xc2\x69\xb3\x9c\x99\x61\xe0\x4f\x8b\x55\xa0\x52\x37\xd6\x23\xb3\x0e\x78\x01\xc4\xd6\x20\xa9\xe8\x85\x66\x17\xa0\x5e\x8d\xa4\x1d\x1b\xb1\xe0\x04\x8c\xa8\xd7\x34\x86\x60\xd9\xa2\x1f\x7a\x0c\x07\x1e\x94\xd1\xe8\x20\x9b\x0d\xc0\x19\x92\x41\xa0\x3e\x30\x8a\x64\x00\x94\xa7\x99\x92\x99\xf3\xaf\x1a\x36\x2e\xb4\x6a\x43\xec\x94\x22\x49\xaa\x51\xf6\x5b\x16\x84\x71\x01\x5a\xe3\xd8\x93\xc6\xd8\xcf\xf5\x21\xa9\x0a\x1f\x65\xf7\xfb\x34\xa9\x87\x5d\x41\x27\x64\xd1\x78\x58\x77\x58\xd2\x23\xff\x68\xdb\x0f\x0f\x0f\x16\xf4\x98\xc1\x9f\xe5\x86\x23\x3b\xe6\x53\x98\x03\x7c\x82\x39\xe1\xb6\x8f\x05\xe1\xe2\x1f\xee\x28\x6a\xc6\x63\xbf\x0c\x09\xa0\x09\x07\xe3\x45\x57\xf9\x74\xa5\x86\xc9\xa8\x80\xf9\x0a\xe5\xbe\xc3\x4c\xc3\x06\x34\x90\x63\x0a\xf5\x29\xe3\x42\x95\x2e\x76\xc4\x0d\x3d\x52\x82\x92\x45\x30\xa9\x2e\xf4\x5a\xa9\x98\xfa\xb3\xe5\xdc\x76\x6f\x9c\x33\xe9\x39\x29\x50\xb3\xce\x4f\x55\x74\x1c\xfd\x7f\xd0\xe3\xd1\xcf\xf1\x58\x90\x91\x33\x8e\x16\xab\xe5\x62\xf0\xae\x23\x7b\xb2\x30\x24\x74\x5f\x5e\x61\x0f\x7d\x5c\xee\xa1\x8f\xd7\xf6\xf0\xe2\xb4\x86\x1e\xda\x63\x7f\xdd\x30\xcd\x3d\xc2\x03\x74\x42\x93\xcf\x66\xba\x28\xd4\x61\xe1\x43\x99\x46\x64\x07\x47\x64\x94\x1f\xf0\x92\x41\x8e\x13\x2a\x09\xfb\x7d\x60\x67\xf3\xa0\x30\xe0\x67\x33\x41\x46\x91\x1c\x7b\xc8\x00\x9a\x83\x56\xf9\xc7\x8f\xf1\x97\x3f\xc1\x0e\xc4\x57\x88\x96\xb4\xcb\xf2\xe9\xc6\xeb\x97\x1b\x7c\x5f\xad\x01\x09\xb0\x04\xbf\x60\xa7\xcd\x1d\x77\xa3\x71\xcd\x1d\x57\x88\x6b\x3a\x4e\x9f\xda\x71\x5a\x4b\xc7\x23\x5e\x56\xe3\xe0\xed\xd3\x3a\x2e\x11\x37\xe9\x95\x3e\x6c\xc8\x09\x13\x81\x09\x24\x53\x72\x88\xa1\x66\x32\x3b\xce\xe7\x3f\x97\x73\x32\x9d\x8a\xc9\xec\x4c\xaf\xe9\xec\x9f\xf6\x7e\xb2\xe7\xf3\xd9\x2c\xd6\x2f\xa7\x30\x96\x39\xed\x9f\x3d\x0c\x4b\x2a\x99\x18\xc1\x92\x25\x21\x1c\xc0\xff\x0c\x9f\xb0\x62\x9b\xcd\x94\x61\xe6\x73\x59\x76\x1e\x7f\x45\x61\x70\xee\x53\xf7\xbe\x39\x13\x43\xca\xad\x21\x10\xb4\x4f\x54\xc9\x1c\xa1\xbd\x78\x2e\x38\x93\xa8\x4a\xde\xea\x42\x7f\x62\xe6\x3d\xd1\x19\xe5\x96\x4a\x31\x3a\x18\xd6\xab\x55\xac\x0a\xca\xf4\xdb\x56\x2b\xed\x5b\x88\x67\x08\x21\x6e\xc8\x3a\x0f\x54\x0c\x91\x7c\x82\xf0\x90\xbe\x06\x50\xf9\x2f\x4e\xa3\x67\x33\x48\x5b\x06\x04\xed\xd3\x37\x68\x1f\xa4\xd4\xb2\x5a\xcd\x8f\xe7\x9d\x3b\xeb\x82\x72\x69\x11\xc1\x40\x93\x5f\xc9\x14\xc9\x91\x67\x02\x54\x6f\x6a\x5e\x19\xaa\xbe\x05\xb9\x8a\x72\xa3\xf0\x92\xc8\x54\x13\xbb\x32\x09\x52\x5f\x83\xf0\x81\xe1\x28\x5d\x78\x26\x52\xb0\xb8\xf6\x12\xc9\xcc\x4c\x79\xe9\xde\xc0\x1c\x73\x12\xb9\x2a\xb2\x54\xbe\x1a\x3f\x36\x35\xc8\x1d\x27\xac\xe3\x0a\xa5\x40\x06\x9d\x96\xfe\xf8\xf4\x16\x6e\xa7\x7c\xb1\x81\xa4\xb0\x06\xfc\x7f\x62\x2a\x16\x1b\x48\x4b\xab\xb4\x60\xd2\x60\x42\x58\x9c\xe1\x2d\x69\xc9\x81\x18\x5b\x6c\x29\x2d\xcd\x5a\xb2\x05\xcb\x05\x5a\xf1\x63\x63\xd8\x79\xfd\x8a\x51\xe7\xf5\xb3\x80\x6b\xfd\xb2\x18\x6f\x5e\x5f\x87\x9b\x47\x99\x4c\x9f\x0d\x29\x62\xb5\x28\xbb\x82\x87\x38\xf2\x10\x5a\x66\x9d\x38\xe8\xd2\x74\x3c\xce\xc2\xa1\xd7\x52\x9a\x4c\x52\xe9\xd8\x14\xf9\xc2\xc4\x10\xd5\x61\x73\x4a\x65\xb0\x49\x61\xde\x93\xdb\x8c\x93\xc2\xa2\x65\x34\x56\xc9\x6a\xb2\x96\x70\x02\x48\x4e\x20\x8d\x65\x24\x4d\x84\x74\x73\x8e\x2c\x2b\xa4\x35\x27\x28\x7e\x73\x3a\xc1\xd4\xaf\x34\xe8\x0a\x4a\x95\x22\x0a\x00\x61\x98\xe5\xe2\x69\x0b\x75\x41\xfa\xc7\xb2\xba\x63\x9e\x86\xdf\x82\xc6\x77\xbc\x1c\x9a\xf5\x99\x6e\x2c\xd7\xc9\x8b\xba\x78\x4b\x4d\x77\xa7\x5f\xd4\xae\x85\x08\x05\xf6\xcb\x6a\xa8\x57\x4b\xf5\xe8\xca\xea\x39\x45\x9e\x34\x52\x69\xd5\x91\x4a\x73\x23\xd5\x59\x32\x52\x69\x32\x52\xf5\x30\xa5\x7d\x2b\x1b\xa3\x55\x86\x52\x5e\x30\x36\x4b\x5a\xb2\xd6\x07\x46\xbe\xbe\xd3\xa9\xc7\x63\x69\x0e\xa4\xde\x69\xf7\x29\x47\xa0\xb3\xdf\xba\xed\x5b\xe4\x04\x68\x14\x7a\x63\x3f\x44\xc7\x9f\x72\x19\x5b\xac\xc5\xd9\x14\x56\xb9\x4e\x50\x5a\x67\x9c\xd8\x2b\xd1\xae\xc7\x62\x13\x1c\x54\x29\xe3\x15\x62\xa5\x80\x7d\xe6\x74\x95\x8a\x11\x61\x88\x13\x58\x6a\x14\xa2\x9e\xca\x69\xcf\x17\xf8\x8c\x8a\xb2\x96\x25\x1d\x15\x8e\x54\x6e\x33\x50\x59\xbf\x93\x67\x76\x43\x84\xdd\x7b\x22\xf8\x7a\x47\x74\xe2\x4a\xdb\xb9\x22\x41\x5c\xef\x0c\x0d\x59\xc9\x1d\x9d\x4c\xd7\xf5\x86\x5c\xae\x6f\x49\xdb\x4e\x4e\xcf\xad\xe0\x9e\xc5\x35\x45\xdb\x79\x2c\x8c\xf8\x1b\xc2\x58\xc8\xf8\xa2\xf1\x96\xf9\x4f\x49\xac\xf7\x5e\x4b\x56\x59\xf4\x5d\x0c\x36\x9b\xa9\xb4\xfa\x2a\x0c\xae\xa8\x8f\xd2\xea\xd2\x28\x86\x81\x8c\x21\xf5\x3c\x12\x18\x7a\x36\xd1\x56\x7c\x02\xcc\x32\xe5\xd7\x07\x4a\x82\x53\x56\xff\xcd\x12\x63\x68\xc3\xad\xb5\x46\x5b\xd5\xd9\x2e\x94\x35\xde\x7a\x05\x63\xc0\xed\x02\x59\x9b\xe9\xd4\xf7\xff\x4d\x58\x88\xd2\x08\xd3\x2e\x2a\x15\xc8\x76\xd3\x92\x44\xef\x72\x89\x32\xb1\x0e\xa6\xd4\x4d\xc5\x48\x69\x25\x31\xb2\x18\xe6\xc5\x40\xaf\x1a\x29\x05\x4d\x9f\x18\x2e\xab\xb1\x8a\xdd\x58\x3e\x5c\x97\xf4\x63\x63\xcc\xb4\xd3\x68\xd9\x84\xb7\x5d\xcc\xb4\xb3\x68\xd9\x0e\x70\x43\xcc\xd4\x93\xa9\x8c\xc8\x68\x87\xa5\x2c\x48\x65\xf9\xca\x65\xfb\x72\x31\x61\x81\x1a\x3a\x63\xb9\xa7\xd0\x4d\x25\x62\xfd\x4a\xa5\x56\x7a\x4e\x4c\x13\x8a\xec\xcd\x96\x19\x88\x14\xf8\x45\xa7\xe2\xdb\xaf\x11\x4b\x49\xb6\x04\x29\x66\xd9\xa5\xc2\xf5\x99\xb1\x51\x96\xa9\xa6\x7e\xad\xd9\x66\xba\xc7\x26\x2b\xed\x47\x99\x67\x3a\x98\xe1\x91\x4c\x77\xe5\x0e\x97\x1e\x54\x9d\x90\x53\x79\xca\x80\xf6\x23\xb9\x09\x11\xa8\xc1\xa4\x10\x90\xfa\x9f\x9c\xd0\x19\xda\x51\xb9\x6d\xb3\xe1\x71\xe1\x04\xcd\xf4\xe9\x3d\x31\x63\x21\x79\xd2\x46\xb3\x53\x52\x0c\xad\xc9\x3d\x9a\x2e\xb4\x92\x34\x94\xcd\x3e\xf0\x94\x9c\x3b\xa4\xdb\x5f\xea\xb8\x64\xb5\x8e\x7a\xb4\x23\xc3\x87\x40\x33\x07\x2c\x1c\x47\x46\xba\x3a\xca\x36\xc2\xb3\xb7\x26\x15\x10\xa3\xf9\x54\x58\x0c\x33\xa2\xcc\x8e\x66\x94\x04\x0d\x8a\xdb\xde\x12\x32\xbf\xcf\xd7\x58\x72\x78\xd5\x2b\x3c\x43\x09\x8c\x5c\x3c\x6d\xd8\xc5\xf2\x64\x66\xd7\xad\xa9\xfd\xac\x85\xbd\x78\xe9\x34\xd9\x4f\x6f\xe9\x96\xf9\xe2\xd9\x19\x80\xe6\xbc\xd2\x13\x81\x36\xc8\x5e\x09\x75\xc9\xe6\x64\x79\xaf\x0f\x5d\x10\xce\x5b\x99\x97\x3c\x24\xf1\x90\xc4\xcc\xe2\x60\x13\x52\x1c\xdf\xe8\x32\x64\x64\x13\x54\x71\x27\x14\x95\x76\xfd\x77\xb2\xfb\x0d\x4c\x58\x4f\x32\x7b\x60\x9d\xf6\x78\xe8\x03\x47\xbe\x90\xfd\xaf\x72\xa3\xe4\x89\xf6\xdf\x04\xb5\xc9\xfe\xd9\x89\x4b\xf6\x26\x29\x85\x79\x0d\xf7\x7c\x92\x63\xe7\x38\x4b\x49\x5a\x8b\xdf\xaa\xff\xe6\x30\x9c\x10\xb6\xc0\xf8\x80\x90\x5e\x1d\x52\x4f\x2c\xd7\xb4\x18\x16\xf5\xca\x3d\xcb\x97\xab\x66\x54\x5d\x43\xee\x4b\x56\x95\xb9\x9d\xf2\xaa\x22\x72\xf3\xb0\xaa\x8c\xdc\x06\x2c\xc9\xd8\x69\xcf\x55\x47\xb3\xeb\x54\x22\xbd\x43\xb1\x2a\x82\x4a\x5b\xd0\xf1\xf1\x82\xc8\x5d\xbd\xb0\x95\x07\xf6\xd2\xb9\xb5\xc2\xbe\x76\x72\x88\x54\x95\x47\x5a\xfd\x6f\x43\x23\xd0\x4e\xc6\x22\x2d\xca\xef\xd1\x98\xe3\x01\xd9\x9e\x4c\x94\xa2\xdf\x3f\x97\xb4\xfa\x2f\x4d\x25\xa0\x41\x4d\x4c\xb2\x02\xe9\xd5\x11\x09\x84\xd6\x6b\xe1\x11\x15\xe5\xb5\xd0\xc8\x0a\xa4\xe7\x61\x11\xd5\xd8\x2e\x24\x52\x98\x7f\xf3\x5b\x2a\x89\x77\x98\x9c\xca\xf2\xd3\xf3\x0a\x63\x88\xe1\x44\x9a\xc3\x40\x5f\xd4\x35\xbf\xc4\x06\xf7\xe8\x00\x19\x2d\x75\x83\x14\xb4\xa9\x2c\x7c\x88\x8c\xcb\x70\x1c\x08\x79\x79\xac\xba\xf4\x11\x32\xd4\xe9\x02\x2c\xa1\x58\x55\xd9\x63\x64\xdc\xc9\x73\x81\x1d\x44\xdf\x29\x51\x6f\x17\xd1\xf7\x28\xde\x1f\x89\x65\x6b\xe0\x3a\x7d\xee\x55\x3f\xd5\xd1\xea\x54\xe7\x7c\x23\xaa\x73\xf2\x54\xe7\x40\xf0\xb0\x3e\x76\x09\xdf\x9e\xea\x9c\xff\x0d\xaa\x73\x5e\x9c\xea\x9c\xda\xa8\x6e\x05\xd2\xab\xa3\x3a\xe7\xf5\x50\x9d\x53\x1b\xd5\xad\x40\x7a\x1e\xaa\x73\x76\xa5\xba\x95\xeb\xa5\x74\x8a\xa8\xbc\x3a\xe9\x6c\x21\x51\x98\x11\xf4\x8d\xa8\xa3\xf4\x70\x42\x1e\x4c\x21\x27\xb0\x57\x6d\x6d\xca\x56\xae\x51\xa3\x74\xbb\xaf\xd7\xb0\x0b\x81\x1b\x6d\xb3\x18\x5b\xaf\x48\x76\x02\xb4\x4e\x97\xb4\xd6\x35\xaa\xa1\x4d\xb5\x99\xfc\x26\xdd\x2c\x5e\xd7\xf0\x45\xc8\x97\xb7\xfa\x74\x8a\xa4\xcf\x45\x91\xf2\xce\x62\x55\x8e\xbc\x24\xa3\x6f\x43\x92\xb2\xa1\x8c\x25\xe1\x29\x64\xd3\xed\x19\x32\x56\xf3\xfb\xa7\x48\xe8\xe7\x4b\x73\xa4\x54\xa1\x26\x92\x5c\x05\xf5\xea\x58\x52\x86\xd7\x6b\xa1\xc9\x38\xd4\x6b\xe1\xc9\x55\x50\xcf\x43\x94\x71\x6b\x2f\xba\xb3\x28\x4f\x9a\x76\xd8\x8d\xfc\x71\x07\x19\xaf\xaa\x8c\x5a\x67\xd5\x4e\x26\xc9\x99\x60\xfd\x6c\x12\xf1\xca\x64\xd2\xe1\xdf\x86\x4b\xa0\x9d\x8c\x4a\x3a\x2c\x84\xc5\x16\xaf\xb2\xde\x52\x7a\x7e\xff\x64\xd2\xe1\x2f\xcd\x25\xa0\x41\x4d\x54\xb2\x02\xe9\xd5\x31\x09\x84\xd6\x6b\x21\x12\x15\xe5\xb5\xf0\xc8\x0a\xa4\xe7\xa1\x11\xd5\xd8\xb7\xdb\x5a\xdc\x77\xb3\x52\x97\xc8\x95\x59\xa5\x6d\xbf\x0e\x57\x3b\x8e\x1d\xa7\x55\x75\xfb\x4d\x4a\x1e\x22\xe3\x6e\x37\xc9\x23\x90\xbc\x6d\xdf\x54\xdd\xa5\x94\xa2\xc7\xa0\xee\xcd\x2e\x6d\xbe\x43\xc6\x95\xb3\x8b\xe0\x7b\x64\x7c\x71\x6e\xba\xbb\x88\xfe\x0d\x19\x37\xed\xdb\x5d\x24\x3f\x20\xa3\xeb\x5c\xb6\xe5\x8f\x33\xaa\x8a\xfe\x1d\x19\xe7\xd7\x97\x97\xa7\x57\xad\xd8\xbe\x35\xf0\x74\xc4\x9f\x81\xa6\x79\xc5\xeb\x40\x11\xcf\x71\xf9\xed\xe2\x45\xa0\x88\xeb\x7b\x40\x11\x95\xbb\xc9\x11\xb7\x20\xae\xd7\xfc\xaa\x45\xf3\xb3\xbc\x95\x9d\xd4\xdd\xe6\x5e\x8d\xae\x7f\x57\xaa\xbf\x97\xce\xa2\x5c\xfd\x74\xa5\x12\x58\x87\xd1\x90\x51\x31\xad\x24\x74\x45\xdd\x2d\xef\x52\x6b\x81\x5b\xfa\x57\x35\x81\x1b\xc2\x29\x4c\x5a\x62\xb5\x90\x9e\x73\xf2\x9d\xef\xd2\xd2\x15\xef\xfc\xcb\xd2\xfd\xef\xdd\x2e\x23\x25\x91\x2f\xbd\x3f\xcc\xdf\xc6\xd2\xbf\xc2\x87\xf0\x39\xf5\xe9\x20\xd0\xbf\xd3\x32\xf6\xe2\x2c\x2c\xf9\x49\xd7\x05\xc8\x2e\xfb\x59\x97\x2c\xdf\xf2\xa7\x5d\xaa\x3f\x4a\x40\xff\xd6\x4c\x5f\x26\xcc\xff\x48\x0c\x33\x22\x34\xdc\xde\x22\x79\x9e\xc4\xf9\x5e\xbc\x46\x48\x4c\xf0\xdf\x00\x00\x00\xff\xff\x25\x70\x7b\x65\x20\x45\x00\x00"

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 17696, mode: os.FileMode(384), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

