// Code generated by go-bindata.
// sources:
// index.html
// DO NOT EDIT!

// +build bin

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xe4\x5b\x69\x73\xdb\x38\xd2\xfe\xee\x5f\x81\xe1\xeb\x79\x3f\x4c\x85\x64\x7c\x24\x9b\xcd\x48\xde\xb2\x2d\x4d\xc2\x1a\x1f\x2a\x5b\xce\xee\xec\xd4\xd4\x14\x44\x42\x12\x62\x8a\xe4\x02\x90\x6c\x8d\x4a\xff\x7d\x1b\x20\x78\xea\xa4\x4c\xc7\xae\xec\x07\x5b\x22\x88\x7e\xd0\xe8\x6e\xe0\x69\x1c\x6a\xfc\xd0\xba\x3e\xef\xfe\xd6\x69\xa3\xa1\x18\xf9\x7b\x27\xb3\xd9\xfe\x04\x7d\x6c\x22\xeb\x9a\x0b\x12\x88\x2f\x84\x71\x1a\x06\xf3\x79\x43\xbd\x46\xe8\xa4\x31\x24\xd8\x83\x2f\xf2\xeb\x88\x08\x8c\xdc\x21\x66\x9c\x88\xa6\x31\x16\x7d\xf3\x83\xa1\x5f\x09\x2a\x7c\xa2\xbe\xc3\xd3\x6c\x66\xb5\xb0\xc0\xd6\xe7\xab\xf9\x1c\x85\x0a\xb8\x61\x67\x35\x34\xd0\x50\x88\xc8\x24\xff\x19\xd3\x49\xd3\xf8\x97\x79\x77\x6a\x9e\x87\xa3\x08\x0b\xda\xf3\x89\x81\xdc\x30\x90\x62\x4d\xc3\x69\x37\x89\x37\x20\x46\x5e\x32\xc0\x23\xd2\x34\x26\x94\x3c\x44\x21\x13\xb9\xca\x0f\xd4\x13\xc3\xa6\x47\x26\xd4\x25\xa6\x7a\x78\x83\x68\x40\x05\xc5\xbe\xc9\x5d\xec\x93\xe6\x81\x06\x9a\xcd\x3e\x77\x2f\x2f\x90\xd1\xf8\xc1\x98\xcf\x4d\xf3\x77\xda\x47\x4e\xfb\x8f\x93\x86\x4f\x83\x7b\xc4\x88\xdf\x34\xf8\x10\xb0\xdd\xb1\x40\x14\xe0\x0d\x34\x64\xa4\xdf\x34\xec\x3e\x9e\xc8\x67\x0b\xfe\x2d\x43\xfa\x9d\x04\x1e\xed\xff\x61\x9a\x79\xa4\x18\x80\xd3\xbf\x08\x6f\x1a\x47\x87\x8f\x47\x87\x29\x9c\x34\xff\x7c\x9e\xa0\xf2\xe4\x8b\x79\x74\x68\x45\xc1\xc0\x40\x62\x1a\x41\x4f\xe9\x08\x0f\x88\x2d\x0b\xb4\x15\x32\x6c\x1c\x45\x3e\x31\x45\x38\x76\x87\x66\xa1\x9d\x83\xc3\xb7\x8f\xf0\xb7\xb1\x25\xa8\x63\x55\x44\x3e\x3e\x7e\x84\xbf\xcd\xc8\xc7\xc7\x55\x91\xdf\x1d\x3e\xc2\xdf\x66\xe4\x77\x87\x55\x91\x3f\x80\x35\x3e\x6c\x61\x8d\x0f\x2b\xac\xc1\xc5\xd4\x27\x7c\x48\x88\x48\x9c\x22\xc8\xa3\xb0\x5d\xce\xcb\x98\x50\x64\xd3\xc0\x23\x8f\x96\x7c\xa9\x81\xb8\xcb\x68\x24\xf2\x92\x5f\xf1\x04\xc7\xa5\x46\x79\x48\x21\xce\xdc\x0c\xef\x2b\xb7\x99\x1c\x25\x8c\xc0\xb7\x43\xeb\xc0\x3a\x7c\x9b\x14\x58\x23\x1a\x58\x5f\x41\x03\x0f\x46\x9b\x39\xc2\x34\x28\x88\xcd\x66\x10\xd5\x56\xf7\xf4\xd3\xa7\x76\xab\x47\x61\x50\x43\x75\xad\x5a\x2c\x38\x9b\x11\x9f\x93\xf9\x1c\xda\xd3\xe5\xaa\x2c\xf0\xe6\x73\x23\x19\xcb\x0d\x3b\xd6\x52\x77\xc4\xd6\xd3\xc1\x49\xa3\x17\x7a\x53\x5d\x18\xe0\x09\x72\x7d\xcc\xc1\xd0\xf0\xb5\x87\x19\x8a\x3f\x4c\x8f\xf4\xf1\xd8\x17\xc9\x23\x17\x30\xbc\x5d\xf0\x4f\x64\x20\x16\xc2\x68\x94\xd5\xe9\x00\x0a\xc1\x55\x69\x83\x1e\x4d\xd1\xe4\xc0\x86\x5e\x11\x66\xf6\xfd\x31\xf5\x92\x3a\xa5\x5a\x1a\x5d\x6a\x46\x18\x4c\x06\xbe\x39\xf2\xcc\x03\x14\x61\xcf\xa3\xc1\xc0\xf4\x49\x1f\x66\x9e\xc4\x17\x89\x7c\x6f\x2c\x44\x18\x94\x20\x44\x38\x18\xf8\x44\x42\xf8\x38\xe2\xc4\x4b\x7c\x1d\x57\xd6\x76\x8e\x2b\x49\xe5\xe2\x5a\x49\x31\x66\x03\xe9\xc3\xff\xd3\x58\xe9\xeb\x5c\xb3\x2a\x14\x22\x9c\x36\xcb\x99\x19\x06\xfe\xb4\x58\x05\x2a\x75\x63\x3d\x32\xeb\x80\x17\x40\x6c\x0d\x92\x8a\x5e\x68\x76\x01\xea\xd5\x48\xda\xb1\x11\x0b\x4e\xc0\x88\x7a\x4d\x63\x08\x96\x2d\xfa\xa1\xc7\x70\xe0\x41\x19\x8d\x0e\xb2\xd9\x00\x9c\x21\x29\x04\xea\x03\xa5\x48\x0a\x40\x79\x9e\x29\x99\x39\xff\xaa\x61\xe3\x42\xab\x36\xc4\x4e\x29\x92\xa4\x1a\x65\xbf\x65\x41\x18\x17\xa0\x35\x8e\x3d\x69\x8c\xfd\x5c\x1f\x92\xaa\xf0\x51\x76\xbf\x4f\x93\x7a\xd8\x15\x74\x42\x16\x8d\x87\x75\x87\x25\x3f\xf2\x8f\xb6\xfd\xf0\xf0\x60\x41\x8f\x19\xfc\x59\x6e\x38\xb2\x63\x42\x85\x39\xc0\x27\x98\x13\x6e\xfb\x58\x10\x2e\xfe\xe1\x8e\xa2\x66\x3c\xf6\xcb\x90\x00\x9a\x90\x30\x5e\x74\x95\x4f\x57\x6a\x98\x8c\x0a\x98\xaf\x50\xee\x3b\xcc\x34\x6c\x40\x03\x39\xa6\x50\x9f\x32\x2e\x54\xe9\x62\x47\xdc\xd0\x23\x25\x28\x59\x04\x93\xea\x42\xaf\x95\x8a\xa9\x3f\x5b\xce\x6d\xf7\xc6\x39\x93\x9e\x93\x02\x35\xeb\xfc\x54\x45\xc7\xd1\xff\x07\x3d\x1e\xfd\x1c\x8f\x05\x19\x39\xe3\x68\xb1\x5a\x2e\x06\xef\x3a\xb2\x27\x0b\x43\x42\xf7\xe5\x15\xf6\xd0\xc7\xe5\x1e\xfa\x78\x6d\x0f\x2f\x4e\x6b\xe8\xa1\x3d\xf6\xd7\x0d\xd3\xdc\x23\x3c\x40\x27\x34\xf9\x6c\xa6\x8b\x42\x1d\x16\x3e\x94\x69\x44\x76\x70\x44\x46\xf9\x01\x2f\x19\xe4\x38\xa1\x92\xb0\xdf\x07\x76\x36\x0f\x0a\x03\x7e\x36\x13\x64\x14\xc9\xb1\x87\x0c\xa0\x39\x68\x95\x7f\xfc\x18\x7f\xf9\x13\xec\x40\x7c\x85\x68\x49\xbb\x2c\x9f\x6e\xbc\x7e\xb9\xc1\xf7\xd5\x1a\x90\x00\x4b\xf0\x0b\x76\xda\xdc\x71\x37\x1a\xd7\xdc\x71\x85\xb8\xa6\xe3\xf4\xa9\x1d\xa7\xb5\x74\x3c\xe2\x65\x35\x0e\xde\x3e\xad\xe3\x12\x71\x93\x5e\xe9\xc3\x86\x9c\x30\x11\x98\x40\x32\x25\x87\x18\x6a\x26\xb3\xe3\x7c\xfe\x73\x39\x27\xd3\xa9\x98\xcc\xce\xf4\xa2\xce\xfe\x69\xef\x27\x7b\x3e\x9f\xcd\x62\xfd\x72\x0a\x63\x99\xd3\xfe\xd9\xc3\xb0\xa6\x92\x89\x11\xac\x59\x12\xc2\x01\xfc\xcf\xf0\x09\x4b\xb6\xd9\x4c\x19\x66\x3e\x97\x65\xe7\xf1\x57\x14\x06\xe7\x3e\x75\xef\x9b\x33\x31\xa4\xdc\x1a\x02\x41\xfb\x44\x95\xcc\x11\xda\x8b\xe7\x82\x33\x89\xaa\xe4\xad\x2e\xf4\x27\x66\xde\x13\x9d\x51\x6e\xa9\x14\xa3\x83\x61\xbd\x5a\xc5\xaa\xa0\x4c\xbf\x6d\xb5\xd2\xbe\x85\x78\x86\x10\xe2\x86\xac\xf3\x40\xc5\x10\xc9\x27\x08\x0f\xe9\x6b\x00\x95\xff\xe2\x34\x7a\x36\x83\xb4\x65\x40\xd0\x3e\x7d\x83\xf6\x41\x4a\xad\xab\xd5\xfc\x78\xde\xb9\xb3\x2e\x28\x97\x16\x11\x0c\x34\xf9\x95\x4c\x91\x1c\x79\x26\x40\xf5\xa6\xe6\x95\xa1\xea\x5b\x90\xab\x28\x37\x0a\x2f\x89\x4c\x35\xb1\x2b\x93\x20\xf5\x35\x08\x1f\x18\x8e\xd2\x95\x67\x22\x05\xab\x6b\x2f\x91\xcc\xcc\x94\x97\xee\x0d\xcc\x31\x27\x91\xab\x22\x4b\xe5\xab\xf1\x63\x53\x83\xdc\x71\xc2\x3a\xae\x50\x0a\x64\xd0\x69\xe9\x8f\x4f\x6f\xe1\x76\xca\x17\x1b\x48\x0a\x6b\xc0\xff\x27\xa6\x62\xb1\x81\xb4\xb4\x4a\x0b\x26\x0d\x26\x84\xc5\x19\xde\x92\x96\x1c\x88\xb1\xc5\x96\xd2\xd2\xac\x25\x5b\xb0\x5c\xa0\x15\x3f\x36\x86\x9d\xd7\xaf\x18\x75\x5e\x3f\x0b\xb8\xd6\x2f\x8b\xf1\xe6\xf5\x75\xb8\x79\x94\xc9\xf4\xd9\x90\x22\x56\x8b\xb2\x2b\x78\x88\x23\x0f\xa1\x65\xd6\x89\x83\x2e\x4d\xc7\xe3\x2c\x1c\x7a\x2d\xa5\xc9\x24\x95\x8e\x4d\x91\x2f\x4c\x0c\x51\x1d\x36\xa7\x54\x06\x9b\x14\xe6\x3d\xb9\xcd\x38\x29\x2c\x5a\x46\x63\x95\xac\x26\x6b\x09\x27\x80\xe4\x04\xd2\x58\x46\xd2\x44\x48\x37\xe7\xc8\xb2\x42\x5a\x73\x82\xe2\x37\xa7\x13\x4c\xfd\x4a\x83\xae\xa0\x54\x29\xa2\x00\x10\x86\x59\x2e\x9e\xb6\x50\x17\xa4\x7f\x2c\xab\x3b\xe6\x69\xf8\x2d\x68\x7c\xc7\xcb\xa1\x59\x9f\xe9\xc6\x72\x9d\xbc\xa8\x8b\xb7\xd4\x74\x77\xfa\x45\xed\x5a\x88\x50\x60\xbf\xac\x86\x7a\xb5\x54\x8f\xae\xac\x9e\x53\xe4\x49\x23\x95\x56\x1d\xa9\x34\x37\x52\x9d\x25\x23\x95\x26\x23\x55\x0f\x53\xda\xb7\xb2\x31\x5a\x65\x28\xe5\x05\x63\xb3\xa4\x25\x6b\x7d\x60\xe4\xeb\x3b\x9d\x7a\x3c\x96\xe6\x40\xea\x9d\x76\x9f\x72\x04\x3a\xfb\xad\xdb\xbe\x45\x4e\x80\x46\xa1\x37\xf6\x43\x74\xfc\x29\x97\xb1\xc5\x5a\x9c\x4d\x61\x95\xeb\x04\xa5\x75\xc6\x89\xbd\x12\xed\x7a\x2c\x36\xc1\x41\x95\x32\x5e\x21\x56\x0a\xd8\x67\x4e\x57\xa9\x18\x11\x86\x38\x81\xa5\x46\x21\xea\xa9\x9c\xf6\x7c\x81\xcf\xa8\x28\x6b\x59\xd2\x51\xe1\x48\xe5\x36\x03\x95\xf5\x3b\x79\x66\x37\x44\xd8\xbd\x27\x82\xaf\x77\x44\x27\xae\xb4\x9d\x2b\x12\xc4\xf5\xce\xd0\x90\x95\xdc\xd1\xc9\x74\x5d\x6f\xc8\xe5\xfa\x96\xb4\xed\xe4\xf4\xdc\x0a\xee\x59\x5c\x53\xb4\x9d\xc7\xc2\x88\xbf\x21\x8c\x85\x8c\x2f\x1a\x6f\x99\xff\x94\xc4\x7a\xef\xb5\x64\x95\x45\xdf\xc5\x60\xb3\x99\x4a\xab\xaf\xc2\xe0\x8a\xfa\x28\xad\x2e\x8d\x62\x18\xc8\x18\x52\xcf\x23\x81\xa1\x67\x13\x6d\xc5\x27\xc0\x2c\x53\x7e\x7d\xa0\x24\x38\x65\xf5\xdf\x2c\x31\x86\x36\xdc\x5a\x6b\xb4\x55\x9d\xed\x42\x59\xe3\xad\x57\x30\x06\xdc\x2e\x90\xb5\x99\x4e\x7d\xff\xdf\x84\x85\x28\x8d\x30\xed\xa2\x52\x81\x6c\x37\x2d\x49\xf4\x2e\x97\x28\x13\xeb\x60\x4a\xdd\x54\x8c\x94\x56\x12\x23\x8b\x61\x5e\x0c\xf4\xaa\x91\x52\xd0\xf4\x89\xe1\xb2\x1a\xab\xd8\x8d\xe5\xc3\x75\x49\x3f\x36\xc6\x4c\x3b\x8d\x96\x4d\x78\xdb\xc5\x4c\x3b\x8b\x96\xed\x00\x37\xc4\x4c\x3d\x99\xca\x88\x8c\x76\x58\xca\x82\x54\x96\xaf\x5c\xb6\x2f\x17\x13\x16\xa8\xa1\x33\x96\x7b\x0a\xdd\x54\x22\xd6\xaf\x54\x6a\xa5\xe7\xc4\x34\xa1\xc8\xde\x6c\x99\x81\x48\x81\x5f\x74\x2a\xbe\xfd\x1a\xb1\x94\x64\x4b\x90\x62\x96\x5d\x2a\x5c\x9f\x19\x1b\x65\x99\x6a\xea\xd7\x9a\x6d\xa6\x7b\x6c\xb2\xd2\x7e\x94\x79\xa6\x83\x19\x1e\xc9\x74\x57\xee\x70\xe9\x41\xd5\x09\x39\x95\xa7\x0c\x68\x3f\x92\x9b\x10\x81\x1a\x4c\x0a\x01\xa9\xff\xc9\x09\x9d\xa1\x1d\x95\xdb\x36\x1b\x1e\x17\x4e\xd0\x4c\x9f\xde\x13\x33\x16\x92\x27\x6d\x34\x3b\x25\xc5\xd0\x9a\xdc\xa3\xe9\x42\x2b\x49\x43\xd9\xec\x03\x4f\xc9\xb9\x43\xba\xfd\xa5\x8e\x4b\x56\xeb\xa8\x47\x3b\x32\x7c\x08\x34\x73\xc0\xc2\x71\x64\xa4\xab\xa3\x6c\x23\x3c\x7b\x6b\x52\x01\x31\x9a\x4f\x85\xc5\x30\x23\xca\xec\x68\x46\x49\xd0\xa0\xb8\xed\x2d\x21\xf3\xfb\x7c\x8d\x25\x87\x57\xbd\xc2\x33\x94\xc0\xc8\xc5\xd3\x86\x5d\x2c\x4f\x66\x76\xdd\x9a\xda\xcf\x5a\xd8\x8b\x97\x4e\x93\xfd\xf4\x96\x6e\x99\x2f\x9e\x9d\x01\x68\xce\x2b\x3d\x11\x68\x83\xec\x95\x50\x97\x6c\x4e\x96\xf7\xfa\xd0\x05\xe1\xbc\x95\x79\xc9\x43\x12\x0f\x49\xcc\x2c\x0e\x36\x21\xc5\xf1\x8d\x2e\x43\x46\x36\x41\x15\x77\x42\x51\x69\xd7\x7f\x27\xbb\xdf\xc0\x84\xf5\x24\xb3\x07\xd6\x69\x8f\x87\x3e\x70\xe4\x0b\xd9\xff\x2a\x37\x4a\x9e\x68\xff\x4d\x50\x9b\xec\x9f\x9d\xb8\x64\x6f\x92\x52\x98\xd7\x70\xcf\x27\x39\x76\x8e\xb3\x94\xa4\xb5\xf8\xad\xfa\x6f\x0e\xc3\x09\x61\x0b\x8c\x0f\x08\xe9\xdd\x21\xf5\xc4\x72\x4d\x8b\x61\x51\xaf\xdc\xb3\x7c\xb9\x6a\x46\xd5\x35\xe4\xbe\x64\x55\x99\xdb\x29\xaf\x2a\x22\x37\x0f\xab\xca\xc8\x6d\xc0\x92\x8c\x9d\xf6\x5c\x75\x34\xbb\x4f\x25\xd2\x3b\x14\xab\x22\xa8\xb4\x05\x1d\x1f\x2f\x88\xdc\xd5\x0b\x5b\x79\x60\x2f\x9d\x5b\x2b\xec\x6b\x27\x87\x48\x55\x79\xa4\xd5\xff\x36\x34\x02\xed\x64\x2c\xd2\xa2\xfc\x1e\x8d\x39\x1e\x90\xed\xc9\x44\x29\xfa\xfd\x73\x49\xab\xff\xd2\x54\x02\x1a\xd4\xc4\x24\x2b\x90\x5e\x1d\x91\x40\x68\xbd\x16\x1e\x51\x51\x5e\x0b\x8d\xac\x40\x7a\x1e\x16\x51\x8d\xed\x42\x22\x85\xf9\x37\xbf\xa5\x92\x78\x87\xc9\xa9\x2c\x3f\x3d\xaf\x30\x86\x18\x4e\xa4\x39\x0c\xf4\x45\x5d\xf3\x4b\x6c\x70\x8f\x0e\x90\xd1\x52\x57\x48\x41\x9b\xca\xc2\x87\xc8\xb8\x0c\xc7\x81\x90\x97\xc7\xaa\x4b\x1f\x21\x43\x9d\x2e\xc0\x12\x8a\x55\x95\x3d\x46\xc6\x9d\x3c\x17\xd8\x41\xf4\x9d\x12\xf5\x76\x11\x7d\x8f\xe2\xfd\x91\x58\xb6\x06\xae\xd3\xe7\x5e\xf5\x53\x1d\xad\x4e\x75\xce\x37\xa2\x3a\x27\x4f\x75\x0e\x04\x0f\xeb\x63\x97\xf0\xed\xa9\xce\xf9\xdf\xa0\x3a\xe7\xc5\xa9\xce\xa9\x8d\xea\x56\x20\xbd\x3a\xaa\x73\x5e\x0f\xd5\x39\xb5\x51\xdd\x0a\xa4\xe7\xa1\x3a\x67\x57\xaa\x5b\xb9\x5e\x4a\xa7\x88\xca\xab\x93\xce\x16\x12\x85\x19\x41\xdf\x88\x3a\x4a\x0f\x27\xe4\xc1\x14\x72\x02\x7b\xd5\xd6\xa6\x6c\xe5\x1a\x35\x4a\xb7\xfb\x7a\x0d\xbb\x10\xb8\xd1\x36\x8b\xb1\xf5\x8a\x64\x27\x40\xeb\x74\x49\x6b\x5d\xa3\x1a\xda\x54\x9b\xc9\x6f\xd2\xcd\xe2\x75\x0d\x5f\x84\x7c\x79\xab\x4f\xa7\x48\xfa\x5c\x14\x29\xef\x2c\x56\xe5\xc8\x4b\x32\xfa\x36\x24\x29\x1b\xca\x58\x12\x9e\x42\x36\xdd\x9e\x21\x63\x35\xbf\x7f\x8a\x84\x7e\xbe\x34\x47\x4a\x15\x6a\x22\xc9\x55\x50\xaf\x8e\x25\x65\x78\xbd\x16\x9a\x8c\x43\xbd\x16\x9e\x5c\x05\xf5\x3c\x44\x19\xb7\xf6\xa2\x3b\x8b\xf2\xa4\x69\x87\xdd\xc8\x1f\x77\x90\xf1\xaa\xca\xa8\x75\x56\xed\x64\x92\x9c\x09\xd6\xcf\x26\x11\xaf\x4c\x26\x1d\xfe\x6d\xb8\x04\xda\xc9\xa8\xa4\xc3\x42\x58\x6c\xf1\x2a\xeb\x2d\xa5\xe7\xf7\x4f\x26\x1d\xfe\xd2\x5c\x02\x1a\xd4\x44\x25\x2b\x90\x5e\x1d\x93\x40\x68\xbd\x16\x22\x51\x51\x5e\x0b\x8f\xac\x40\x7a\x1e\x1a\x51\x8d\x7d\xbb\xad\xc5\x7d\x37\x2b\x75\x89\x5c\x99\x55\xda\xf6\xeb\x70\xb5\xe3\xd8\x71\x5a\x55\xb7\xdf\xa4\xe4\x21\x32\xee\x76\x93\x3c\x02\xc9\xdb\xf6\x4d\xd5\x5d\x4a\x29\x7a\x0c\xea\xde\xec\xd2\xe6\x3b\x64\x5c\x39\xbb\x08\xbe\x47\xc6\x17\xe7\xa6\xbb\x8b\xe8\xdf\x90\x71\xd3\xbe\xdd\x45\xf2\x03\x32\xba\xce\x65\x5b\xfe\x38\xa3\xaa\xe8\xdf\x91\x71\x7e\x7d\x79\x79\x7a\xd5\x8a\xed\x5b\x03\x4f\x47\xfc\x19\x68\x9a\x57\xbc\x0e\x14\xf1\x1c\x97\xdf\x2e\x5e\x04\x8a\xb8\xbe\x07\x14\x51\xb9\x9b\x1c\x71\x0b\xe2\x7a\xcd\xaf\x5a\x34\x3f\xcb\x5b\xd9\x49\xdd\x6d\xee\xd5\xe8\xfa\x77\xa5\xfa\x7b\xe9\x2c\xca\xd5\x4f\x57\x2a\x81\x75\x18\x0d\x19\x15\xd3\x4a\x42\x57\xd4\xdd\xf2\x2e\xb5\x16\xb8\xa5\x7f\x55\x13\xb8\x21\x9c\xc2\xa4\x25\x56\x0b\xe9\x39\x27\xdf\xf9\x2e\x2d\x5d\xf1\xce\xbf\x2c\xdd\xff\xde\xed\x32\x52\x12\xf9\xd2\xfb\xc3\xfc\x6d\x2c\xfd\x2b\x7c\x08\x9f\x53\x9f\x0e\x02\xfd\x3b\x2d\x63\x2f\xce\xc2\x92\x9f\x74\x5d\x80\xec\xb2\x9f\x75\xc9\xf2\x2d\x7f\xda\xa5\xfa\xa3\x04\xf4\x6f\xcd\xf4\x65\xc2\xfc\x8f\xc4\x30\x23\x42\xc3\xed\x2d\x92\xe7\x49\x9c\xef\xc5\x6b\x84\xc4\x04\xff\x0d\x00\x00\xff\xff\xfa\xe1\xda\xd0\x21\x45\x00\x00"

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 17697, mode: os.FileMode(420), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

