// Code generated by go-bindata.
// sources:
// index.html
// DO NOT EDIT!

// +build bin

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5c\xeb\x73\xdb\x36\x12\xff\xee\xbf\x02\xc7\x6b\x6f\xda\x4e\x25\xd5\x79\xdc\xf5\x52\xcb\x37\x8e\xe5\x24\x9a\xc6\x8e\xc6\x8f\xcc\xf5\xbe\x74\x20\x12\x94\x10\x53\x24\x0b\x40\x72\x7c\x1a\xfd\xef\xb7\x78\xf1\xad\x07\x45\xda\xf1\xb5\xfd\x90\x98\x04\x16\x8b\xc5\x02\xfb\xdb\x05\xb0\xe2\xd1\x5f\x06\x1f\x4e\xaf\x7f\x19\x9d\xa1\xa9\x98\x05\x07\xc7\x47\xea\x0f\x42\xf0\x40\xb0\x07\x0f\xf2\x71\x46\x04\x46\xee\x14\x33\x4e\x44\xdf\x99\x0b\xbf\xf3\xa3\x93\xad\x9a\x0a\x11\x77\xc8\x6f\x73\xba\xe8\x3b\xff\xee\xdc\x9c\x74\x4e\xa3\x59\x8c\x05\x1d\x07\xc4\x41\x6e\x14\x0a\x12\x42\xbb\xe1\x59\x9f\x78\x13\x92\x6b\x19\xe2\x19\xe9\x3b\x0b\x4a\xee\xe2\x88\x89\x0c\xf1\x1d\xf5\xc4\xb4\xef\x91\x05\x75\x49\x47\xbd\x7c\x8f\x68\x48\x05\xc5\x41\x87\xbb\x38\x20\xfd\x43\xcb\x48\x50\x11\x10\xf5\x0c\x6f\xcb\x65\x77\x80\x05\xee\xbe\x8b\xb8\x90\xcc\x57\x2b\x04\x4f\xc0\xf2\xa8\x97\xd2\x1d\x1f\x05\x34\xbc\x45\x8c\x04\x7d\x87\x42\x97\x0e\x12\xf7\x31\xc8\x41\x67\x78\x42\x7a\x71\x38\x71\xd0\x94\x11\xbf\xef\xf4\x7c\xbc\x90\x04\x5d\x59\x56\x6a\xca\xc5\x7d\x40\xf8\x94\x10\x61\x19\x08\xf2\x59\xf4\x5c\xce\x93\xf6\xf0\xdc\xa3\xa1\x47\x3e\x77\x65\xa9\xe1\xc0\x5d\x46\x63\x91\x6d\xf2\x09\x2f\xb0\x2e\x75\x8a\x7a\x46\x9c\xb9\xc0\xe8\x13\xef\x31\xa9\x61\x46\xe0\xe9\x59\xf7\xb0\x7b\xf8\xa3\x2d\xe8\xce\x68\xd8\xfd\x04\x7d\x7a\x30\xf0\xce\x0c\xd3\x50\xd3\x2f\x97\xd4\x47\xdd\xeb\x93\xb7\x6f\xcf\x06\x63\x1a\xae\x56\x40\x67\x84\xd1\x2d\x96\x4b\x12\x70\xd0\x10\xf4\xd0\x9b\xd1\xe0\xd6\x54\xaa\x8a\xd0\x5b\xad\x1c\xab\xd4\xa3\x9e\x16\xce\xc8\xdf\x33\x4b\xe3\xf8\x68\x1c\x79\xf7\xa6\x30\xc4\x0b\xe4\x06\x98\xf3\xbe\x03\x8f\x63\xcc\x90\xfe\xd3\xf1\x88\x8f\xe7\x81\xb0\xaf\x5c\xc0\xc2\x70\x3b\x22\x8a\x1d\xc4\x22\x98\x47\x49\x4e\x27\x50\x08\xf3\x90\x74\xe8\xd1\x84\x9b\x5c\x12\x30\x26\xc2\x3a\x7e\x30\xa7\x9e\xa5\x29\x50\x19\xee\x52\x32\xc2\x60\x19\x05\x9d\x99\xd7\x39\x44\x31\xf6\x3c\x1a\x4e\x3a\x01\xf1\x61\xf2\xed\x14\xd8\xf6\xe3\xb9\x10\x51\x58\x60\x21\xa2\xc9\x24\x20\x92\x45\x80\x63\x4e\x3c\x3b\xb7\x9a\xd8\x68\x59\x13\x49\xe1\x34\x95\x2d\xc6\x6c\x22\xa7\xee\xaf\x86\x57\x52\x9d\xe9\x56\xad\x80\x18\x27\xdd\x72\xd6\x89\xc2\xe0\x3e\x4f\x02\x44\xd7\x5a\x8e\x54\x3b\x30\x0b\xd0\x6c\x03\x27\xb9\x52\x3b\xd0\x6d\x89\xd5\x93\x69\xd9\xd3\x4a\xcc\x4d\x02\x46\xd4\xeb\x3b\x53\xd0\x6c\x7e\x1e\xc6\x0c\x87\x1e\x94\x51\x58\x28\xca\xd2\xfa\xce\x0c\x7f\xd6\x58\xf0\x0a\x1d\x3e\x73\xa7\x89\x95\xc1\x14\x49\xdb\x06\x2e\xc6\xea\x51\x19\x06\x0a\x53\x50\x26\x38\xea\xe1\x9c\x5c\x3d\x58\x5d\x85\xb5\x26\x05\x2d\xce\x6c\xba\x4c\x75\x01\xda\x30\xf5\xc7\x47\xf3\x20\x33\x4a\x4b\x0a\x7f\x8a\x0b\x24\xa0\x96\x0e\xbb\x82\x2e\x48\x59\xbd\xd8\x0c\x5e\x62\x2f\x7f\xd5\xeb\xdd\xdd\xdd\x75\x61\x2c\x0c\xfe\x75\xdd\x68\xd6\xd3\xa8\x07\x18\x11\x10\xcc\x09\xef\x05\x58\x10\x2e\xfe\xe5\xce\xe2\xbe\x1d\xfb\xc7\xb3\xcb\xab\xe1\x87\x8b\xa2\x6e\x14\x7f\x0b\x9a\xb8\x3c\xaf\x01\x5d\x2b\xac\x35\x21\xc0\x34\x94\x79\x06\x50\x62\x13\x1a\x4a\x03\x44\x3e\x65\x5c\xa8\xd2\xf2\x98\xdc\xc8\x23\x05\x56\xb2\x08\x10\xb7\xa4\x00\x25\x62\x32\xcd\x83\xe1\xd5\xf5\xe5\xf0\xb5\x9c\x44\xd9\xa0\x65\x99\x9b\x0a\x4a\xe3\xbf\x85\x63\x1e\xff\xa4\x0d\x47\x2e\x22\x58\xd3\x25\xb2\xcc\xa2\x1c\x8e\xe4\x48\x4a\xf6\x63\xc6\xf2\x04\x47\x38\x2f\x8d\x70\xbe\x79\x84\x37\xb1\xa0\xda\xe8\xfe\x8f\x46\x19\xe0\xe2\x28\x03\xbc\x71\x94\xef\x4f\x5a\x18\x61\x6f\x1e\x6c\xc2\xa5\xcc\x2b\xbc\xc0\x20\x8c\x3f\xde\xee\x41\x73\x34\x2c\xba\x2b\x7a\x56\x39\xc0\x19\x99\x81\x53\xd3\x71\x5c\x82\x73\xd2\xb5\xbe\xb0\x3e\x36\xf2\x7d\x88\x56\x3a\x87\x39\x9c\x5b\x2e\x05\x99\xc5\x12\x72\x90\x03\xfe\x1f\xfa\xe6\xaf\x5e\xe9\x87\x5f\x41\x1b\x24\x00\xbe\x0e\xea\x4a\xed\x54\xa3\xac\xe7\x57\x77\xfb\xb2\x59\xb7\x9e\x5f\xd9\x6b\x4e\x87\xdb\x95\xe2\xc6\xf3\x07\x51\x0a\xf0\xdd\xa8\x14\xfa\x30\x4a\xa1\xad\x28\x25\xe6\xd5\xc2\x1d\xfe\xd0\x4c\xba\x98\xb7\x21\xdd\x62\xf2\x30\xd2\x2d\x26\xdb\xa5\x4b\x5e\xb6\x44\xfe\xb6\xc1\x02\x62\x67\x09\x1f\xa8\x6f\xfd\xdb\x6a\xf5\x53\x31\x04\x37\x91\xb7\x0c\xc6\xd5\xbe\x6d\xb9\xec\x7d\x77\xf0\x5d\x6f\xb5\x5a\x2e\xb5\x7c\x65\x81\x61\x79\x81\x76\xb8\x23\x69\xee\xa8\x98\x22\xf9\x06\x63\x96\x03\x80\x8e\xe4\x7f\x7a\x3f\xb0\x5c\x42\xe8\x35\x21\xe8\x2b\xfa\x3d\xfa\xca\x8d\x18\x41\xaf\xfa\x48\x23\xda\xe9\xe8\xa6\xfb\x9e\x72\x01\x43\x16\x0c\xc4\x53\xd5\xdd\x8b\xee\x89\x10\xec\x67\x72\x8f\x94\x6d\x00\xdf\xf1\x7d\xe7\x02\x3a\x52\x12\x0a\xcf\x2a\x5d\xe1\x31\xa3\x93\x29\x20\x74\x74\xc7\xb0\xf1\x11\xc7\x09\x1f\xa9\x49\xe1\xad\x6d\x95\x6c\xa0\x24\xfe\x2e\x97\xaa\x7e\xb5\x02\x67\xc3\x49\x4c\x98\x0b\x01\x8b\x0e\x2c\x74\x30\x9e\x96\xf6\x6d\x07\x37\x9c\x30\x25\x55\xae\x5b\x5d\x9a\x01\xea\xe3\x87\x95\xe2\xea\x9e\x97\x85\x50\x85\x6d\xcb\xd0\xa1\xe1\x82\xb0\x64\x7b\x52\x21\xcb\xd0\x0b\x48\x59\x18\x5d\x5a\x29\x4d\x4f\x30\xb9\xda\xd4\x06\xb1\xf8\x67\x97\x25\xa8\xcd\x50\xae\x1f\xf9\x90\x8c\x4c\xbd\xa8\xff\x3b\xd3\x08\x64\x76\xf4\xd0\x33\x87\x10\xd0\xaf\xb5\x28\x31\xcd\xda\x5a\xf2\x26\x2b\xb6\x2c\x35\x45\x26\xe7\x3b\xb7\x89\x99\x87\x34\x17\x8d\x1e\x7f\x5d\xf0\xda\xfb\xf4\x02\x13\xfa\xf0\x9d\xc8\x89\x6a\xd2\x4b\xcf\x68\x55\x95\xda\x5d\xbd\x48\xb7\xf5\x9b\x00\xd0\xe2\x89\x06\x40\x91\x22\x92\x9a\xc6\xcc\x22\xd9\xba\x2c\x3c\x7f\x7c\x0f\xbb\x93\x5f\x6b\xc2\x93\x47\xf9\x6d\x0a\x4d\x83\x37\x8a\x49\x1e\x9e\x24\x49\x77\x40\xd9\x05\x6c\xf1\x52\x90\x32\xfd\x19\xa0\xf2\x28\x93\x3b\xc0\x14\xae\x12\x50\xd2\xad\xc9\xe2\xc2\x6c\x10\x13\x83\x2c\x50\x68\xfe\xbb\x81\x97\x6d\x74\xb2\xc0\x34\xd8\xb5\xc9\xfa\x49\x48\x4d\xda\xd1\x0a\x91\x68\x36\xd2\x25\xab\x95\x8e\x57\x6d\x97\x50\xe3\xd5\x13\xf2\x3a\x12\x38\x2b\x64\x23\xe3\xb7\xb3\x6c\x11\x00\x3a\x89\xd3\xe9\x1b\x61\x86\x67\xbc\x11\x2e\x54\xea\x49\x9f\x08\x91\x70\x3e\x93\x07\x77\xa0\xa4\xb8\xfb\x11\x33\x2a\x89\xe0\x71\xe0\xdf\xa2\x43\xe4\x0c\xd4\x39\xa3\x83\x1c\x25\xd6\x5e\x5c\x9e\x21\xe7\x3c\x9a\x87\x42\x1e\x18\x35\x60\xf3\x1c\x39\x6a\x65\x00\x93\xcc\xac\xec\xcd\xee\x05\x72\x6e\xd4\x19\x56\x2b\xdc\x5e\x22\x47\xad\x88\x22\xbb\x46\x30\x92\x33\xfe\x36\xb0\x84\x86\xb0\xb1\x6a\x0c\x26\x9a\xcb\x6e\x68\xa2\x69\xbf\x28\x9c\x0c\x7d\x46\x76\x6e\x52\x07\x4e\x86\xf3\xb5\x78\x22\xab\x6a\x02\xca\x50\x69\xaa\x3d\x44\x31\x73\xdd\x4e\x50\x61\xdb\x69\x43\xc8\x78\x59\x0d\x0f\x6b\xdc\x73\x89\xda\xc0\xc0\x46\x72\x54\xd4\x90\x22\x53\x96\xbf\x47\x3b\x69\xe2\x7b\x34\x53\xb6\xdc\x5a\x38\x90\x37\xbc\xe6\x86\x4c\xf7\x0b\x0a\xa8\x9f\x5a\xf1\xb0\x2a\x24\xa0\x7e\x37\x6f\xbf\x34\x17\x0d\xac\xb1\x5d\xd3\x6a\xe7\xd5\x0e\xf4\x03\x12\x08\x3c\x0c\x6b\x37\xf9\x30\x17\x75\xda\xd4\xeb\x21\xcf\xbc\x91\xf5\xd1\x82\x3f\x6f\x2b\xa2\x1f\x82\xf5\x30\x1f\xaf\x35\xb8\x72\x3c\x6c\x8f\xff\x5f\x0f\xaf\xaf\x10\xe0\x17\xe2\xc4\x8d\xc2\xec\x55\xd1\x30\xdc\x1c\x25\x1f\x15\x4e\xdd\xc6\x47\xbd\x6c\xc9\x71\xcc\xf7\x0e\xd6\xb7\x0b\x07\x73\xf2\xc5\xa5\x13\x12\x0b\xd0\xeb\x5f\xae\xcf\xae\xd0\x2c\xf2\xe6\x41\x84\x5e\xbc\x6d\xa0\xc0\xd7\x05\x11\xbf\x7e\xf1\xf6\xc1\x65\xac\xad\xc7\xba\x42\x36\x81\x47\xda\x6e\x98\x43\x7d\xc2\x58\xc4\x1a\xc2\xa3\xe6\xb1\x15\x1f\x35\xd9\x9f\x00\x59\x1b\x20\xcd\x1c\x3d\x1d\x84\x5c\x03\x8e\xd9\x7b\x8d\x75\xc6\xd3\x02\xc8\xac\x43\xbf\x47\xea\xbe\x1a\xd7\x76\xe9\xbc\x0d\xf4\x5a\x83\x58\x6d\x74\xdf\x0c\x97\xb2\x40\xd2\x06\x30\xc5\xd8\xbd\x25\xa2\x21\x32\x19\x26\x5b\xa1\xc9\xd0\xfd\x89\x4d\xb5\xb1\xc9\x4e\xd3\x9f\xe0\xf4\x24\xc0\x49\x07\x37\x5f\x16\xa2\xd6\xcb\xf0\x24\x80\x2a\x07\x2c\xcd\x91\x6a\x46\x66\x7b\xdc\x87\x41\xab\x14\xa7\xce\xcf\xce\xf3\x08\x05\xb5\xdd\x9f\x69\xe8\xa5\x10\x25\x6f\xd0\x35\x38\xdd\x42\x79\x05\x38\xd9\x26\x3b\x03\x81\x6c\xf0\xa6\xfd\xd3\x1e\xc9\xb6\xf2\xec\xd8\x54\xd4\x13\xb0\xd5\x93\x63\x60\xf8\xe8\xd7\x46\x99\xc5\x2f\x95\x5d\x87\x7e\xc3\x71\xcc\x23\x9c\xc3\xd8\x65\xdd\xdc\x40\x92\xa4\x84\xb5\x67\xf5\xfa\x66\xfb\xf8\x28\xbd\xe1\xc6\x7a\x08\x92\x5e\xd9\xc0\x3b\x46\x7c\x93\xc9\x08\x25\xa7\x51\xe8\xd3\x09\xb0\x5c\xad\xb2\xb7\x96\x63\x11\x76\xc6\x41\xe4\xde\x26\x77\xe0\x08\xd9\xab\x4d\xc3\xe7\x54\xd2\x5e\xe4\x78\x20\x67\xfa\x02\x8d\x27\x1d\x1a\xfa\x91\x23\x5f\x9c\xe4\x22\x13\x38\x9c\x8e\x6e\x72\x50\x74\x6c\x73\xd9\x92\x0b\xf9\xac\xd8\x32\x4f\x60\x73\x5f\xae\x7a\x34\xd9\x44\x2a\x7b\xb5\x54\x94\xe4\x8c\x76\xa6\xd4\xf3\x48\x08\xf2\xd8\x7c\x11\x4d\x9a\x66\xde\xf8\x11\x9b\xa5\x1d\x9e\xb8\x32\xbf\xf3\x0d\x94\xe5\xf5\x22\xa9\x60\x78\xf9\x74\x24\xd8\xc5\x86\xf1\x5c\x24\x07\x7c\xaa\xab\x0e\x9f\x8f\x67\x34\xc9\x43\x36\x6f\x99\x36\x99\x14\x09\xa9\x6d\x11\x45\x41\x21\x6b\xb3\x44\x33\x61\xd1\x3c\x46\xc9\x53\x87\xcf\x6c\xc6\xae\x7a\x2f\xa6\x2c\xe2\x2a\x05\xbe\xa3\x1e\x51\xea\x03\x36\x8a\x95\xcd\x06\x36\x69\x8d\xa5\x0a\x33\x87\x6b\xd6\x8f\x61\x97\x99\x67\xd3\xfb\x3b\xa5\x85\x62\xba\x62\x95\x50\x69\x1e\xc3\xd9\x67\x58\x1d\x9e\x34\x0a\x78\x2b\x0b\x52\x96\xd9\xa3\x5c\x52\x7b\x9b\x65\xd4\x6c\x2b\xa5\xb4\x79\x61\x69\xef\x12\x0f\xe0\xad\x98\x7d\x9a\x59\xa5\x2d\x4d\xcf\x26\xc4\x00\xf1\x19\xe1\x53\x07\x7d\x73\x3a\xc5\x34\xd4\x2a\x42\xce\xa5\x2e\x96\x00\xf0\x6d\x31\xc5\xa5\x24\x20\xbc\xca\xd5\x7a\x50\xaa\xac\x63\x6e\xc9\x6a\x29\x1a\x92\xba\x51\x3b\xd8\x61\x28\x49\x82\x41\x3e\x2b\x27\x23\x84\x7a\xa8\x0b\x82\x9e\x5f\x1b\x03\x37\x22\xa0\xe7\x6f\x03\xc0\x2d\xf0\xe7\xf9\x9b\xd1\x6f\x20\x6f\xb3\xe6\x1c\x4f\x48\x5b\x20\x28\x7b\x6c\x80\x81\x9e\xff\x47\x86\x40\xa9\xbc\xf6\x10\x50\xae\x9e\xa6\x00\x98\x82\xdf\xe0\x4d\xdb\xd8\x57\x25\x9f\x85\xbe\x14\xf6\x06\x6f\x9e\x32\xea\x81\xc5\xd7\x07\xbd\x52\x76\xbf\x4c\x3a\xe4\xa8\x64\x36\x19\x06\x01\x2d\x4c\xd0\xb5\xbe\x6c\x17\x32\x2d\x21\x59\x22\x4e\x4e\xa1\xd5\xc3\x5a\x7f\x71\xaf\x78\xe9\x9b\x57\xcd\x2b\x97\x65\xbc\x49\x86\x67\x2d\xca\x00\xbc\x5e\xcb\x13\xf0\x4a\x11\xd2\x24\xe7\x06\xae\x43\x43\xd4\x06\xcf\x51\xd1\x38\xab\x6e\xa7\xdc\x3c\x8b\xa9\x3b\x5d\x7e\x56\x79\x9f\x2d\x3d\x3f\x6b\xd8\x73\xf6\x16\xae\xdc\x71\x6b\x3e\x90\xd6\xf7\x81\x5b\xbc\x20\xdd\xea\x05\xb7\x6e\x03\xe8\x16\x3f\x98\x1c\x46\xf1\xb6\xfc\x20\x6d\xe6\x07\xe9\x1f\xda\x0f\xd2\x56\xfd\x20\x6d\xd5\x0f\x0e\x5b\xf7\x83\x55\xf2\x95\xfd\xe0\xf0\x49\xfb\x41\xfa\x45\xfd\xe0\xb0\x45\x3f\x68\x78\x8d\xf4\x21\x62\x0d\x47\x38\x6c\xd1\x11\x1a\x5e\x67\xea\xca\xa5\xa6\x0c\xcf\x5b\x94\xe1\xf9\x83\x3b\x63\xba\xaf\x33\x1e\x36\x76\xc6\xc5\xbb\x8d\x9d\xbd\xf1\xb0\xb1\x37\x2e\x5c\xf9\xd6\xea\xf9\x79\xc3\x9e\x1f\x29\x0e\x90\x3f\xdd\x6a\x39\x10\x00\x96\x8d\x23\x01\x79\x2e\xbf\x31\x14\x38\x27\xb3\x88\xdd\xb7\x15\x06\xa8\xee\x1a\xc4\x01\xd0\xfe\x8f\x1c\x08\x28\xf5\xb5\x17\x09\xe8\x05\xb4\x7f\x2c\x60\xd8\xf0\x3b\x1c\xb7\x29\x96\xe4\x57\x19\xa2\x10\x24\xab\x9e\xae\xd7\x97\x36\xfe\x88\x67\x7e\xc6\x98\xf6\x3c\xf3\x4b\x6e\x87\xda\x3d\xf3\x8b\x79\x1b\x67\x7e\xef\x08\xf6\xe4\x30\x47\x3c\xdc\xe7\xc8\x6f\x64\xda\x2a\x34\xcb\xe1\x5b\x16\xda\x46\x2c\x82\x1d\x0e\x6f\xb8\xc9\x49\xfb\xda\x0a\x62\x15\xd0\x67\x70\x2d\xe6\xbf\x7f\x58\xab\x5c\x8c\xd9\x60\xeb\x3f\x84\x45\xc9\xa4\x6f\xa5\x7e\x2f\x3f\x8b\xb0\x33\xf5\xb9\xfc\x3d\xa6\xa5\x7e\x32\x80\x01\xc6\xf2\x88\x78\x11\xf3\x06\x70\x11\xf3\x87\x40\x8b\xc5\xa4\xed\xa0\x68\x31\x69\x1c\x13\x2d\x26\x9b\x43\xa2\x8f\x78\xc2\xb0\xfc\xca\x47\x3b\x31\x91\xec\xae\x41\x48\xb4\x98\xfc\xfe\xa1\x63\x7d\xec\x21\x95\xd7\x5e\xe4\x21\x17\xcf\xae\xe1\xd0\x53\xc1\x10\x30\xa1\x47\xc4\x10\xbd\x58\xf7\xc4\x90\xc5\xa4\x6d\x0c\xe1\x35\x53\x91\x62\x70\xf9\x19\xa8\xb9\x52\xf2\xe4\x73\x91\x24\x49\x77\x34\x1c\xa4\xb9\x48\xb1\xcd\x93\x8c\xa9\xb7\xe9\xd7\xf9\x26\x95\x27\xcb\x64\xb7\xe4\x9f\xa4\xc5\x4d\xa1\xc5\x81\x51\xa9\xa9\x35\x3f\xb8\xaf\xc1\x70\xc4\x68\xc4\xa8\xb8\xaf\xd9\xec\x82\xba\x3b\xe6\x49\x25\x4d\xae\xe8\x7f\xeb\x36\xb9\x24\x1c\x56\x54\xb8\x21\xf3\x53\xa6\x54\xd9\x1f\x89\x25\x6a\xb8\xa6\xeb\x7e\x07\xa8\x65\xcf\xa7\xac\x36\xca\xa0\xb2\x4e\xef\x69\xfc\xea\x76\xc4\xd5\xaf\x6e\x61\x59\xb5\xf0\xc3\x54\xc9\xec\x47\xe4\xdc\xb4\xc6\xec\x9f\xc0\xec\xea\xec\x72\xef\x9f\xf1\x4a\x1e\xcf\x60\x74\x97\x2d\xc9\xf3\x1c\x39\x17\xc3\x96\x78\xbd\x40\xce\xc7\xe1\xe5\x75\x4b\xdc\x5e\x02\x76\x9f\x5d\xb5\xc4\xec\xef\xc8\xb9\x1e\x9e\x9f\x59\x6e\xc6\x62\xf6\x66\xf7\x0f\xe4\x9c\x7e\x38\x3f\x3f\xb9\x18\xd8\x33\xce\x06\x39\x75\x06\x9e\x9b\xa7\xd4\x59\x0f\xa8\xec\x50\x7e\x93\x43\x9a\xe2\x37\xea\xbb\x8b\xa8\x8b\x7e\xf8\x56\x95\x87\xb9\xc2\xc3\x6f\x53\xa3\x55\x4d\x72\x81\x65\x71\x0f\xa7\xaa\xd4\xf1\x72\x8e\xb8\xab\x4f\x9c\x11\xf0\x76\x54\x60\x64\xbc\x7a\xe6\x19\xfc\x3a\x32\xe2\x99\xca\x29\xe6\x9d\x3b\xcc\x42\x2a\x3f\x88\xb9\x73\x33\xeb\x58\x72\x5f\x09\xcc\xd0\x63\xcf\xb3\x5f\x7a\x3c\x36\x9e\x3f\x09\x40\x65\x48\xab\xe3\xb6\x62\x7c\x27\xbf\x61\x05\x41\x47\xd2\x95\xa6\x52\x1f\x03\xec\xf8\xd1\x9c\xc9\xef\x49\xa5\x9f\xd5\x71\x10\x4c\xa4\x4b\xa6\x51\x00\xab\xa4\x6f\x54\xdd\x3d\xa7\xa1\xe9\x50\x05\x90\x46\x6f\x12\x66\x4d\x31\xa8\x27\x5b\xf3\x11\x07\xf3\x5c\xd5\x81\x5a\x26\x9f\xf8\xe7\xd3\x20\xe2\xc4\xa8\xc4\xb1\x21\x40\x8d\x65\x90\x49\xbc\x85\xd6\xc5\x8f\xb8\x04\x78\x4c\x82\xaa\x4f\xb6\x74\xad\x08\xf0\x60\xbf\xeb\x51\xa3\xd7\xc5\x44\x1d\x4e\x3b\x3a\x42\xb8\x25\xf7\x32\xe6\xd6\x45\xd6\x67\x81\x14\x51\x20\xf9\x4a\x39\x5e\x26\xfe\xca\x7c\x2f\x50\x6f\x17\xd4\x52\x5a\xeb\x98\x76\x90\x22\x09\x75\x4c\x2c\x33\xc3\xee\x34\x75\x49\xa6\x97\x73\x28\x94\xed\x0a\xf9\xd5\x50\xda\xbd\xb9\xc9\x06\x35\x0b\x4d\x6f\x22\x9b\xf9\x9c\x56\x26\x59\xdb\x76\xd5\xfe\x56\x55\xaf\xff\x59\xbe\xaa\x1e\xb1\x68\x01\x5e\x9e\x6d\x20\x81\x28\x4c\x6c\x62\x61\x86\xe6\xd3\x40\xee\x1a\xc5\x74\x9b\x77\xdf\x41\x97\x1c\xc2\x45\x77\xba\x4b\xe0\x48\x7d\x44\x7e\x43\xe5\x99\xf4\x90\x60\x73\xb2\x06\x67\x0b\x2b\x07\xe5\x38\x6e\xa2\x4f\xf0\x72\xdf\x88\xc5\x86\xd8\x2d\xfe\x30\x65\x50\x48\xca\x4e\xab\xe4\xd4\xaf\xad\xb4\x13\xbf\x96\x40\x4d\xfb\xda\xda\x01\x65\xc4\x15\xea\xea\xa1\xa5\x0c\xef\x64\xd6\x1b\xf8\xa3\xc4\x75\x02\x07\xf3\x29\x51\x58\x2f\xef\xa1\x44\x6e\x26\xe5\x57\x93\xc3\xd3\x80\xba\xb7\xfd\xa5\x98\x52\xde\x9d\xe2\xd0\x0b\x88\x2a\xb1\x10\x24\x69\xaf\x01\x6b\xf5\xed\xf5\x2e\x7d\x16\x9c\xb6\x9c\xd9\x69\x16\xf7\xcc\xb7\x0a\x80\xf7\x49\x40\x27\xe1\xa9\x2e\xd7\xf3\x5b\x29\x63\xda\xd6\x94\x9b\x26\x09\x6c\xa5\x32\x1e\xa4\x87\x25\x99\x36\xa7\x98\x11\x91\x6d\xa4\xb4\x98\xfd\xea\x15\x36\x8a\x9d\xee\x34\xc2\x4a\xa5\x6e\x55\x68\x41\x26\xf9\xb8\x66\xcb\x2f\xc7\x54\xd6\xf9\xff\x02\x00\x00\xff\xff\xf2\x21\xeb\x43\xc4\x5b\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 23492, mode: os.FileMode(384), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

