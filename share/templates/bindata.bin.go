// Code generated by go-bindata.
// sources:
// index.html
// DO NOT EDIT!

// +build bin

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5d\x7b\x6f\xdb\x38\x12\xff\xbf\x9f\x82\x2b\xb4\x87\x76\x51\x49\x89\x93\xee\xf5\xba\xb6\x0f\x6d\xe2\xeb\x19\x97\xa4\x46\x93\xf4\x6e\xb1\x58\x1c\x68\x89\xb6\xd9\xc8\x92\x56\xa4\xf2\x38\xc3\xdf\xfd\x86\x7a\x3f\x2d\xf9\x25\xbb\x49\x0a\x24\xb5\x48\xce\xeb\xc7\x21\x39\x33\x54\x92\xd9\x4c\x27\x23\x6a\x12\x24\xf9\xff\xff\xd7\xb5\x39\x9d\x12\x69\x3e\x6f\x33\x1b\x9b\xdd\xd9\x4c\x39\xc5\x1c\x2b\x7e\x33\xb4\xaa\x41\x33\x31\xf5\xf9\x3c\x47\x3d\xb1\x18\x37\xb1\x4f\x8f\xd1\xc4\x21\xa3\x8e\xa4\x4a\x88\x53\x6e\x90\x8e\x14\xf6\xa2\x90\x6b\xd8\x30\x9f\x4b\xdd\x7c\x5b\x5b\xc5\xa5\x82\x0c\x2c\x89\xd6\x97\x36\xfa\xd0\x41\x3e\xa1\x8d\x1d\x3c\x65\xf3\xf9\x8b\xb6\x4e\x6f\x91\x66\x60\xc6\x3a\xd2\xd8\xa1\xba\x3c\x34\x2c\xed\x06\xb4\x91\xb9\x65\x4b\xdd\x17\x08\x25\x47\x68\x96\x21\x1b\x0e\x32\xb0\x33\x26\xf2\x21\xe2\xe4\x9e\xcb\x0e\x1d\x4f\xb8\xd4\xf5\x86\xcd\x66\xde\xc0\xf9\xbc\x23\xcd\x66\x74\x84\x5e\xda\xca\x19\x36\x95\x0b\x32\xc6\x9c\xde\x82\x9a\x6c\x62\xdd\xc9\xe2\xdb\x84\xea\x04\xf4\x35\x18\x34\x8a\xcf\xc9\x46\x61\x84\x27\x1a\x84\x4f\x0e\x43\xd9\x93\x63\x5f\x9e\x75\x4b\x9c\x91\x61\xdd\x81\x48\x1c\x82\x75\x66\x61\x1d\xe1\xdb\x31\xd2\x29\xb3\x0d\xfc\x80\x2c\x98\x02\xcb\x64\x12\x68\xf4\x4f\x00\xf6\x0a\x34\x09\x94\x99\xcf\xbb\xde\x6c\x25\x75\x0d\x65\xcb\xe2\x1b\x82\x8f\x9c\xc0\x10\x8d\xc8\xb6\x43\x10\xc8\xc2\x5c\x36\xc8\x08\x8c\x54\x14\x05\x05\xb3\x1a\x8a\x14\xc0\xfb\xaa\xaa\x93\xc3\x6e\x5b\x05\x18\x3c\xd4\xa2\x0f\xa5\xf0\x1d\x6e\x0d\xb4\xc2\x39\x0d\x3a\xa1\xdb\x35\xc2\xde\x29\x31\x5d\x14\x59\x2f\x3e\x44\xa3\x60\x9c\x41\xe3\x87\x34\x57\x6a\xda\x2e\x97\xc7\x8e\xe5\xda\x52\x72\x4c\xe9\x28\xd9\xc0\x43\x62\x20\x36\xc5\x86\xe1\x4f\xa3\x69\xdd\x39\x18\xa8\x75\x02\xf3\x15\xa1\x55\xcd\x68\xe8\x72\x6e\x99\xde\xe4\x07\xbd\x7e\x4b\xc0\x9b\x11\xcd\x32\x75\xec\x3c\x08\x57\xc0\x43\x83\xe8\x62\xb5\x78\x90\xea\xfe\x2a\x59\x41\xd6\x6c\x76\x47\xf9\x04\x9d\x11\xc6\x4e\x23\x4f\xd2\x51\x5a\x72\xd2\x2a\x58\x58\x28\xf5\x0f\xb4\xb5\xcc\x13\x83\x6a\x37\x9d\x19\x9f\x50\xa6\x4c\xb0\xa9\x1b\xc4\x6b\x99\xfb\x6b\x1f\xd6\xb4\x70\xd5\xf9\x3c\xe1\x10\xd0\x76\xe2\x7f\xcc\xf0\x43\x48\xec\x01\x9f\xb0\x3e\x26\x1e\x81\x72\x05\xd2\x53\xbb\x40\xda\xc0\x95\x6d\x3e\xb7\x1c\xb2\x57\x36\xfb\x86\xa2\xd8\xfa\xda\x36\x67\x1a\xda\x6a\xd2\xbf\x9b\x71\x76\xc7\xba\x63\x8d\xf8\xba\xa9\x7c\x1c\x32\xcb\x70\x39\xd9\x84\xd3\x5f\xc4\xdb\x67\xc6\x01\x98\xab\x69\x30\xe0\x11\x3b\xff\x5e\xda\xbe\x95\x45\xd0\x56\x5d\x23\x3c\xca\xc4\xa0\xc2\xc3\x89\xfc\x89\x32\x0e\x86\x0e\xfc\xc3\xa8\xce\x19\x84\xe0\xec\xe6\x54\xc3\x00\x1e\x77\xa8\x4d\xe2\x33\xa9\x78\x38\x9f\x10\x0c\x4e\xed\x1f\xd8\x41\x37\xb9\x87\x07\x1d\xc1\x59\xea\xcf\x83\x0c\xe7\xe8\x80\x38\xd4\xd2\x83\x93\xb9\x62\x74\x2a\x6a\x41\xdf\xb0\xe1\x92\xc5\x84\x20\x3f\xe8\x4f\x62\xe7\xa1\xe1\x07\x53\x10\x20\xe8\x10\x09\x44\xd0\xcf\x66\x0e\x36\xc7\x04\xbd\x34\x70\x1c\x71\x05\x83\x94\x33\xca\x84\xaf\x66\xb0\x4d\x1e\xd3\x95\xd6\xbe\x28\x72\xe3\xd8\x2a\x74\x47\x75\x3e\x91\x8f\x1c\x32\xf5\xf6\x03\x03\x2b\x3e\x3e\xf3\xf9\x34\x98\xd9\x15\x80\xf2\x19\x79\x70\x45\x91\x6d\x09\x03\x88\x71\x32\x98\xa5\x5d\x33\xf9\x14\x2a\x14\x7f\x8f\x83\xa7\x14\x6d\x2e\xaa\x9d\x82\x79\xbb\x0b\x6b\xcf\xc9\xb4\x81\xb8\x16\xa4\x58\xfe\xf6\xbe\x28\xaa\x15\xba\x6c\x2a\xac\xf5\x25\x6e\x25\xa8\x5d\x17\xb2\xe7\xa8\x36\x7f\xd2\x03\xa6\x1b\x0d\x6b\x05\xbf\xdd\xc7\x78\x0d\xc7\xb5\xfb\x61\xf4\x73\x60\x5b\xcb\xdd\xb7\x13\xd9\x0a\xc6\xfb\x13\xde\x35\x1c\xda\xee\x97\xf1\xbb\x8e\x6d\x53\x3e\xb6\x0f\xc1\x6d\x78\x24\x2f\x1f\xb3\x5d\x59\x1c\x1b\xab\x10\x5e\x33\xb2\x52\x34\xfd\x0f\x87\x54\x04\xd3\xa5\xf2\x5e\xad\x19\x84\x4f\x3d\x94\xf2\x31\x38\xb4\xc7\xf1\xa1\x3f\x68\x13\x31\x38\x6c\x47\xc0\x4c\xf9\x17\x35\xf5\xaa\x70\xb8\x34\x9e\x16\x0c\xbc\x29\x5a\x8b\x83\x98\xab\xb5\x18\x88\x49\xcb\x30\x48\xa0\xb2\x90\x09\x1a\x8e\x65\x97\x11\x5b\xe3\x12\xd2\x01\xe0\xe0\xa1\x13\xab\x36\xd0\x00\xe9\xa4\xae\x5e\x43\xc5\x64\x37\x93\x40\xe8\xa3\x1d\xe6\x0f\xa7\xa3\x06\xd2\x87\x53\xca\x6e\x90\xcb\x30\xac\x83\x8a\x14\x02\xd4\xd9\x54\x06\x11\x0b\xdd\x4a\x16\xb1\x26\x70\xcf\x49\x44\x3e\xaa\x3a\x1d\x6d\x34\x87\x00\x76\xbb\x8f\xa6\x1b\x4e\x21\xf6\xc2\xe6\xe7\x0c\xa2\x8e\xaf\x6f\x27\x81\x00\xbe\xfb\x13\x42\x37\x9c\x3f\xec\x95\xed\xbb\x4e\x1f\x92\x0e\xd6\x40\xf6\x30\x9b\xa9\x3f\x23\xdb\xba\x21\xc8\x76\x1d\x3a\x7a\xd0\x18\xfb\x90\x22\xd1\x1d\xcb\x16\xab\x33\x75\xd8\x62\x87\x40\xc4\xa6\x06\xbe\x8f\x7e\x56\x83\x57\x18\xaa\x22\xc7\x70\xb1\x06\x4e\xf0\xcd\xa0\xe6\x4d\xe4\x04\x37\xe8\x10\x49\xa7\xe4\x96\x6a\x24\x3d\xd9\xf5\x26\xfa\x0c\x78\x15\x4d\xb6\x68\x2f\x9a\xf0\x6e\xd0\x17\x78\x78\x26\x74\x11\x5e\x22\xac\x0c\x28\xe3\x68\x32\x72\x86\x65\x22\xe6\x0a\xbb\x5b\x48\x3a\xb7\x5c\x93\xc3\x2e\xf3\x28\x0d\x4f\x45\xb4\x25\x18\xfc\x82\x24\x2f\x97\x79\xba\x08\xbc\x43\x92\xc8\xc5\x9e\x2e\x00\x47\x48\xfa\x78\x8b\xe9\x13\x76\x81\x63\xcf\x05\x5e\xfd\xf8\x00\x54\x96\x5b\x20\xac\xba\xb9\x16\x49\x5e\xbe\xe2\xa2\x8f\xe2\x84\x3a\x1a\xb6\x7e\xcd\x25\x9b\xe6\x42\x38\xa7\x8f\x14\x38\x6f\x2e\xf0\xb4\xf2\x4a\xb2\x8c\x09\x0a\xb8\x50\x67\x75\x2e\xc9\x7a\xc8\xd8\xc1\x0f\x19\x4b\xfc\x34\x39\x51\x73\x01\x79\x45\x55\x9f\x20\x67\xef\x9b\x96\x4e\x20\x72\xf2\xf6\xd2\x70\xbc\xdf\x18\x13\x34\xa3\x65\x41\x65\x29\xad\xa4\x2b\xb6\xbb\x48\x47\x37\x35\xbc\x19\x15\xbd\xfd\x66\xa1\x8e\x23\x87\x90\x58\xc7\x51\xaa\xd6\xb5\x64\xc9\xab\x4c\xcf\x05\x55\x30\x1f\x45\xbf\x08\x56\x07\xef\x82\xea\x58\x0e\xf2\x57\x29\xc8\xd3\x14\x7b\x50\x56\xd3\x6c\x77\x87\x75\xb5\x93\xc1\x75\x03\x85\x35\x90\x52\x55\x51\x13\x8a\x6c\xaa\xa4\x06\xbc\xb6\x52\x4b\x5b\x17\xac\xe7\x62\x5a\xbe\xc0\x00\x98\x6e\xb4\x9a\x26\xf8\xed\xbe\xb4\xd4\x70\x39\x6d\x3f\x8c\x7e\xae\xa7\xd5\x72\xf7\xed\x14\xd4\x04\xe3\xfd\xa9\x2a\x35\x5c\x51\xdb\x2f\xe3\x77\x5d\x52\x4b\xf9\xd8\x3e\xdc\xc8\x9f\xc0\x54\xad\x78\xcd\xed\x54\x5c\x7d\x16\x13\x5e\x3e\xb0\x95\xe8\xfe\x8d\x29\x5f\x89\xb0\x0f\x5e\xb3\xee\x8d\x3c\x04\x82\xf9\xe4\x10\x1a\xe3\xb0\x10\x1e\x36\x95\x17\xc6\x15\x3a\x21\x42\xb9\x58\xff\x42\x3b\xf4\xda\x4c\x44\x2f\xb8\x8b\x79\x8c\x2f\xb6\x53\x2d\x21\x68\xa1\xa3\x6d\x41\x3a\x38\x43\x5a\x78\xd8\xd0\x80\x6c\xe1\x50\x69\xe1\x51\xcb\x86\xa4\xcb\xd4\x84\x55\xcb\xc8\x22\x2d\x84\x77\xa6\xb5\x88\x5a\xf6\xe2\xcd\x02\xba\xcb\x37\x0b\xfa\x4d\xbc\x59\xd0\x37\x39\x34\x42\xda\xc2\xaa\xf2\xa0\xfe\xe6\xde\x2c\x88\x85\x6e\x25\x1b\x5a\x13\xb8\xe7\x64\x28\x1f\x1d\xf6\x37\xfb\x66\x41\x7f\x1f\x6e\xd9\x1b\x4e\x85\xf6\xc2\xe6\xe7\x4c\xa8\x8e\xaf\x6f\x27\x11\xea\xef\xd3\xed\x7a\xc3\x79\xd0\x5e\xd9\xbe\xeb\x34\xa8\xdf\xec\x9b\x05\x95\x59\x50\x74\x1c\xaf\x94\x60\x0c\x8a\x8a\xdc\xa7\x8e\x65\xb3\xb7\x3d\xc7\xb1\x1c\x86\xfa\xa6\xfa\xc5\xe5\xc8\x26\x4e\xb0\xe8\xa4\x52\xe6\xad\x64\x28\x99\x5a\xfc\xe8\xcc\x02\x6f\xe9\x7f\x41\x36\x2b\x12\x38\xc0\xda\x0d\xe1\x9b\x92\x15\x71\x2b\x13\xf7\x89\x6e\x4c\x16\xc8\x68\xd3\xee\xb0\xad\xd2\x6e\x46\xd6\xf2\x99\x1a\x1d\x61\x5d\x77\x58\x3e\x5b\xa3\x89\xab\xbc\x60\xd0\x56\x2e\xf2\xe8\x48\xd9\xc8\xfd\x5b\xc8\xac\x3f\xa8\xc9\xaa\x1c\xe0\xbf\x98\x43\x66\xff\x9a\x9a\x3d\xef\xd6\x0e\xe9\x9e\x8f\x12\xdf\x47\xa7\x96\xee\x1a\x16\x3a\xfe\x2c\xc5\x0b\x29\xbe\xb8\xca\xd3\xc1\xe4\x27\x68\x02\x6d\x3d\xaf\xef\x9b\xe5\x29\x6b\xb4\x09\x84\x83\x85\xff\x48\xb0\x06\x33\x9b\x80\xba\x26\x83\x22\x85\xc5\xc8\x62\x8d\xa1\x27\x52\xf9\x6d\x81\xc1\x24\x5c\xc6\x79\x7a\x7f\x85\x27\x4c\x56\xcb\xe9\x0b\x15\xf0\x19\x24\x35\x08\xfe\x4b\x4e\x5b\x16\x00\x31\xf5\xaf\x43\x14\x88\xc1\x71\x00\x3c\x92\x0e\xa4\x37\xe8\xb5\xe5\x14\xf4\x86\x40\xbd\x29\xeb\x03\xd2\x4c\x5f\x68\x5c\xc0\x36\xdf\x15\xd2\xcd\xe7\xc2\x59\xa2\xd9\xcb\xef\x84\x02\xbb\xc4\x36\x11\x82\x9f\x50\xbd\xa6\xcf\xe4\xcc\x59\xc9\x71\x2a\xb8\xa4\x55\xcf\x6c\x71\x39\xdd\xcb\xbd\x27\xda\xfe\xcb\xe8\x2b\xbc\xa7\x17\xfb\xcd\x42\x06\x05\xde\xb3\xc1\x3d\xa3\x6a\x3b\xb0\xa3\x93\x27\xef\xdd\xc1\x39\x52\xb1\x3e\x42\x0e\x85\x0b\x24\x60\x51\xb1\x42\x72\xa7\x60\x19\x62\x55\x1a\x0d\x12\xba\x2c\x66\x51\x84\x7a\x03\x70\x7f\xfa\xed\xaa\x77\x59\x08\xf6\xa7\x07\x4e\xaa\xa0\xf6\xa9\x0b\x81\xf6\xc8\xeb\xc1\xfc\xa9\x7f\x75\xb9\x00\x63\x11\x1c\x94\xea\xe1\xd1\x2e\x40\x57\x10\xd7\x87\xb6\x99\x32\x98\xcd\x76\x58\x06\x1b\xb0\x06\xca\x60\x03\xc7\x12\xd9\x48\x75\x15\x0c\xb4\xd9\x54\x15\x2c\x92\xb9\x95\x22\xd8\x9a\xb0\x3d\x17\xc1\xf2\x85\x81\x01\xdb\x68\x11\x0c\xd8\xed\xbe\x20\xd4\x70\x11\x6c\x2f\x6c\x7e\x2e\x82\xd5\xf1\xf5\xed\x14\xc1\x80\xef\xfe\x14\x82\x1a\x2e\x82\xed\x95\xed\xbb\x2e\x82\x25\x1d\xec\x91\xfe\x78\x4d\xd5\x8b\xe6\x03\xe6\xfd\xa4\xcd\xa0\x7f\xfa\xe3\xbf\x67\xbe\xaa\xfd\x2d\x24\x5d\x3f\x56\xfb\x4b\x8d\x3e\x02\xa3\x2f\x7b\x5f\x1f\xa7\xd5\x75\x66\xfd\x18\xbc\xfe\x09\x9b\xff\x0e\x49\x17\xfd\xa7\x6b\xfe\x2f\x48\xfa\xd6\xff\x7a\xf5\x74\x01\xf8\x2b\x92\xbe\xf6\x2e\x1f\xb3\xfd\x1a\x11\x77\x4a\xa5\x00\xbc\x47\xd2\x55\xff\xbc\xf7\x38\x11\x28\xb5\xfa\x6f\x48\x3a\xf9\x72\x7e\xfe\xf1\xe2\x87\x3a\xef\x4a\xae\x9a\x6c\xc7\xd2\x0a\x2e\x9a\x6c\x96\xa8\x11\x89\x21\x9b\xba\x66\x8a\xaf\x85\x6c\xa6\x40\xc8\xb4\xf2\x6f\xca\x01\xf2\xeb\xfa\xe4\x31\x0d\x23\xce\x3a\x32\x07\x0e\xb5\x1c\xca\x1f\xd6\xe1\x71\x41\xb5\x25\xaf\xd6\xd2\xf4\x97\xf4\x7f\x6b\xd1\x7f\x25\x0c\xa2\x74\x93\x2f\xc7\x23\xdc\x0b\x02\x26\x57\xb4\xfa\x7e\x30\xb6\x38\x75\x99\xb8\xa9\x02\x67\xfb\xa7\xd3\x2f\x27\x57\xbf\x0d\x7a\x68\xc2\xa7\x90\xb0\xb4\xfd\xff\x44\xb5\x10\x92\x85\x20\xfb\x98\x12\x0e\x39\xf3\x04\x3b\x8c\xf0\x8e\xe4\xf2\x91\xfc\x3e\x4c\x4c\xbc\xa2\xa1\x58\x5f\x99\xdf\xdd\x8f\xe0\x13\x18\xdb\x56\xfd\x01\x09\x3e\x13\xce\x6d\x99\xfc\xe9\xd2\xdb\x8e\xf4\x1f\xf9\xfa\xa3\x7c\x62\x4d\x6d\xcc\x29\x64\xdc\x12\x18\x6c\x0a\xb2\x8e\xd4\xef\x75\x08\xe4\x62\x52\x92\x52\x70\xee\x48\xb7\x94\xdc\xd9\x96\xc3\x13\x83\xbd\x5f\x0e\xdb\xd1\xbd\x1f\xd3\x97\xbd\x87\xb7\x88\x9a\x94\x53\x6c\xc8\x0c\xf2\x23\xd2\x39\x54\x0e\x60\x71\xfd\x24\xcb\xbf\xc3\xaa\xed\xf7\xfe\x08\xd8\x7a\xbb\x92\x43\x0c\xaf\x6a\xe9\x70\xcd\xe5\x88\x02\x57\x29\xfc\xcb\x05\x23\x7c\x2b\x9e\x15\xf8\x26\xc8\x7f\x07\xc8\xe8\xe8\x0f\x59\xce\x91\xfb\x54\x0c\x9c\x0a\x26\xef\xa8\x75\x7f\xd4\x8a\x78\x00\x36\x5f\x3c\x2c\xbe\x11\x87\x51\xcb\x9c\xcf\x43\xb6\x2c\xfc\x20\x1f\xb5\x14\xdb\x1c\x4b\x88\x3f\xd8\x60\xe1\x05\xbe\x90\x72\x12\xb0\x6d\x1b\x44\xe6\x96\xab\x4d\xe4\x94\xb4\xc3\xd6\xc1\x3d\x7c\x2d\x25\x0f\xc6\x7b\x02\x97\x90\x72\x7c\x7c\x0f\x5f\xcb\x49\x39\x3e\x5e\x56\xca\xbb\xd6\x3d\x7c\x2d\x27\xe5\x5d\x6b\x59\x29\xef\x01\xb1\xf7\x4b\x22\xf6\xbe\x04\x31\xc6\x1f\x0c\xc2\x26\x44\x64\xc7\xfe\xf4\x89\x95\xae\x42\x52\xbd\x88\x3f\x74\xab\xd4\xd4\xc9\xbd\x22\x06\xfa\x8b\x33\x5c\x70\xed\xa1\xa5\x3f\xe4\xf3\x7e\x6e\xd9\xf2\x10\x3b\x85\x49\x7e\xd0\x17\x14\xd6\xe3\x7a\x44\xba\x36\x9d\xaa\xb7\x65\x4a\x74\x62\xc1\xb7\x90\x67\x0c\x0c\xc6\xce\x98\x9a\xf2\xd0\xe2\xdc\x9a\x7e\x40\x07\x52\x7c\x6f\x10\x1e\x51\xde\x1b\xcc\xfe\x9d\x48\x27\xf7\xc7\x3f\xc2\xe1\xae\x0d\xc3\x08\x13\x47\x15\x27\x53\xdb\x80\x87\xfc\x5f\x0a\x41\x4a\xb4\xab\xa1\xb6\xb7\x5b\x7a\xdb\x09\x15\x35\x8d\xa1\xd7\xe5\xb5\x01\x3e\xad\x74\xe9\x25\x53\x63\x84\xc7\xd4\x16\xea\xed\x9d\xae\x9d\xda\x5d\x8b\xb4\x0e\xfe\xe0\x49\x82\x0c\x05\x7a\x67\x2e\x2f\x0a\xcd\x08\xa9\x95\xc4\xd6\x9c\xaa\x84\x46\x65\xa0\x4c\xb5\xa8\x68\xfa\x82\x23\xa6\xf6\xfc\x41\xb4\x94\x9a\x31\x6f\xaa\x7c\xa7\x13\xbb\x2c\xfb\xa0\xaa\x77\x77\x77\x0a\x20\xed\xc0\x97\xa2\x59\x53\xd5\xdf\x96\x55\x70\x5d\x82\x19\x61\xaa\x30\x86\xf1\xbf\x6b\x53\xbb\x93\x77\x53\x29\x5b\x28\x8d\x4a\xa4\x13\xcb\xf0\xae\x8d\xc2\x5d\x1e\xd7\x33\x3b\x3c\x7a\x60\x13\x36\x09\x7a\x6d\x10\x13\x29\xbd\x7b\xb1\x9b\x53\x73\xfc\x46\xd4\xbe\x16\x95\xbb\x12\x17\x69\xd9\x51\xc1\x25\x90\xd4\x2d\xc5\x38\xbc\x26\x8a\xae\x0a\x63\x5d\x97\x2b\xae\x2d\x20\xa9\xf5\x96\x59\x4b\xea\x46\x26\x23\x6e\x15\x5c\xf8\x0e\x45\x15\x32\x06\x5b\xf8\x5d\x1a\xa9\x25\x7f\x22\x1d\x8e\xbe\x9e\xa9\xdb\x16\x15\x33\x95\x0a\x1f\x82\x48\x15\x48\x2c\x2f\x56\x4d\x48\xa8\xb4\xb6\x86\x9d\x10\xb8\x08\xd6\x4b\xbd\x07\x75\x10\x93\x85\x4a\x2f\x8c\x7a\xb2\xcb\x2a\xef\x6c\x89\xa8\x48\x18\x52\xb4\x07\x18\x38\xbf\x67\xa1\x82\xd5\x2e\xc6\xf9\x4b\x3d\x96\x52\xc6\x53\xfc\x2e\xf7\x3a\x1b\xa1\x37\xae\x26\x4f\x7d\x54\x4f\x4f\x31\xae\x2e\x4f\xf1\xb3\xed\x75\xf4\xf4\xc6\xd5\xe4\x49\x6b\xea\x49\x97\xd0\xd3\x66\xf5\x78\x8a\x71\x59\x9e\x4c\x83\x25\xcc\x93\xe7\xf3\x77\x7c\x8b\xfd\x56\xa9\x7b\x8b\x1d\x24\xc2\x57\xd4\x41\x41\x20\x3b\x9f\xff\x0a\x2e\xe7\x75\xd7\xe1\x90\x8d\x8d\x11\x73\xb4\xe2\x73\xff\x3b\x53\xfd\xc4\xf1\xea\xe3\xe7\xcf\xbd\xd3\x21\x85\xc6\x29\x35\xd5\xa1\x2b\xd2\x5c\x05\x3e\x2a\xdf\x59\x78\x29\x0d\x5c\xc2\x0e\xaf\x31\x78\xa5\x2a\xa1\x58\x5b\xf5\x63\x05\x38\x1c\x45\xd8\xfe\xff\x00\x00\x00\xff\xff\x56\x20\x71\x91\xcd\x6b\x00\x00"

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 27597, mode: os.FileMode(420), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

