// Code generated by go-bindata.
// sources:
// index.html
// DO NOT EDIT!

// +build bin

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x1d\xfd\x73\xdb\xb6\xf5\xf7\xfc\x15\x28\x6f\xdd\xb5\x5d\x49\xda\x8e\xb3\xe5\x5a\x49\xbb\xc4\xd2\x3a\xde\x6c\x47\x17\xdb\xd9\x7a\xbd\xde\x0e\x12\x21\x09\x0d\x45\xb2\x00\xe8\x8f\xe9\xf4\xbf\xef\x81\x1f\x20\x29\x52\x1f\xa4\x48\x36\xbe\x24\x77\x76\x24\x10\xef\xfb\x3d\xe0\xbd\x07\x48\x5e\xad\x6c\x32\xa3\x2e\x41\x5a\xf4\xff\x7f\x03\x5f\xd0\x25\xd1\xd6\xeb\x1e\xf7\xb1\x3b\x58\xad\x8c\x21\x16\xd8\x88\x86\x61\xd4\x8c\x87\x89\x6b\xaf\xd7\x05\xe8\x85\xc7\x85\x8b\x23\x78\x8c\x16\x8c\xcc\xfa\x9a\xa9\x21\x41\x85\x43\xfa\x5a\xf2\x14\x25\x58\x93\x81\xf5\x5a\x1b\x14\xc7\x7a\x26\xde\x4a\xc8\xc1\x40\xe2\x45\xcf\xa6\xf7\x68\xea\x60\xce\xfb\x1a\xf3\x1e\x10\x79\x04\xe6\x6c\x62\x03\x65\x7d\xe2\x09\xe1\x2d\xb5\xc1\x0b\x84\xb2\xd3\xa6\x9e\x13\x2c\x5d\xc4\x97\xd8\x71\xf4\x53\x24\xc8\xa3\xd0\x19\x9d\x2f\x84\x36\xc8\x4e\x5b\xad\xe8\x0c\x45\x0c\xf9\x98\xe1\x25\x37\x2e\xb1\x6b\x5c\x93\x39\x16\xf4\x1e\x78\xe3\x0b\xef\x41\x97\xbf\x16\xd4\x26\xc0\xa4\xc3\x61\x50\xbe\xce\x0e\x4a\xce\x43\x06\x80\x85\xc5\x69\x82\x7a\xf1\x2a\xa2\xea\xdd\x13\x36\x73\xbc\x07\x20\x8c\x13\x0d\x5d\x7a\xd8\x46\xf8\x7e\x8e\x6c\xca\x7d\x07\x3f\x21\x0f\xf4\xee\xb9\x5c\x8b\x74\x99\xe8\x28\x66\xe9\xd6\xa1\xee\xc7\x90\xb3\xf5\x7a\x10\xda\x2b\xa1\x91\x30\xa1\xcb\x5f\x08\x5e\x0a\x02\x8f\xa7\x44\xf7\x19\x41\x40\x14\x0b\xdd\x21\x33\x90\xd9\x30\x0c\x14\xdb\x34\xa1\x2d\xd5\x1e\xf1\x6c\x2e\x4e\x07\x3d\x13\xb4\x12\x2a\x51\xbd\x28\x6a\xd3\xc1\x6c\x4e\xf4\xd3\xd3\x96\x75\x18\x38\x59\x63\x2f\x89\x1b\x20\x25\xa8\x7c\x11\xcf\x83\x99\x0e\x4d\x5e\xe6\xf9\xa5\xae\x1f\x08\x7d\xce\xbc\xc0\xd7\xd2\x19\x5b\xe7\xe8\x0e\x9e\x10\x27\x72\x96\xc8\x68\xae\xf7\xc0\x30\xc0\xda\x04\xac\xa3\x54\xb2\x0f\xcd\x24\x00\x5f\x74\x43\x43\xc7\x4f\xa3\x91\x18\x33\x27\x53\xcf\xb5\x31\x7b\x92\x66\xc7\x13\x87\xd8\x69\x38\x28\xcd\xd9\x51\x40\x54\xa6\x99\x99\x0a\x93\x71\xa9\x23\x0d\x13\x47\xb2\x8d\x4b\xc2\xb9\xf1\x4f\x98\x03\xe1\x85\xf2\xff\x62\x22\x19\x3d\xa0\x9c\x18\x7b\x90\x8e\x1e\x05\xc3\x17\x12\x07\x58\x74\x03\xf7\x40\xdf\x07\x7d\x0b\x54\x23\x0d\x64\x65\x6f\x59\x19\x57\x1e\x23\x8d\x2b\x23\x44\xba\x53\x19\x7b\x60\x23\x55\xa0\xbf\xec\x56\x46\xee\x6d\xcf\x4c\x23\xa2\xfd\xe0\x80\xe8\xe4\x9d\xc6\x86\x6b\xbc\x99\x70\x58\x8a\x04\x69\x31\x48\xae\xd5\x6a\x7b\x4c\x90\xf0\x60\x3a\x05\xe8\x4d\xff\xd8\x44\x5e\x2d\x58\x36\xa1\xbb\x0b\x96\x0c\xe5\x23\x82\x65\xbf\x52\x2a\x07\xcd\x26\xec\x51\x41\xd3\x33\x03\xa7\xb8\xb5\x91\xdf\x8b\xbb\x5b\xe2\x87\xe8\x24\xda\xca\x36\x76\xb0\x0c\x0a\x2e\x18\xf5\x49\xba\x65\x6d\xa4\x32\x62\x41\x30\xb8\x7a\x6e\x57\x8f\xd2\x1b\x04\x9b\x6e\x92\xbf\x68\x83\x31\x61\xd4\xb3\xe3\x2d\x7c\xcf\xec\x5c\xb6\x83\x3e\x60\x27\x20\xbb\x01\x81\x7e\xfc\x3c\xab\x97\xcc\xbe\xee\x60\x65\xec\xd5\x8a\x61\x77\x4e\xd0\x9f\x1c\x8c\x7e\xe8\xab\xe7\xc6\x25\xe5\xd2\x17\xf3\xe2\x1d\x20\x58\xe9\x12\x95\x0a\x80\x1e\xa8\x2d\x16\xfa\x4b\x46\x96\x72\x41\x00\xaa\x46\xa4\x8a\xf5\x7a\x19\x71\x5b\x47\x27\x11\xa2\x50\x33\x2a\xd7\xdd\x82\x40\x77\xd8\x86\x7a\x62\x5b\x2b\x7d\xa4\xef\x12\x86\xd2\xdf\x69\x42\x95\x83\x2d\xe4\xb9\x4b\x10\xaf\xe3\x44\xf7\x8a\x2c\x3b\xc8\x74\x81\x8a\x17\x2d\xea\x07\xe7\xb9\x92\xb1\x26\x12\xdd\x88\x74\x8b\x69\xee\xb1\x1a\xfc\x8c\xf3\x5c\x50\x5d\x07\x89\xae\xa4\xd2\x7c\xa6\x9b\x62\xad\x95\xea\xa6\xe0\x9d\xe7\xba\x21\xe9\xc6\x93\xdd\x14\x6b\x8d\x6c\x37\x05\xfe\x92\xee\x16\x42\xa4\xcb\x7c\x37\x24\xd7\x5a\xc2\x9b\x62\xaf\x95\xf1\xa6\xe0\x9d\xa7\xbc\x21\xe9\xd6\x72\xde\x14\x7b\x8d\xa4\x37\x05\xee\x20\xeb\xcd\xb9\x63\x67\x69\x6f\xb2\x87\x57\x4f\xf1\x6e\x3d\x81\x9d\x3a\x80\x77\x9c\xd4\xca\xb3\xff\xc1\xc8\x9e\x34\x7b\x2b\xbd\xaf\x8f\x4c\xcf\x21\x7b\x2c\xe6\xe7\x30\x98\x26\xe8\xf0\xa6\x76\x86\x0e\xc9\xb2\x04\xff\x17\x75\xed\x7d\xc9\xf2\xd6\x6c\x5b\x22\x08\x2d\x72\x14\x06\x69\x9a\xa3\x10\x48\x1b\xd5\x40\x80\x26\x73\x3d\xe0\xc4\x9f\x0a\x0d\xd9\xa0\xce\xf8\x4d\x3f\x65\x6b\x3c\x05\xd5\x66\xf9\x0c\x07\xf6\xd8\xb5\x9b\xd2\xc2\x9e\x75\x5d\x59\x0c\x67\x1d\x14\x16\x43\xca\x3f\xa2\x80\x63\x70\xf5\x2a\xc5\x05\xf0\xd6\x44\x6d\x91\x52\x6f\xb1\xbe\x38\x52\x8f\x9f\x71\x79\x31\x9c\x75\x50\x5d\x00\x91\xe6\x8b\x0b\x85\xb4\x56\x6d\xa1\xa0\x3b\x2f\x2d\x24\xe5\xc6\x2b\x0b\x85\xb4\x46\x61\xa1\x60\xbf\xd4\x15\x9b\xb1\xd1\x65\x59\x21\xa9\xb5\x56\x55\x28\xe4\xb5\x8a\x0a\x05\xdd\x79\x4d\x21\x29\xb7\x56\x52\x28\xe4\x35\x2a\x0a\x05\xdb\x41\x41\x91\xf5\xc3\xa6\xea\x89\xd5\xca\xfc\x0e\xf9\xde\x47\x82\xfc\x80\xd1\xd9\xd3\x94\xf3\x1f\x72\x73\x6d\xe6\xf9\x32\x5e\x73\xbb\x32\x66\x04\x12\x3b\x33\x8e\x03\xf4\x9d\x19\xdf\x8a\xd8\x97\x1b\x26\x01\x9c\x51\xd0\x6a\xf5\x40\xc5\x02\x41\xaa\x4c\x1e\xf3\xe2\x7e\x48\x34\xfc\x51\x0a\xfb\xa2\xd4\x55\x2e\x61\x4a\xe4\x12\x31\xe9\x78\x2c\x36\x62\xce\x86\x83\x21\xb9\xa7\x53\x92\x65\x14\x66\x5f\x48\x59\xe2\xe9\x69\x6a\x89\xf3\x2c\x92\xaa\x89\x7c\x5d\x41\x4f\x1b\x11\xf4\xca\x0b\x5c\x01\x35\x59\x77\x92\xe6\x72\xdd\xaa\x42\xbf\x6a\x44\xe8\xa8\x7c\x7d\x26\x22\x9f\x37\x22\x72\x58\x78\x3f\x13\x89\xcf\x1a\x91\xf8\xcd\x3d\xa6\xcf\xc6\xc8\x2f\x9b\x32\xf2\xd7\x2d\x49\xbc\xb7\x4d\x62\xcf\x8a\x5d\x12\x7b\x96\x36\x49\xec\x59\xcd\x1e\xc9\x66\x95\xba\x5a\x01\x5e\x03\x16\xe8\x6b\xbc\xac\xd8\x6f\x48\x91\xa0\x18\x0b\x65\xf5\xb1\x64\x7b\x18\x73\x86\x9f\x36\x24\x89\x8a\xdb\x4c\x8f\x04\xe8\x95\x75\x69\xe2\x92\xdb\x72\x3d\x9b\x70\x24\xe4\x0c\x35\x3f\x1a\x4c\x01\xba\xe1\xb2\xa4\x13\x94\x67\x32\xe0\x32\xf5\x4d\x78\x0c\x72\xd3\xbb\x61\x31\x0c\xee\x9d\x3c\xce\x18\x21\x29\x8f\xb3\x5c\x6f\xaa\x01\x1e\x77\x74\xad\x22\x0d\x46\x4d\xab\x43\x74\x5d\xd2\xcd\x2a\xa8\xfb\xeb\x9c\xba\xf3\x10\x9f\x40\x1b\x6c\xea\x07\x5d\xf7\xc1\x2e\xc6\x77\x1d\x34\xc2\x80\x4a\xa5\x0e\x98\xe4\xaa\x89\x16\x18\xe0\x69\xb1\xf7\x75\xac\xee\x3e\xe3\xe6\x17\xa8\xae\x83\xee\x97\xa4\xd2\x7c\xfb\x2b\xc5\x5a\xab\xff\x95\x82\x77\xde\x00\x0b\x49\x37\xde\x01\x4b\xb1\xd6\x68\x81\xa5\xc0\x5f\x7a\x60\x85\x10\xe9\xb2\x09\x16\x92\x6b\xad\x0b\x96\x62\xaf\xd5\x06\x4b\xc1\x3b\xef\x83\x85\xa4\x5b\x6b\x84\xa5\xd8\x6b\x74\xc2\x52\xe0\x0e\x5a\x61\x39\x77\xec\xec\x6c\xfd\x02\xa4\xab\x79\x60\xcd\xf6\x9c\x6c\x96\x03\xde\x3c\xf1\x5a\x70\xff\xc6\x54\xd4\x02\xb4\x6c\xe7\xe8\xb3\x75\xc8\x1b\x8b\x55\x23\x0c\xa6\x65\x23\xbc\x39\xaa\x6e\x4c\xd6\x40\x48\x9e\x25\xaa\xeb\xe3\x0e\xa8\x13\x8f\xdc\xc8\xf8\x25\x66\x69\xb8\xf4\xa0\x3a\x37\x92\x68\x29\x71\xa9\x86\x29\x83\xe5\xf3\x84\x93\x81\x96\xe9\x4a\xcf\xc9\x13\x56\x23\x0d\x50\xd6\xa9\x0b\xf9\x38\x27\xbb\x38\x90\x2e\x98\xe7\x40\x8d\x7c\x12\xb7\x03\x68\xe7\xb7\x03\xac\x2e\x6e\x07\x58\xae\x80\x41\xa8\x60\x78\xa5\xda\xc8\x6a\xe6\x76\x40\x4a\xbd\xc5\x0a\xe9\x48\x3d\x7e\xc6\x05\x92\xd5\xc5\xed\x00\xab\x8d\xdb\x01\xd6\x51\xb7\x03\xac\x3f\xec\x76\x80\xd5\xc6\xed\x00\xeb\x88\xdb\x01\xd6\x97\xdb\x01\xdb\x62\xa3\xcb\xc2\xc8\x6a\xf3\x76\x80\x75\xd4\xed\x00\xeb\x0f\xbb\x1d\x60\xb5\x79\x3b\xc0\x3a\xe2\x76\x80\xd5\xe1\xed\x00\xab\x85\xdb\x01\x7b\x2b\x22\xb5\x6f\xd7\x2a\x36\xc6\x65\xfd\xf1\x21\xf3\x7c\xfe\xfd\x88\x31\x8f\x71\x64\xb9\xe6\xbb\x40\x20\x9f\xb0\x38\x14\xb5\xad\xc8\xcf\xb2\x19\x67\x6e\x41\x40\x97\x1e\x58\xd7\x7a\x87\x7c\x5e\x46\x70\x8c\xa7\x1f\x89\x68\x8a\x96\xc2\xb6\x8d\xdc\x5b\xda\x18\x2d\xa0\xd1\xa3\x83\x49\xcf\xa4\x83\x0d\x5a\xd5\xab\x36\x97\x40\xb2\x57\xac\xdb\x68\xe6\xb4\x2f\x9c\xd2\xdc\x81\x1f\x9d\x19\x8d\x9c\xd3\x25\xc8\xac\xf1\x81\xa8\xb6\x6b\xf4\xcf\xee\x84\xfb\x3f\xe6\xcc\x15\x9e\xee\x21\x3b\x74\x4a\x12\x39\xe5\xd2\xb3\x03\xc7\x43\xe7\x3f\x29\xa3\x65\x0f\xb8\x8a\x70\x60\xed\x0c\x4c\xcc\x6d\xe8\xe6\x96\xab\x58\x36\xb7\x42\x4b\x47\x29\x07\x87\x27\x0a\xfe\xfb\x12\x78\x92\x04\x51\x11\x3e\x8a\xaf\x3d\xf4\x63\xf8\x52\x06\x22\x04\x59\x0e\xe2\xff\xb2\x3a\xcc\xae\x57\xd2\x06\xdf\xc0\xa2\x15\x72\x4f\x1c\x81\x63\x0d\x20\xed\x44\xfb\xb6\xe4\x89\xa4\x5a\x7c\x94\xf0\xbd\xf5\x51\x02\xb6\x5e\x4b\xa3\xa8\x05\xb0\xb8\xc4\x48\xb5\x64\xe2\x2f\xd1\x6b\x86\xb3\x2d\xba\x19\x2a\xab\xec\x02\xdf\x6e\x1b\xb5\xb4\x6d\x83\xdf\x63\x9b\x51\x6a\x95\x9d\x08\x4a\x6c\xd3\x60\x78\xec\xf3\x7c\x5f\xad\xaa\x45\xdf\x89\xd7\xc8\x3d\xde\x97\x60\x28\x75\xbf\x18\xc5\x1e\xff\x2b\xac\xf0\xdb\x34\xb6\x8f\xa3\x71\x86\x97\xdd\x28\xca\xb4\xde\x81\xba\xdf\xfe\x7c\x3b\xba\x29\x55\xf6\xdb\x27\xa8\xbf\xf7\xa8\x3a\x82\x2e\x55\x74\x08\x7e\x98\x9a\xdf\x5a\xb7\x37\x3b\x74\x2c\x37\xbe\xad\x7c\x84\xb0\x3b\xb4\x2b\x81\x0f\x57\x6d\x37\x9d\x20\x9f\x77\xdd\x09\x1a\xf3\x0e\x3a\x41\x63\xe6\xc9\x74\xb8\x62\x23\x08\x58\x6b\xa2\x11\xa4\x88\xb7\xd8\x07\x3a\x52\x8b\x9f\x71\x1f\x68\xcc\x3b\xe8\x03\x01\x91\xe6\xfb\x40\x0a\x69\xad\x3e\x90\x82\xee\xbc\x0f\x24\x29\x37\xde\x07\x52\x48\x6b\xf4\x81\x14\xec\x97\x3e\xd0\x66\x6c\x74\xd9\x07\x92\xd4\x5a\xeb\x03\x29\xe4\xb5\xfa\x40\x0a\xba\xf3\x3e\x90\xa4\xdc\x5a\x1f\x48\x21\xaf\xd1\x07\x52\xb0\x1d\xf4\x81\xb2\x7e\xf8\x9c\x3f\x25\x52\xfb\xea\xf5\x98\x37\xf5\x81\x91\xb1\x35\x7c\x0e\x77\xcd\xa5\xc0\xcd\x7c\x70\xe4\xae\x53\x81\xab\x4b\xd9\xcc\x87\x08\xee\x6e\x46\xef\x9f\x8b\x5d\x9b\xf9\x0c\xc1\xf8\xd9\xc8\xdb\xcc\x07\x63\xae\xad\xe7\x22\x6f\x33\x9f\x7d\xfa\x60\xbd\xbf\x7d\x2e\x12\xff\xb5\x11\x89\xdf\x8f\x6e\x3a\x17\x78\x4a\xe4\x69\x47\x75\x89\xff\xd6\xcc\xe7\xdb\xac\xab\xd1\x27\xbd\x38\xbf\x6e\x44\xcc\x8b\x77\x57\x57\x6f\xae\x8f\xdf\x86\xb6\x1c\x73\xf8\xcc\x9b\xf2\xe2\x31\x87\xcf\xd3\x63\x8e\x70\xca\x51\xc7\x1c\xe9\xb1\x84\x0f\xaa\xb1\x86\xb5\xbf\x81\x05\xc0\xef\x0e\x07\x4f\x61\x38\x61\xc7\xd0\x1c\x33\xea\x31\x2a\x9e\x8e\xc1\x71\x4d\xa7\x75\xbe\x38\x46\xc1\xdf\xd0\xff\x1d\x05\xff\x9e\x70\x48\x7c\x5d\x51\x0d\x47\x12\xe2\x31\x92\x5b\xba\xff\x7c\x2a\x95\x38\x77\x98\xd5\x54\xd7\xb1\xf7\xd5\xf0\xdd\xc5\xed\xcf\xe3\x11\x5a\x88\xa5\x03\x0f\xa3\xff\x64\x37\x0f\x52\xf3\x38\xa1\x5f\x12\x01\x75\xeb\x02\x33\x4e\x44\x5f\x0b\xc4\x4c\x7f\x9d\xe4\xfa\x61\x53\xaf\xe4\x3b\xe4\x11\xbc\x02\x61\x7b\x66\x34\x21\x83\x67\x21\x84\xaf\x93\xdf\x03\x7a\xdf\xd7\xfe\xa3\xdf\xbd\xd1\x2f\xbc\xa5\x8f\x05\x85\xaa\x57\x03\x81\x5d\x09\xd6\xd7\xac\x51\x9f\xd8\xf3\xa4\x72\x88\x20\x25\xe6\xbe\x76\x4f\xc9\x83\xef\x31\x91\x99\x1c\x7e\x25\x69\xdf\x0e\x3f\x7f\xad\x87\x6f\xbe\x87\xc5\x84\x0a\x8a\x1d\x9d\x4f\xb1\x43\xfa\xa7\xc6\x09\x04\xd7\x57\xba\xfe\x0b\x84\xaa\x35\xfa\x35\x46\x2b\x57\x17\xc4\x88\x13\x36\x13\x99\x98\x06\x02\x51\xc0\xaa\x25\xdf\xa0\x3f\xc3\xf7\xf2\xbd\x01\xbf\x24\xf8\x2f\xa0\x32\x3a\xfb\x55\xd7\x0b\xe0\x11\x14\x07\xa7\x02\xe3\xbd\x3c\x7b\x7c\x79\xa6\x70\x80\x6e\xde\x85\xba\xf8\x40\x18\xa7\x9e\xbb\x5e\x27\x68\x79\xf2\x42\x7f\x79\x66\xf8\xee\x5c\x43\xe2\xc9\x07\x09\xaf\xf1\xb5\x56\xa0\x80\x7d\xdf\x21\xba\xf0\x82\xe9\x42\xcf\x51\x3b\x3d\x3b\x79\x84\x9f\x4a\xf4\x60\x7e\x48\xb0\x02\x95\xf3\xf3\x47\xf8\xa9\x46\xe5\xfc\xbc\x2a\x95\x57\x67\x8f\xf0\x53\x8d\xca\xab\xb3\xaa\x54\x5e\x83\xc6\x5e\x57\xd4\xd8\xeb\x2d\x1a\xe3\xe2\xc9\x21\x7c\x41\x64\x2d\x1a\x99\x4f\x46\xba\x09\x25\xec\x2e\xfc\xf0\xd8\x0c\xb7\x3b\x43\x4e\x8c\x82\x33\x09\xb8\xde\xc4\xb3\x9f\x8a\xa5\xb4\xf0\x7c\x7d\x82\x59\x69\x2d\x1d\x3f\xd3\xc3\x60\xcb\x7e\x85\xef\xe2\x2c\xd3\x92\x5f\x62\x36\xa7\x6e\x7c\x6a\xa0\x9f\x24\xbb\x4d\x78\x49\x36\x3a\x73\xe8\x17\xfe\x9e\x44\x02\x1e\xf8\x30\x8d\x70\xb9\xeb\x08\xb2\xf4\x1d\x78\x53\xfc\xe3\x13\xc8\x50\x0b\x94\xda\xa0\x35\x19\xef\xfc\x07\xd3\x7c\x78\x78\x30\x60\x22\x83\x1f\x63\xea\x2d\xcd\x68\x81\x30\x41\x89\x04\x73\xc2\x4d\x89\x92\x8b\xbf\x4f\x97\x7e\xbf\xa8\x30\x6d\x90\xac\x27\xb2\xef\xb5\x38\x4b\xbb\x17\xd1\x5a\x26\x37\xe0\x08\xe4\xce\x9f\x33\x6c\x13\xb5\x2a\x96\xa9\x29\x3a\x16\x68\x9a\x43\x35\xa6\x58\x48\xbb\x74\xf9\x95\xba\x8c\xa7\xcd\x74\x77\xaf\xe9\xe4\xbe\x12\x2e\xbc\x54\x36\x59\x26\xb0\xe4\x06\x3e\xda\x6e\xd1\xf8\xef\x8b\x6c\xd8\x73\xe3\xd8\xa4\xd4\xbc\x09\xa4\x91\x3d\x1d\x0b\xa9\x17\x2d\xf1\x62\xc3\x28\x2e\x41\xdf\x38\xc4\x45\xc6\xe8\x51\xae\xd9\xd4\x9d\x7f\xab\x9a\x27\x07\x9e\x6c\x6d\x4e\xdd\x38\x8d\x89\x37\x58\x6f\x36\x83\xcd\x69\xeb\xf7\x57\x6f\xf4\xa1\xca\xc8\x1f\x74\x27\xe9\x4c\x1b\x28\x49\x90\xf0\x4a\x8e\x50\x27\x18\xb6\xad\xb4\xa1\x2b\x35\x9a\x57\x40\xc5\x8f\x14\x83\xad\x47\xae\xed\x7b\x54\x3a\x7f\x6e\xef\x8f\x73\x4b\x00\xf1\xc2\xec\x32\x43\x61\xbb\x98\x07\x08\x08\xe9\x86\xc4\x59\xe9\xf6\xcc\x49\x0a\x96\x70\xbb\x33\x57\x29\x34\x21\x0b\xce\x93\xc9\x65\xa4\x04\x65\x2e\xed\xe0\xe2\xf2\x84\x4a\x1c\x58\xce\x8b\xbc\x37\xa5\xb2\x0d\xa7\xfc\xde\xef\x43\xd6\xbc\x70\xde\x81\x38\xed\xd9\x61\x7c\xca\x79\x87\xe2\x94\x9f\x9e\x3e\x84\xcf\x70\xde\x81\x38\xe9\x81\x7c\xd2\x0a\x7c\xfa\xfc\x30\x9c\x72\xde\x26\x4e\x3e\x85\xa0\x15\xd9\x5d\xf5\x37\x7c\x8f\xa3\x51\x6d\x70\x8f\x19\x92\x49\x27\xea\x27\x1d\xf5\xf5\xfa\x47\x70\xb9\xf0\xf1\x21\x18\x36\x33\x5a\xc4\xd9\xb4\x7c\xb7\xfe\x8d\x9b\xd1\x16\x73\xfb\xe6\xa7\x9f\x46\xc3\x09\x85\xc1\x25\x75\xcd\x49\xe0\xda\x0e\x31\xe0\xa5\xf1\x1b\x4f\xce\x76\x01\x4b\xf2\x20\x1c\x8c\x2f\x08\x65\x18\xeb\x99\xd1\x0e\x0f\xcb\xa7\x4c\xb6\xff\x1f\x00\x00\xff\xff\xce\xf1\xfa\x21\x0b\x6a\x00\x00"

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 27147, mode: os.FileMode(420), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

