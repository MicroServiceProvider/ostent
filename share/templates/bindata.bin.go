// Code generated by go-bindata.
// sources:
// index.html
// DO NOT EDIT!

// +build bin

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xe4\x3c\x79\x73\xdb\xb8\xf5\xff\xef\xa7\xc0\xf2\xf7\x4b\x67\x77\xbb\x24\x63\xc7\x6e\x33\x59\x49\x9d\xc4\x56\xb3\x9c\xda\x8e\x26\xb6\xd3\xee\xb8\x9a\x0c\x24\x42\x12\x12\x5e\x4b\x80\x3e\xfa\xe9\xfb\x00\xf0\x00\x25\xea\xa2\x48\xae\x3b\xf1\x8c\x25\x12\xc0\xbb\x01\xbc\x03\x14\xef\xee\x5c\x32\xa3\x01\x41\x86\xfa\xfe\x9c\x44\x9c\xfa\xc4\x18\x8f\x7b\x2c\xc2\xc1\xe0\xee\xce\x3a\xc7\x1c\x5b\xec\x89\x71\xe2\x7f\x0e\xe1\x33\xe0\x96\x1a\xf4\x79\x16\xc6\x3e\xe6\x30\xd4\x4e\xc7\x92\xc0\x1d\x8f\x57\x50\x2e\x00\x2a\xc0\x0a\x29\x46\x8b\x98\xcc\xfa\x86\x6d\x20\x4e\xb9\x47\xfa\x46\xd6\x8b\xaa\x49\x65\xdd\x9f\xd9\x22\x8c\x81\x96\xb1\x86\xa5\xe5\x71\x3d\x1b\xaf\x65\xc8\xc3\xc0\xca\x77\x3d\x97\xde\xa3\xa9\x87\x19\xeb\x1b\x71\xf8\x80\xc8\x23\x08\xe1\x12\x17\x38\x34\x27\x21\xe7\xa1\x6f\x0c\xbe\x43\x48\x1f\x36\x0d\xbd\xc4\x0f\x10\xf3\xb1\xe7\x99\x47\x88\x93\x47\x6e\xc6\x74\xbe\xe0\xc6\x40\x1f\x76\x77\x47\x67\x48\x31\x19\xe1\x18\xfb\xcc\xba\xc0\x81\x75\x45\xe6\x98\xd3\x7b\x32\x1e\x03\x8b\x0f\xa6\xf8\x58\x50\x97\x00\x93\x1e\x83\x46\x71\xad\x37\x0a\xce\x25\x03\xc0\xc2\xe2\x28\x43\xbd\x38\x55\x54\xc3\x7b\x12\xcf\xbc\xf0\x01\x08\xe3\x4c\x93\x17\x21\x76\x11\xbe\x9f\x23\x97\xb2\xc8\xc3\x4f\x28\x04\x33\x85\x01\x33\x94\xce\x33\xbd\xa5\x2c\xdd\x78\x34\xf8\x2a\x39\x1b\x8f\x07\xd2\xd8\x19\x8d\x8c\x09\x53\x7c\x20\xb8\xe4\x04\xba\xa7\xc4\x8c\x62\x82\x80\x28\xe6\xa6\x47\x66\x20\xb3\x65\x59\x28\xb5\x7d\x46\x5b\xa8\x5d\xf1\x6c\x2f\x8e\x06\x3d\x1b\xb4\x22\x95\x98\x5f\xac\x6a\xd3\xc3\xf1\x9c\x98\x47\x47\x2d\xeb\x30\xf1\x74\x63\xfb\x24\x48\x50\x2e\xa8\xb8\x48\xc7\xc1\x48\x8f\x66\x97\x65\x7e\x69\x10\x25\xdc\x9c\xc7\x61\x12\x19\xc5\x88\xb5\x63\x4c\x0f\x4f\x88\xa7\xcc\x15\x84\x0f\x31\x06\x28\x20\xcd\x72\x5d\x6c\x83\x9f\x24\x30\x09\x03\x69\xe1\xb4\x57\xb5\xa8\xf9\x87\x18\x99\x86\x81\x8b\xe3\x27\x61\x6f\x3c\xf1\x88\x5b\xac\x0d\x4d\x65\x6f\x27\x0c\xf4\xcc\x89\x5a\x12\x75\x88\x57\xcd\x9e\xab\x7c\xf6\x58\x17\x84\x31\xeb\x57\x18\x03\x6b\x0a\x95\xff\x52\xbc\x9a\x0a\x50\x59\x84\x64\x3a\x05\x68\xb4\x05\xf9\xf0\x91\xc7\xf8\x4c\xe0\x02\x73\x2e\xd1\x18\x98\xdb\xa0\x6f\x80\xba\x12\x5e\x17\xbb\x79\x3d\x5c\x86\x31\x69\x4d\x0f\x12\xf9\x46\x3d\x6c\x81\x55\x5a\x40\x7f\xde\xac\x87\xd2\x6d\xcf\xce\x56\x42\xcf\x4e\xbc\xd5\xd5\x49\x7e\x5f\x5d\xa0\xd9\x6c\x43\x2f\xd5\x6a\x5c\x5a\x84\x1a\x0a\xc6\x63\x1a\x91\x62\xd5\x2d\xed\xc6\x7c\x41\x30\x4c\xe8\xd2\xc6\xa4\x76\x68\x04\xfb\x46\xb6\x05\x1b\x83\x11\x89\x69\xe8\xa6\xbb\xd0\x96\xd1\xa5\x0d\x1b\x7d\xc2\x5e\x42\x36\x03\x02\xfd\xb4\x5f\xea\x45\xdb\x93\x3c\x2c\xfc\x4a\x8c\x83\x39\x41\xff\xef\x61\xf4\xa6\x9f\x77\x58\x17\x94\x89\x09\x57\x16\x68\x07\x51\x2a\x37\x9d\x82\x65\xf4\x40\x5d\xbe\x30\x5f\xc5\xc4\x17\x0b\x1d\xa8\x5a\x4a\xf8\xf1\xd8\x57\xfc\xd5\xd1\x82\x42\x24\x75\x91\x3b\xf2\x35\x08\x4c\x2f\x5e\x51\x48\xea\x60\xe5\xd7\x77\xc5\x0c\xd2\x3f\x8b\xed\x7f\x09\x68\xc9\x2b\xfb\x20\x57\xc7\x6e\xf9\x92\xf8\x1d\xf8\x65\xa0\x12\xaa\x5d\x7a\x67\xaf\x2c\x18\x6b\xc2\x2d\x2b\xd2\x2d\x3a\xe5\x43\x35\xf8\x2d\x7a\x65\xa9\xb3\x56\xdd\xb2\xa4\xd0\x9a\x5f\x2e\xb0\xd7\x72\xcc\x05\x78\x17\x9e\x59\x52\x6b\xcd\x35\x17\xd8\x6b\xf8\xe6\x02\xb8\x03\xe7\x5c\x9a\x74\x9d\x79\xe7\x6c\xff\xd9\xdf\x2f\xdd\x84\x1c\x7b\x75\x00\x6f\x19\xa9\x15\x0e\xfc\x3d\x26\x5b\xa2\x81\xb5\xf4\x5e\xd4\x8d\x22\xc0\xe5\x69\x61\x04\xdc\x15\x71\x04\xdc\xd4\x0e\x24\xc0\xa7\x0b\xf0\x7f\x50\x61\xdc\x9a\x41\x81\x40\x20\x6d\x70\x10\x06\x61\x8c\x83\x10\x08\xab\xd4\x40\x80\x26\x73\x33\x61\x24\x9a\x72\x03\xb9\xa0\xce\xf4\xa6\x5f\xb0\x35\x9a\x82\x6a\x75\x3e\x65\xc3\x16\x4b\xb6\x1c\x01\xb9\xb3\xae\x03\xa0\xf3\x59\x07\xf1\xcf\x39\x65\x5f\x51\xc2\x30\xcc\xf1\x7d\x62\x20\xe0\xad\x89\x10\xa8\xa0\xde\x62\x18\x74\xa0\x1e\xbf\xc5\x28\x48\xa8\xac\xd5\x20\x48\x10\x68\x2d\x06\xca\x91\xd7\x0a\x81\x72\xe8\x2e\x22\x20\x41\xac\xb5\x00\x28\x47\x5e\x23\xfe\xc9\x61\x3b\x08\x7f\xf4\xd9\xd6\x54\xf4\x73\x77\x67\xff\x84\xa2\xf0\x2b\x41\x51\x12\xd3\xd9\xd3\x94\xb1\x37\xa5\xb1\x6e\x1c\x46\x62\x3d\x96\x36\x16\x1c\x13\x70\x4a\x76\x3a\xdb\xd1\x4f\x76\x5a\x6a\xdf\xe6\xd7\xb2\x65\x7a\x77\xf7\x40\xf9\x02\x81\x6f\x27\x8f\x65\x19\x3f\x65\x6a\xfd\x2a\x24\xd4\x15\x59\xcc\x8f\x0b\x18\xa2\xe6\x41\x4a\x2f\x6d\x4b\x2d\x57\x32\xdc\xe0\x9c\xdc\xd3\x29\xd1\xb9\x83\xd1\x67\x42\x80\x74\x78\xe1\x0b\xf3\x62\xfb\x3e\xae\x7a\x2f\x91\x8e\x1a\x11\xe9\x32\x4c\x02\x0e\x01\x62\xcb\x32\x95\x5c\xf0\x4e\xe2\x9d\x36\x22\x9e\x8a\x9a\x9f\x9d\x70\x27\x8d\x08\x27\x23\xfb\x67\x27\xdb\x71\x23\xb2\xbd\xbd\xc7\xf4\x19\x1a\xee\x55\x53\x86\x7b\xd1\xa4\x6c\xeb\x13\x2a\x77\xa6\xe5\x53\xee\xac\x48\xa7\xdc\x59\xcd\x6c\x6a\x39\xac\x85\x84\x01\x70\xc1\xce\x78\x85\xfd\x3d\x33\x93\x02\x09\x4a\xb1\xd0\xb8\x3e\x16\x3d\xdb\x99\xc7\xf8\x69\x49\x12\x15\x0d\x6b\xd9\x14\xd0\xab\xca\xe7\xd2\x18\xdd\x09\x42\x97\x30\xc4\xc5\x88\x7c\xbc\x6a\x2c\x00\xba\xe1\xb2\x22\x67\x2c\x33\x09\xb9\x9c\x5b\xf0\x98\x94\x86\x77\xc3\xa2\x5c\xad\x1b\x79\x9c\x41\xde\x5a\xf0\x38\x2b\x65\xb1\x0d\xf0\xb8\x21\xbf\x55\x1a\x54\xe9\xed\x2e\xba\xae\xc8\x7b\x57\xd4\xfd\xa2\xa4\xee\x32\xc4\x1f\x99\x30\x4f\xa3\xa4\xeb\x8c\xf9\x6c\x74\xdb\x41\xca\x0c\x54\xf6\xca\x95\x05\x57\x4d\x24\xcb\x80\xa7\xc5\x2c\xf9\x50\xdd\x7d\x8b\x69\xb2\xd4\x59\xab\x79\xb2\xa4\xd0\x5a\xa2\x5c\x60\xaf\x95\x29\x17\xe0\x5d\xa4\xca\x92\x5a\x6b\xb9\x72\x81\xbd\x46\xb2\x5c\x00\x77\x90\x2d\x97\x26\x5d\x67\x87\x05\x67\x20\x5d\xcd\x0a\x7c\xbc\xa5\x70\x5b\x0d\x78\xfd\xc4\x6a\xc1\xfd\x13\x53\x5e\x0b\xd0\x71\xbd\xfa\x87\x05\xe0\xec\xb4\xe0\x16\xee\x8a\xe8\x16\x6e\x0e\x0a\x6f\x8b\x44\x5c\xe0\xb5\xae\xf2\x58\x25\xb3\x68\x9d\xc2\x7b\x36\x15\x97\xe2\x13\x41\x40\x58\xac\x28\xc0\x97\x5a\x5e\xb4\x4b\x19\x4c\x5e\x26\x9c\x35\xb4\x4c\x57\x4c\x99\x32\xe1\xbc\xa5\x01\xca\x26\x0d\x20\x88\x60\x64\x13\x07\x62\xee\x95\x39\xc8\x5b\xfe\xd8\x53\x0f\xda\xf9\xa9\x87\xd3\xc5\xa9\x87\x13\x70\x68\x84\x78\x8b\xed\x15\xc9\x39\xcd\x9c\x7a\x14\xd4\x5b\x8c\xe7\x0e\xd4\xe3\xb7\x18\xce\x39\x6d\x9f\x7a\x38\x6d\x9e\x7a\x38\x07\x9d\x7a\x38\x5d\x9e\x7a\x38\x6d\x9e\x7a\x38\x07\x9c\x7a\x38\x1d\x9e\x7a\x38\x2d\x9c\x7a\x6c\x0d\xe3\xf2\xad\xa7\x56\x84\x34\xda\x09\xea\x58\x77\x83\xfa\x7a\xce\xcf\x9c\xe3\x30\x62\x3f\x0f\xe3\x38\x8c\x19\x72\x02\xfb\x43\xc2\x51\x44\xe2\x74\x89\x02\xa1\x8b\x10\xac\xeb\x7c\x40\x11\x6b\x86\xe0\x08\x4f\xbf\x12\x5e\x4d\x2b\xef\x6b\x8e\xdc\x3b\xba\x86\x16\xd0\xe8\xd1\xc1\xa4\x67\xd3\xc1\x36\x5a\xeb\x43\xcd\x80\x80\xa3\xd2\x82\x4d\xaa\x55\x52\x65\x5f\x73\xc5\x54\x3a\xb3\x1a\xa9\x81\x66\xc8\x9c\xd1\x8e\xa8\xd6\xaa\x78\xf0\xa7\x60\xc2\xa2\x5f\x4a\xd0\xb2\x2e\x98\xe9\x5e\x96\x51\x91\x2b\x67\x18\x51\x33\xcc\x0f\xdd\xc4\x0b\xd1\xc9\x7b\xa3\x5c\x42\xd3\x86\x82\xb5\xf4\x61\x8a\x5b\x39\x4d\x9d\x20\x67\xd9\x5e\x0b\x2d\x0c\x5d\x0d\x0e\x3d\x39\xfc\xcf\x15\xf0\x24\x5b\x04\xab\xf0\x6a\x7d\x6c\xa1\x9f\xc2\x57\x32\xa0\x10\xe8\x1c\xa4\x5f\x15\x3a\x94\xf3\x4b\xd8\xe0\x07\xd8\xa6\x24\xf7\xc4\xe3\x38\xd5\x00\x32\x5e\x1a\x3f\x56\xf4\x08\xaa\xab\x5d\x19\xdf\x6b\xbb\x32\xb0\xf1\x58\x58\x2e\xdf\xf2\x4a\xd2\x9d\x67\x56\xd1\xd7\x4f\xaa\x57\x8d\xb3\x35\xba\x39\xcf\xad\xb2\x09\x7c\xbd\x6d\xf2\xad\x69\x1d\xfc\x16\xdb\x0c\x0b\xab\x6c\x44\x50\x61\x9b\x96\x96\x47\xd5\xcc\x8f\xf2\x5d\x71\x75\xee\xa4\xbb\xe2\x96\xd9\x97\x61\xa8\x9c\x7e\x29\x8a\x2d\xf3\x6f\x65\x87\x5e\xa7\xb1\x6d\x1c\x8d\x34\x5e\x36\xa3\xa8\xd2\x7a\x07\xea\x7e\xf7\xdb\xcd\xf0\xba\x52\xd9\xef\x9e\x20\x69\xd8\xa2\x6a\x05\x5d\xa9\x68\x09\xbe\x9b\x9a\xdf\x39\x37\xd7\x1b\x74\x2c\x1c\xd7\x5a\x3e\x24\xec\x06\xed\x0a\xe0\xdd\x55\xdb\x72\xde\x1a\xb1\xae\xf3\xd6\x11\xeb\x20\x6f\x1d\xc5\xa1\x88\x7c\xf7\x4c\x5b\x81\xb5\x26\xd2\xd6\x9c\x78\x8b\x59\xeb\x81\x5a\xfc\x16\xb3\x56\xa1\xb2\x56\xb3\x56\x41\xa0\xb5\xac\x35\x47\x5e\x2b\x6b\xcd\xa1\xbb\xc8\x5a\x05\xb1\xd6\xb2\xd6\x1c\x79\x8d\xac\x35\x87\xed\x20\x6b\xd5\x67\xdb\xff\xf2\xb3\x7a\xfb\x3d\x6e\x33\x62\x4d\x3d\xb6\x37\x72\xce\x9f\xd7\x93\x44\x42\xb4\x66\x1e\xdf\xbb\x6d\x5f\xb4\x1d\xe5\x69\xe6\xb1\xaf\xdb\xeb\xe1\xc7\xe7\x67\xab\x66\x9e\xfa\x1a\x3d\x43\xc9\x9a\x79\x10\xf1\xca\x79\x7e\x92\x35\xf3\xfc\xe8\x27\xe7\xe3\xcd\xf3\x93\xed\x2f\x8d\xc8\xf6\x71\x78\xdd\x8d\x68\x53\x22\x2a\xa0\x3b\xca\xf6\xd7\x66\x9e\xfb\x75\x2e\x87\xcf\x64\x63\x7c\xdd\x88\x40\x67\x1f\x2e\x2f\xdf\x5e\xd5\xdc\xec\x97\xcb\x99\x11\x64\x15\x4c\x2b\x67\x46\xac\x28\x67\xca\xbe\x83\xca\x99\x45\xf9\x31\x02\x0d\x38\xe7\xb5\x7f\xef\x06\xe0\xb7\xbb\x83\x17\x30\x8c\xc4\x87\xd0\x1c\xc5\x34\x8c\x29\x7f\x3a\x04\xc7\x15\x9d\xd6\xf9\x99\x5e\x0e\x7f\x4d\xff\x73\x10\xfc\x47\xc2\x20\x48\x0c\xf8\x7e\x38\xb2\x85\x9a\x22\xb9\xa1\xdb\xeb\xd0\x85\xc4\xa5\xa2\xf5\xc1\xd5\x85\xde\xf7\xe7\x1f\xce\x6e\x7e\x1b\x0d\xd1\x82\xfb\x1e\x74\xaa\x2f\x91\xb5\x43\xfc\x9a\x46\xbd\x3e\xe1\x90\xc2\x2d\x70\xcc\x08\xef\x1b\x09\x9f\x99\xaf\xb3\x80\x58\x26\xef\x3b\xbe\x1a\x09\xa9\xf6\x9e\xad\x80\x34\xdc\x0b\xce\x23\x93\xfc\x9e\xd0\xfb\xbe\xf1\x2f\xf3\xf6\xad\x79\x16\xfa\x11\x24\xca\x90\x14\x1a\x20\x7d\x20\xc0\xfa\x86\x33\xec\x13\x77\x9e\x85\xdc\x0a\x52\xe0\xef\x1b\xf7\x94\x3c\x44\x40\x43\x1b\x2c\x5f\x5a\xd1\x77\xe5\x2f\x49\x4c\x79\xf3\x33\x6c\x20\x94\x53\xec\x99\x6c\x8a\x3d\xd2\x3f\xb2\x5e\xc2\x4a\xfb\xde\x34\xc5\x82\x75\x86\xe3\x14\xad\xd8\x51\x50\x4c\x3c\x59\x48\x88\xf9\x34\xe1\x88\x02\x56\x23\x7b\x81\xd4\x0c\xdf\x8b\x7b\x0b\x3e\x04\xb8\x50\x23\x9d\x8d\x4d\x73\x05\x5c\x41\x31\x98\x61\x60\xc9\x57\xc7\x8f\xaf\x8e\x73\x1c\xa0\xaf\x0f\x52\x17\x9f\x48\xcc\x68\x18\x8c\xc7\x19\x5a\x96\x5d\x98\xaf\x8e\xad\x28\x98\x1b\x88\x3f\x45\x20\x21\xf5\xf1\x9c\xd8\xa2\x61\x85\x0e\x8e\x22\x8f\x98\x3c\x4c\xa6\x0b\xb3\x44\xf3\xe8\xf8\xe5\x23\xfc\xef\x45\x15\xc6\x5b\x7b\x52\x39\x39\x79\x84\xff\xfd\xa8\x9c\x9c\xec\x4b\xe5\xf4\xf8\x11\xfe\xf7\xa3\x72\x7a\xbc\x2f\x95\xd7\xa0\xb1\xd7\x7b\x6a\xec\xf5\x1a\x8d\x31\xfe\xe4\x11\xb6\x20\x22\x95\x53\x46\x14\x8b\xdf\x86\x0c\x70\x13\x7e\xe8\xb6\xa5\xa3\xb3\xc4\x40\xb5\x6c\xb3\xa5\xd8\x9b\x84\xee\xd3\x6a\x26\xca\x43\x48\xf3\x71\x5c\x99\x8a\xa6\x7d\xa6\x5c\x72\xfa\xab\x5e\x16\xc7\x5a\x51\xce\xc7\xf1\x9c\x06\x69\xdd\xd0\x7c\xb9\xe4\x80\x92\xc8\xc5\x9c\xb0\xf4\x89\x6f\x55\x85\xec\xaf\xbc\x64\x0d\x36\x01\x58\xfb\x91\x07\x43\x57\xdf\xc0\x86\xac\x7c\xcf\xca\x5d\xb3\x21\x56\x3d\x7b\x63\xdb\x0f\x0f\x0f\x16\x0c\x8c\xe1\xdf\x9a\x86\xbe\xad\xb6\x09\x1b\x94\x48\x30\x23\xcc\x16\x28\x19\xff\xdb\xd4\x8f\xfa\xab\x0a\x33\x06\xd9\xae\x22\x8a\x43\x8b\xe3\x22\xf9\x2f\x9c\xb1\x02\xb9\x8d\xe6\x31\x76\x49\xee\xf1\xab\xd4\xa4\x0a\x83\x4d\x73\x98\xb7\xe5\x2c\x14\xa5\x2c\x7d\xd7\x56\x3c\xad\x79\x1f\x4f\xca\x61\xea\x7f\xf4\x50\x67\x9b\x29\x85\xeb\x91\x5b\x34\x15\x35\x8b\x09\x6c\xc4\x49\x84\xaa\x2c\xbc\x54\x2c\xad\x36\x78\xfa\xa2\xbe\x2a\x73\xa7\x5d\x9a\xb1\xe1\x4b\x52\xd7\x2d\xb3\x52\xa5\xc9\x6f\xf4\x4b\x4d\xf4\x8d\xf3\xcf\xc3\xd2\x35\xae\xf0\x02\xed\x48\x31\xb2\x3f\x4e\x5f\xbd\xe9\x68\x05\xa7\x68\xaf\x8b\xd3\x9d\x55\xf3\x09\xed\xb5\xf9\x14\x3f\x43\xa8\xe2\x53\xb4\xd7\xc5\x49\xd7\xf0\x49\x0f\xe0\x33\x62\xd5\x38\xa1\x5d\xc3\x29\xd7\x6a\x40\xd0\x0f\x1e\x09\x90\x35\x7c\x14\x0e\x9d\x06\xf3\x1f\xf3\xea\xd4\x8e\x47\x1e\xcb\x43\x97\xca\xf4\x69\x28\x16\xce\x66\x10\xcd\x94\x5f\x7f\xb5\x38\x1d\xe4\x64\x61\xc6\x9e\x56\xaf\xc4\xa5\xc2\x5f\x15\x67\xaa\xf8\x87\xa4\x07\xe8\x1b\x33\x88\x49\xcc\x07\x22\x16\xee\x1b\x88\x41\x16\x04\xa2\xde\xea\x18\x3f\x8d\x12\x8f\xf3\x55\xbb\x5c\x88\x45\x3d\x58\x97\x83\xbb\x30\xe1\x51\xc2\x19\x84\x7c\xc6\xbf\x03\xf1\x7a\x4b\x3a\x10\x9d\xff\x87\xb2\x1e\x4b\xed\x50\x63\x14\x84\x1c\x62\x22\xf9\xdb\x53\xb8\x8e\xe5\x91\x41\x60\xa1\xb3\xb4\xa9\x37\x01\xb5\x97\xf5\x2d\xe2\x34\x89\x24\xb3\xc7\xd1\x8a\x45\xc6\x63\x96\x67\x3e\x93\xc1\x1b\xf1\xcc\x47\xcf\x16\x8c\x15\xcb\xbd\x14\x9e\xa6\xe9\x0f\x08\x19\xca\x04\x48\xa3\xb5\x5e\x89\x07\x69\x48\xca\x25\x09\x5a\xbf\x82\x29\x54\xa2\x52\xb4\x65\x25\xf5\x0d\x3c\xeb\xbb\xf2\xb6\x1d\xab\x14\x79\xb3\x29\x4c\x0f\xae\x7b\xfc\x2f\xf8\x1e\xab\x56\x63\x70\x8f\x63\x24\x42\x65\xd4\xcf\x8a\xe5\xe3\xf1\x2f\x40\x5a\x76\x0f\x76\xc0\xb0\x1c\x87\x23\x16\x4f\xab\x23\x89\x2f\xcc\x56\xee\xef\xe6\xed\xfb\xf7\xc3\xf3\x09\x85\x46\x9f\x06\xf6\x24\x09\x5c\x8f\x58\x70\x69\x7d\x61\xd9\xc9\x13\x60\xc9\x3a\xbe\xb0\xe2\xb9\x05\x8d\x31\xd0\x9f\x8c\x3e\x60\x61\x88\x14\xe1\xbf\x01\x00\x00\xff\xff\xf0\x72\xb0\x78\xc1\x55\x00\x00"

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 21953, mode: os.FileMode(420), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

