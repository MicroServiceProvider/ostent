// Code generated by go-bindata.
// sources:
// index.html
// DO NOT EDIT!

// +build bin

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5d\x7b\x73\x9b\xca\x15\xff\x3f\x9f\x62\x2f\xd3\x74\xee\xbd\x0d\x60\x3b\x4e\x9b\xc9\x95\xd4\x49\x2c\x35\x65\x6a\x3b\x9a\xd8\x4e\x7b\xc7\xa3\xc9\xac\xc4\x4a\xda\x04\x01\x97\x5d\xfc\xe8\xa7\xef\x59\x1e\xcb\x22\x21\x09\x10\x10\x77\x92\xcc\xd8\x96\x60\xcf\x7b\x1f\xe7\xfc\x0e\x52\x6e\x6f\x6d\x32\xa7\x2e\x41\x5a\xfc\xf7\x73\xe8\x73\xba\x22\xda\x64\xd2\x63\x3e\x76\x07\xb7\xb7\xc6\x10\x73\x6c\xb0\x47\xc6\xc9\xea\xb3\x07\xbf\x5d\x6e\xc4\x83\x3e\xcf\xbd\x60\x85\x39\x0c\x35\x93\xb1\xc4\xb5\x27\x93\x0d\x96\x4b\xa0\x72\x71\xcc\x14\xa3\x65\x40\xe6\x7d\xcd\xd4\x10\xa7\xdc\x21\x7d\x2d\xbd\x8b\x8a\x45\xa5\xb7\x3f\xb3\xa5\x17\x80\x2c\x6d\x8b\x4a\xeb\xe3\x7a\x26\xde\xaa\x90\x83\x41\x95\x67\x3d\x9b\xde\xa1\x99\x83\x19\xeb\x6b\x81\x77\x8f\xc8\x03\x18\x61\x13\x1b\x34\xd4\xa7\x1e\xe7\xde\x4a\x1b\x3c\x43\x48\x1d\x36\xf3\x9c\x70\xe5\x22\xb6\xc2\x8e\xa3\x1f\x23\x4e\x1e\xb8\x1e\xd0\xc5\x92\x6b\x03\x75\xd8\xed\x2d\x9d\xa3\x58\x49\x1f\x07\x78\xc5\x8c\x73\xec\x1a\x97\x64\x81\x39\xbd\x23\x93\x09\xa8\x78\xaf\x8b\x5f\x4b\x6a\x13\x50\xd2\x61\x70\x51\xbc\x56\x2f\x0a\xcd\x23\x05\x40\x85\xe5\x71\xca\x7a\xf9\x2a\x96\xea\xdd\x91\x60\xee\x78\xf7\x20\x18\xa7\x9e\x3c\xf7\xb0\x8d\xf0\xdd\x02\xd9\x94\xf9\x0e\x7e\x44\x1e\x84\xc9\x73\x99\x16\xfb\x3c\xf5\x5b\xa2\xd2\xb5\x43\xdd\xaf\x91\x66\x93\xc9\x20\x0a\x76\x2a\x23\x55\x42\x17\xbf\x10\xbc\xe4\x04\x6e\xcf\x88\xee\x07\x04\x81\x50\xcc\x75\x87\xcc\xc1\x66\xc3\x30\x50\x12\xfb\x54\xb6\x70\x7b\xac\xb3\xb9\x3c\x1e\xf4\x4c\xf0\x4a\xe4\x44\xf9\x62\xd3\x9b\x0e\x0e\x16\x44\x3f\x3e\x6e\xd9\x87\xa1\xa3\x06\x7b\x45\xdc\x10\x49\x43\xc5\x8b\x64\x1c\x8c\x74\x68\xfa\x32\xaf\x2f\x75\xfd\x90\xeb\x8b\xc0\x0b\x7d\x2d\x1b\xb1\x75\x8c\xee\xe0\x29\x71\xe2\x70\xb9\xde\x7d\x80\x81\xca\x26\x10\x17\xe9\x8c\x7d\x0c\xa6\x21\xcc\x42\x37\x0a\x71\x72\x37\xbe\x12\x4f\x40\xc4\xc8\xcc\x73\x6d\x1c\x3c\x8a\x80\xe3\xa9\x43\xec\x6c\x71\x48\x9f\xd9\xf1\x52\xa8\x2c\x53\x19\x0a\x83\x71\xe1\x14\x1a\xa6\x53\xc8\x36\xce\x09\x63\xc6\x3f\x61\x0c\x2c\x2c\x94\xff\x97\x08\x51\xfc\x80\x72\x66\xec\x61\x3a\x7a\xe0\x01\x3e\x13\x3c\x20\x96\x6b\xbc\x07\xfa\x3e\xea\x6b\x90\x1a\x7b\x40\xb5\xbd\x65\x67\x5c\x78\x01\x69\xdc\x19\x11\xd3\x9d\xce\xd8\x43\x1b\xbb\x02\xfd\x65\xb7\x33\x72\x6f\x7b\x66\xb6\x16\xda\x5c\x16\xb0\x22\x59\xa7\xab\xc2\x35\xde\x4e\x19\x6c\x3f\x9c\xb4\xb8\x3c\x2e\xe5\x0e\x7b\xc8\xf2\x60\xe1\x6c\x06\xd4\xeb\x33\x63\x9d\x79\xb5\x65\xb2\x4e\xdd\xdd\x32\x51\x24\x1f\xb0\x4c\xf6\x3b\xa5\xf2\x72\x59\xa7\x3d\x68\xb9\xf4\xcc\xd0\xd9\x3c\xce\xc8\x1f\x9b\x27\x5a\x3a\x0f\xd1\x51\x7c\x7c\xad\x9d\x5a\x0a\x0b\xc6\x03\xea\x93\xec\x98\x5a\x4b\x5f\xf8\x92\x60\x98\xea\xb9\x93\x3c\x4e\x69\x10\x1c\xb4\x69\xce\xa2\x0d\xc6\x24\xa0\x9e\x9d\x1c\xdb\x7b\x46\xe7\x32\x1c\xf4\x09\x3b\x21\xd9\x4d\x08\xf2\x93\xfb\x91\x5f\x94\x43\xdc\xc1\x22\x11\x0b\xb0\xbb\x20\xe8\x4f\x0e\x46\x6f\xfa\xf2\x86\x71\x4e\x99\x98\x7d\x79\x83\x4a\x98\x52\xb8\x1d\x65\x2a\xa3\x7b\x6a\xf3\xa5\xfe\x32\x20\x2b\xb1\x05\x80\x54\x23\x36\x7e\x32\x59\xc5\xfa\xd5\xf1\x42\xcc\x28\xf2\x85\xcc\x7c\xb7\x30\xd0\x9d\x60\xc3\x21\x49\x46\x1a\xfd\x79\x96\xcd\x20\xf5\x77\x96\x2f\xad\x11\xad\xa5\xb1\x2b\xb0\xab\xe3\x3c\xf6\x82\xac\x3a\x48\x64\x41\x8a\x17\xef\xdf\xa5\xd3\x58\xa1\x58\x13\x79\x6c\x2c\xba\xc5\x2c\xf6\x50\x0f\x7e\x97\x69\x2c\x38\xad\x83\x3c\x56\x48\x69\x3e\x91\xcd\xb8\xd6\xca\x64\x33\xf2\xce\x53\xd9\x48\x74\xe3\xb9\x6c\xc6\xb5\x46\x32\x9b\x11\xff\xc8\x66\x73\x3b\x4a\x77\xe9\x6c\x24\xae\xb5\x7c\x36\xe3\x5e\x2b\xa1\xcd\xc8\x3b\xcf\x68\x23\xd1\xad\xa5\xb4\x19\xf7\x1a\x39\x6d\x46\xdc\x41\x52\x9b\x9b\x8e\x9d\x65\xb5\xe9\xb9\x5d\x3d\x9f\xbb\xf6\x38\x76\xea\x10\xde\x30\x52\x2b\x8d\xfe\x47\x40\xf6\x64\xd1\x5b\xe5\x3d\xaf\x9b\x7d\x43\xaa\xa8\xa4\xdf\xf0\x2e\xcb\xbf\xe1\x4d\xed\x04\x1c\x72\x61\x41\xfe\x2f\xea\xda\xfb\x72\xe1\xad\xc9\xb4\x60\x10\xc5\xe0\x20\x0e\x22\x18\x07\x31\x10\x51\xa9\xc1\x00\x4d\x17\x7a\xc8\x88\x3f\xe3\x1a\xb2\xc1\x9d\xc9\x9b\x7e\xa6\xd6\x78\x06\xae\x55\xf5\x8c\x2e\xec\x89\x64\xcb\x95\x83\x3d\xef\xba\x70\x18\xce\x3b\xa8\x1b\x86\x94\x7d\x45\x21\xc3\x30\xc7\xab\xd4\x0e\xa0\x5b\x13\xa5\x43\x26\xbd\xc5\xf2\xe1\x40\x3f\x7e\x97\xd5\xc3\x70\xde\x41\xf1\x00\x42\x9a\xaf\x1d\x24\xd3\x5a\xa5\x83\xa4\xee\xbc\x72\x10\x92\x1b\x2f\x1c\x24\xd3\x1a\x75\x83\xa4\xfd\x51\x36\xa8\x3b\x49\x77\x55\x83\x90\xd6\x5a\xd1\x20\x99\xd7\xaa\x19\x24\x75\xe7\x25\x83\x90\xdc\x5a\xc5\x20\x99\xd7\x28\x18\x24\x6d\x07\xf5\x82\x3a\x0f\x9b\x2a\x17\x6e\x6f\xcd\x5f\x91\xef\x7d\x25\xc8\x0f\x03\x3a\x7f\x9c\x31\xf6\x26\x37\xd6\x0e\x3c\x5f\xac\xd4\xdc\x49\x8c\x03\x02\x59\x9c\x99\xac\x03\xf4\xab\x99\x3c\x04\xb1\x2f\x11\x4c\x17\xf0\xed\xed\x3d\xe5\x4b\x04\xc9\x30\x79\xc8\xdb\xf8\x29\x75\xeb\x57\x61\xe1\xb3\xc2\xf9\x71\x0e\x43\xe2\x79\x90\xc8\x4b\xae\x25\x91\xcb\x05\x6e\x30\x24\x77\x74\x46\x54\xed\x60\xf4\x99\x30\x20\x19\x9e\x25\x8f\xf2\x31\x88\x2a\xb9\x6d\x25\x93\x8e\x1b\x31\xe9\xc2\x0b\x5d\x0e\x15\x55\xcb\x36\xe5\x72\xd6\x52\xe6\xbd\x6a\xc4\xbc\xb8\xcc\x7c\x72\xc6\x9d\x36\x62\x5c\x54\x0a\x3f\x39\xdb\x4e\x1a\xb1\xed\xed\x1d\xa6\x4f\x30\x70\x2f\x9b\x0a\xdc\xf3\x26\x6d\xdb\x8e\x40\xd8\x73\x05\x80\xb0\xe7\x19\xfe\x60\xcf\x6b\xc2\x0f\xeb\x75\x20\x54\xd8\xc0\x0b\x76\xc6\x4b\xbc\xaa\x58\xca\x67\x4c\x50\xc2\x85\x06\xf5\xb9\xa8\xf0\xc0\x22\xc0\x8f\x6b\x96\xc4\xe5\xa3\x02\x3f\x80\xbc\x22\x00\x24\x29\x6a\x2d\xd7\xb3\x09\x43\x5c\x8c\x90\xe3\xe3\x8b\x19\x41\x37\x5a\x16\x80\x2c\x79\x25\x43\x26\x12\xcd\x54\xc7\x30\x37\xbc\x1b\x15\xa3\xd5\xba\x53\xc7\x79\x40\x48\xa6\xe3\x3c\x07\xfb\x34\xa0\xe3\x0e\x40\x28\xf6\x60\x8c\x07\x95\xf1\x75\x01\x50\xb4\xe1\xee\xe7\x39\x77\xe7\x29\xbe\x25\xc2\x34\xf3\xc3\xae\x21\xa6\xb3\xf1\x4d\x07\x18\x13\x48\xa9\x04\x2e\x09\xad\x9a\x40\x97\x80\x4f\x8b\xb0\xd2\xa1\xbe\xfb\x2e\x71\x25\x70\x5a\x07\xc0\x92\x90\xd2\x3c\xb2\x94\x71\xad\x05\x2d\x65\xe4\x9d\x63\x4b\x91\xe8\xc6\xc1\xa5\x8c\x6b\x0d\x74\x29\x23\xfe\x01\x2f\xe5\x76\x94\xee\xf0\xa5\x48\x5c\x6b\x00\x53\xc6\xbd\x16\xc2\x94\x91\x77\x0e\x31\x45\xa2\x5b\xc3\x98\x32\xee\x35\x40\xa6\x8c\xb8\x03\x94\x29\x37\x1d\x3b\xeb\x4a\x9f\x81\x75\x35\x5b\xbd\xc1\x9e\x0e\x61\x31\xe1\xd5\x23\xab\x45\xf7\x6f\x4c\x79\x2d\x42\xcb\x76\xea\x77\xa5\x21\x49\x54\x8a\x42\x78\x97\x55\x85\xf0\xe6\xa0\xb2\x30\x03\xb0\x04\x5f\xe3\xf2\xb0\xd6\x6e\x3a\x07\xd7\x12\x7a\xc1\x59\x84\x2a\x6b\xf1\xe6\xae\xa4\x7e\x49\x27\x51\xc3\x92\x21\xd6\x79\xc1\xe9\x85\x96\xe5\x8a\xb9\x92\x17\x2c\xaf\x34\x20\x59\xa7\x2e\x64\xdd\x8c\xec\xd2\x40\x4c\xba\xbc\x06\xf2\xca\xb7\xed\xab\xd3\xce\xfb\xea\x56\x17\x7d\x75\xcb\xe5\x70\x11\x0a\x14\x56\xa9\xf4\xb1\x9a\xe9\xab\x67\xd2\x5b\x2c\x80\x0e\xf4\xe3\x77\x59\xff\x58\x5d\xf4\xd5\xad\x36\xfa\xea\xd6\x41\x7d\x75\xeb\x9b\xf5\xd5\xad\x36\xfa\xea\xd6\x01\x7d\x75\xeb\x47\x5f\x7d\x73\x55\x74\x59\xf7\x58\x6d\xf6\xd5\xad\x83\xfa\xea\xd6\x37\xeb\xab\x5b\x6d\xf6\xd5\xad\x03\xfa\xea\x56\x87\x7d\x75\xab\x85\xbe\xfa\xde\x82\x47\x9e\xd5\xb5\x6a\x89\x71\x11\xd6\x3d\x0c\x3c\x9f\xbd\x18\x05\x81\x17\x30\x64\xb9\xe6\x87\x90\x23\x9f\x04\xc9\x52\xd4\xb6\x32\x3f\x51\xd3\xcb\xdc\x86\x80\xce\x3d\x88\xae\xf5\x01\xf9\xac\x48\xe0\x18\xcf\xbe\x12\xde\x94\x2c\xc9\x6d\x9b\xb8\x77\xb4\x31\x59\x20\xa3\x47\x07\xd3\x9e\x49\x07\x6b\xb2\x2a\x14\x65\x2e\x81\xcc\x4e\x29\xcb\xa8\xd2\xab\x8b\xee\x35\xd7\xae\xa3\x73\xa3\x91\x2e\x5b\xca\xcc\x1a\x97\x64\xb5\xdd\x87\x7f\x76\xa7\xcc\xff\x2d\x17\xa0\xa8\x37\x87\xec\x68\x1a\x92\x78\x1a\xae\x3c\x3b\x74\x3c\x74\xfa\x5e\x86\x49\x6d\x4f\x6d\xd2\x41\x7c\x15\x9a\x44\xdb\x68\x62\x5b\xae\x54\xd9\xdc\x4a\x2d\xa6\x46\x31\x39\xdc\x91\xf4\x2f\x0a\xe8\x49\xba\x6c\x36\xe9\xe3\x15\xb5\x47\x7e\x42\x5f\xa8\x40\xcc\x40\xd5\x20\xf9\xa3\xfa\x50\xdd\xa1\x44\x0c\x7e\x86\x6d\x2a\xd2\x9e\x38\x1c\x27\x1e\x40\xda\x91\xf6\x4b\xc1\x1d\x21\x75\xf3\x56\xaa\xf7\xd6\x5b\x29\xd9\x64\x22\x82\x22\xb7\xbc\xcd\x4d\x45\xb8\x45\x59\x71\xa9\x5f\x15\xcd\xb6\xf8\x66\x28\xa3\xb2\x8b\x7c\x7b\x6c\xe4\x66\xb6\x8d\x7e\x4f\x6c\x46\x59\x54\x76\x32\x28\x88\x4d\x83\xcb\x63\xdf\xcc\xf7\xe5\x3e\xba\x39\x77\x92\x5d\x71\xcf\xec\x4b\x39\x14\x4e\xbf\x84\xc5\x9e\xf9\xb7\xb1\xa7\x6f\xf3\xd8\x3e\x8d\xc6\x8a\x2e\xbb\x59\x14\x79\xbd\x03\x77\xbf\xfb\xfd\x7a\x74\x55\xe8\xec\x77\x8f\x50\x65\xef\x71\x75\x4c\x5d\xe8\xe8\x88\xbc\x9c\x9b\xdf\x59\xd7\x57\x3b\x7c\x2c\x8e\xba\xad\x7a\x44\xb4\x3b\xbc\x2b\x88\xcb\xbb\xb6\x65\xa0\xc7\x67\x5d\x03\x3d\x63\xd6\x01\xd0\x33\x0e\x3c\x91\xf9\x56\xc4\x79\x40\xb5\x26\x70\x1e\x29\xbc\x45\x98\xe7\x40\x2f\x7e\x97\x30\xcf\x98\x75\x00\xf3\x80\x90\xe6\x61\x1e\xc9\xb4\x16\xcc\x23\xa9\x3b\x87\x79\x84\xe4\xc6\x61\x1e\xc9\xb4\x06\xcc\x23\x69\x7f\xc0\x3c\xea\x4e\xd2\x1d\xcc\x23\xa4\xb5\x06\xf3\x48\xe6\xb5\x60\x1e\x49\xdd\x39\xcc\x23\x24\xb7\x06\xf3\x48\xe6\x35\x60\x1e\x49\xdb\x01\xcc\xa3\xce\xc3\xff\xe7\x8f\x4f\x54\x7b\x02\x7a\xcc\x9a\xfa\x24\xc5\xd8\x1a\x3e\xad\x87\xbb\x85\x69\xcd\x7c\xa2\xe2\xa6\x7d\xd3\x4a\xda\xd3\xcc\x93\xf8\x37\x57\xa3\x8f\x4f\x2f\x56\xcd\x3c\x88\x3f\x7e\x82\x96\x35\xf3\xd9\x90\x4b\xeb\xe9\x59\xd6\xcc\x47\x7a\x3e\x59\x1f\xaf\x9f\x9e\x6d\x7f\x6d\xc4\xb6\x8f\xa3\xab\x6e\x4c\x9b\x11\xd1\x32\x28\x69\xdb\xdf\x9a\xf9\x28\x96\x75\x31\x7a\x22\x1b\xe3\xeb\x46\x0c\x3a\xfb\x70\x71\xf1\xf6\xb2\xe6\x66\xbf\x8e\xff\xfb\x50\x86\x33\x05\xff\xf7\x59\x86\xff\x47\xf7\x0e\xc2\xff\x33\xbc\xde\x07\x0f\x58\xc3\xda\xdf\xd9\x01\xe4\x37\xe5\xc9\x33\x1a\x46\x82\x43\x64\x8e\x03\xea\x05\x94\x3f\x1e\xc2\xe3\x92\xce\xea\x7c\xd5\x88\xa4\xbf\xa2\xff\x3d\x88\xfe\x23\x61\x90\x24\xba\xbc\x1a\x8f\x74\xa1\x26\x4c\xae\xe9\xfe\xc6\x4d\x66\x71\xae\xcb\x73\x30\x1c\xd7\xfb\x69\xf8\xe1\xec\xfa\xf7\xf1\x08\x2d\xf9\xca\x81\x9b\xf1\x1f\x01\x73\x41\xfe\x9a\x64\xbd\x2b\xc2\xa1\xb8\x5b\xe2\x80\x11\xde\xd7\x42\x3e\xd7\x5f\xa7\x09\x71\x84\x76\x95\xfc\x1e\x71\x14\x5f\xef\x99\x31\x91\xc2\x7b\xc9\xb9\xaf\x93\x3f\x42\x7a\xd7\xd7\xfe\xa3\xdf\xbc\xd5\xcf\xbc\x95\x8f\x39\x85\x72\x51\x03\xeb\x5d\x41\xd6\xd7\xac\x51\x9f\xd8\x8b\x34\xe5\x8e\x29\x05\xff\xbe\x76\x47\xc9\xbd\x0f\x32\x94\xc1\xd1\x17\x56\xf6\xed\xe8\xc3\xbd\x7a\xf4\xe6\x05\x6c\x20\x94\x53\xec\xe8\x6c\x86\x1d\xd2\x3f\x36\x8e\x60\xa5\xfd\xa4\xeb\x62\xc1\x5a\xa3\x49\xc2\x56\xec\x28\x28\x20\x4e\x84\xbc\x05\x7c\x16\x72\x44\x81\xab\x96\x7e\xdb\xfa\x1c\xdf\x89\xf7\x06\xfc\x12\xe4\xc2\x8d\x74\x3e\xd1\xf5\x0d\xf2\x98\x8a\xc1\x0c\x83\x48\xbe\x3c\x79\x78\x79\x22\x79\x80\xbf\x3e\x44\xbe\xf8\x44\x02\x46\x3d\x77\x32\x49\xd9\xb2\xf4\x85\xfe\xf2\xc4\xf0\xdd\x85\x86\xf8\xa3\x0f\x16\x5e\xe2\x4b\x6d\x43\x02\xf6\x7d\x87\xe8\xdc\x0b\x67\x4b\x3d\x27\xed\xf8\xe4\xe8\x01\x7e\x2a\xc9\x83\xf1\x91\xc0\x0a\x52\x4e\x4f\x1f\xe0\xa7\x9a\x94\xd3\xd3\xaa\x52\x5e\x9d\x3c\xc0\x4f\x35\x29\xaf\x4e\xaa\x4a\x79\x0d\x1e\x7b\x5d\xd1\x63\xaf\xb7\x78\x8c\xf1\x47\x87\xb0\x25\x11\x45\x5c\x1c\x3e\xb1\xec\x4d\xa8\xfd\x76\xf1\x87\xdb\x66\x74\xc4\x19\x62\x60\xbc\x60\xd3\x45\xd8\x9b\x7a\xf6\xe3\x66\x0d\xca\x3d\xa8\xf6\x71\x50\x58\x84\x26\xf7\xf4\x68\xb1\xa9\x5f\xf0\xba\x3c\x51\xf0\xeb\x15\x0e\x16\xd4\x4d\x20\x76\xfd\x28\x3d\x7a\xa2\x27\x45\x63\x80\xbe\xbf\xf1\x7f\x0f\xa4\xe4\xa1\x0f\xc3\x08\x13\x47\x10\xac\x7a\xdf\x81\x37\x9b\xff\x51\x01\x32\xe4\x6e\x25\x0f\x65\x4d\xac\x77\xf6\xc6\x34\xef\xef\xef\x0d\x18\x18\xc0\x8f\x31\xf3\x56\x66\xbc\x41\x98\xe0\x44\x82\x19\x61\xa6\x60\xc9\xf8\xdf\x67\x2b\xbf\xbf\xe9\x30\x6d\x90\xee\x27\x02\x30\x5a\x9e\x64\x65\x7f\x76\x0c\xc7\x24\x37\xfe\x22\xc0\x36\x91\x67\x7d\x91\x9b\x62\x0c\xbd\x69\x0d\xe5\x35\xa9\x42\x06\x6f\xa9\xfb\x75\xac\x53\x31\xa0\x97\x6a\x98\x9c\x3c\x6a\x92\xb3\x2f\x94\xe2\xd0\x89\x36\x67\x2a\xd0\x8a\x29\x6c\xc1\xa1\x8f\xb6\x47\x38\xf9\x0f\x2b\xd6\xe2\xbb\xd6\x73\x28\x0c\x77\x4a\x69\xa8\x3d\xa5\x48\xba\x1a\x99\x0d\x7c\x46\xbe\x51\x62\xe6\x12\xf4\xb3\x43\x5c\x64\x8c\x1e\xc4\x96\x4e\xdd\xc5\x2f\x12\x9f\x28\xd9\x25\x5a\x1f\xba\xd6\xd9\x48\x0e\x63\x6f\x3e\x87\xf3\x6c\xeb\x97\x1f\xaf\xe1\x3b\x45\xe2\x4b\x3d\xca\x73\xa2\x0d\xa4\x25\x88\x7b\x05\x7d\xc8\x29\x86\x53\x2d\x03\x4a\x85\x83\xf3\x0e\xa8\xf8\xa9\x5a\x08\xfd\xc8\xb5\x7d\x8f\x8a\xb5\x91\xcb\x13\x92\x3c\x14\x48\xbc\x28\x13\x55\x24\x6c\x37\xb3\x84\x81\x90\x9a\x08\x9e\x95\x1e\x41\x39\xca\xc8\x52\x6d\x8b\xf3\x9a\xd2\x93\x47\x49\x7f\x84\x05\x45\x33\xdc\xc1\x9b\xbb\x17\x2a\x98\xcf\x62\x5c\x3c\x99\x33\x29\xdb\x78\x8a\xef\x8e\x2e\xb3\x25\x46\xe3\x4a\xf2\xb4\xe7\xe5\xf4\x14\xe3\xca\xf2\x14\x9f\x23\x2e\xa3\x67\x34\xae\x24\x4f\x5a\x52\x4f\x5a\x41\x4f\x9f\x95\xe3\x29\xc6\xad\xf3\x64\x33\x58\xb4\x5c\x3d\x74\xbf\xe0\x3b\x1c\x5f\xd5\x06\x77\x38\x40\x22\x4f\x45\xfd\x14\xa9\x9e\x4c\x7e\x83\x29\x17\xdd\x2e\xc3\x61\x3d\x09\x46\x2c\x98\x15\x1f\xe6\x5f\x98\x19\x9f\x40\xd7\x6f\xdf\xbf\x1f\x0d\xa7\x14\x2e\xae\xa8\x6b\x4e\x43\xd7\x76\x88\x01\x2f\x8d\x2f\x2c\xed\x93\x02\x97\xf4\x46\x74\x31\x79\xca\x46\x51\xac\x67\xc6\x09\x00\xec\xa6\x22\x3f\xff\x5f\x00\x00\x00\xff\xff\x34\xf8\x87\x9a\x6b\x68\x00\x00"

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 26731, mode: os.FileMode(420), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

