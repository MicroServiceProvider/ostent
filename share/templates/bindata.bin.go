// Code generated by go-bindata.
// sources:
// index.html
// DO NOT EDIT!

// +build bin

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5c\x6d\x73\xdb\x36\xf2\x7f\x9f\x4f\x81\x72\xda\x7f\xd3\x4e\x48\x46\x8a\xdd\x7f\xce\xb5\x7c\xe3\xd8\x6e\xab\x69\xec\x68\x62\xb9\x77\xbd\x4e\xa7\x85\x48\x50\x42\x4c\x91\x3c\x00\x94\xad\x6a\xf4\xdd\x6f\x01\x3e\x88\xa4\x28\x89\xd4\x93\xe5\x4e\x5e\xd8\x16\x09\x60\xf1\xc3\xee\x62\xb9\xbf\x15\xe8\xd3\x2f\x2e\x3f\x5c\x74\x7f\xed\x5c\xa1\x81\x18\xba\x2f\xce\x26\x93\x2f\x47\xe8\xa4\x85\x8c\x0f\x5c\x10\x4f\xfc\x42\x18\xa7\xbe\x37\x9d\x9e\xaa\x66\x84\xce\x4e\x07\x04\xdb\xf0\x41\x7e\x1c\x12\x81\x91\x35\xc0\x8c\x13\xd1\xd2\x42\xe1\xe8\x6f\xb5\xb8\x49\x50\xe1\x12\xf5\x19\xae\x26\x13\xe3\x12\x0b\x6c\x0c\x7c\x2e\x3c\x3c\x24\xd3\x29\xf2\x95\xf8\x53\x73\xd6\x2f\x16\x37\x10\x22\xd0\xc9\x7f\x43\x3a\x6a\x69\xff\xd6\xef\xce\xf5\x0b\x7f\x18\x60\x41\x7b\x2e\xd1\x90\xe5\x7b\x72\x58\x4b\x6b\x5f\xb5\x88\xdd\x27\x5a\x76\xa4\x94\xdc\xd2\x46\x94\x3c\x04\x3e\x13\x99\xce\x0f\xd4\x16\x83\x96\x4d\x46\xd4\x22\xba\xba\x78\x85\xa8\x47\x05\xc5\xae\xce\x2d\xec\x92\x56\xc3\x78\x1d\x8b\x9a\x4c\x7e\xea\x5e\xbf\x47\xda\xe9\x17\xda\x74\xaa\xeb\xbf\x51\x07\xb5\xaf\x7e\x3f\x3b\x75\xa9\x77\x8f\x18\x71\x5b\x1a\x1f\x80\x74\x2b\x14\x88\xc2\x04\x1a\x1a\x30\xe2\xb4\x34\xd3\xc1\x23\x79\x6d\xc0\xaf\x32\x49\xbf\x11\xcf\xa6\xce\xef\xba\x9e\x95\x14\x09\xe0\xf4\x2f\xc2\x5b\xda\x9b\xe6\xe3\x9b\x66\x2a\x4e\x9a\x61\x3a\x4d\xa4\xf2\xe4\x83\xfe\xa6\x69\x04\x5e\x5f\x43\x62\x1c\xc0\x5a\xe9\x10\xf7\x89\x29\x6f\xc4\x7a\x98\xc9\xc6\x41\xe0\x12\x5d\xf8\xa1\x35\xd0\x73\xf3\x34\x9a\xaf\x1f\xe1\x67\xe5\x4c\xd0\xc7\xa8\x29\xf9\xe8\xe8\x11\x7e\x56\x4b\x3e\x3a\xaa\x2b\xf9\xb8\xf9\x08\x3f\xab\x25\x1f\x37\xeb\x4a\x7e\x0b\xda\x78\x5b\x41\x1b\x6f\x17\x68\x83\x8b\xb1\x4b\xf8\x80\x10\x91\x18\x45\x90\x47\x61\x5a\x9c\x17\x65\xc2\x2d\x93\x7a\x36\x79\x34\x64\x63\x2c\xc8\x8c\x77\xd3\xd9\x69\xcf\xb7\xc7\xf1\x4d\x9b\x8e\x90\xe5\x62\x0e\xf8\x84\x1f\xe8\x3d\xcc\xb4\x64\x27\x95\xb4\xe9\x2e\x71\x44\xd2\x41\x76\x09\xdd\xa4\xc7\x90\x78\xe1\xac\x25\x02\x9e\xb9\x54\xbb\xb9\x99\x74\x1e\x1c\xa1\x21\x66\x7d\xea\xe9\x3d\x5f\x08\x7f\xa8\xbf\xd6\x72\x7d\x65\x6f\x1e\x60\x2f\xe9\x1f\x06\x36\x16\x04\x96\x09\x7f\xb0\x6e\x13\x87\x7a\xb0\xfa\xe8\xef\x1f\xc9\x4e\x2f\x8a\x50\xfb\x42\x90\x61\xe0\xc2\x58\x14\xf7\xe6\x27\x27\xc5\x61\xc8\x80\x90\x63\xca\xe9\x8a\x18\xd0\x29\x1f\x62\xd7\x2d\x93\x6b\x5c\x52\x2e\x18\xed\xa9\xa1\x25\x9d\xa4\xba\x9b\x85\xf5\x9b\x39\x8d\xc0\x75\xe8\x66\x54\x69\x82\xba\x97\xa9\x9e\xd1\xfe\x60\x7d\xdd\xe3\xb4\x6f\xa4\xf7\xd7\xa8\x17\x82\xe6\x3d\xc4\x09\xf8\x9c\x8d\xd9\x18\x0d\x7c\xd7\xf5\x1f\x12\x57\x92\xb1\x91\x9f\x98\xe6\xc3\xc3\x83\x01\x9a\x62\xf0\x63\x58\xfe\xd0\x8c\x82\xa9\x09\x0e\x49\x30\x27\xdc\x94\xca\xe5\xe2\x9f\xd6\x30\x68\x45\xce\x37\x67\xc9\x24\xfc\xe2\xf5\xd5\x91\x5e\xe4\x34\xd3\x67\xd4\xd6\x7b\xae\x6f\xdd\x97\xfa\xec\xac\x19\xf1\x01\x83\x5d\x94\x55\x5e\xd6\xbb\x2c\xdf\xcd\x69\x2f\x0c\x0a\xee\x30\xd7\x1d\x2d\x75\xc8\x30\x10\x54\xfa\x95\xda\xaf\xf0\x48\x18\x50\x41\x74\x90\x60\x91\x13\x14\xb0\x9c\x9f\x2e\xf5\xd0\x44\xce\xbc\x7f\x16\xd4\x53\xb2\x55\x10\x79\x84\x9b\x76\x39\x40\xd7\xc7\x36\x1e\xf5\x33\xfa\x58\x06\x23\xe9\x3d\x87\x23\x6b\x17\xb0\x7d\xa0\x9e\xe5\xea\xe1\x1b\x60\x86\x87\x1c\xba\x97\x9b\x23\xc0\xb6\x4d\xbd\xbe\x2e\x5d\xfb\xf5\xf1\x77\xa5\xd6\x73\xc1\x4f\x89\xde\x00\x6f\x84\x18\xc1\x6c\xc2\x64\x6f\xad\xc2\x7e\x01\xf3\x84\x43\x0f\xc5\xe3\x1b\xcb\x4d\x05\x8b\x21\xee\x90\x0c\x2b\xaa\x22\xed\x1e\xe9\xa2\x8e\x8b\x1e\xda\xa2\x6d\xa7\xce\x9a\xa1\xf7\xf3\x5f\xb2\x15\x84\x75\xd6\x2c\xbb\x3f\xff\x45\xd3\x5a\x76\xa6\x7f\x07\x3b\x07\xbc\xce\x92\xa1\xf7\xd2\x25\x73\x8b\xd1\x40\x64\x13\xae\x4f\x78\x84\xa3\xbb\xe9\x4a\x47\x98\x21\x19\xf9\x50\x0b\xc5\x04\x64\x3a\xfd\x1e\x82\xa5\xea\x55\x45\x50\x91\xda\x20\xce\xac\x59\x3e\xf7\x89\xc3\x27\xa0\x07\x46\xf7\xfc\xc7\x1f\xaf\x2e\x7b\x14\x58\xd2\x90\x7a\x66\x2f\xf4\x6c\x97\x18\xf0\xd1\xf8\xc4\x27\x13\xe2\x72\xe0\x3b\x30\x32\x69\x50\x37\x3d\x7b\xf6\x50\x3e\x2b\x60\x32\xe3\x54\x50\xa6\x2b\x31\x27\x33\xbf\x7d\xf1\xad\x39\x9d\x4e\x26\x91\x92\x32\x5a\xc3\x32\x15\xfd\xa3\x87\x81\x0c\xa9\x3c\x10\x94\x86\xa3\x6c\x01\xd6\xfc\x13\xfc\x05\xae\x35\x99\x28\xb3\x4d\xa7\xf2\xde\x45\xf4\x11\xf9\xde\x85\x4b\xad\xfb\xd6\x44\x0c\x28\x37\x06\x58\x62\x53\x77\xa6\x08\xbd\x88\xd2\xa9\x77\x52\xaa\x1a\x6f\x74\x41\x35\xd2\x1e\x58\xa2\x51\xe8\x2b\x82\x8a\x32\xa4\x6d\xa2\x8a\xa0\xa0\x19\xbe\xca\xa8\x46\x12\x56\x1e\xcb\x7b\xb8\x53\x86\x47\xde\xaf\x81\x49\x76\x8f\x55\xa4\x9e\xfb\xf9\xb5\x61\x46\x44\x2c\x2c\x31\x71\xfc\xc4\x3e\xab\x8a\xbd\x98\x1f\xcf\x16\xa1\x99\x5a\x66\x3a\x8d\x7a\x03\xd0\xb9\xd0\x61\x87\xfa\x4c\x43\xd0\xd4\x95\x0c\xbb\x03\x5d\xe9\x23\xb1\x91\x96\x88\x40\x1a\x2a\x92\xf2\x17\xa5\x54\xbd\x26\xc4\x24\x33\xc9\x27\x1a\x00\x47\x17\x3d\x94\x89\x4f\x23\xc2\x04\x05\xf2\xad\xbd\x58\x1c\xc3\x1e\x18\x0e\x90\xe7\xc3\xee\x80\x34\x38\xa1\x4c\xd9\xc4\x4a\x65\xf9\x10\xc0\xa4\x78\x97\x21\xb9\x81\xf3\x39\x79\xbe\xbb\x03\xe0\x44\x91\x2f\xb9\xf8\xff\xbc\x1e\x0f\xbe\xcf\xa7\x51\x8d\x61\xe6\xba\xee\xa4\x89\x12\x63\x5d\x18\x2e\x6e\xe4\xd2\xb4\xdc\x7a\xe3\xa4\x70\x36\xf6\x13\x7f\x44\x7f\xc2\xef\x58\xb3\xc6\x2d\x64\x6e\xf7\xe0\xba\xe4\xe5\x04\xac\x78\x82\xbe\x06\x71\x5f\xbf\x42\x03\x22\xe7\x3c\x41\xcd\xd7\xd3\x6f\xa6\x7f\x66\x83\x65\x1a\x2a\x77\xa8\xd7\xe3\xed\xea\xe7\x78\xbb\xfa\x39\x7e\x72\xfd\x34\xb6\xac\xa0\xc6\x96\x35\xd4\xa8\xac\x22\xf5\xa1\x46\x00\x48\xf3\x34\xd9\x69\x11\x01\x49\x95\x3f\x99\xa8\xc8\xd8\xf1\x39\x15\x74\x44\xd0\x97\x81\x71\xd1\xb9\xf3\x20\x4e\x51\x1b\x08\xda\xc0\x7f\x90\x1f\x34\x24\xcb\x6e\x0f\xb3\xeb\x34\x92\x96\x1b\x10\x1e\x40\x7d\x4f\xff\x14\x72\x41\x9d\xf1\x2c\x16\x0c\x1a\x69\xb1\xe3\xcd\xe2\x62\x87\x24\xe6\x8b\x23\xea\x64\x22\x9f\x17\x5d\x00\x9a\x60\x9d\x46\xcf\x81\x74\x38\xdc\x2b\x3e\x05\xb4\x04\xb8\xae\xd0\xe7\x49\xb7\x61\x18\x73\xa5\x8e\xb3\x2c\x35\x97\x89\x40\xa3\x2c\x0d\x4b\xa5\xca\x0f\x68\xf0\x18\x2f\x26\x5e\x3e\x27\xae\xa3\x3b\x2e\x79\xd4\xc1\x74\x28\xef\x24\xf3\xb5\x0a\x14\x05\xc7\x42\x45\xa3\xb4\x6e\x91\x41\x40\xbd\x20\x14\x7a\x9f\xf9\x61\xb0\xba\x7a\x54\x3e\x4e\x77\x71\x8f\xb8\x48\x6d\x8a\x68\x2f\x78\xbe\xdc\x80\x25\xa5\x23\x9b\xb8\x78\x7c\x82\xa4\x5b\x49\xcd\xdb\xf9\x0c\x71\xe5\x44\x51\x75\xa5\x6a\x49\xaa\x98\x59\xa1\xf7\x84\xf3\xcb\x99\xdd\xe1\x59\x9a\x94\x6b\xe6\xa0\xef\x0b\x58\x64\x2d\x74\xed\x33\xb2\x21\xb2\xb9\x9b\xf3\xb5\xa0\xc3\xf1\x03\xe6\x3f\xf0\x99\x1b\x78\xc6\x79\x8f\x03\x21\x11\x64\xff\xfe\x70\x93\x89\x03\x05\xad\xf3\xd0\xb2\xa0\xc7\x53\xfb\xc5\x96\x10\x56\xf0\x8f\x6a\xb5\x42\xb3\x24\xfa\xdf\xf8\xde\x7f\x08\xf3\x67\x30\x65\x19\x37\x90\x51\xbf\x4a\xb0\x17\xb2\x86\x5e\x9e\xf0\xc9\xb2\x60\xfc\xb4\xcd\xd1\xda\x5c\xc1\xac\x72\x0e\xb0\x54\x7e\xc9\x63\x5c\xf5\x47\x77\x9c\xb0\xaf\x56\x16\x2f\x57\x49\xb9\x1d\xf3\xcd\x85\xfc\x0b\x53\xb1\xb9\x94\x36\xf0\x9f\x95\x52\xf2\x8f\x90\xa5\x95\xd2\x6c\xc1\x52\xf2\x69\x95\x2c\x40\x02\x21\xf3\x07\x86\xbd\x3e\x24\x05\x70\x35\xcb\x23\xe0\x02\x08\x17\x17\xb2\x3d\xca\x74\x14\x31\x93\xb7\x5e\xca\x0e\xdf\x18\x43\x1c\xbc\x74\x42\xcf\x12\xd4\xf7\x5e\xca\xc1\xaf\x10\xfd\x06\x4d\x10\xf0\xb0\x90\x79\x7f\x2e\xaa\x81\xae\xf4\xa1\x8c\x4a\xca\x23\x94\x2c\xb9\x4a\x78\x37\x73\x55\xd9\xc8\xdb\x7f\x26\x63\xa4\x41\x07\x1d\x22\x58\x6f\xac\xdf\x68\x28\xe9\x9e\x4d\x16\xea\x7a\xe1\x0a\x83\xcd\x25\x23\x72\x45\x36\xe5\x10\x3f\xc6\xf1\x34\xbd\xbe\x1e\x72\x12\x58\x30\x50\x55\x70\xa2\x8b\x56\xbc\x1a\xe9\xc1\x1d\x4b\xc4\xdb\x70\xe6\x08\xc5\xe6\xa2\x53\x94\x59\x7e\x9f\xb8\x61\xcf\x2c\x81\x9d\xb4\x1e\x1a\x6a\xb9\x49\x97\xc0\x4e\x9b\x9f\x10\xb7\x4e\x3d\xa0\xef\x9c\x94\xe2\x97\xe1\x61\x09\xfe\xb4\xb9\x2e\x7e\xb5\x0f\x13\x22\x33\x97\xce\x56\xe2\x3d\xf4\x95\xe4\x5c\xc0\x7f\x62\x10\x40\x81\xa0\x2b\x0e\x5d\x71\x1b\xf8\x02\x52\x0a\xc1\x42\x92\x50\xa1\xaa\x21\x4b\x4d\x1a\x0d\x4a\x49\x92\xfa\xb3\x21\x85\xb2\x9d\xb5\x19\xd4\xa5\xf3\x6c\x08\x14\x40\x2d\xf2\xa7\x4b\xca\xef\x51\xc8\x71\x9f\x7c\xa6\x51\x3b\xa7\x51\x97\xce\x13\xb2\x28\x98\xfc\x30\x49\xd4\x7a\xc0\x9e\x2b\x87\x82\x3d\x78\x00\x14\x4a\x05\xad\x43\x66\x50\x9b\x01\xdc\x17\x81\x52\x28\x77\xcb\x9f\xca\x75\x17\x7d\xbb\x82\x7e\x51\x67\xa3\x12\x8d\xdd\xa3\x06\xd2\x2e\xd5\xc9\x3b\xad\x34\x27\xde\x9c\x78\xe5\xc9\x49\x2d\x6c\x4d\xa4\x5d\xfb\xa1\x27\x88\x5d\x04\xb7\x0e\x2f\xaa\x35\xf5\x77\x48\xeb\xfa\x02\xbb\x7b\x9f\xf8\x18\x69\x90\xb0\xef\x7f\xc1\x6f\x90\x76\x3e\xc2\x74\xff\x0b\x3e\x52\x0b\xfe\xaa\xc2\xbc\x9b\x72\x56\xc8\x96\xef\xef\x64\xde\x92\x61\xae\xb6\x33\x4b\xdf\xd2\xf6\x5a\xf4\xd5\x76\xb6\xca\x5e\x7d\xc8\xdc\x1d\x79\xa6\x2c\x47\x5a\x6d\xc7\x80\x5d\x7a\x13\x7f\xe1\xb7\x88\xb9\xda\x4e\x4c\x5c\x6d\xca\xa2\x63\x7a\x6a\x20\x65\xd1\xc0\x4d\x38\x6c\x05\x9c\x31\x89\xc8\xce\x58\xcf\x93\xa2\x08\xbd\x9c\x00\x25\xa9\x5c\x28\x7b\x69\x48\x1d\x4f\x6e\x69\x6d\xcf\xb7\x09\xc4\x79\xb5\x63\xe7\x79\x0d\x40\x8a\x7a\x94\x1c\x5a\x4c\x3a\xa8\xdd\xbe\x77\xc4\xa1\xdc\xea\xe5\x80\x65\xd3\x12\xbc\x77\x65\xcd\xbb\x86\xeb\x30\x52\x4c\xeb\x13\xb8\xb2\x69\x09\x5c\x15\x5b\x56\xe0\xad\x5a\xc5\xa9\xcb\xe2\x51\x81\x05\x47\xda\x2b\xe1\xc0\xd5\x0c\xf6\xd5\x5c\xb6\x97\x31\xd9\x02\xea\x9c\xb3\xdb\x93\xd3\xeb\x08\xc3\xd7\x87\xc2\xa4\xe9\xfa\x4c\xba\xfd\x7c\x98\x74\x7b\x9e\x49\xb7\x21\xb5\x61\x0e\x86\x1c\xf5\x33\x93\xde\x39\x93\x6e\x3f\x25\x93\x6e\x1f\x2a\x93\x5e\x0f\xd8\x73\x65\xd2\xed\x83\x60\xd2\xed\x43\x67\xd2\x9b\x01\xdc\x17\x93\x6e\xef\x9e\x49\xa7\x01\x7a\xbf\x5f\x49\xb6\x3b\x15\xf3\xba\xe6\xa2\x5c\x29\xc9\x5a\x2e\x99\x1f\xf0\x57\x57\x8c\xf9\x8c\xa3\xb6\x67\x7e\x08\x05\x0a\x08\x8b\xdf\x60\xc9\xcf\xfa\xde\x07\x03\xb7\x3f\xa0\x80\x6f\x6b\xf6\x0e\xb6\xee\x89\x58\x39\x71\xda\x6d\x9b\x73\xbf\xa3\xab\x27\x86\x09\x4f\x0b\x61\xaa\x77\x6a\xe6\x5c\x75\x35\xa0\x4d\x59\x29\x75\xb0\x6d\x33\x9e\xe1\xa4\x34\xc3\x49\xe3\xd6\x5a\x8c\x94\xee\x83\x91\x52\xc7\x58\x45\x47\x69\x42\x47\x63\x2e\x9a\x0e\xd9\x2a\x11\xcd\xb8\x40\x29\x27\x8d\xb0\xb6\x3b\x95\xc9\xd2\x42\xd7\xca\xf9\xce\x32\xae\xa0\xb8\x24\xb2\xd5\xde\x23\xd1\xde\x1b\xfa\x76\xe8\xfa\xe8\xe8\x47\xad\x8c\x72\xcc\x8f\x03\xd7\x5d\x34\x26\x5d\x93\xda\xdc\x6d\xaf\xf4\x4d\xbc\x94\x21\x25\x51\xf3\x86\xba\x28\x1d\x24\x37\x85\x56\x08\x9a\x99\xb1\xe6\xa6\x02\xcb\x16\x24\xbb\x54\x5a\x11\x74\x2c\x5f\xd2\xab\x12\x65\x91\x24\xb4\xad\x94\x1d\x05\xc1\x45\xea\x32\x17\xcb\xae\x02\x3c\x12\xbe\x10\x79\x09\x2d\xce\xa9\xf3\xdc\x75\xa3\xa7\x9a\xd4\x01\x71\x05\x8e\x4d\x5b\xb8\x21\x91\xa4\x77\x92\xf5\x14\xef\x28\x53\xc4\x0e\x59\x4e\x70\xb3\xcf\x06\xa9\xb9\xf2\xf0\x98\x35\x4b\x06\x52\x4d\x6f\xcb\x61\xdf\x9a\xcb\x2d\x92\x9a\x5f\xda\xe2\xd0\x5f\xba\xb6\x8a\x7e\x97\x3e\x4c\x2b\xca\xae\xe3\x77\x57\x33\x8f\xab\x23\xbc\x86\xdf\xed\x3c\x06\xae\x0c\x6f\x41\x9a\x14\xac\xdc\x55\x71\x62\x50\x67\xcf\x26\xd2\xab\x6c\xda\x58\x7c\xfd\x5d\x3b\x97\xde\x2c\xb4\x56\xd6\x56\xcb\x56\x53\x58\x4b\x27\xb3\x8a\x1a\xa2\xcb\x57\x72\x00\x36\x7f\xf7\x6b\xf7\xea\xb6\x8a\xc5\xdf\x8d\x05\xa9\x65\xef\x48\x72\x15\x6b\x2b\xd1\x6b\xdb\xfa\x5d\xbb\x7b\x5b\xd5\xd0\x32\xf5\xac\x62\x65\x25\xb3\xaa\x89\xa5\xd0\xb5\xed\xbb\xa5\xba\x61\x04\x24\xd6\xe3\x4d\x38\x3c\x98\x0a\xa2\x7c\xbd\x78\xdd\x12\xe2\x35\x19\x3e\x9b\x1a\xa2\xc4\x5a\x2c\x22\xc2\x3d\x9f\x8d\x3f\x17\x10\x77\x5e\x40\x04\x45\x3f\x61\x05\x51\xce\x7e\x98\x25\xc4\x35\x91\x3d\xd7\x1a\xa2\xdc\x83\x07\x50\x44\x8c\xc2\xd6\x21\x57\x11\x37\x44\xb8\xaf\x32\x62\x04\xf3\xef\xf4\x46\x83\xca\x8c\x36\x3e\xc4\x21\xbf\x60\xde\x58\xc8\x0f\x8c\x90\x6d\x20\xd9\xf9\xfb\x0c\x43\xf5\x14\xcd\x14\xe1\xe0\xc6\x2c\x97\x88\x5a\x6b\x15\xe1\x60\xc8\x96\xaa\x70\xf9\xba\x1b\xc8\x35\x7e\xa6\x5e\xf1\xbb\xff\x5c\xe1\x0d\xfa\xc4\x95\xb7\x7b\x2a\xff\x9f\x4d\x66\xd0\xf6\x4b\x6f\x73\x07\x40\xe4\x64\x6b\x9d\xa6\x58\x2c\x6e\x9d\xc3\x0e\x8b\xa5\xfd\x50\x76\x54\x61\x77\x2f\x11\x14\x8f\x1f\xc4\x0b\x5a\x70\x06\x3f\xdb\xfa\xf9\x8c\x40\xf6\x3f\x8e\xac\x9b\xe0\x77\xf8\xb3\xc9\xef\x01\x6a\x31\xbd\xef\x30\x5f\x3e\x32\x3f\x1f\x11\xd8\x43\x86\xdf\xe1\x4f\x98\xe0\xc3\xe4\x87\x99\xdf\xaf\x07\xec\xb9\xa6\xf7\xb0\x05\x0f\x20\xbb\x57\x31\xeb\x90\x93\xfb\xcd\x00\xee\x2b\xb7\x57\x28\x77\x90\xda\x97\xe6\x05\xd5\xcf\xdd\x77\xb8\x3a\x77\xdf\x69\x5f\xae\x75\xe8\x7e\xc1\xbb\xad\xbb\x3b\xa6\x2d\xf1\x36\x91\x76\x37\x8f\xb7\x52\xda\x5a\x7b\xae\x37\x30\xd7\xed\xd5\xc7\xbd\x1e\x45\x97\xf3\x1e\x81\x4d\xf6\x3f\xeb\x31\xd2\x6e\xda\x7b\x9f\xf5\x3b\xa4\xfd\xd2\xfe\xd8\xdd\xfb\xbc\xff\x8f\xb4\x8f\x57\xb7\xb5\xa7\xb5\x88\x3c\x8a\xb3\xc1\xbc\x6f\x91\xd6\x6d\x5f\x5f\xed\xc7\x81\xff\x81\xb4\x8b\x0f\xd7\xd7\xe7\x37\xa5\x1b\x66\x35\x1b\x0d\x20\xe9\xcb\x9e\x08\x09\x78\x26\xed\x95\x6d\xb5\xa8\x68\xc0\xb7\xfc\x72\x7d\x9e\x91\x06\xdc\x80\x48\xb6\x8c\x8f\x06\x3c\xa6\xa3\x01\x95\x6c\x34\x19\xb0\x07\x2e\x0a\x53\xdd\xcd\x61\xab\x61\x73\x25\x80\x13\xb6\x1d\xf2\x29\x17\xce\xa8\x0f\xe9\xff\x78\x6b\x02\x6f\xa8\x55\xfb\x45\x8b\x85\xc2\x6e\xe9\x5f\xdb\x13\xf6\x91\x70\x78\xe0\x7a\xf3\x5f\x59\xad\xb5\xd5\xa5\xc4\x2e\xad\xf4\x52\x49\x09\xf1\x4d\x94\x55\xfe\x56\xca\x3e\xd9\x6c\xfc\x0f\x8a\xe3\xff\x44\xf8\x02\xcd\xfe\x99\x58\xd4\x92\xc2\x4b\x64\xfe\x2f\x00\x00\xff\xff\xef\xea\x6a\x83\x02\x60\x00\x00"

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 24578, mode: os.FileMode(420), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

