// Code generated by go-bindata.
// sources:
// index.html
// DO NOT EDIT!

// +build bin

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5c\x6d\x73\xdb\x36\xf2\x7f\xef\x4f\x81\x3f\xff\xed\x4d\xdb\x29\xa5\x3a\x71\xee\x7a\xa9\xe5\x1b\xc7\x72\x12\x4d\x63\x47\xe3\x87\xcc\xf5\x55\x07\x22\x41\x09\x31\x45\xb2\x00\x24\xc7\xa7\xd1\x77\xbf\xc5\x13\x9f\xf5\x48\xda\xf5\x4d\xfa\x22\x31\x09\x2c\x16\x8b\xc5\xe2\xb7\x0b\x60\xc5\xe3\xff\xeb\x7f\x3c\xbb\xf9\x6d\x78\x8e\x26\x62\x1a\x1e\x9c\x1c\xab\x3f\x08\xc1\x03\xc1\x3e\x3c\xc8\xc7\x29\x11\x18\x79\x13\xcc\x38\x11\x3d\x67\x26\x02\xf7\x67\x27\x5f\x35\x11\x22\x71\xc9\x1f\x33\x3a\xef\x39\xff\x76\x6f\x4f\xdd\xb3\x78\x9a\x60\x41\x47\x21\x71\x90\x17\x47\x82\x44\xd0\x6e\x70\xde\x23\xfe\x98\x14\x5a\x46\x78\x4a\x7a\xce\x9c\x92\xfb\x24\x66\x22\x47\x7c\x4f\x7d\x31\xe9\xf9\x64\x4e\x3d\xe2\xaa\x97\x1f\x11\x8d\xa8\xa0\x38\x74\xb9\x87\x43\xd2\x3b\xb4\x8c\x04\x15\x21\x51\xcf\xf0\xb6\x58\x74\xfa\x58\xe0\xce\xfb\x98\x0b\xc9\x7c\xb9\x44\xf0\x04\x2c\x8f\xbb\x19\xdd\xc9\x71\x48\xa3\x3b\xc4\x48\xd8\x73\x28\x74\xe9\x20\xf1\x90\x80\x1c\x74\x8a\xc7\xa4\x9b\x44\x63\x07\x4d\x18\x09\x7a\x4e\x37\xc0\x73\x49\xd0\x91\x65\x95\xa6\x5c\x3c\x84\x84\x4f\x08\x11\x96\x81\x20\x5f\x44\xd7\xe3\x3c\x6d\x0f\xcf\x5d\x1a\xf9\xe4\x4b\x47\x96\x1a\x0e\xdc\x63\x34\x11\xf9\x26\x9f\xf1\x1c\xeb\x52\xa7\xac\x67\xc4\x99\x07\x8c\x3e\xf3\x2e\x93\x1a\x66\x04\x9e\x5e\x74\x0e\x3b\x87\x3f\xdb\x82\xce\x94\x46\x9d\xcf\xd0\xa7\x0f\x03\x77\xa7\x98\x46\x9a\x7e\xb1\xa0\x01\xea\xdc\x9c\xbe\x7b\x77\xde\x1f\xd1\x68\xb9\x04\x3a\x23\x8c\x6e\xb1\x58\x90\x90\x83\x86\xa0\x87\xee\x94\x86\x77\xa6\x52\x55\x44\xfe\x72\xe9\x58\xa5\x1e\x77\xb5\x70\x46\xfe\xae\x31\x8d\x93\xe3\x51\xec\x3f\x98\xc2\x08\xcf\x91\x17\x62\xce\x7b\x0e\x3c\x8e\x30\x43\xfa\x8f\xeb\x93\x00\xcf\x42\x61\x5f\xb9\x00\xc3\xf0\x5c\x11\x27\x0e\x62\x31\xcc\xa3\x24\xa7\x63\x28\x84\x79\x48\x3b\xf4\x69\xca\x4d\x9a\x04\x8c\x89\x30\x37\x08\x67\xd4\xb7\x34\x25\x2a\xc3\x5d\x4a\x46\x18\x98\x51\xe8\x4e\x7d\xf7\x10\x25\xd8\xf7\x69\x34\x76\x43\x12\xc0\xe4\xdb\x29\xb0\xed\x47\x33\x21\xe2\xa8\xc4\x42\xc4\xe3\x71\x48\x24\x8b\x10\x27\x9c\xf8\x76\x6e\x35\xb1\xd1\xb2\x26\x92\xc2\x69\x2a\x5b\x8c\xd9\x58\x4e\xdd\xff\x1b\x5e\x69\x75\xae\x5b\x65\x01\x09\x4e\xbb\xe5\xcc\x8d\xa3\xf0\xa1\x48\x02\x44\x37\x5a\x8e\x4c\x3b\x30\x0b\xd0\x6c\x0d\x27\x69\xa9\x2e\x74\x5b\x61\xf5\x6c\x5a\x76\xb5\x12\x0b\x93\x80\x11\xf5\x7b\xce\x04\x34\x5b\x9c\x87\x11\xc3\x91\x0f\x65\x14\x0c\x45\xad\xb4\x9e\x33\xc5\x5f\x34\x16\xbc\x46\x87\x2f\xbc\x49\xba\xca\x60\x8a\xe4\xda\x06\x2e\x66\xd5\xa3\x2a\x0c\x94\xa6\xa0\x4a\x70\xdc\xc5\x05\xb9\xba\x60\x5d\x25\x5b\x93\x82\x96\x67\x36\x33\x53\x5d\x80\xd6\x4c\xfd\xc9\xf1\x2c\xcc\x8d\xd2\x92\xc2\x9f\xb2\x81\x84\xd4\xd2\x61\x4f\xd0\x39\xa9\xaa\x17\x9b\xc1\x4b\xec\xe5\xaf\xbb\xdd\xfb\xfb\xfb\x0e\x8c\x85\xc1\xbf\x8e\x17\x4f\xbb\x1a\xf5\x00\x23\x42\x82\x39\xe1\xdd\x10\x0b\xc2\xc5\xbf\xbc\x69\xd2\xb3\x63\xff\x74\x7e\x75\x3d\xf8\x78\x59\xd6\x8d\xe2\x6f\x41\x13\x57\xe7\x35\xa4\x2b\x85\xb5\x4b\x08\x30\x0d\xe5\x9e\x01\x94\xd8\x98\x46\x72\x01\xa2\x80\x32\x2e\x54\x69\x75\x4c\x5e\xec\x93\x12\x2b\x59\x04\x88\x5b\x51\x80\x12\x31\x9d\xe6\xfe\xe0\xfa\xe6\x6a\xf0\x46\x4e\xa2\x6c\xd0\xb2\xcc\x4d\x05\xa5\xc9\xdf\xa2\x11\x4f\x7e\xd1\x0b\x47\x1a\x11\xd8\x74\x85\x2c\x67\x94\x83\xa1\x1c\x49\x65\xfd\x98\xb1\x3c\xc3\x11\xce\x2a\x23\x9c\xad\x1f\xe1\x6d\x22\xa8\x5e\x74\xff\x43\xa3\x0c\x71\x79\x94\x21\x5e\x3b\xca\x0f\xa7\x2d\x8c\xb0\x3b\x0b\xd7\xe1\x52\xee\x15\x5e\x60\x10\xc6\x1f\x6f\xf6\xa0\x05\x1a\x16\xdf\x97\x3d\xab\x1c\xe0\x94\x4c\xc1\xa9\xe9\x38\x2e\xc5\x39\xe9\x5a\x8f\xac\x8f\x8d\x83\x00\xa2\x15\xf7\xb0\x80\x73\x8b\x85\x20\xd3\x44\x42\x0e\x72\xc0\xff\x43\xdf\xfc\xf5\x6b\xfd\xf0\x3b\x68\x83\x84\xc0\xd7\x41\x1d\xa9\x9d\x7a\x94\xf5\x83\xfa\x6e\x5f\x35\xeb\xd6\x0f\x6a\x7b\x2d\xe8\x70\xb3\x52\xbc\x64\xf6\x28\x4a\x01\xbe\x6b\x95\x42\x1f\x47\x29\xb4\x15\xa5\x24\xbc\x5e\xb8\xc3\x9f\x9a\x49\x97\xf0\x36\xa4\x9b\x8f\x1f\x47\xba\xf9\x78\xb3\x74\xe9\xcb\x86\xc8\xdf\x36\x98\x43\xec\x2c\xe1\x03\xf5\xac\x7f\x5b\x2e\x7f\x29\x87\xe0\x26\xf2\x96\xc1\xb8\xda\xb7\x2d\x16\xdd\x1f\x0e\x7e\xe8\x2e\x97\x8b\x85\x96\xaf\x2a\x30\x98\x17\x68\x87\x3b\x92\xe6\x9e\x8a\x09\x92\x6f\x30\x66\x39\x00\xe8\x48\xfe\xa7\xf7\x03\x8b\x05\x84\x5e\x63\x82\xbe\xa1\x3f\xa2\x6f\xbc\x98\x11\xf4\xba\x87\x34\xa2\x9d\x0d\x6f\x3b\x1f\x28\x17\x30\x64\xc1\x40\x3c\x55\xdd\xb9\xec\x9c\x0a\xc1\x7e\x25\x0f\x48\xad\x0d\xe0\x3b\x7a\x70\x2f\xa1\x23\x25\xa1\xf0\xad\xd2\x15\x1e\x33\x3a\x9e\x00\x42\xc7\xf7\x0c\x1b\x1f\x71\x92\xf2\x91\x9a\x14\xfe\xca\x56\xe9\x06\x4a\xe2\xef\x62\xa1\xea\x97\x4b\x70\x36\x9c\x24\x84\x79\x10\xb0\xe8\xc0\x42\x07\xe3\x59\x69\xcf\x76\x70\xcb\x09\x53\x52\x15\xba\xd5\xa5\x39\xa0\x3e\x79\x5c\x29\xae\x1f\x78\x55\x08\x55\xd8\xb6\x0c\x2e\x8d\xe6\x84\xa5\xdb\x93\x1a\x59\x06\x7e\x48\xaa\xc2\xe8\xd2\x5a\x69\xba\x82\x49\x6b\x53\x1b\xc4\xf2\x9f\x6d\x4c\x50\x2f\x43\x69\x3f\xf2\x21\x1d\x99\x7a\x51\xff\xbb\x93\x18\x64\x76\xf4\xd0\x73\x87\x10\xd0\xaf\x5d\x51\x62\x92\x5f\x6b\xe9\x9b\xac\xd8\x60\x6a\x8a\x4c\xce\x77\x61\x13\x33\x8b\x68\x21\x1a\x3d\xf9\xb6\xe4\xb5\xf7\xe9\x05\x26\xf4\xf1\x3b\x91\x13\xd5\xa4\x97\xae\xd1\xaa\x2a\xb5\xbb\x7a\x91\x6d\xeb\xd7\x01\xa0\xc5\x13\x0d\x80\x22\x43\x24\x35\x8d\x39\x23\xd9\x68\x16\x7e\x30\x7a\x80\xdd\xc9\xef\x3b\xc2\x93\x4f\xf9\x5d\x06\x4d\xfd\xb7\x8a\x49\x11\x9e\x24\x49\xa7\x4f\xd9\x25\x6c\xf1\x32\x90\x32\xfd\x19\xa0\xf2\x29\x93\x3b\xc0\x0c\xae\x52\x50\xd2\xad\xc9\xfc\xd2\x6c\x10\xd3\x05\x59\xa2\xd0\xfc\xb7\x03\x2f\xdb\xe8\x74\x8e\x69\xb8\x6d\x93\xd5\x93\x90\x2d\x69\x47\x2b\x44\xa2\xd9\x50\x97\x2c\x97\x3a\x5e\xb5\x5d\x42\x8d\xbf\x9b\x90\x37\xb1\xc0\x79\x21\x1b\x2d\x7e\x3b\xcb\x16\x01\xa0\x93\x24\x9b\xbe\x21\x66\x78\xca\x1b\xe1\x42\xad\x9e\xf4\x89\x10\x89\x66\x53\x79\x70\x07\x4a\x4a\x3a\x9f\x30\xa3\x92\x08\x1e\xfb\xc1\x1d\x3a\x44\x4e\x5f\x9d\x33\x3a\xc8\x51\x62\xed\xc5\xe5\x05\x72\x2e\xe2\x59\x24\xe4\x81\x51\x03\x36\x2f\x91\xa3\x2c\x03\x98\xe4\x66\x65\x6f\x76\x47\xc8\xb9\x55\x67\x58\xad\x70\x7b\x85\x1c\x65\x11\x65\x76\x8d\x60\xa4\xb0\xf8\xdb\xc0\x12\x1a\xc1\xc6\xaa\x31\x98\x68\x2e\xdb\xa1\x89\xa6\xfd\x53\xe1\x64\x10\x30\xb2\x75\x93\x5d\xe0\x64\x30\x5b\x89\x27\xb2\x6a\x47\x40\x19\x28\x4d\xb5\x87\x28\x66\xae\xdb\x09\x2a\x6c\x3b\xbd\x10\x72\x5e\x56\xc3\xc3\x0a\xf7\x5c\xa1\x36\x30\xb0\x96\x1c\x95\x35\xa4\xc8\xd4\xca\xdf\xa3\x9d\x5c\xe2\x7b\x34\x53\x6b\xb9\xb5\x70\xa0\xb8\xf0\x9a\x2f\x64\xba\x5f\x50\x40\x83\x6c\x15\x0f\xea\x42\x02\x1a\x74\x8a\xeb\x97\x16\xa2\x81\x15\x6b\xd7\xb4\xda\xda\xda\x81\xbe\x4f\x42\x81\x07\xd1\xce\x4d\x3e\xce\xc4\x2e\x6d\x76\xeb\xa1\xc8\xbc\xd1\xea\xa3\x25\x7f\xde\x56\x44\x3f\x80\xd5\xc3\x02\xbc\x72\xc1\x55\xe3\x61\x7b\xfc\xff\x66\x70\x73\x8d\x00\xbf\x10\x27\x5e\x1c\xe5\xaf\x8a\x06\xd1\xfa\x28\xf9\xb8\x74\xea\x36\x3a\xee\xe6\x4b\x4e\x12\xbe\x77\xb0\xbe\x59\x38\x98\x93\x3f\x5d\x3a\x21\xb1\x00\xbd\xf9\xed\xe6\xfc\x1a\x4d\x63\x7f\x16\xc6\xe8\xe8\x5d\x03\x05\xbe\x29\x89\xf8\xed\xd1\xbb\x47\x97\x71\x67\x3d\xee\x2a\x64\x13\x78\xa4\xed\x86\x39\x34\x20\x8c\xc5\xac\x21\x3c\x6a\x1e\x1b\xf1\x51\x93\xfd\x05\x90\x3b\x03\xa4\x99\xa3\xe7\x83\x90\x2b\xc0\x31\x7f\xaf\xb1\x6a\xf1\xb4\x00\x32\xab\xd0\xef\x89\xba\xaf\xc7\xb5\x6d\x3a\x6f\x03\xbd\x56\x20\x56\x1b\xdd\x37\xc3\xa5\x3c\x90\xb4\x01\x4c\x09\xf6\xee\x88\x68\x88\x4c\x86\xc9\x46\x68\x32\x74\x7f\x61\xd3\xce\xd8\x64\xa7\xe9\x2f\x70\x7a\x16\xe0\xa4\x83\x9b\x3f\x17\xa2\x56\xcb\xf0\x2c\x80\xaa\x00\x2c\xcd\x91\x6a\x4a\xa6\x7b\xdc\x87\x41\xab\x0c\xa7\x2e\xce\x2f\x8a\x08\x05\xb5\x9d\x5f\x69\xe4\x67\x10\x25\x6f\xd0\x35\x38\xdd\x41\x79\x0d\x38\xd9\x26\x5b\x03\x81\x6c\xf0\xb6\xfd\xd3\x1e\xc9\xb6\xf6\xec\xd8\x54\xec\x26\x60\xab\x27\xc7\xc0\xf0\xc9\xaf\x8d\x72\xc6\x2f\x95\xbd\x0b\xfd\x9a\xe3\x98\x27\x38\x87\xb1\x66\xdd\x7c\x81\xa4\x49\x09\x2b\xcf\xea\xf5\xcd\xf6\xc9\x71\x76\xc3\x8d\xf5\x10\x24\xbd\x5a\x03\xef\x19\x09\x4c\x26\x23\x94\x9c\xc5\x51\x40\xc7\xc0\x72\xb9\xcc\xdf\x5a\x8e\x44\xe4\x8e\xc2\xd8\xbb\x4b\xef\xc0\x11\xb2\x57\x9b\x86\xcf\x99\xa4\xbd\x2c\xf0\x40\xce\xe4\x08\x8d\xc6\x2e\x8d\x82\xd8\x91\x2f\x4e\x7a\x91\x09\x1c\xce\x86\xb7\x05\x28\x3a\xb1\xb9\x6c\xe9\x85\x7c\x5e\x6c\x99\x27\xb0\xbe\x2f\x4f\x3d\x9a\x6c\x22\x95\xbd\x5a\x29\x4a\x73\x46\xdd\x09\xf5\x7d\x12\x81\x3c\x36\x5f\x44\x93\x66\x99\x37\x41\xcc\xa6\x59\x87\xa7\x9e\xcc\xef\x7c\x0b\x65\x45\xbd\x48\x2a\x18\x5e\x31\x1d\x09\x76\xb1\x51\x32\x13\xe9\x01\x9f\xea\xca\xe5\xb3\xd1\x94\xa6\x79\xc8\xe6\x2d\xd7\x26\x97\x22\x21\xb5\x2d\xe2\x38\x2c\x65\x6d\x56\x68\xc6\x2c\x9e\x25\x28\x7d\x72\xf9\xd4\x66\xec\xaa\xf7\x72\xca\x22\xae\x53\xe0\x7b\xea\x13\xa5\x3e\x60\xa3\x58\xd9\x6c\x60\x93\xd6\x58\xa9\x30\x73\xb8\xc2\x7e\x0c\xbb\xdc\x3c\x9b\xde\xdf\x2b\x2d\x94\xd3\x15\xeb\x84\xca\xf2\x18\xce\xbf\x80\x75\xf8\x72\x51\xc0\x5b\x55\x90\xaa\xcc\x3e\xe5\x92\xda\x5f\x2f\xa3\x66\x5b\x2b\xa5\xcd\x0b\xcb\x7a\x97\x78\x00\x6f\xe5\xec\xd3\x9c\x95\xb6\x34\x3d\xeb\x10\x03\xc4\x67\x84\x4f\x1c\xf4\xdd\xd9\x04\xd3\x48\xab\x08\x39\x57\xba\x58\x02\xc0\xf7\xe5\x14\x97\x8a\x80\xf0\x2a\xad\xf5\xa0\x52\xb9\xcb\x72\x4b\xad\xa5\xbc\x90\xd4\x8d\xda\xc1\x16\x43\x49\x13\x0c\x8a\x59\x39\x39\x21\xd4\xc3\xae\x20\xe8\x07\x3b\x63\xe0\x5a\x04\xf4\x83\x4d\x00\xb8\x01\xfe\xfc\x60\x3d\xfa\xf5\xe5\x6d\xd6\x8c\xe3\x31\x69\x0b\x04\x65\x8f\x0d\x30\xd0\x0f\xbe\x66\x08\x94\xca\x6b\x0f\x01\xa5\xf5\x34\x05\xc0\x0c\xfc\xfa\x6f\xdb\xc6\xbe\x3a\xf9\x2c\xf4\x65\xb0\xd7\x7f\xfb\x9c\x51\x0f\x56\xfc\xee\xa0\x57\xc9\xee\x97\x49\x87\x1c\x55\x96\x4d\x8e\x41\x48\x4b\x13\x74\xa3\x2e\xdb\xb5\xd6\xb9\xbe\x78\x17\x32\x45\x21\x35\x17\xa7\xa0\xdc\xfa\x21\xae\xbe\xc4\x57\xbc\xf4\x2d\xac\xe6\x55\xc8\x38\xde\x56\x9e\x17\x2d\xca\x03\xbc\xde\xc8\x93\xf1\x5a\x71\xb2\xe4\xe7\x06\x2e\x45\x43\xd7\x1a\x8f\x52\xd3\x78\xd5\x34\x38\x55\x56\x79\xdc\xdd\xea\x82\xb4\xce\x43\xed\x20\xc5\x8b\x86\x52\xe4\x6f\xed\xaa\x42\xb4\xe6\x33\xe9\xee\x3e\x73\x83\xd7\xa4\x1b\xbd\xe6\xc6\x6d\x03\xdd\xe0\x37\xd3\xc3\x2b\xde\x96\xdf\xa4\xcd\xfc\x26\xfd\xaa\xfd\x26\x6d\xd5\x6f\xd2\x56\xfd\xe6\xa0\x75\xbf\x59\x27\x5f\xd5\x6f\x0e\x9e\xb5\xdf\xa4\xcf\xc6\x6f\x0e\x5a\xf4\x9b\x86\xd7\x50\x1f\x40\xee\xe9\x38\x07\x2d\x3a\x4e\xc3\xeb\x5c\x5d\xdd\x34\x90\xe7\x65\x8b\xf2\xbc\x7c\x74\x47\x4e\xdb\x70\xe4\x83\xc6\x8e\xbc\x7c\x77\xb2\x97\x27\x1f\x34\xf6\xe4\xa5\xeb\xe5\xbd\xa5\x78\xd9\x50\x8a\x27\x8a\x27\xe4\x4f\xc6\x5a\x0e\x28\x80\x65\xe3\x88\x42\xde\x07\xac\x0d\x29\x2e\xc8\x34\x66\x0f\x6d\x85\x13\xaa\xbb\x06\xf1\x04\xb4\xff\x9a\x03\x0a\xa5\xbe\xf6\x22\x0a\x6d\x40\xfb\xc7\x14\x86\x0d\xbf\xc7\x49\x9b\x62\x49\x7e\xb5\xa1\x0e\x41\xb2\xea\xf9\x46\x0f\x72\x8d\x3f\xe1\x59\xa3\x59\x4c\x7b\x9e\x35\xa6\xb7\x52\xed\x9e\x35\x26\xbc\x8d\xb3\x46\x35\xc6\x21\x8f\xf6\x39\x67\x1c\x96\xbd\x04\xf0\x51\xb0\x56\x00\xba\x3c\xc6\x0d\x59\x0c\x5b\x26\xde\x70\xd7\x54\xdf\xef\x46\x64\xab\xc1\x43\x03\x76\x09\xff\x9a\xb1\x2e\xe1\x6d\x62\x4a\xc2\x9b\x6f\x9e\x86\xd7\x6a\xc1\xc0\xdf\x28\x16\x7d\xe2\x31\x82\xd5\xee\xa8\xe9\x46\xea\x83\xfc\xb0\x84\xb5\xf7\xb2\x90\xee\x9e\xf2\x65\x3b\xbd\x3d\xc4\x2b\xca\x77\x21\x7f\x43\xbb\x4a\x3e\xbb\xc3\xcb\x3a\x4f\xc2\x19\xbf\x81\x9d\xde\x73\xde\xe7\x01\x4a\x3d\x21\x50\x4b\x53\xde\x1b\xa7\x13\xfe\x18\x30\x3d\x1f\xb7\x1d\x8d\xce\xc7\x8d\x83\xd1\xf9\x78\x7d\x2c\xfa\x09\x8f\x19\x96\x9f\x75\x69\x27\x18\x95\xdd\x35\x88\x45\xe7\xe3\xaf\x19\x9e\xa5\xf2\xda\x83\x67\x69\x3c\xdb\xc2\xf3\x73\xc1\x10\x58\x42\x4f\x88\x21\xda\x58\xf7\xc4\x90\xf9\xb8\x6d\x0c\xe1\x3b\xe6\x9e\x25\x10\x62\xe5\xa0\xc6\x38\x8b\x42\xf2\x99\x24\xe9\x0c\x07\xfd\x2c\xf9\x2c\xb1\x89\xb1\x09\xf5\xd7\x7d\x8e\xc1\xe4\x6e\xe5\x99\x6c\x97\xed\x95\xb6\xb8\x2d\xb5\x38\x30\x2a\x35\xb5\xe6\x0b\x0b\x3b\x30\x1c\x32\x1a\x33\x2a\x1e\x76\x6c\x76\x49\xbd\x2d\x13\xe3\xd2\x26\xd7\xf4\x3f\xbb\x36\xb9\x22\x1c\x2c\x2a\x5a\x93\xea\x2b\x73\xe8\xec\xaf\x02\x53\x35\xdc\xd0\x55\x3f\xfc\xd4\xb2\x17\x73\x94\x1b\xa5\xcc\x59\xa7\xf7\x3c\x7e\x66\x3d\xe4\xea\x67\xd6\x60\x56\x2d\xfc\x12\x59\x32\xfb\x19\x39\xb7\xad\x31\xfb\x27\x30\xbb\x3e\xbf\xda\xfb\x77\xdb\x92\xc7\x0b\x18\xdd\x55\x4b\xf2\xbc\x44\xce\xe5\xa0\x25\x5e\x47\xc8\xf9\x34\xb8\xba\x69\x89\xdb\x2b\xc0\xee\xf3\xeb\x96\x98\xfd\x1d\x39\x37\x83\x8b\x73\xcb\xcd\xac\x98\xbd\xd9\xfd\x03\x39\x67\x1f\x2f\x2e\x4e\x2f\xfb\xf6\x00\xba\x41\x12\xa5\x81\xe7\xe6\x39\x94\xd6\x03\xaa\x75\x28\x3f\xc2\x22\x97\xe2\x77\xea\x43\x9b\xa8\x83\x7e\xfa\x5e\x95\x47\x85\xc2\xc3\xef\xb3\x45\xab\x9a\x14\x02\xcb\xf2\x9e\x59\x55\xa9\x7b\x80\x02\x71\x47\x5f\x0d\x20\xe0\xed\xa8\xc0\xc8\x78\xf5\xdc\x33\xf8\x75\x64\xc4\x33\x95\x13\xcc\xdd\x7b\xcc\x22\x2a\xbf\x80\xba\x75\x33\xeb\x58\x0a\x9f\x85\xcc\xd1\x63\xdf\xb7\x9f\xf6\x3c\x31\x9e\x3f\x0d\x40\x65\x48\xab\xe3\xb6\x72\x7c\x27\x3f\x5a\x06\x41\x47\xda\x95\xa6\x52\x5f\x7f\x74\x83\x78\xc6\xe4\x07\xc4\xb2\xef\x28\x39\x08\x26\xd2\x23\x93\x38\x04\x2b\xe9\x19\x55\x77\x2e\x68\x64\x3a\x54\x01\xa4\xd1\x9b\x84\x59\x53\x0c\xea\xc9\xd7\x7c\xc2\xe1\xac\x50\x75\xa0\xcc\xe4\x33\xff\x72\x16\xc6\x9c\x18\x95\x38\x36\x04\xd8\xc1\x0c\x72\x99\xd6\xd0\xba\xfc\xd5\x9e\x10\x8f\x48\x58\xf7\x8d\x9e\x8e\x15\x01\x1e\xec\x87\x5c\x76\xe8\x75\x3e\x56\x37\x04\x8e\x8e\x10\xee\xc8\x83\x8c\xb9\x75\x91\xf5\x59\x20\x45\x1c\x4a\xbe\x52\x8e\x57\xa9\xbf\x32\x1f\x88\xd4\xdb\x05\x65\x4a\x2b\x1d\xd3\x16\x52\xa4\xa1\x8e\x89\x65\xa6\xd8\x9b\x64\x2e\xc9\xf4\x72\x01\x85\xb2\x5d\x29\xa1\x1e\x4a\x3b\xb7\xb7\xf9\xa0\x66\xae\xe9\x4d\x64\x33\x9b\xd1\xda\xac\x7a\xdb\xae\xde\xdf\xaa\xea\xd5\xdf\x61\x50\xd5\x43\x16\xcf\xc1\xcb\xb3\x35\x24\x10\x85\x89\x75\x2c\xcc\xd0\x02\x1a\xca\x5d\xa3\x98\x6c\xf2\xee\x5b\xe8\x92\x43\xb8\xe8\x4d\xb6\x09\x1c\x69\x80\xc8\x1f\xa8\x3a\x93\x3e\x12\x6c\x46\x56\xe0\x6c\xc9\x72\x50\x81\xe3\x3a\xfa\x14\x2f\xf7\x8d\x58\x6c\x88\xdd\xe2\x2f\x91\xfa\xa5\x2c\xfc\xac\x4a\x4e\xfd\xca\x4a\x3b\xf1\x2b\x09\xd4\xb4\xaf\xac\xed\x53\x46\x3c\xa1\xee\x7c\x5a\x4a\xe9\x4f\x67\xbd\x81\x3f\x4a\x5d\x27\x70\x30\xdf\x8e\x05\x7b\xf9\x00\x25\x72\x33\x29\x3f\x93\x1d\x9d\x85\xd4\xbb\xeb\x2d\xc4\x84\xf2\xce\x04\x47\x7e\x48\x54\x89\x85\x20\x49\x9b\x1d\x4b\x6d\xd3\x67\xc9\x69\xcb\x99\x9d\xe4\x71\xcf\x7c\x9c\x02\x78\x9f\x86\x74\x1c\x9d\xe9\x72\x3d\xbf\xb5\x32\x66\x6d\x4d\xb9\x69\x92\xc2\x56\x26\xe3\x41\x76\x58\x92\x6b\x73\x86\x19\x11\xf9\x46\x4a\x8b\xf9\xcf\x9c\x61\xa3\xd8\x49\x3a\xc2\xff\x06\x00\x00\xff\xff\x18\xf7\x40\xf8\x23\x5d\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 23843, mode: os.FileMode(384), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

