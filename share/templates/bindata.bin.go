// Code generated by go-bindata.
// sources:
// index.html
// DO NOT EDIT!

// +build bin

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5c\x6d\x73\xdb\x36\x12\xfe\xee\x5f\x81\xf2\x9a\x6b\xda\x09\xa9\xc4\xb1\x7b\x39\xd7\xf2\x8d\x13\xb9\xad\xa6\xb1\xad\x89\xe5\xde\xf5\x3a\x9d\x16\x12\x21\x09\x31\x45\xf2\x00\x50\xb6\xaa\xe1\x7f\xbf\x05\x08\xbe\x8a\x92\x48\x4a\x56\x3d\x93\x7c\x70\x6c\x02\xd8\x17\x2c\x16\xbb\xcf\x82\x60\x4e\xbf\xe8\x5c\xbf\xeb\xff\xd2\xbb\x40\x13\x31\x75\x0e\xce\x16\x8b\x2f\x67\xe8\xa4\x8d\xac\x6b\x2e\x88\x2b\x7e\x26\x8c\x53\xcf\x0d\xc3\x53\xd5\x8d\xd0\xd9\xe9\x84\x60\x1b\xfe\x90\x7f\x4e\x89\xc0\x68\x38\xc1\x8c\x13\xd1\x36\x02\x31\x32\xdf\x18\xba\x4b\x50\xe1\x10\xf5\x37\x3c\x2d\x16\x56\x07\x0b\x6c\x4d\x3c\x2e\x5c\x3c\x25\x61\x88\x3c\xc5\xfe\xb4\x95\x8e\xd3\xec\x26\x42\xf8\x26\xf9\x5f\x40\x67\x6d\xe3\x3f\xe6\xed\xb9\xf9\xce\x9b\xfa\x58\xd0\x81\x43\x0c\x34\xf4\x5c\x49\xd6\x36\xba\x17\x6d\x62\x8f\x89\x91\xa5\x94\x9c\xdb\xc6\x8c\x92\x7b\xdf\x63\x22\x33\xf8\x9e\xda\x62\xd2\xb6\xc9\x8c\x0e\x89\xa9\x1e\x5e\x20\xea\x52\x41\xb1\x63\xf2\x21\x76\x48\xfb\x95\xf5\x52\xb3\x5a\x2c\x7e\xec\x5f\xbe\x47\xc6\xe9\x17\x46\x18\x9a\xe6\xaf\x74\x84\xba\x17\xbf\x9d\x9d\x3a\xd4\xbd\x43\x8c\x38\x6d\x83\x4f\x80\xfb\x30\x10\x88\x82\x00\x03\x4d\x18\x19\xb5\x8d\xd6\x08\xcf\xe4\xb3\x05\xff\x94\x71\xfa\x95\xb8\x36\x1d\xfd\x66\x9a\x59\x4e\x11\x03\x4e\xff\x24\xbc\x6d\xbc\x3e\x7c\x78\x7d\x98\xb0\x93\xcb\x10\x86\x31\x57\x1e\xff\x61\xbe\x3e\xb4\x7c\x77\x6c\x20\x31\xf7\x61\xae\x74\x8a\xc7\xa4\x25\x1b\xb4\x1d\x52\xde\xd8\xf7\x1d\x62\x0a\x2f\x18\x4e\xcc\x9c\x9c\x57\x87\x2f\x1f\xe0\x67\xa3\x24\x18\x63\xd5\xe4\x7c\x74\xf4\x00\x3f\x9b\x39\x1f\x1d\xd5\xe5\x7c\x7c\xf8\x00\x3f\x9b\x39\x1f\x1f\xd6\xe5\xfc\x06\xac\xf1\xa6\x82\x35\xde\xac\xb0\x06\x17\x73\x87\xf0\x09\x21\x22\x5e\x14\x41\x1e\x44\x6b\xc8\x79\x91\x27\x34\xb5\xa8\x6b\x93\x07\x4b\x76\x6a\x46\x2d\xbd\x9b\xce\x4e\x07\x9e\x3d\xd7\x8d\x36\x9d\xa1\xa1\x83\x39\xe8\x27\x3c\xdf\x1c\x60\x66\xc4\x3b\xa9\xa4\xcf\x74\xc8\x48\xc4\x03\xe4\x90\xc0\x89\x47\x4c\x89\x1b\xa4\x3d\x91\xe2\x99\xc7\x02\xbf\xc0\xb7\xb1\x20\xa0\x37\xfc\xc2\xa6\x4d\x46\xd4\x85\xe9\x44\xbf\x7f\x8f\xb7\xae\x91\xa3\x57\x6e\x2e\xc8\xd4\x77\x80\x12\xe9\xb1\xfc\xe4\xa4\x48\x84\x2c\x88\x20\x2d\x90\x55\x90\xde\xca\xe9\x53\xae\x5e\x51\xe0\xa9\xcf\x48\xa1\x0d\x5a\x3d\x8e\x64\x94\xa1\x5c\x30\x3a\x90\xc2\x96\x47\x9d\x3d\xae\x06\x81\xff\x77\x77\xc0\xfd\xef\x4e\xb9\x8f\xdd\x4a\x36\x0d\x7c\x41\x97\x2d\xaa\x98\xad\xb3\xaa\x26\x8b\x6c\x2a\x85\x2d\xeb\xf2\x17\x4c\xdf\xc1\x75\xa7\xef\x78\xd8\xc6\xb3\x71\xed\xf9\xc7\x74\x8f\x62\x80\x56\xe0\x1c\x94\x12\x94\x6e\x3d\x46\xc7\x93\xe6\x7b\x0f\x27\x63\x31\x1b\x53\xd7\x7c\x89\x06\x81\x10\x9e\x8b\x38\x81\x98\x63\x63\x36\x47\x13\xcf\x71\xbc\xfb\x38\x94\xc8\xdc\xc8\x4f\x5a\xad\xfb\xfb\x7b\x0b\xb6\x16\x83\x1f\x6b\xe8\x4d\x5b\x51\x32\x6d\x41\x40\x22\x98\x13\xde\x92\x76\xe3\xe2\x5f\xc3\xa9\xdf\x8e\x82\xcf\xd2\xae\x8d\xd3\x2f\x6e\x6e\x8e\xe4\x21\x67\x19\xe6\xdd\x23\x07\xa6\x43\x20\x81\x94\x46\xad\xa1\xe7\x04\x53\x37\x1e\xf3\x32\x63\x3c\x50\xd5\x57\xd0\x43\x61\x05\x1f\x33\x3c\xe5\xb0\xc2\x05\xe6\x3e\xb6\x6d\xea\x8e\x4d\xb9\x04\x2f\x8f\xbf\xcd\x9b\x38\x33\x56\x0b\x00\xcb\x99\x03\x8f\xd9\x84\x49\x0a\xa3\x38\xdd\xbc\x43\x44\x0c\xa8\x2d\x57\x6f\x6a\x94\x6b\xfc\x0a\xad\x75\x6a\xf0\x46\xe2\x48\xea\xbc\xa4\x75\xfe\x9c\x90\x94\x45\xc9\x82\x8e\x4b\xb6\xde\x8f\x39\xec\xd1\x16\xd6\x00\xe2\x9a\xc6\x90\xe2\x9e\xac\x2d\x86\x7e\xb0\x85\x31\x24\x75\x4d\x6b\x28\x81\x4f\xd6\x1c\x74\x1b\xd7\xa0\xb5\x5d\x83\x3e\x65\xd7\xf0\xf9\x16\xb6\xf0\x79\x5d\x5b\x48\x71\x55\x6c\xb1\x2a\x8b\x45\xca\x1d\xae\xce\x5f\x68\x46\x98\xa0\x50\x21\xa1\xc1\xd8\x74\x64\xae\x33\xc7\x0c\xcf\x37\xa6\xb5\x28\x5b\xfd\x6d\x29\x0c\x42\xef\x25\x99\x7a\x6c\xbe\x39\xf1\xac\xe6\x5a\x0c\x27\xd0\x09\xb0\xef\x0e\x05\x1c\x8a\xa1\x6d\x18\x2f\x6d\x4d\xe8\x7d\xd7\xbb\xdd\x86\x65\xd1\xbf\xa1\xb3\x0b\x45\x29\x1b\xe1\x21\xe1\xdb\x30\x2e\x3a\x0b\x74\xf6\x98\x07\x4c\x79\x15\xbe\xd5\xb2\x3a\x1f\x32\xea\x8b\x6c\x55\xf3\x11\xcf\x70\xd4\x9a\xa4\xf6\x19\x66\x48\xe6\x6b\xd4\x46\xba\xca\x0f\xc3\xef\x00\x95\xa9\x51\x55\x18\x15\xcf\x0f\x10\x67\xc3\xb4\x68\xfa\xc8\xe1\x2f\xa8\xc1\xad\xfe\xf9\x0f\x3f\x5c\x74\x06\xd4\x0d\xc3\x29\x75\x5b\x83\xc0\xb5\x1d\x62\xc1\x9f\xd6\x47\xbe\x58\x10\x87\x93\x30\x04\xca\xb8\x43\x35\xba\x76\x8a\x7c\xce\x0a\x3a\xb5\x74\xbd\x25\x4b\x30\x7d\xf0\xd1\xfa\xe6\xe0\x9b\x56\x18\x2e\x16\xd1\x1e\xcb\x6c\x3a\x2c\xeb\xbd\xdf\x07\xd8\x1e\x13\x55\x6c\xc1\x9e\xd3\x2b\x01\x73\xfe\x11\x7e\x87\x21\xcc\x5e\x6d\x9c\x30\x94\x6d\xef\xa2\x3f\x91\xe7\xbe\x73\xe8\xf0\xae\xbd\x10\x13\xca\xad\x09\x96\xba\xa9\x96\x10\xa1\x83\xe8\x60\xe4\xad\xe4\xaa\xe8\xad\x3e\x98\x46\x6e\x67\x2c\xb5\x51\xda\x57\x54\x2a\x82\xa1\xbb\xd4\x2a\x52\x05\xa5\xfa\x55\xd5\xaa\x58\xf9\x29\xa5\x52\x2d\x8c\xc9\xb1\x01\x8f\x7d\x79\xea\xd3\x03\x15\xe9\x03\xb1\x91\x11\x8f\x46\x06\x5a\x3a\x28\xd2\x45\xb4\x71\x90\xad\x3c\x4a\x4e\x94\x62\xc4\x7f\x56\x53\xd3\xb8\x9a\x00\x0e\xba\x94\x48\x98\xeb\xae\xa4\xca\xa8\xc1\x35\x49\xdc\x72\xd0\x2a\x58\x7b\x10\xc7\xe3\xc5\x42\x2d\x4d\xcf\xe3\x54\xd0\x19\x41\x5f\xfa\x16\x04\x1e\x17\x19\x02\x0f\x38\x92\xff\xe8\x6c\x84\xa2\x7a\x5f\x1e\x2e\x2c\xf5\x81\xa8\x28\xb9\xc8\xb6\x92\x93\x04\x39\x52\x9d\xb6\x21\x19\xda\xe5\x28\x53\x67\xc5\x74\x8f\xc8\xa5\x92\x9e\xd3\x07\x15\x62\x2d\xc2\x30\x13\x2b\x26\xc7\x85\x9a\x65\xe0\x41\xc5\x32\x35\x5f\xe6\x72\x82\x8a\x9a\x93\xe3\x6c\x8c\xc1\x65\x11\x26\xcd\x36\x23\xb0\xb5\x50\x27\x19\x72\x8a\x28\x5b\x3c\xc9\x30\x98\x4d\x4a\xa6\x8c\x20\x46\x79\xaa\xa7\xae\x1f\xc8\x1c\xe5\x05\x3e\x5a\xa7\x60\xae\x48\xcd\x10\x99\x0e\x1e\x10\xa7\x90\x87\x6d\xe2\xe0\xf9\x52\xa1\xb9\x81\x07\x8a\xfe\x4d\x2a\xb9\xa5\xdc\x1e\x59\xd7\x2e\x29\x61\xcb\x13\x7f\x31\x06\xa1\xf7\xe0\x06\x9d\x74\x9d\x60\x1b\xad\xa8\x1e\x91\x34\x98\xe9\x7a\xf7\x0c\xfb\x28\xab\x68\x34\x5e\xb9\xe8\x7a\x81\x51\x7c\x41\x97\x1e\x23\x3b\x92\xb8\x04\x51\x92\x0c\xf5\x97\x2f\x37\xc0\x45\xfe\x48\xab\xed\x5a\xe7\x03\x0e\xc0\x50\x90\xed\x96\xfd\x2a\xb3\x3d\xf7\xb3\xec\x3b\x92\xb8\x6e\xd9\x63\x50\x92\x44\x88\xb3\x53\x88\x51\x10\xae\x74\x74\xbc\xf2\xdc\xff\x12\xe6\xa5\x5a\x4c\x3c\x80\xa7\x4b\xeb\x0e\xed\xd4\x96\x79\x47\x33\x13\xc9\xfb\x0a\xf5\xc4\x32\xd2\xc5\x24\x8f\x8a\x32\xcf\xb2\x33\x89\x9c\x72\x56\x85\x93\x1e\x18\x71\xcb\x09\x7b\x56\x97\xe8\x66\xce\x6b\xd3\xfc\x1b\x53\x51\x9b\xa8\x0b\x39\x7d\x99\x68\xcd\x7c\x5b\x89\x69\x54\x4f\xfa\x92\x47\x24\x27\xd3\xca\x47\x25\x18\x53\x99\x0c\xb2\x9b\x74\x21\x86\xdd\x31\x64\x2c\x78\x4a\x93\x1c\x3c\x58\xef\x29\x17\xb2\xff\x23\x7f\x40\x7f\x44\x48\x43\x36\x3d\x97\x03\xbe\xb6\xa6\xd8\x7f\x3e\x0a\xdc\xa1\xa0\x9e\xfb\x5c\x12\xbf\x40\xf4\x6b\xb4\x40\x8c\x88\x80\xb9\x7f\x80\xa7\x08\x06\x0b\xff\x13\x99\x23\x59\x70\x9b\xb0\x29\x07\x73\xf3\xca\x50\x82\xac\xab\x5c\x4e\x12\xf6\xb2\x2d\xb2\xae\x68\xe4\x37\x59\xcc\x01\x66\x69\xe7\xb9\x64\x60\x4a\x86\x13\x94\x3e\x01\x27\xfe\x50\xd9\x57\x25\xd8\xe8\xb1\xad\x59\x49\x3f\xe8\x0d\x45\x46\xa5\x54\x4c\xd2\xf7\x6c\x57\xd2\xc0\x81\x56\x09\x8b\xbb\x76\x26\x4b\x3a\xde\x2a\x61\x49\x5f\x7d\x69\x26\x75\x61\xe3\x72\xb2\x42\xaa\xf4\xdc\x55\x52\x93\xbe\x12\xa9\x31\x92\x08\x1c\xa7\xb0\xe2\x91\x0b\x7e\xe4\x3a\xc6\x59\x37\x00\xc2\xee\x20\xcc\x91\xe7\x0b\xc0\x3a\x27\x88\xbe\x40\x50\xae\x9f\xa0\xaf\x34\xfb\xaf\x5e\x20\x18\x8a\x03\x47\xdc\xf8\x9e\xe0\x27\x48\xb0\x80\x84\x5f\x87\x7f\x2c\x39\x4d\x66\xd3\x68\x31\xd1\xb0\x04\x28\xaa\x5f\x30\x2c\xf3\x76\xa7\xa5\xa2\xda\x41\x12\xe8\xea\xa2\x4a\xa8\x7f\x9b\x82\xca\xce\xe8\x09\x60\x4a\x50\xa2\x01\xa4\xcc\x96\xf8\x9f\x91\xe5\x26\xac\xd1\x19\xed\x08\x58\x02\xa3\xfd\xe2\xca\xed\x04\x7e\x82\xb0\x12\xb6\xd3\x8e\x51\xa5\x8a\x12\xfb\x04\x95\xdb\x09\xdc\x11\xa6\x54\x4a\x34\x83\x94\x39\xf8\x51\xc4\x1c\x72\x95\x98\x0c\xd5\x59\xa4\xb6\xc2\x4c\x62\x32\x93\x86\x32\xd0\xcf\xea\x82\x41\x6c\x9d\x3b\xf4\x0a\x19\x1d\x75\x7d\x05\x74\xa9\x4d\x7c\x88\x8c\x4b\x2f\x70\x05\xb1\x9b\x50\x7f\x8b\x8c\xbe\x27\xb0\x03\xd0\x8b\xd5\xa5\x3d\x46\x06\x20\x20\xbb\x09\xe9\x6b\x64\x9c\xcf\x30\x6d\x24\xf6\x48\x89\x7d\x16\x91\xee\x18\xf5\xda\x90\x87\x6e\x65\x1a\xca\x60\x5f\x7b\x94\xa6\xe2\xa4\xbf\x16\x00\xb6\x47\x6b\xf0\xaf\x3d\xd2\xf0\xd7\xa6\x2c\xba\x4d\x01\xe3\xad\x0e\x65\x57\xea\xe0\x2b\x9d\x0d\x42\x65\xe8\xab\x1c\x04\x4b\x0e\x64\x76\xa5\x8f\xce\xb2\xa0\xa6\x2e\x97\x58\x8f\x95\x88\xac\x02\x2a\xcf\x85\xc1\x69\xa0\x62\x33\x52\xc0\xa2\x6d\x74\x5d\xcf\x26\x80\x4a\x94\x13\x2e\x05\x40\xd0\x20\x1a\x50\x16\xfb\x50\x34\x40\xf9\xef\xa3\x2b\x18\x48\x4f\x2f\xd5\x4f\xf6\xac\x51\xef\x56\x77\x3f\xaa\x76\x23\x46\x48\xb9\x76\xb2\x67\x8d\x76\x6a\x17\x36\xa8\x96\x72\xca\x16\x71\x7e\x34\xeb\x25\x94\x5f\xcd\xca\xcf\x56\x5a\x39\x2e\x0d\x56\x1b\xfa\x11\x8b\x87\x88\xfb\x57\x4f\xa6\x4e\xa0\xcd\xeb\x84\xee\x53\xa8\x13\xba\x8d\xea\x84\xec\xeb\xb5\xcf\x75\xc2\x26\xf0\xd8\xdd\x55\x9d\xd0\xdd\x77\x9d\xb0\x9d\xc0\x4f\xb0\x4e\xe8\xee\xbc\x4e\xe8\xee\xbb\x4e\xd8\x4e\xe0\x8e\xea\x84\x6e\xf3\x3a\x61\xe5\x51\x6c\x12\xb4\x6a\x9f\xf2\xf6\x2a\x50\xe4\x4c\x03\xb9\xca\x9c\xda\xe6\xeb\x24\xaf\xbe\xa5\x82\xa3\xae\xdb\xba\x0e\x04\xf2\x61\x52\x91\x61\xf3\x52\xae\xd1\x69\xe1\x26\xc2\xe0\xb4\x95\xbb\x52\xe0\xf3\xad\x15\xe9\xe1\xe1\x1d\xd9\xa8\x4b\x32\xea\x1a\xed\x40\x66\x87\x79\x3e\x7f\x71\xc1\x98\xc7\x36\x09\x7e\xef\xf1\x72\xa9\xb5\x4b\x08\x3a\x82\xd4\xc7\x78\xa6\x80\xa0\x99\x02\x42\xf7\xd6\x2a\x1f\xe8\x68\x55\xed\x40\xe3\xda\x41\x17\x0e\x74\x64\x15\xab\x86\xea\x68\x3f\x21\xae\x80\x55\x4b\x68\xbb\xbd\xdd\xa3\xdc\xbc\x57\x46\x23\xf4\xda\x2a\xd4\x8f\xde\xfe\xd2\xbf\xb8\x81\xa5\x45\x53\xcf\x0e\x1c\x0f\x1d\xfd\x50\x72\x83\x5d\x6a\xf7\x76\x2e\x08\xef\xba\xa5\x57\x8a\xcf\x5a\x2b\x39\x4b\x8f\xa9\xc4\x1a\x06\x96\xf3\x2e\x81\xab\x39\x69\x6f\xbb\x7d\x35\x81\x72\xbf\x4c\x84\x74\x88\x23\xb0\xdc\xcc\xa5\x73\x28\xcc\x40\xf1\x5c\xed\xec\xcb\x4c\xcb\xb5\x3f\xdb\xfb\x72\xfa\x49\x90\xd8\x68\x75\x1d\x29\xea\x2c\x69\xcc\xbd\xca\xa2\x6a\xf6\x8d\x97\x35\x0d\x77\x95\x16\x61\xdd\x6c\x0a\x73\xe9\x65\x66\x51\x83\xf5\x9e\x96\x38\x6f\x71\x5b\x05\x60\x12\x05\xe0\x15\x26\x2f\xf3\x03\x45\x57\xc5\x0b\x54\x84\x5f\xe5\x03\x11\xe3\x34\xc7\x5f\x51\x07\x25\x44\xd2\x7c\x46\x21\xa7\xe7\x6c\xbe\x25\xc3\xb2\x09\x55\x71\xbc\x98\x57\xf9\x94\x5e\x94\x18\x8b\xc4\xf9\x6d\x23\xef\x28\x13\xd6\xd9\x32\x9a\x77\x15\xc5\x23\xe6\xf5\x37\x8c\x36\xe7\xb9\xe3\x44\x18\x2c\xf6\x5b\xbd\xb4\x85\x06\xa9\x49\xd2\x12\xcf\xa7\xd8\xa2\x96\x42\x3b\x64\x61\x69\xf3\xde\xd6\x89\xfd\x6c\xd5\x46\xca\x6f\xa5\x66\xde\x96\xd3\x7d\x67\x2e\xb7\x8a\x6b\x7e\x6a\xeb\x82\x44\xc9\xdc\x2a\xfa\x5d\x82\xa8\x2a\xf2\xae\xe3\x77\x17\xa9\xc7\xd5\x61\x5e\xc3\xef\x9e\xc0\xe1\x8d\xbc\x3a\xdd\xf4\xf4\xe6\x92\x4c\x9f\xc0\xf1\x8d\xd4\xa2\xc1\xf9\x4d\x7c\x3f\xfc\xf3\xd9\xcd\xa6\x82\x1e\x2c\xb5\xa3\xc3\x1b\xc9\x69\xbf\xa7\x37\x5b\x4a\xfc\x04\x8f\x6f\xe4\x76\xda\xf1\xf9\x4d\x14\x27\xf6\x79\x80\xb3\xa5\xc4\x1d\x9d\xe0\x44\x5a\xfc\xc5\xb7\x07\x15\x7a\x6a\x70\xe5\xd0\xae\x4b\xf3\x3d\x23\xb5\x8f\x95\xe4\xdb\xd3\x47\xbd\x3b\x38\x55\x51\x3e\x73\x02\x02\x0d\x69\xa2\x8b\x7a\x6b\x9d\x80\x00\xc9\x9a\x37\xa8\xd0\xab\x8f\x41\xee\xa8\x2b\x5f\x47\x43\x83\xf5\x13\x95\x09\x39\x57\xda\x14\xce\x2c\xd2\x51\x0d\x0e\x3c\x24\x71\xf5\x17\x8f\x65\xd4\x95\xdf\x0b\x96\x11\x7f\xaf\xdf\xea\xd5\xbd\x09\x58\x7c\x53\xa7\x15\x29\xbb\x90\x97\xed\xfa\x34\x5e\xa9\xf9\xbc\x31\x28\xeb\xf1\x27\x80\xc9\x40\x89\x06\x90\x2c\xf3\x61\xd9\x67\x54\xb6\x29\x4f\xf7\xf8\x8e\x40\x19\x30\xda\x2f\x26\xdb\x4e\xe0\x27\x08\xc9\x60\x37\xed\x18\x91\xa9\x20\xb1\x4f\x40\xb6\x9d\xc0\x1d\xe1\x31\xa5\xc4\x3e\x6f\xde\x7d\x39\x4c\x5b\x87\x44\xbe\x7b\xab\x75\x2b\xae\xc7\xd5\x85\xbc\x5e\xb7\x53\xf7\x72\x9a\xa4\x3c\x44\xc6\x6d\x33\xca\xd7\x40\x79\x73\xf1\xa1\xee\x25\x3e\x49\x7a\x04\xea\x7e\x68\x22\xf3\x18\x19\x57\xdd\x26\x84\xdf\x22\xe3\xe7\xee\x87\x7e\x13\xd2\x7f\x20\xe3\xc3\xc5\x4d\x13\xca\x37\xc8\xe8\x77\x2f\x2f\xe4\x57\x22\x75\x49\xff\x89\x8c\x77\xd7\x97\x97\xe7\x57\x9d\xc8\xbe\xf5\x31\xad\x0f\x69\x32\xfb\x52\xcf\xe7\x19\x94\x20\xfb\x6a\x01\x5a\x9f\xaf\x02\xb3\x3e\xd7\x58\xd6\xa7\x12\xca\xfa\xdc\x02\x4f\xdc\xf8\x41\x4c\x2e\x7c\xca\xfb\x50\x31\x5d\x5d\x7c\xa9\x69\x6f\x4b\x69\x0b\x08\x51\x8e\xe3\x84\x35\x16\xd2\x63\xd4\x63\x54\xcc\x1b\x33\xb8\xa2\xc3\x06\xaf\x2b\x35\xf1\x0d\xfd\xb3\x39\xf1\x07\xc2\x21\x72\xb9\x62\x13\x03\x1d\x7f\x96\x0d\xd7\xa7\xa5\x6f\x5a\x97\x07\x96\xbe\x92\xdd\x33\x3a\xd6\xff\x25\x55\xc9\x37\xd4\x51\x4f\xad\x4f\xa8\xe3\x3d\xaa\xee\xee\xe6\xbe\x1d\x87\x4d\x48\xe4\x3e\xb0\xce\x1d\x3a\x76\xf5\xe7\xec\xd1\x97\xe1\xe9\x97\xef\xef\x81\xb6\xec\xeb\x77\xd9\x5e\xf1\x0b\xf8\x48\x7f\x49\xa0\x3f\xc9\xd7\x67\xec\xd9\x6f\xe9\x31\xec\x4d\xcd\x2e\x8d\x13\x09\x04\xd0\xe8\x38\x2a\x94\xe3\x49\xff\x3f\x00\x00\xff\xff\xe1\xfc\xfc\x1e\x6c\x51\x00\x00"

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 20844, mode: os.FileMode(420), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

