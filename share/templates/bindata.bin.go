// Code generated by go-bindata.
// sources:
// index.html
// DO NOT EDIT!

// +build bin

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x3d\xff\x53\xdb\x38\xf6\xbf\xef\x5f\xa1\xd5\xec\x7e\xb6\x9d\xc1\xce\x42\xe9\x7e\x7a\x6c\xc2\x0d\x05\xae\x97\x59\xa0\x99\x02\xbd\xdb\xdb\xd9\xb9\x2a\xb6\x92\xa8\x38\xb6\x4f\x92\x03\x5c\x26\xff\xfb\x3d\x49\xfe\x9a\x38\xc4\x09\xf9\x56\xa0\x33\x50\x5b\x7e\x7a\xdf\xf5\xf4\xde\x93\x49\x86\x43\x97\x76\x98\x4f\x11\x36\xff\xff\x3b\x0a\x25\xeb\x53\x3c\x1a\xd5\x45\x48\xfc\xc3\xe1\xd0\x3e\x21\x92\xd8\x66\x18\x46\x6b\xf1\x30\xf5\xdd\xd1\x68\x62\x76\x2f\x10\xd2\x27\x66\x3e\x41\x3d\x4e\x3b\x0d\x5c\xc3\x68\x38\xbc\x62\xd2\xa3\x2d\xb8\x67\x77\xd4\x45\x38\x81\x43\x18\x19\xfc\xc9\xc0\x68\x94\x92\xcc\x86\xea\x35\x32\x95\xa2\x47\xb0\x1a\xfd\x21\x44\x07\x8d\x18\x57\x48\x38\xe9\x8b\xd1\xe8\xbb\xba\xcb\x06\xc8\xf1\x88\x10\x0d\xdc\xe5\xcc\xb5\xda\x5e\xe0\xdc\x00\x5b\x96\x0c\x42\x7c\xf8\x1d\x42\x79\x08\x27\xf0\x2c\x8f\x23\x8f\xf0\x2e\xb5\x76\x91\xa4\x77\xd2\xe2\xac\xdb\x93\xf8\x50\x83\x0d\x87\xc7\x0a\xb0\x15\x08\x26\xd9\x80\xa2\x1f\x42\xfb\x8c\xf8\x20\x0b\x73\xa9\x25\x7a\xc1\xad\xba\xc0\x08\xab\xcb\xec\x1e\x04\x02\x3a\x40\xa9\xb7\x9b\x10\xea\xed\x1b\xe4\xc1\x80\xf2\x8e\x17\xdc\x62\x03\x01\x30\x04\x88\xfc\x1d\x94\x74\x05\xc8\x63\xfc\xa3\x11\x92\x4a\x77\x0d\x7c\x16\x10\x17\x91\x41\x17\xb9\x4c\x84\x1e\xb9\x47\x01\xd8\x24\xf0\x45\x36\x5d\x99\x06\x30\x68\x32\xa3\x51\x03\x27\x4c\x58\xea\x17\x82\x4b\x49\x01\xc4\xa1\x56\xc8\x29\x02\xca\x44\x5a\x1e\xed\x80\x7c\xb6\x6d\xa3\xd8\xb2\x09\x15\xa5\x73\xc3\x78\xad\xb7\x7b\x58\xaf\x81\x06\xb4\xc2\xd2\x8b\xa9\x9a\xdb\x5d\x8e\xbe\x4a\x6d\x97\xc9\x1a\x79\xc9\xd3\x3e\xf5\x23\x94\x8a\xaa\x2e\x52\x28\x80\xf3\x58\x76\x53\xc4\xca\xfc\x30\x92\x56\x97\x07\x51\x88\xf3\x30\x53\xa1\x2c\x8f\xb4\xa9\x87\x44\x9f\x78\x9e\xb1\xa0\x1f\xdc\x72\x02\xb3\x5d\x0a\xf6\x48\x55\x33\x1b\x51\x3b\x92\x32\xf0\x41\x4f\x24\x79\x6a\x46\x62\xdc\x82\x3a\x81\xef\x12\x7e\xaf\x4c\x4d\xda\x1e\x75\xf1\xa1\x72\x71\xd0\x9f\x6b\x56\xc3\x02\xb4\x86\xc3\x5b\x26\x7b\xe8\x8c\x0a\x71\x92\xba\x17\x2c\xc5\x02\xe5\xbc\x54\xb0\x80\x50\xe1\x1f\x70\x1b\xf8\xc7\x1e\x73\x6e\x1a\x43\xd9\x63\xc2\xee\x11\xdf\xf5\xa8\x1e\x19\x99\xc5\x0e\x6b\x57\xf9\x2f\x38\x6d\xe6\x86\x30\x76\x6c\x2e\xc7\xf0\x21\xa4\xd6\xfa\x7b\xe2\x76\xa9\x9e\x60\x5f\x01\xf5\xc2\x6a\x2f\x0a\xb8\xb0\xcc\xe7\x01\xa7\x5b\x25\xb3\x11\x14\x65\xd2\x57\x96\x79\x6c\xa0\x5e\xcb\xfb\xf7\x7a\x9c\x9d\x07\xb7\x62\x2d\xbe\xee\xdb\x47\x6d\x11\x78\x91\xa4\xcb\x70\xfa\x8b\x2c\xa6\x8e\x39\x80\x88\x1c\x07\x00\x9e\xb0\xf3\x6f\xa5\xec\x2b\x59\x04\xf5\x5a\xe4\x25\xfb\x96\x02\xca\xef\x44\x17\x81\xff\x2f\xca\x83\x54\x11\xd8\xec\x45\x33\xb6\x1c\x04\xbb\xb4\x64\x0e\x01\x5d\x49\xce\x42\x9a\x6d\x41\xe5\xe0\xb2\x47\x09\xf8\xb0\xd9\x8c\xe3\xc7\xf4\x0e\x6e\x5c\x04\xfb\xa4\x51\xbb\x05\x7b\x64\x8b\x72\x16\xb8\xf1\xae\x3b\x03\xba\x90\x8c\xa0\xcf\xc4\x8b\xe8\xc3\x13\x81\x7e\xfc\x5c\x6b\x61\x38\x64\x9d\x38\x39\x82\x5d\xdf\x85\xed\x3d\x55\xf1\x70\xc8\x89\xdf\x85\xdd\xd9\x23\x59\x06\x15\x03\xd9\x67\x4c\xc8\x1c\xe4\x57\x71\x87\xd0\x17\xe3\x02\xea\xd1\x2b\x05\xfc\xda\xee\x93\xf0\x55\x27\xf2\x1d\x95\x8d\xbc\x02\x3c\x3b\x88\xbd\x46\x43\xc4\xa9\x8c\xb8\x8f\x5e\x7d\x49\x31\xc4\xc6\xf8\x8d\xde\x23\xec\x11\x0b\x02\x49\xfb\xde\x0a\xb5\x1e\xb0\x62\xc0\x36\x3a\x29\x38\x51\x61\xf3\x9f\xa9\x54\x88\x1c\x39\x34\xfd\x45\xb4\x6b\x50\x68\x1d\xa7\xe9\xee\x14\x04\x90\xf4\x28\x92\x4a\x2d\x5f\xe0\xb7\xc9\x48\x85\x7d\x09\x09\xe8\x8d\x07\x97\xaf\x86\xb0\x24\x0e\x10\xdb\x51\xc0\x07\xe8\x27\x8d\xf4\xa7\xd1\xeb\xd1\x97\x0c\x73\xde\x95\x63\x54\xaf\x7f\x35\x20\xe9\x68\x7e\x49\xe4\xef\x62\x17\xcf\xfd\xce\x32\xb4\xc4\xf0\xe5\x59\x73\x9f\xf6\x37\x98\x36\x9f\xd3\xfe\x6a\xf3\x66\x45\x20\x4b\x9c\xe1\x2e\x30\xfb\xcb\xea\xd2\x66\x43\x63\x25\x49\xf3\x5c\xda\x7a\xc9\x9a\x27\x33\x09\x50\xe0\x52\xd3\x66\x85\x6f\xf3\x39\xe4\x9a\xf3\xe6\xed\x10\xfa\x25\x71\xae\xe4\xee\xab\xc9\x9c\x4d\x20\xda\x96\xf4\x71\xcd\xa9\xf3\x76\x09\xbf\xc9\xdc\xd9\x68\x62\xb3\xc9\x73\xb2\xdd\xce\x9f\xde\x5d\x05\x92\x78\x8b\x4c\xbc\x16\x74\xa1\x6c\xfd\x6f\x9c\xce\x48\xd6\xa7\xd2\xfb\x71\xd1\x24\xbf\xaf\xd5\x33\x99\xe3\xc3\x78\x96\xef\x19\xa0\x85\x72\x7c\x98\x5a\x29\xc9\x07\xb8\x38\xcb\xbf\x61\xbe\xca\xf1\x61\xc0\xfe\x8d\xf9\x8f\x4c\xf1\x33\x2c\x0b\x26\xf8\x0a\x81\x76\x84\x47\x61\x50\x1e\xf1\x28\x04\xca\x35\xc6\x10\xe4\xb4\xf2\x20\x12\xd4\xee\x5a\x91\xa0\xa1\x23\x31\x72\xc1\x42\xf1\x4d\x23\x63\xad\xe5\x80\x59\xf3\xbc\xea\x81\x19\x2e\x35\x6f\x45\x63\xd0\x6e\x45\x49\xe3\x76\x36\x58\xd1\x9c\x74\x56\x5b\xd0\x00\xfe\xac\x9e\x39\x61\xe2\x06\x45\x82\xc0\x8a\x5e\x69\x4d\x93\xd1\x59\x49\x5d\x33\x8f\xce\x5e\xca\x9a\xc9\x3c\xef\xa4\xb3\xd4\xaa\x06\xd0\x6d\x3e\xbf\x5f\x73\x51\xb3\x15\x32\xbf\xd4\x34\x55\x7c\x7d\x35\x25\x8d\x8e\x41\xdb\x92\xd4\xaf\xb9\xa2\xd9\x2a\xd9\x37\x59\xd0\x68\x45\x6c\xb2\x9e\x29\x2e\xa9\xd8\x54\x9f\x21\xdf\xba\x49\x4d\x75\x83\x76\x11\x3e\xa1\x03\xe6\xd0\xa2\x49\xaa\x99\xe3\x0c\x70\x95\x99\x44\x8d\x97\x99\xe5\x30\x7e\x16\xfb\xe1\x58\x36\xa1\x6c\x49\x20\xf3\x8f\x67\x66\x65\x48\x6a\xb2\x79\x92\xe2\x19\x72\xef\x21\x7c\x1e\x44\xbe\x84\x58\xf0\x24\x05\x2f\xe4\x97\x53\x74\xf0\x0b\xc2\xba\x5c\x79\xbe\x1a\x78\x8b\xb0\x2a\xb7\x9e\xaf\x02\xde\x20\x7c\x34\x20\xec\x19\xbb\xc0\xbe\x76\x81\x1f\xbf\x7d\x05\x4c\xef\xdb\x40\xd6\x73\x73\xad\x0a\xae\xc9\xd6\x8d\xdb\xc9\xea\xda\x14\xac\xac\x79\x33\xab\x77\xe3\x76\x2a\xb5\x6e\xdc\x4e\xdc\xb9\x71\x19\xd7\x6f\xf4\x29\x16\xec\x13\xc6\x2f\xf4\x2b\x79\x0b\xb6\x6f\xc6\xeb\x5d\x48\xee\x14\x56\x3a\xb8\x20\xfd\x99\xc7\xad\xd3\x90\xa0\x18\x4b\xc2\xdb\x22\x58\xf2\xad\x95\x2e\x27\xf7\x63\x92\x98\x0a\x39\xd7\xbe\x01\x7a\x65\x0d\xa4\xb8\x42\x6f\xfa\x81\x4b\x21\x8f\xd2\x31\x3b\x81\x37\x83\xb9\x36\xc9\x5a\xb8\x2c\x69\x52\x15\x99\x8c\x54\x58\x4d\x79\x8c\x0a\xe0\xeb\x61\x51\xc7\xb5\x07\x79\xec\x70\x4a\x33\x1e\x3b\x85\xb6\xd9\x9c\xdd\xb3\x69\x7c\x3e\xd0\x50\x33\x5a\x34\xfd\xb4\x2a\xfa\x2e\x69\xb4\x4d\xa8\xfc\xc7\x82\xca\x8b\x33\x9e\x6a\x87\xce\x09\xa3\x0d\xb6\xe8\x8e\x5b\xd7\xab\xed\xd1\x29\x02\x59\x93\x0e\xee\x56\xdb\x9d\x03\x02\x2b\x69\xcb\xcd\xa5\xa7\x97\xbe\xdc\x64\xaf\x02\x14\xb8\xd4\xc6\x9c\xc2\xb7\xf9\x2e\xd5\x9a\x3b\x73\xdb\x21\xf4\x4b\x6b\xae\x92\xbb\xaf\xa6\x37\x67\x02\xd1\xb6\x34\xa8\xd6\xdc\x9c\xdb\x2e\xe1\x37\xd9\x9d\x33\x9a\xd8\xec\xeb\x06\xc7\x60\x99\x05\xcf\xf0\xf9\x8c\x13\xd7\xf2\x89\x97\xf7\x62\xa1\x79\xff\x20\x4c\x2e\x34\xb1\x09\x4e\xb2\xf0\xeb\x06\x90\xd8\x4d\x16\xac\x30\x98\xa5\x79\x70\xb3\xd0\x8b\x06\x30\xaf\x52\xb5\x0a\x70\x71\xb9\x7a\x81\x35\x69\xfb\xe2\x91\x35\x6a\xd6\x95\x4c\xd0\x3d\xf6\x9c\x3e\x59\x04\x63\xd5\x85\xc2\xae\xfc\x24\x3b\xaf\x2f\x8c\x24\x46\x99\x96\x3a\x2e\x81\x3a\x38\x5b\x91\x78\x32\xb0\x06\xda\xca\x61\x8b\xc4\xd3\x91\x25\x51\xb7\x98\x0f\x51\x41\xd0\x87\xb8\x50\xde\x5f\xe4\x22\x1d\x59\xf2\x0b\x13\x31\xde\x9f\x76\x10\x80\x92\xc8\x93\x97\x61\x20\xc5\x01\x92\x3c\xa2\xdb\x50\xa3\xb1\x4d\xbe\x45\xd1\x5c\xf1\x5b\x14\xcd\xfc\x5b\x14\x4d\x5f\x02\x3c\x14\x59\x62\xb5\x75\x5a\x46\x67\x25\xe5\xda\x3c\x3a\x7b\xa9\xd6\x26\xd3\xd7\xe6\x72\xdf\xa2\x68\x6e\xc3\x1b\x05\x6b\xae\xd5\xb6\x42\xe6\x97\x52\xad\x8a\xaf\xaf\xa6\x52\x6b\x6e\xd3\x9b\x04\x6b\x2e\xd4\xb6\x4a\xf6\x4d\xd6\x69\xcd\x4d\xbf\x45\x81\xb3\xad\x76\xa1\x0a\xa8\x55\xd6\xb1\x3f\xe1\x41\x28\x76\x4e\x39\x0f\xb8\x40\x4d\xbf\xf6\x31\x92\x28\xa4\x3c\x5e\x63\x78\x2a\xf2\xbd\x7c\x2e\x5a\x58\xeb\xe8\x2c\x00\xe7\x68\x7e\x44\xa1\x28\x23\xd8\x22\xce\x0d\x95\xcb\xa2\x95\x62\x9b\x46\xee\x3d\x5b\x1a\x2d\xa0\x51\x67\x87\xed\x7a\x8d\x1d\x8e\xd1\x9a\xa3\x94\x64\x1d\xe2\xba\x5c\x4c\x96\x93\x2c\x77\xfe\x19\x03\x2d\x72\xfa\xc9\xaa\x9d\x7e\xb2\xe4\xf4\x33\x3e\xfa\x64\x1d\x7b\xd9\xe7\x9e\x29\xca\x47\x9e\xb2\x25\xc8\x9a\xad\x8a\xa8\xa6\x9b\xf0\xff\xfc\xb6\x08\x7f\x2d\xf8\x87\x3e\xe4\x44\xae\x5e\x05\xd4\xac\x82\x7e\xe0\x46\x5e\x80\xf6\x3f\xe0\x6c\xa9\x66\xe7\x7c\x93\xf3\xc0\xbd\x72\x73\x62\x6e\xf5\xba\x6a\xfa\x13\x55\x75\x12\x55\x2e\x98\x87\x52\x38\xe5\x9c\xf9\xd0\x52\x2b\x56\x86\xda\x78\x73\xcc\x2f\xe3\x51\x81\x94\x33\x09\x4f\x52\x2e\x73\x04\x77\x4a\xc4\xa5\x49\x98\x98\x44\x65\x22\x48\x4e\xe0\xda\xf4\xf9\xa5\xbc\x18\x04\x79\x66\xe2\xff\x8c\xd1\xbe\x2b\x55\xc4\x91\xe7\x99\xf0\xac\x84\xa1\x9e\x24\xb1\xda\xc7\x06\x14\xc1\x74\x24\xe1\x74\x7c\x44\x2b\x51\x5b\x3a\x3d\x06\xcd\xc7\x48\x25\x75\x2e\x80\x24\x1a\xcc\x11\x9d\x6d\xeb\x02\x43\x0f\x1a\x7c\x6e\x14\x45\x5e\xc7\xa2\xdd\x04\xb3\xa5\x36\x2f\x5a\x3c\xdd\x12\xa6\x21\x9a\x61\xf1\xd3\xcc\xd6\x0f\x22\x28\xb1\xf8\x12\x57\xf9\xac\x05\x1c\xa6\xbb\xd1\xa4\x47\xc6\x7b\xcb\x0c\x9f\x4e\x30\x94\x3a\x75\x8c\x62\xaa\x57\x4f\xd9\x19\xa7\x69\x6c\x16\x47\xad\x1c\x2f\x0f\xa3\x28\xd3\xfa\x1a\xd4\xfd\xfe\xf7\xab\xd3\xcb\x52\x65\xbf\xbf\x97\x74\x96\xaa\xcd\xec\x52\x45\xeb\xe9\xd5\xd4\xfc\xbe\x79\x75\xf9\x80\x8e\x55\xc2\x30\x95\x0f\x3d\xf7\x01\xed\xaa\xc9\xd5\x55\x3b\x6f\x6f\xcd\x90\x88\x25\xbd\x88\xfa\x5b\xf1\xd2\x43\x28\x36\xd8\x50\x6b\x89\xd5\x36\xd4\x00\x7f\x16\x5a\x5b\x3c\x50\x75\xcf\xaa\xfb\x69\x29\x99\x95\xb4\xd3\xe6\xd1\xd8\x4b\x3b\x6d\xb2\xc5\xd0\x12\x4b\x6d\xa7\x01\xba\xcd\xb7\x96\xd6\xdc\x4e\xdb\x0a\x99\x5f\xda\x69\x55\x7c\x7d\x35\xed\x34\x1d\x83\xb6\xa5\xa5\xb4\xe6\x76\xda\x56\xc9\xbe\xc9\x76\x9a\x56\xc4\xb6\xfc\x51\xd2\xac\xd7\xf3\x5b\x42\xff\x7d\x52\xab\x79\xf2\xed\xbf\x9d\xbf\xa8\xfc\x7b\x08\x5f\x3f\x55\xf9\xa7\x0a\xfd\x06\x84\xbe\x3c\xfd\xf4\x34\xa5\xae\x62\xf5\x7d\xf0\xfa\x67\x2c\xfe\x5b\x84\x2f\x9a\xcf\x57\xfc\x5f\x10\xfe\xdc\xfc\x74\xf5\x7c\x15\xf0\xff\x08\x7f\x3a\xbd\x7c\xca\xf2\x3b\x54\x1d\x2a\x4d\x55\xc0\x3b\x84\xaf\x9a\xe7\xa7\x4f\x53\x03\x53\xa5\xfe\x0b\xc2\xc7\x1f\xcf\xcf\x8f\x2e\xbe\xa9\xfd\x6e\xfc\xac\x29\xe4\x81\x53\x72\xd2\x14\x8a\x5c\xab\x46\x81\x2c\x72\xce\x14\x8a\xd9\x87\x4c\xa1\x48\x3e\x02\x95\xa9\xcf\x46\x0a\x85\x0d\x09\xd4\x23\x8f\x98\xb2\x23\xa1\x04\xdd\x82\x9f\x4f\x04\xd3\xaf\xab\x4f\xcf\xe6\x08\xca\x1f\x43\xb3\xc5\x59\xc0\x99\xbc\x7f\x0c\x8e\x0b\xe6\xcc\x79\xac\x56\x9c\x7f\xc9\xfe\xfb\xa8\xf9\x9f\xa8\x80\xa4\xdd\x97\xf3\xe1\x48\x02\x4d\x8c\xe4\x8a\xcd\x3e\x1b\xcc\x24\x2e\x1c\x24\xae\xa5\xd1\x59\xff\xfe\xe4\xe3\xf1\xd5\xef\xad\x53\xd4\x93\x7d\x28\x68\xea\xe6\x3f\xd5\x48\x84\xea\x22\x2e\x57\xfa\x54\x42\x4d\xdd\x23\x5c\x50\xd9\xc0\x91\xec\x58\xef\xe2\xe2\xa4\xae\x9b\x86\x6a\x65\x8f\x7d\xd7\x03\x82\x2b\xd0\x44\xbd\x66\x00\x72\x78\x7a\x52\x86\x16\xfd\x4f\xc4\x06\x0d\xfc\x4f\xeb\xfa\xc8\x3a\x0e\xfa\x21\x91\x0c\x2a\x72\x0c\xda\xf0\xd5\xb4\x06\x6e\x9e\x36\x28\xd4\x6a\x38\x3f\x53\x61\x6e\xe0\x01\xa3\xb7\x61\xc0\x65\x0e\xf8\x96\xb9\xb2\xd7\x70\xf5\xc7\x2a\x58\xfa\x66\x07\x31\x9f\x49\x46\x3c\x4b\x40\x41\x45\x1b\xbb\xf6\xcf\xb0\xf2\xbe\xb7\xac\x3f\x20\x6c\x34\x4f\xff\x8c\xd1\xea\x78\xc8\xa9\xa7\x5b\x98\x5c\x3a\x91\x44\x0c\xb0\xe2\xe4\x2b\x2f\x3a\x64\xa0\xee\x6d\xf8\xa5\xa6\xff\x01\x2a\x63\x9d\x3f\x2d\x6b\x62\xba\x99\x25\xc0\xe3\xc0\xb2\x6f\xf6\xee\xde\xec\xa5\x38\x40\x37\x1f\xb5\x2e\x3e\x53\x2e\x20\xa8\x8c\x46\x09\x5a\x91\x5c\x58\x6f\xf6\xec\xd0\xef\x22\x79\x1f\xd2\x06\xeb\x93\x2e\xad\xc1\x2d\x9e\xa0\x42\xc2\xd0\xa3\x96\x0c\x22\xa7\x67\x15\x28\xee\xee\xfd\x7c\x07\x3f\x73\xd1\x04\x78\x7b\x4e\x2a\xfb\xfb\x77\xf0\x33\x1f\x95\xfd\xfd\x79\xa9\xbc\xdd\xbb\x83\x9f\xf9\xa8\xbc\xdd\x9b\x97\xca\x3b\xd0\xd8\xbb\x39\x35\xf6\x6e\x8a\xc6\x84\xbc\xf7\xa8\xe8\x51\x0a\x4e\xa9\x6d\x88\x55\x28\xa8\x39\x42\x3c\x84\x1f\x1e\xd7\x98\xef\xd2\x3b\x5b\x01\x9a\x05\x9a\x2c\xba\x7a\x3b\x70\xef\x27\x9b\x05\x32\x08\xad\x36\xe1\xa5\x9d\x81\xf8\x59\xdc\x69\xcf\x7a\x16\xc5\xfe\x75\xa1\x27\x37\xd6\xc6\x53\x8b\x7e\x0f\x69\x61\x00\x98\xf0\x2e\xf3\xad\x76\x20\x65\xd0\x3f\x40\x3f\xe3\xec\x58\x21\xd9\xc3\xf4\x1b\xd8\xe6\x7c\xa4\x31\xf1\xcd\x31\x09\x78\x14\x02\x18\x15\x6a\x2f\x93\xb4\x1f\x7a\x70\x33\xf9\x35\x33\xc8\x4e\xc3\x1e\xaa\xeb\x70\xaa\x43\x0a\x53\x8d\x90\xb6\x7e\xa4\xc7\x40\x3f\x7b\xc5\xf6\xcc\x58\x1f\x12\x6e\x0b\x31\x56\x07\xd7\x28\x2c\x84\xdf\x32\xae\xe3\x6f\xcb\xc9\x4d\x43\x31\xdf\x63\xa7\x19\xa5\x62\x24\xb3\xed\x5c\xec\x2e\x74\x4b\xd3\x56\xd1\x58\x47\xa9\xcc\x7c\xf1\x1e\x54\xd9\x7e\x90\xab\x15\x2c\xa6\x4d\x65\x9c\x4e\x45\x5a\x71\x50\xab\xdd\xde\xde\xda\xa0\x69\x0e\x3f\xb6\x13\xf4\x6b\x26\x34\xd7\xc0\x75\x29\x11\x54\xd4\x94\x30\x42\xfe\xd5\xe9\x87\x8d\x49\x37\xc5\xe3\xcd\xd4\xb4\x8d\xda\x0b\x3c\x7d\xaa\x94\x44\x7a\x52\x4d\xec\xfc\xa5\x92\xbf\xcc\x1e\x1e\x99\xf4\x1f\x54\xa2\x79\x05\x67\xd4\x3e\x1b\xa7\xfa\xac\xf4\x2a\x4e\xa9\xe1\x2a\xe2\x74\x3b\xd5\xf8\x54\x70\x55\x71\xaa\x3f\xaf\xae\xc2\xa7\x86\xab\x88\x93\x55\xe4\x93\xcd\xc1\x67\x28\xaa\xe1\x54\x70\xe3\x38\x85\xc3\x59\x28\xf3\xb1\xf2\x2b\x19\x10\x33\x8a\x0f\x07\x84\x23\x95\x4e\xa0\x06\x8a\x13\x8b\xd1\xe8\x57\x58\x59\xfa\x71\x15\x0c\xe3\xb9\x0a\x12\xdc\x29\x8f\xc1\x5f\x45\xcd\x54\x12\x57\x47\x1f\x3e\x9c\x9e\xb4\x19\x0c\xf6\x99\x5f\x6b\x47\xaa\xe0\xb1\xe1\xd2\xfe\x2a\x20\x55\xf2\x04\xe4\x34\x80\x25\x79\xa0\x07\x55\xfe\xa4\x5f\x81\x4b\x19\xab\xd7\x4c\xdc\x86\x40\xa5\xd2\xa8\xff\x05\x00\x00\xff\xff\x2f\x38\x8c\x00\x96\x6b\x00\x00"

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 27542, mode: os.FileMode(420), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

