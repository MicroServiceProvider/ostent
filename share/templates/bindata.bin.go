// Code generated by go-bindata.
// sources:
// index.html
// DO NOT EDIT!

// +build bin

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x3d\x7b\x6f\xe3\x36\xf2\xff\xef\xa7\x60\x85\x5f\x7f\x68\x7b\x95\xb4\xc9\xa6\x77\x8b\xd6\xf6\x61\x37\xf1\xf5\x84\xdb\x64\x8d\x4d\xb2\x77\x45\x51\x1c\x68\x8b\xb6\xd9\xc8\x92\x2a\x52\x79\x9c\xe1\xef\x7e\x43\x49\xd4\xdb\x96\x25\x4b\xf2\xe6\x90\x05\x92\xb5\x48\xce\x93\x33\xe4\xcc\x90\x8a\xd7\x6b\x93\xcc\xa9\x4d\x90\x12\xfe\xff\x6f\xdf\xe5\x74\x45\x94\xcd\x66\xc0\x5c\x6c\x8f\xd6\x6b\xed\x02\x73\xac\x85\xcd\xd0\xaa\x47\xcd\xc4\x36\x37\x9b\x02\xf4\xd2\x61\xdc\xc6\x21\x3c\x46\x4b\x8f\xcc\x87\x8a\xae\x20\x4e\xb9\x45\x86\x8a\xec\x45\x12\xab\x6c\xd8\x6c\x94\x51\xb1\x6d\xa0\xe3\xad\x84\x2c\x0c\x24\x5e\x0d\x4c\x7a\x8f\x66\x16\x66\x6c\xa8\x2c\x3c\x6a\xaa\x53\xcb\x99\xdd\x01\x5d\x95\x3b\xae\x32\x7a\x85\x50\x7a\xc4\xcc\xb1\x54\xcb\x43\x16\xf6\x16\x44\x3d\x41\x9c\x3c\x72\xd5\xa3\x8b\x25\x57\x46\xe9\x61\xeb\x35\x9d\xa3\x90\x17\x17\x7b\x78\xc5\xb4\x0f\xd8\xd6\xae\xc8\x02\x73\x7a\x0f\x6c\xb1\xa5\xf3\xa0\x8a\x5f\x4b\x6a\x12\xe0\xcf\x62\xd0\x28\x3e\xa7\x1b\x05\xd3\x01\x03\xc0\xc2\xf2\x44\xa2\x5e\x9e\x85\x54\x9d\x7b\xe2\xcd\x2d\xe7\x01\x08\x63\xa9\x9c\x0f\x0e\x36\x11\xbe\x5f\x20\x93\x32\xd7\xc2\x4f\xc8\x01\x95\x3b\x36\x53\x42\x35\x4a\xf5\x44\x2c\xdd\x58\xd4\xbe\x0b\x38\xdb\x6c\x46\xc1\x54\x49\x1a\x92\x09\x55\xfc\x42\xf0\x91\x13\xe8\x9e\x11\xd5\xf5\x08\x02\xa2\x98\xab\x16\x99\x83\xcc\x9a\xa6\xa1\x68\x3a\x25\x6d\xa1\xf1\x90\x67\x7d\x79\x32\x1a\xe8\xa0\x95\x40\x89\xf1\x87\xad\xda\x3c\xe9\x58\x87\xa5\x13\x1d\x75\x42\xb7\x6f\xc9\xde\x15\xb1\x7d\x14\xeb\x40\x7c\x88\x47\xc1\x38\x8b\x26\x0f\x59\xac\xd4\x76\x7d\xae\x2e\x3c\xc7\x77\x95\xf4\x98\xad\xa3\x54\x0b\x4f\x89\x85\xd8\x0a\x5b\x56\x38\xab\xb6\xf3\xe0\x61\x80\x36\x09\x4c\x5f\xac\xb3\x6a\x44\x53\x9f\x73\xc7\x0e\x6c\x21\xea\x0d\x5b\x22\xdc\x8c\xcc\x1c\xdb\xc4\xde\x93\xb0\x0c\x3c\xb5\x88\x99\x38\x4b\xac\x5c\x33\x74\x97\x06\x54\x33\x83\x61\x38\x2e\xb5\xb7\x0b\x69\x6f\xa6\xf6\x81\x30\xa6\xfd\x1d\xc6\x80\x03\xa2\xfc\xbf\x88\x50\x4a\x1f\x28\x23\x4c\x05\xda\xf1\x23\xf7\xf0\xb9\xc0\x01\x53\x5f\xc0\x3e\x52\xab\xe0\x6f\x80\x6e\xa8\x89\xac\x0e\x7a\x50\xcb\xa5\xe3\x91\x0e\xd4\x12\xa0\xad\x50\x4b\x05\x74\xa8\x14\xf4\xa7\x6a\xb5\xe4\x1a\x06\x7a\xda\x5f\xfa\x71\x1e\xcf\x79\x60\x3d\xfb\x8e\xad\xbd\x9b\x32\xc7\xf2\x39\xe9\xd8\x89\xae\xe2\x45\xfb\x30\x27\x62\xfe\x6c\x06\xf0\x79\xab\xc9\xa3\xaf\xeb\x4c\x79\xf8\xbe\x9d\x29\x45\xff\x20\x67\xaa\x56\x4f\x03\xa7\xca\x43\xb7\xe2\x54\x03\xdd\xb7\xe4\x86\x2b\x06\x15\xb6\x50\xf2\x47\x71\x17\x95\xc6\x8a\x5e\x87\x5b\xe6\x3e\x3b\x25\x82\x80\x83\xd3\x19\x06\xe5\x70\x8f\xba\x24\xd9\x39\xcb\x87\xf3\x25\xc1\xe0\x2a\x99\xc0\x82\x3c\xc2\x83\x89\x60\xdf\x0f\xf5\xac\xc2\x9e\x3f\x21\x1e\x75\xcc\x28\x8a\xa8\x18\x9d\x09\xb8\xd0\x67\x6c\xf9\x64\x37\x20\xd0\x8f\xfa\xd3\x1a\x4c\x85\x16\x16\x8e\xcd\x63\xbd\xf6\xb0\xbd\x20\xe8\xff\x2c\x8c\x7e\x1c\xc6\xfd\xda\x07\xca\x84\x0d\x6f\x09\x1f\x2a\xe5\x7b\x55\x66\xe1\x89\x1c\xe8\x81\x9a\x7c\xa9\xbe\xf1\xc8\x4a\xac\x2b\x40\x5c\x0b\x35\xb2\xd9\xac\xa2\x19\x6d\xa0\x9a\x10\x51\xa0\xa0\x38\xe0\xde\x82\x00\x22\xb0\x9c\x96\x22\x6b\x88\xd5\x92\x3c\x49\x86\x92\xdf\x49\x68\x97\x81\x2d\x04\xdb\x2b\x10\xaf\xbf\x68\xfb\x92\xac\x7a\x08\xb7\x81\x8a\x13\x6e\x0b\x7b\x07\xdb\x82\xb1\x36\xa2\xed\x90\x74\x87\xb1\xf6\xa1\x1a\x7c\x09\xb6\x77\x05\x0c\xa0\xdd\x9e\xa2\x6d\x41\xa9\x8b\x70\x3b\xc1\xdb\x30\xde\x4e\x10\x1c\x29\xe0\x0e\x18\xe8\x20\xe2\x4e\xf0\x36\x0a\xb9\x13\xf0\x97\x98\xbb\xc2\x85\xfa\x0e\xba\x03\x92\x1d\x46\xdd\x09\xfe\x86\x61\x77\x82\xe0\x48\x71\x77\xc0\x40\x87\x81\x77\x82\xbf\x51\xe4\x9d\x80\x1f\x27\xf4\xce\xd8\xec\x97\x10\x7b\xcb\x30\xa2\x7e\x80\x79\xe3\x70\x6c\x35\x01\xbc\x65\xa4\x51\xb0\xff\x37\x8f\x54\xc4\xfa\x5b\xe9\x7d\x7d\x60\x8e\x00\xb1\x6b\x31\x49\x80\xc6\x24\x4b\x80\x87\x43\xd3\x04\x88\xd8\x05\x96\x7f\x50\xdb\xac\x8a\xd8\xb7\x86\xfc\x02\x41\x30\x31\x07\x61\x10\x33\x74\x10\x02\x31\x55\x0d\x10\xa0\xe9\x42\xf5\x19\x71\x67\x5c\x41\x26\x68\x35\x7a\x18\x26\x6c\x4d\x66\xa0\xe1\x34\x9f\x41\x43\xc5\xf4\xf6\x93\xdf\x98\xf3\x1e\xd3\x9b\x8b\x79\x0f\xd9\xcd\x05\x65\x77\xc8\x67\x18\x8c\xbd\x4e\x86\x03\xbc\xb5\x91\xe0\x24\xd4\x3b\x4c\x72\x0e\xd4\xe3\x4b\x8e\xb3\x2b\x40\xbb\x98\xf7\x94\xe2\x00\xa1\x2e\x32\x9c\x18\x6d\xc3\x04\x27\x86\x3f\x52\x7e\x23\xe8\x77\x90\xde\xc4\x68\x1b\x65\x37\x31\xf4\x4b\x72\xb3\xdb\x77\xfa\xce\x6d\x04\xc5\x0e\x53\x9b\x18\x7d\xc3\xcc\x26\x86\x3f\x52\x62\x23\xe8\x77\x98\xd7\xc4\xe8\x1b\xa5\x35\x31\xf4\x71\xb2\x9a\xb4\xb1\xf6\x90\xd4\xac\xd7\xfa\x77\xc8\x75\xee\x08\x72\x7d\x8f\xce\x9f\x66\x8c\xfd\x98\x01\x31\x3d\xc7\x15\x3e\x9f\x09\x0c\xb0\x47\x20\xac\xd4\x23\x3f\x42\xdf\xe9\xd1\xed\x94\xaa\xc8\x54\x2e\x01\x29\xdd\xad\xd7\x0f\x94\x2f\x11\x04\xea\xe4\x31\xab\x89\xcf\x72\x3e\xee\x84\x1e\x5e\x95\x1a\xd7\x07\x18\x12\x1a\x51\x44\x3a\x6a\x8b\x26\x3d\x33\x6d\xa3\x0b\x72\x4f\x67\x24\xcd\x28\x8c\x3e\x17\xb2\x44\xc3\x93\xc0\x16\x67\x59\x24\x75\xd3\x88\xa6\x82\x9e\xb4\x22\xe8\xa5\xe3\xdb\x1c\x12\xc3\xfe\x24\xcd\x84\xdb\x75\x85\xfe\xa1\x15\xa1\xc3\x1c\xfa\x99\x88\x7c\xd6\x8a\xc8\x41\xf6\xff\x4c\x24\x3e\x6d\x45\xe2\x77\xf7\x98\x3e\x9b\x49\x7e\xd3\xd6\x24\x7f\xdd\x91\xc4\x95\xb5\x1a\x73\x5e\x2c\xd5\x98\xf3\xa4\x52\x63\xce\x0f\x2b\xd4\xe4\xf3\xe5\xf5\x1a\xd0\x6b\xb0\x4e\x5f\xe1\x55\xcd\xa2\x47\x82\x04\x45\x58\xa8\xd7\x1c\x4b\xba\x90\xb2\xf0\xf0\x53\x4e\x92\x30\xcd\x4e\x15\x6a\x80\x5e\x59\xa9\x28\x4a\xfe\x0d\xdb\x31\x09\x43\x5c\x8c\x88\xc7\x87\x8d\x09\x40\x3f\x5c\x96\x94\xa3\xb2\x4c\xfa\x4c\x44\xd0\x92\x47\x3f\x33\xbc\x1f\x16\x03\x1f\xdf\xc9\xe3\xdc\x23\x24\xe1\x71\x9e\x29\x90\xb5\xc0\xe3\x8e\xd2\x59\xa8\xc1\xb0\x72\xb6\x8f\xae\x4b\x4a\x6a\x05\x75\x7f\x9d\x51\x77\x16\xe2\x0b\xa8\xc5\xcd\x5c\xbf\xc7\x62\xdc\xf9\xe4\xb6\x87\x6a\x1c\x50\xa9\x55\x86\x13\x5c\xb5\x51\x87\x03\x3c\x1d\x16\xe0\x0e\xd5\xdd\x4b\x05\x6e\x57\x15\x01\xb4\xdb\x53\x09\x4e\x50\xea\xa2\x06\x97\xe0\x6d\x58\x84\x4b\x10\x1c\xa9\x0a\x17\x30\xd0\x41\x19\x2e\xc1\xdb\xa8\x0e\x97\x80\xbf\x14\xe2\x2a\x5c\xa8\xef\x4a\x5c\x40\xb2\xc3\x52\x5c\x82\xbf\x61\x2d\x2e\x41\x70\xa4\x62\x5c\xc0\x40\x87\xd5\xb8\x04\x7f\xa3\x72\x5c\x02\x7e\x9c\x7a\x5c\xc6\x66\xbf\x84\x5b\x06\xe7\xa0\x8b\x86\x47\xf7\x5e\xc5\xe1\x6e\x39\xe0\xf5\x13\x6b\x04\xf7\x4f\x4c\x79\x23\x40\xc3\xb4\x0e\xbe\x65\x00\x51\x6b\x31\x75\x85\xc6\x24\x77\x85\x87\x36\x92\x57\xb9\x98\x42\x04\x2f\x30\x5e\x1d\x76\x54\x2f\x6d\x36\x97\x76\x08\xcc\x62\xfe\x92\x23\xfb\x4c\x8b\x54\x96\x34\xb0\x96\x29\x83\x01\x64\x09\xcb\x86\x8e\xe9\x0a\x03\xca\x12\x8e\x5b\x5a\xa0\xac\x52\x1b\x3c\x94\x91\x5d\x1c\x08\x4b\xcc\x72\x10\xb7\x7c\x11\xf7\x24\x68\x9f\xf7\x24\x8c\x3e\xee\x49\x18\x36\x87\x46\x48\xa3\x58\xad\x04\xcd\x68\xe7\x9e\x44\x42\xbd\xc3\x34\xed\x40\x3d\xbe\x64\x69\xbb\x42\x4c\xa3\xaf\x7b\x12\x46\x37\xf7\x24\x8c\x03\xef\x49\x18\x47\xbe\x27\x61\x74\x73\x4f\xc2\x38\xe8\x9e\x84\xf1\x72\x4f\x62\x3f\xdf\xe9\x3b\x3b\x33\xba\xbd\x27\x61\x1c\x78\x4f\xc2\x38\xf2\x3d\x09\xa3\xdb\x7b\x12\xc6\x41\xf7\x24\x8c\xe3\xde\x93\x30\xfa\xbd\x27\x51\x99\x96\xc5\xa1\x43\xa3\x8c\x67\x52\x76\x44\x70\xe1\x39\x2e\xfb\x7e\xec\x79\x8e\xc7\x90\x61\xeb\x1f\x7d\x8e\x5c\xe2\x45\xae\xac\x6c\x45\x7e\x9a\x8e\x77\x33\x4b\x0a\xfa\xe0\x80\x35\x18\x1f\x91\xcb\xca\x08\x4e\xf0\xec\x8e\xf0\xb6\x68\xc5\xd8\xb6\x91\x7b\x4f\x5b\xa3\x05\x34\x06\x74\x34\x1d\xe8\x74\x94\xa3\x55\x3f\x75\xb4\x09\xc4\x9b\xc5\xe4\x91\xa6\xce\x3d\x83\x21\xad\x1f\x7d\xd2\xb9\xd6\xca\x89\xa5\x44\x66\x4c\xf6\x44\xb5\x5d\xb1\xff\x6f\x4f\x99\xfb\x53\x66\xd6\x82\x73\x4e\x64\x06\xb6\x49\x42\xdb\x5c\x39\xa6\x6f\x39\xe8\xec\x67\x25\x51\x44\x72\xd4\x57\x84\x83\x49\x4f\xc1\x44\xdc\x06\xd6\x6e\xd8\xe5\x2c\xcb\x25\x20\x1e\x28\x6c\x46\x01\xbf\xcb\x39\xbe\x7e\x00\x70\x19\xa3\x62\x64\x39\xa7\xd0\x13\xb3\xfa\x7d\x89\xa0\x44\xba\x6d\x11\x3e\xf4\xe8\x94\xa8\xfa\x76\xf8\x52\x06\x42\x04\x69\x0e\xa2\xff\xd2\xd3\x95\x16\x5e\x4c\xf7\x37\x52\x03\xc4\xe2\x38\x52\x36\x52\x5e\x2b\xdf\xa2\x6f\x1c\xaf\xa4\x57\x2a\xe9\xdb\x6d\x7d\x00\x9a\xeb\x93\x82\x45\x68\x8b\x5d\x12\x6e\xb3\x11\x06\x12\xcf\x5a\x71\xd5\x13\x7a\x4b\x2d\x09\x52\xf1\x29\xd6\xf7\xb0\x93\x82\x28\xb5\x8d\xa5\x02\x43\x96\xe5\xdc\x32\x56\xe0\x79\xbb\xc5\xc4\x4b\xfc\x36\xf8\x0a\x8b\x19\x27\xb6\xb2\x13\x41\x89\xc5\xb4\xb8\x3e\x54\xb9\xbe\x1b\xef\x2e\x45\x8b\x8e\xf6\x8a\x0a\x9f\x90\x18\x4a\x9d\x22\x42\x51\xe1\x15\x85\x9d\x6e\x9b\xc6\xaa\x38\x9a\xa4\x78\xd9\x8d\xa2\x4c\xeb\x3d\xa8\xfb\xfd\x2f\x37\xe3\xeb\x52\x65\xbf\x7f\xe2\xa4\x4a\xd5\x21\x74\xa9\xa2\x03\xf0\xfd\xd4\xfc\xde\xb8\xb9\xde\xa1\x63\x11\x00\x6c\xe5\x23\x80\xdd\xa1\x5d\x01\xbc\xbf\x6a\xfb\xa9\xc7\xb9\xac\xc7\x7a\xdc\x84\xf5\x50\x8f\x9b\x78\x8e\xc8\x20\x6a\x96\xe3\x80\xb5\x36\xca\x71\x31\xf1\x0e\xab\x71\x07\x6a\xf1\xa5\x1a\xb7\xab\xa2\x30\x61\x3d\x55\xe3\x80\x50\x17\xd5\xb8\x18\x6d\xc3\x6a\x5c\x0c\x7f\xa4\x6a\x9c\xa0\xdf\x41\x35\x2e\x46\xdb\xa8\x1a\x17\x43\xbf\x54\xe3\x76\xfb\x4e\xdf\xd5\x38\x41\xb1\xc3\x6a\x5c\x8c\xbe\x61\x35\x2e\x86\x3f\x52\x35\x4e\xd0\xef\xb0\x1a\x17\xa3\x6f\x54\x8d\x8b\xa1\x8f\x53\x8d\x4b\x1b\xeb\xff\xe8\x5b\x4b\x8d\x5f\x05\x98\xb0\xb6\x5e\x60\x9a\x18\x17\xcf\xe1\xdd\x07\x21\x70\x3b\x2f\x32\xdd\xf6\x2a\x70\x7d\x29\xdb\x79\xa9\xe5\xf6\x7a\xfc\xe9\xb9\xcc\x6b\x3b\xef\xb4\x4c\x9e\x8d\xbc\xed\xbc\xa8\x75\x65\x3c\x17\x79\xdb\x79\x17\xef\xb3\xf1\xe9\xe6\xb9\x48\xfc\xe7\x56\x24\xfe\x34\xbe\xee\x5d\xe0\x19\x11\x67\x4e\xf5\x25\xfe\x4b\x3b\xef\x5b\x1a\x97\xe3\x2f\x7a\x71\x7e\xdb\x8a\x98\xe7\x1f\x2f\x2f\xdf\x5d\x1d\xbe\x0d\x6d\x39\x6c\x72\x3d\x67\xc6\x8a\x87\x4d\x2e\x4b\x0e\x9b\x82\x21\x6d\x1c\x36\x25\x87\x43\x2e\x68\xc8\xb8\x68\xfc\x67\x89\x00\xfc\x76\x7f\xf0\x04\x86\x11\xef\x10\x9a\x13\x8f\x3a\x1e\xe5\x4f\x87\xe0\xb8\xa2\xb3\x26\x7f\x4d\x29\x86\xbf\xa6\xff\x39\x08\xfe\x13\x61\x10\x1a\xdb\xbc\x1e\x0e\xe9\xe9\x11\x92\x1b\x5a\x7d\x4a\x98\x48\x9c\x39\x52\x6c\xab\xf4\x39\xf8\xea\xe2\xe3\xf9\xcd\x2f\x93\x31\x5a\xf2\x15\xe4\x0a\x83\xf0\x3f\x51\x57\x84\x08\x3d\x0a\xf9\x57\x84\x43\xfa\xbb\xc4\x1e\x23\x7c\xa8\xf8\x7c\xae\xbe\x95\xd9\x40\x50\x5e\x2c\xf9\x8a\x09\x04\x9f\x40\xd8\x81\x1e\x0e\x48\xe1\x59\x72\xee\xaa\xe4\x0f\x9f\xde\x0f\x95\x7f\xa9\xb7\xef\xd4\x73\x67\xe5\x62\x4e\x21\x79\x56\x40\x60\x5b\x80\x0d\x15\x63\x3c\x24\xe6\x42\xe6\x11\x21\xa4\xc0\x3c\x54\xee\x29\x79\x70\x1d\x8f\xa7\x06\x07\x7f\x2c\x78\x68\x06\x7f\x16\x40\x0d\x1e\xbe\x87\x35\x85\x72\x8a\x2d\x95\x41\x52\x42\x86\x27\xda\x6b\x70\xae\xaf\x54\xf5\x57\xf0\x58\x63\xfc\x5b\x84\x56\x2c\x32\xc8\x23\x56\x50\xd6\xf4\xf8\xcc\xe7\x88\x02\x56\x45\x7e\xc1\xc6\x1c\xdf\x8b\x67\x0d\x7e\x09\xf0\x5f\x41\x65\x74\xfe\x9b\xaa\x16\xc0\x43\x28\x06\x46\x05\x93\xf7\xe6\xf4\xf1\xcd\x69\x8c\x03\x74\xf3\x31\xd0\xc5\x67\xe2\x31\xea\xd8\x9b\x8d\x44\xcb\xe4\x07\xf5\xcd\xa9\xe6\xda\x0b\x05\xf1\x27\x17\x24\xbc\xc2\x57\x4a\x81\x02\x76\x5d\x8b\xa8\xdc\xf1\x67\x4b\x35\x43\xed\xe4\xf4\xf5\x23\xfc\xd4\xa2\x07\xe3\x03\x82\x35\xa8\x9c\x9d\x3d\xc2\x4f\x3d\x2a\x67\x67\x75\xa9\xfc\x70\xfa\x08\x3f\xf5\xa8\xfc\x70\x5a\x97\xca\x5b\xd0\xd8\xdb\x9a\x1a\x7b\xbb\x45\x63\x8c\x3f\x59\x84\x2d\x89\x48\x49\xc3\xe9\x13\x9e\xae\x43\x26\xbb\x0b\x3f\x74\xeb\xc1\xae\xa7\x89\x81\xa1\x73\x4a\x87\x1b\x4c\x1d\xf3\xa9\x98\x6c\x73\xc7\x55\xa7\xd8\x2b\xcd\xac\xa3\xbe\xa8\xf2\x9e\x94\x02\xb2\x65\xeb\xcc\xd6\x9b\xab\xb6\x09\x87\x3f\x4d\x1d\x24\xac\xb0\xb7\xa0\xb6\x3a\x75\x38\x77\x56\xea\x6b\xb9\x33\x05\x77\xab\xc3\x43\x92\x61\xe1\xab\x69\x24\xb8\xef\xc2\x30\xc2\xc4\x0e\xc5\xc9\xca\xb5\xe0\xa1\xf8\x3d\x36\x48\x8b\x17\x33\x34\x08\x16\xc9\x60\x15\xa1\xa2\x7e\x30\x0d\xba\x82\x36\x50\xcb\x69\xb6\xd8\x91\xab\x12\xc2\x63\x66\xe5\x0c\x96\x4c\xdf\xcd\x2c\xaa\x65\x5c\x47\x5f\xc7\x93\x02\x43\x11\xdf\xb9\x43\x8d\x52\x31\x24\xb4\x96\x5a\x91\x33\xb5\xcc\xb8\xf0\x92\xab\xcf\x94\xcd\x5a\x3e\xe0\xad\x9a\xb6\xf8\x0b\x80\xc4\x52\xca\x7e\xd4\xf5\x87\x87\x07\x0d\xf4\xea\xc1\x8f\x36\x73\x56\x7a\xb8\xf6\xea\x60\x9f\x04\x33\xc2\x74\xc1\x3a\xe3\x7f\x9d\xad\xdc\x61\xd1\x16\x95\x7c\x61\x33\x2e\x69\x2e\x1d\x4b\x5c\x48\x89\x4c\x01\x6c\x40\xae\xe9\x78\x3f\x69\xe5\x46\x03\x4b\xae\x4d\xd0\x37\x16\xb1\x91\x36\x7e\x14\x6b\x37\xb5\x17\xdf\xc6\xb5\x94\xea\x63\xb6\xfc\xa8\xe8\x4c\x48\x19\x6d\x55\xad\x3c\x35\x8a\x8f\x0c\x13\x5e\xeb\xd5\xaf\x76\x80\xec\x75\xa3\xec\x54\x19\xc5\x22\x23\xee\x94\x1c\xfc\x4e\x31\xec\x73\x89\xd6\x85\xb9\x65\x35\x55\xf3\x9d\x78\x98\xa7\xb1\x6d\xba\x0e\x15\x33\x95\x09\x16\xa2\x98\x14\x40\x9c\x20\x2a\x4d\x51\xa8\x94\x76\x0f\x39\x21\x4c\x11\xa8\x6b\xdd\x7d\x7a\x9d\x80\x49\xa6\x77\xc6\x38\x79\x6f\x2a\x1a\x5b\x2a\x06\x12\x82\x94\xb9\xbe\x85\x8b\x4b\x15\x2a\x71\x72\x31\x2e\xf4\xf0\x84\xca\x36\x9c\xe2\x2f\xf9\xef\xb3\xfe\x05\xe3\xf6\xc4\x69\xce\xf7\xe3\x53\x8c\xdb\x17\xa7\xf8\x2b\x00\xfb\xf0\x19\x8c\xdb\x13\x27\xdd\x93\x4f\x5a\x83\x4f\x97\xed\x87\x53\x8c\xcb\xe3\x64\x33\x70\x61\x9e\xde\x8d\x7f\xc7\xf7\x38\x6c\x55\x46\xf7\xd8\x43\x22\x58\x45\x43\x59\xc0\xdf\x6c\x7e\x02\x93\x0b\xba\xf7\xc1\x90\x8f\x84\x11\xf3\x66\xe5\xbb\xfc\xef\x4c\x0f\x53\xc4\x9b\x77\x3f\xff\x3c\xbe\x98\x52\x68\x5c\x51\x5b\x9f\xfa\xb6\x69\x11\x0d\x3e\x6a\xbf\x33\x79\x3a\x0d\x58\x64\x47\xd0\x18\x5d\xa9\x4a\x31\x36\xd0\xc3\xc8\x00\xf6\x44\x11\xa4\xff\x37\x00\x00\xff\xff\x9e\x6b\xe8\x8e\x62\x6e\x00\x00"

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 28258, mode: os.FileMode(420), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

