// Code generated by go-bindata.
// sources:
// index.html
// DO NOT EDIT!

// +build bin

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xe4\x5c\x6d\x73\xdb\xb6\xb2\xfe\x9e\x5f\x81\xf2\xa6\xf7\x43\xa7\x94\x6a\xc7\xe9\xcd\x4d\x2d\xdf\x71\x22\xb7\xe5\x34\x76\x34\xb6\x9c\x7b\x3a\x9d\x4e\x07\x22\x41\x09\x35\x45\xb2\x24\x24\xdb\xd5\xd1\x7f\x3f\xbb\x00\xf8\x2a\x91\x7a\x21\xeb\x44\x49\x66\x62\x51\x04\xf6\xc1\x2e\xb0\xfb\x60\x01\x82\x3a\xfd\xaa\xff\xfe\xed\xf0\xd7\xc1\x05\x99\x88\xa9\xf7\xec\xec\x54\x7e\x10\x02\x17\x8c\x3a\x70\x81\x97\x53\x26\x28\xb1\x27\x34\x8a\x99\xe8\x19\x33\xe1\x9a\xaf\x0c\x5d\x24\xb8\xf0\x98\xbc\x86\x6f\x8b\x45\xa7\x4f\x05\xed\xfc\x7c\xb5\x5c\x92\x20\x16\xcc\x17\xa7\xdd\xac\x86\x06\x9a\x08\x11\x9a\xec\xaf\x19\x9f\xf7\x8c\x7f\x99\xb7\xe7\xe6\xdb\x60\x1a\x52\xc1\x47\x1e\x33\x88\x1d\xf8\x28\xd6\x33\xac\x8b\x1e\x73\xc6\xcc\xc8\x4b\xfa\x74\xca\x7a\xc6\x9c\xb3\xfb\x30\x88\x44\xae\xf2\x3d\x77\xc4\xa4\xe7\xb0\x39\xb7\x99\x29\xbf\x7c\x4b\xb8\xcf\x05\xa7\x9e\x19\xdb\xd4\x63\xbd\x23\x0d\xb4\x58\xfc\x3c\xbc\x7c\x47\x8c\xd3\xaf\x8c\xe5\xd2\x34\x7f\xe3\x2e\xb1\x2e\x7e\x3f\x3b\xf5\xb8\x7f\x47\x22\xe6\xf5\x8c\x78\x02\xd8\xf6\x4c\x10\x0e\xf0\x06\x99\x44\xcc\xed\x19\x5d\x97\xce\xf1\x7b\x07\xfe\xac\x43\xfa\x8d\xf9\x0e\x77\x7f\x37\xcd\x3c\x92\x02\x88\xf9\xdf\x2c\xee\x19\x2f\x8e\x1f\x5e\x1c\x97\xe1\xe2\xe4\xc2\x7c\x71\xdc\x09\xfd\xb1\x41\xc4\x63\x08\x26\xf2\x29\x1d\xb3\x2e\xde\xd0\xe6\x67\xa0\x34\x0c\x3d\x66\x8a\x60\x66\x4f\xcc\x42\x03\x47\xc7\xdf\x3d\xc0\xff\xea\x26\xa0\xb0\xb3\x23\xe4\xc9\xc9\x03\xfc\xaf\x81\x3c\x39\xd9\x15\xf2\xe5\xf1\x03\xfc\xaf\x81\x7c\x79\xbc\x2b\xe4\x2b\x30\xfc\x55\x9d\xe1\xaf\x2a\x0c\x8f\xc5\xa3\xc7\xe2\x09\x63\x22\xe9\x78\xc1\x1e\x44\xd7\x8e\xe3\x14\x0c\xae\xbb\xdc\x77\xd8\x43\x07\xef\x6a\x84\xd8\x8e\x78\x28\xf2\x22\x7f\xd2\x39\x55\x77\x8d\x72\xa0\x90\x38\xb2\x01\xe8\xcf\xb8\x1b\xa1\xd3\x47\x0c\xae\x8e\x3b\x47\x9d\xa3\x57\xc9\x8d\xce\x94\xfb\x9d\x3f\xa1\x4d\x07\x82\xc7\x9c\x52\xee\xab\xfa\x8b\x05\x78\x67\x67\x78\xfe\xd3\x4f\x17\xfd\x11\xf7\x97\x4b\xa8\xa7\x95\x51\x12\x8b\x05\xf3\x62\xb6\x5c\x42\x0b\xdd\x29\xf7\xee\x74\xa1\x2c\xf0\x9d\xe5\xd2\x48\x02\xf3\xb4\xab\x94\xd3\xfa\x77\x75\x6c\x9f\x9d\x8e\x02\xe7\x51\xdf\xf4\xe9\x9c\xd8\x1e\x8d\xa1\x47\xe1\x72\x44\x23\xa2\x3e\x4c\x87\xb9\x74\xe6\x89\xe4\x6b\x2c\x20\x56\x6d\x18\x88\xd0\x20\x51\x00\xa1\x85\xd5\xf9\x18\x6e\xc2\x98\xa4\x0d\x3a\x3c\x45\xc3\x28\x05\x9b\x58\x64\xba\xde\x8c\x3b\x49\x9d\x52\x2d\x8d\x8e\x9a\xb1\x08\x22\xdb\x33\xa7\x8e\x79\x44\x42\xea\x38\xdc\x1f\x9b\x1e\x73\x81\x46\x92\x21\x48\xe4\x47\x33\x21\x02\xbf\x04\x21\x82\xf1\xd8\x63\x08\xe1\xd1\x30\x66\x4e\x32\xb6\xaa\xb2\xee\x65\x55\x09\x95\x53\xb5\x92\xdb\x34\x1a\xe3\xd0\xfd\x97\xc6\x4a\x8b\x73\xcd\x4a\x0f\x08\x69\xda\x6c\x1c\x99\x81\xef\x3d\x16\xab\x40\xa5\xa1\xd2\x23\xeb\x1d\x18\x05\x10\xab\x41\x92\xde\x0a\xcd\xae\x40\x7d\x32\x92\x5d\xd5\x89\x85\x41\xa0\x84\x3b\x3d\x63\x02\x3d\x5b\x1c\x87\x51\x44\x7d\x07\xee\x71\x70\x14\x19\x69\x3d\x63\x4a\x1f\x14\x3d\xbf\x26\x47\xc7\xf6\x24\x8d\x32\x18\x22\x9c\x25\x00\x05\x66\x0d\x64\x79\x92\x9f\x4a\x4a\x9d\x9f\x2f\x3a\xed\xd2\x82\x2e\x5d\xf0\xa8\x92\x7f\xa1\x72\xe5\xd1\xcc\x5c\x53\xdd\x20\x35\xc3\x7d\x76\x3a\xf3\x72\x96\x25\x55\xe1\xa3\xec\x14\x1e\x4f\xea\x51\x5b\xf0\x39\x5b\xed\x52\xaa\x0d\xc6\x29\x30\x7e\xdd\xed\xde\xdf\xdf\x77\xc0\xe2\x08\xfe\x77\xec\x60\xda\x55\x73\x26\xf0\x82\xc7\x68\xcc\xe2\xae\x47\x05\x8b\xc5\xff\xd9\xd3\xb0\x97\x58\xfd\xe1\xe2\xfa\xc6\x7a\xbf\xd2\x2b\x12\x3f\x99\x72\xe9\xea\x58\x7a\xbc\x52\xd9\x24\x6c\x80\xc7\x48\xee\x1a\x88\x28\x1a\x73\x1f\x83\x8e\xb8\x3c\x8a\x85\xbc\xbb\x6a\x93\x1d\x38\xac\x04\x85\xb7\x80\x65\x57\x3a\x40\xaa\x98\x0e\x6d\xdf\xba\x19\x5e\x5b\x6f\x70\x10\x51\xa0\x65\x9d\x9b\x2a\xca\xc3\xff\xf6\x47\x71\xf8\x83\x0a\x16\x74\x22\xf0\xe3\x95\x6a\x39\x77\xb4\x06\x68\xc9\x4a\xcc\x68\x5b\x3e\x41\x0b\x67\x2b\x16\xce\xea\x2d\xbc\x3d\x34\x0b\x3d\x5a\xb6\xd0\xa3\xb5\x16\xbe\x3b\x6f\xc1\xc2\xee\xcc\xab\xe3\xa4\xdc\x57\xf8\x02\x46\xe8\xf9\x77\xf3\x8c\x59\xa8\x13\x05\xf7\xe5\x99\x14\x0d\x9c\xb2\x69\x9e\xdd\x70\x12\x3d\x49\x66\xd3\xc0\x75\x21\x2f\x31\x8f\x0a\xec\xb6\x58\x08\x36\x0d\x91\x68\x88\x01\x33\x3d\xb4\x1a\xbf\x7e\xad\x2e\xfe\x80\x7e\x60\x9e\x44\xec\x60\xbf\xac\xe7\x56\xc7\x2d\x37\xf8\xb2\x59\x83\x08\xb8\xa6\xbd\x42\xbf\x6d\xee\x08\x3b\x9c\xb5\xdc\x11\x12\xb1\xa6\x23\x78\xdb\x1d\xc1\x5b\xe9\x88\x30\x2e\xab\x75\xf4\x5d\x33\xbd\x10\xb1\xb9\x5e\xf3\x71\xdb\x7a\x21\xe2\x26\xbd\xd2\x2f\x1b\xb2\xf8\x44\x60\x0e\x79\x30\x52\x03\xe9\x25\xf3\xd6\x72\xf9\x43\x39\x9d\xd6\x59\x34\x26\xd6\x72\x11\xbd\x58\x74\xbf\x79\xf6\x4d\x77\xb9\x5c\x2c\x94\x7e\x39\x85\x47\x14\x56\xb5\x0e\xae\x41\x30\xa5\x85\xa5\x63\x92\x14\x00\xfc\xcf\xf0\x89\x2b\x67\xff\xad\xc7\xed\xbb\xde\x42\x4c\x78\xdc\x99\x40\x16\xe5\x31\x79\x67\x09\x3a\xc8\x2e\x5b\x2e\xb1\xfa\x5b\x75\x09\x2d\x3f\x4b\xb3\xba\xac\x82\xf1\xe0\xd1\x11\xf3\x88\xfa\x48\xb2\xf8\x74\xf1\xda\x79\x83\x8a\xe4\xe8\xee\x0c\x0d\x1c\x42\x37\xa8\xac\xea\x4c\xaf\x21\xb6\xb3\x25\xe2\xe3\x49\x9b\xc6\xa4\xaa\x90\xc6\x66\x6d\x6b\x8c\xf6\x24\x88\x72\x70\xd8\xd8\xc0\x3a\xf7\x5c\x4c\x08\x7e\x03\x67\x44\xcf\x02\x78\xfc\xa3\x16\x5d\x8b\x05\xe4\xb7\x63\x46\x9e\xf3\x6f\xc9\x73\x3b\x88\x18\x79\xdd\x23\x6a\x1a\x79\x3b\xb8\xed\xbc\xe3\x31\xf6\xa4\x88\x40\xf7\x73\x21\xa2\x5f\xd8\x23\x41\x52\x32\x01\x6f\xf4\x68\x5e\x19\x4a\xa8\x73\x25\x6d\x3e\x3b\x15\x4e\x12\x0d\x72\x12\x94\x1d\x4a\xe4\xa5\x1f\xdc\x47\x34\x4c\x2d\x4c\xc5\x4e\xbb\xc2\xa9\x14\x4d\x97\xaa\xa5\xde\x9b\xc5\x2c\x64\x91\x0d\x69\xa2\x4a\xe7\xd4\xb2\x27\xbb\xdb\x4b\x1a\xb8\x8d\x59\x24\x55\x2b\x34\xab\xee\xe6\xa6\xc8\xb3\x7f\x56\x8b\x9b\xc7\x78\x55\x09\x79\xf3\xe9\x74\xf8\x7f\xca\xc5\xaa\x12\xea\x6e\xdb\x5a\x98\xdc\x9f\xb3\x28\x5d\x8e\xae\xd1\xc6\x82\xf8\x59\xd5\x46\xdd\x5d\xab\x4d\x57\x44\x39\xff\x2f\x7e\x6c\x13\x0d\x82\xe2\xc6\x1c\x56\x7a\x1e\x66\x2e\x3e\xa0\x11\x9d\xe2\x30\xc8\x62\xb0\x48\xc6\xef\x55\xe0\xff\xcd\xa2\x80\x3c\x0f\x31\x06\x7c\x62\xa8\x52\xf9\xd7\x9c\x04\x60\x9a\x41\xd2\x45\x97\x39\xe1\x8e\xc3\x7c\x23\x09\x80\xdc\x86\x23\xa8\x9c\x10\xb6\x98\xe4\xa9\x3c\xfd\x86\x05\x55\xbd\x2c\xcb\xd1\x53\xbf\xde\x45\x00\xbc\x6a\xa7\xfa\xe8\x00\x3b\x09\xe0\x18\x15\x05\xba\xda\x4e\x69\x58\xb2\x25\x23\xb2\x3d\x99\xba\x19\x2f\xe1\x29\x35\xe3\x89\x6c\x0a\x92\x9d\xbd\x0b\xe3\x39\xee\xe8\x11\x96\x99\x7f\xec\x48\x7b\x0e\x8f\xef\x32\x7f\xe8\xff\x28\x41\xd6\xd3\x9e\x6e\x41\x53\x9f\xc3\x23\x5c\xe2\x1b\x0a\xa2\xd3\xe7\xd1\x15\x7c\x4d\x69\x30\xe5\x39\x55\xca\xe6\xaa\x34\x17\x5d\xa5\x1a\x89\xfc\x36\xf1\x97\x08\x9d\xcf\x29\xf7\xb6\x15\xa9\x1e\x84\x2c\x3e\x13\x6b\xc0\xed\x06\xea\xce\x72\xa9\x16\x1f\x49\x93\x50\xe2\xec\xa6\xe4\x30\x10\x34\xaf\x64\xa3\x48\x4e\x46\x79\x97\x70\x1e\xd2\x11\x86\x72\xdf\xf5\xd5\x87\x20\xc7\x2d\x84\xf4\xda\x0e\x55\xfb\x7e\xcc\x9f\x4d\x31\x9d\x30\xc8\x07\xb9\x4b\x0b\x2a\xca\x86\xef\xc8\x11\x31\xfa\x72\x7b\x1f\x5a\x93\xda\xef\x81\x01\xca\x5f\x06\x33\x5f\xe0\x96\xe0\xde\x20\x2f\x88\x21\x9d\x07\x20\x72\x03\xb7\x27\xd8\x09\x31\x6e\xe5\x0e\x65\x0b\x58\x2f\x89\x21\x1d\xa6\x0c\xd6\x88\x65\x0a\xdc\xd0\x06\xd5\x70\x1f\x16\xd1\x8d\xb9\x46\xa1\x54\x91\x8d\x2a\xfd\x84\xd8\xc6\x72\x23\xb6\xb5\xc8\x2e\x6c\x63\xcd\x2a\xe9\x06\x8b\x76\xe4\x1b\x4b\xf6\x5b\x7b\x84\xa3\xc7\xba\x19\xe3\x1c\xb5\x93\x44\x24\xc6\xab\x28\xca\xcd\xca\x8a\x55\x2a\xe6\xf1\x95\xda\x9a\x3f\x6a\xab\x93\xb5\xb3\xbf\x24\x8d\x3d\xe4\x90\x1f\xf6\x10\x93\x54\xd0\x5a\xb2\x51\x8c\xdb\xe6\x3c\xc0\xdd\x5d\xd7\x58\x6e\xe6\x39\xd6\x8f\xeb\x03\x9f\xbb\x3a\xe4\x75\xbc\x73\xb7\xb3\x3e\xd4\xd3\x82\xda\xe0\x58\xb3\xf8\x2a\x3c\x38\x91\xc5\xe3\x88\x3e\x7a\x58\x1b\x9d\x52\x3f\xc3\x90\x5d\x4f\xde\xfc\x3a\xbc\xb8\x21\xd6\x15\x99\x06\xce\xcc\x0b\xc8\xc9\x4f\x46\x2e\x69\x07\x15\xde\x20\xb1\x5a\x7e\x31\x6b\xd7\xcb\x5d\x8d\xf4\x86\x8b\x18\x21\x20\xea\x49\xcc\xec\xc0\x77\x4a\x18\x7d\xe6\x09\x8a\xb5\xca\x38\xff\xbc\x65\xef\x6f\x87\xf5\xa6\xbd\x9f\x89\x8d\xb6\x21\xc8\x66\xe3\x56\x90\xfe\x49\xeb\x42\x6a\xdf\x31\xd5\xed\x55\xe6\x0d\x54\x95\xfa\xb1\x1b\x64\x38\xf5\x16\x56\xa0\x3d\x85\x8d\x75\x63\xa8\xd5\xda\x30\x8a\x83\x1c\xd2\x56\x66\x3e\xe9\x58\xb2\x28\x0a\xa2\xda\xa1\xbc\x90\x35\xea\x47\xf2\x22\x45\xa9\xb7\x70\x3d\xd6\x13\xd8\x57\x37\x8c\x4a\xa9\x0d\xa3\x78\x91\xe1\x6c\x63\x62\xf5\x18\x36\x4a\x18\xb8\xbb\xe7\x56\x83\xe5\xb6\xbe\xd3\x60\xc1\x2c\x1f\xb9\xb4\x32\x31\xc8\x0d\xa1\x1f\x44\x53\xcc\xba\x17\x0b\x68\x0e\xfb\x04\xb7\x75\xbe\xcf\x4d\xc5\x92\xe9\x4e\x47\x9b\x49\x5d\xb7\x7c\xda\x1d\x65\xc2\xdf\x96\x25\xd7\x0f\x92\xac\x0b\xe3\x52\x90\x25\xff\x26\x49\x7c\x66\x20\xb5\xbc\xb4\x49\x83\xfa\x70\xaf\x52\x42\xbb\x57\x06\x53\x17\x51\x9b\x54\xa8\xf5\xd5\xb5\x1a\xb4\x96\x05\xe9\xac\xa5\x79\xfa\x33\x65\xd3\x3d\xf6\x98\x41\x2a\x0b\x8a\xcb\x8b\xcb\xf5\x59\x10\xd4\xd2\x69\xd0\x1d\x87\x8e\x91\x62\x9d\x5f\x38\x6a\x56\xce\x83\xb2\x92\x2d\x57\x09\x28\xf0\x63\xfb\x4b\x19\x84\x5d\xbb\x6f\xa2\x0b\x76\x53\xb0\xd5\x5d\x13\x00\xdc\x93\x94\x2e\xd9\xf4\xa3\xee\x7f\xe2\x38\xed\xb8\x5f\x5a\xb5\xce\x78\x82\x05\x46\x12\x11\xcd\x63\x2b\x7d\x54\x5b\x39\x62\xf8\x00\x12\xff\xe9\x31\x1b\x04\x31\xc7\xd3\x3a\xd9\xa6\x35\x8c\x91\x44\x21\xf2\x6f\xfa\x88\x49\x8d\x13\x21\x1a\x60\xa3\xb8\x3c\xcb\xc6\xfd\xb1\xa1\xb7\xeb\xcf\xf0\xcf\x29\x95\xa2\xf8\x70\x6c\xa8\x37\x6f\x50\x6a\x99\x7f\x1a\xa6\xc5\x25\xe1\x91\x91\xf0\xcd\x91\x17\xd8\x77\xe9\x7c\xac\x3e\x80\x11\x2b\x35\x98\x9c\x18\xf8\x87\x8c\xc6\x26\xf7\xdd\xc0\x48\x9f\x17\x80\x34\xd4\xc8\xd8\x51\xa9\xa4\xcf\x0b\xa1\x69\xfa\xf1\x28\x5e\x16\x1c\x7b\xb5\x0d\x55\x5c\xf6\x65\x7d\x3f\x35\x19\xc9\x49\x7b\x91\x32\x0a\xd8\xda\xe5\xe3\xec\x44\x43\x16\xcf\xfa\xd1\xef\x71\xc5\xf9\xc0\xba\xa4\x49\x57\x87\x14\x85\x3e\xe6\x4f\x7c\x68\x51\xf9\x98\x72\xe5\x10\x99\xb2\xc4\x59\x73\xe0\x63\xf5\xc8\x86\x26\xcd\x1c\x7f\xae\xe8\x87\xe3\x34\x8e\x82\x59\x48\x94\x66\xea\x4b\x72\x44\x52\x7d\x79\x56\x50\x60\x4d\x34\x94\x1e\x0e\x93\x77\x2c\x8e\xfb\x99\x9b\x38\x04\x9b\x91\x2e\x91\x39\xe5\x06\x20\x15\xb7\xe4\x32\x88\xd8\x26\xa4\x7a\xb3\x57\x1e\xd6\x1b\x15\x55\x33\x1e\x78\xca\xc1\xbf\x06\xfa\xd8\x71\xec\xfd\xce\xf9\x28\x0e\xbc\x99\x60\x9f\xbc\x13\x5c\xe5\xb8\xa2\x99\x13\x6c\x42\x6a\xdb\x09\x90\x54\x14\x89\xcb\x2f\x1b\x1e\x69\x29\xf6\xc8\x4e\x71\xec\x4a\xfc\x8e\xbb\x17\xef\xe3\x7e\xe3\xfe\xb4\x5f\x90\xde\x96\xf5\x41\xa8\x2d\xd2\x97\xed\xd7\x71\x7e\x1f\xb7\xcf\x67\x31\x1d\xb3\x86\xd4\xdf\x77\x3f\x13\xe6\xef\xbb\x87\x43\xfc\xa0\x6b\x3b\xbc\x5f\x01\xf4\x45\xd1\x3e\x78\xf0\xe1\xb1\xbe\x0c\xbb\x36\x48\xbf\x02\xe8\x10\x3c\xa0\xd0\x83\x37\xcc\x63\xb6\xd8\xa0\x76\x61\x43\xa6\xd0\xc0\xca\x81\x7e\x33\xe4\x9e\x57\x7a\xb7\xc4\xe3\xb5\x0f\xa5\xf4\x11\x7f\xf9\x20\xb9\xec\x67\x6b\x86\xa5\xea\xb9\xad\xc4\x52\x0f\xde\x14\x56\xe9\x40\x71\xbd\x1e\xc7\x2d\xea\x01\x58\x72\xdf\xbe\x42\x8d\xfc\xa9\xe6\xe6\x53\x7d\xe9\xe1\x20\x4e\xf8\xcf\x36\x49\xe4\xcf\x2f\xec\x9f\x21\xf0\xfd\x32\x04\xab\x51\x86\x60\xed\x93\x21\x58\xed\x65\x08\xd6\xa6\x0c\x21\xdd\xef\x8c\x1b\x66\x08\xd6\xe7\x92\x21\x58\x07\x94\x21\x58\x6d\x65\x08\x15\x40\x87\x30\x3f\xb4\x96\x21\x58\x87\x98\x21\x58\x6d\x65\x08\x15\x40\x1f\x71\x55\x98\x3c\x16\xda\x9f\xf2\xf1\x0d\x96\x7d\x38\x5f\x6d\xe1\xee\x4d\xfa\x45\xf1\x6d\x59\x1f\xa5\xda\xa2\x7d\xa5\x41\x1d\xef\x43\x8d\x20\x7a\x6c\xc8\xf9\xf9\xad\xee\xc3\x26\x7d\xb0\xe4\x70\x58\x1f\x95\x6d\x87\xf6\xab\x90\xbe\x28\xde\x47\x2f\x3e\x3c\xe2\x57\xb1\xd7\x06\xf3\x57\x21\x7d\x44\xea\x4f\x9f\xbe\xed\xcf\xfd\x61\xbc\x17\xf5\x0f\xe2\x26\xcc\x5f\x90\xde\x96\xf8\x41\xa8\x2d\xde\x97\xed\xd7\xd1\xfe\x20\x0a\x20\xd5\x8f\x1b\x67\xfb\xb2\xa1\xcf\x81\xf8\x07\xf1\xe1\xf0\x3e\xe8\xda\x0e\xed\x57\x00\x7d\x51\xac\x0f\x1e\x7c\x78\xa4\x2f\xc3\xae\x0d\xce\xaf\x00\xfa\x88\x94\x1f\xc6\x4d\x19\x7f\x3e\xde\x8b\xf1\x3f\x8c\x9b\x30\x7e\x41\x7a\x5b\xc6\x07\xa1\xb6\x18\x5f\xb6\x5f\xc7\xf8\x1f\xe8\x38\xa2\xbe\x68\xc8\xf7\xb2\x99\xcf\x81\xef\x3f\x8c\x0f\x87\xef\x41\xd7\x76\xf8\xbe\x02\xe8\x8b\xe2\x7b\xf0\xe0\xc3\xe3\x7b\x19\x76\x6d\xf0\x7d\x05\xd0\x47\xe4\xfb\xf9\xb8\x09\xdf\xc7\x3b\x1e\xa3\x0c\x21\xef\xcd\x4d\x0b\x37\xeb\x8f\x50\x86\xc9\xbb\x63\x21\xc7\x03\x94\x28\xd4\x19\x58\xfd\x9a\x17\xf5\xf5\x09\x44\x82\x2e\x96\xd6\xde\xe6\xcc\x62\x2a\x71\x5b\x92\x78\x96\xba\xac\x2c\xd5\xaf\xdd\xef\x00\x38\x88\x78\x10\x71\xf1\xb8\xa3\xd8\x15\xb7\xb7\x3c\xde\x99\x8a\xdc\xf0\xbf\x77\x15\xb9\x66\x31\x77\xe4\x59\xcf\x2a\x31\x3c\x09\x9a\xbc\x79\x95\x76\xc3\x90\x57\xbd\x9b\xa7\x74\x2f\xbe\xd4\xd3\xe8\xe0\x67\x92\x87\xec\x7c\xee\x33\xb7\x24\x7a\xca\x77\x64\x07\xb1\x7c\x47\x16\x1c\xaf\xf1\xcb\xa4\x08\x75\x4c\x8c\xdb\x96\xa0\x5e\x00\xd4\xcd\xc5\xf5\x9e\xaf\xdc\x22\xc2\x09\xd8\x75\xdd\x8a\x2e\x2f\x89\x71\x65\xb5\x82\xf4\x3d\x31\x3e\x58\xd7\xc3\x56\xb0\xfe\x87\x18\xd7\x17\x37\xad\x40\xbd\x22\xc6\xd0\xba\xbc\x48\xb0\x74\x14\xed\x09\xf6\xbf\xc4\x78\xfb\xfe\xf2\xf2\xfc\xaa\x9f\x3c\x13\x6e\x70\xc2\x57\x73\x75\xf3\x03\xbe\xb9\xa3\xe3\x00\x55\xfe\x3d\x0d\xf9\xab\x30\xeb\x7e\x3d\x43\x3d\x61\x3e\x93\x17\x5f\xeb\x79\x7f\x87\x56\xe7\x63\xf9\xb2\x8d\xa1\x26\x8b\x3b\xf6\x88\x3f\x60\xa4\x6e\x25\xf4\x55\x38\x6f\xf0\x32\xa5\x2e\xfd\xb3\x7d\x2a\xff\x96\x6f\x2f\x54\x72\xd4\x16\x5a\xa4\x13\x9e\x9e\xd1\xa6\xd4\x9e\x64\xec\xa4\x5b\xb9\x84\x9b\x28\xb7\x7e\x7a\x9b\xab\x4a\x7a\x8e\x9b\xcd\xe4\x24\x87\x38\x9d\xdb\xdb\xdc\x2c\x97\x72\x6b\xae\x68\x1d\xf5\xca\xe2\xea\xb7\xa6\x65\xf1\x20\x0a\xe6\x40\xf8\x51\x4d\x95\x1b\x41\x45\x1d\x84\x36\xcd\xe5\x1e\xae\xf3\xc4\x64\x13\xd1\x6f\xd1\x97\x31\x24\x0d\xf6\x64\x9b\xf4\x81\xbb\x84\xfd\x45\x56\x47\xd2\x21\x22\x9a\xb1\x8a\xf0\x2a\x79\x0e\x29\x20\xd6\xd5\x4f\x03\x65\xdf\xc9\x2b\x49\xaa\x76\x9e\xbc\x72\xeb\xbb\xd6\xde\xa4\xea\x97\xde\x2a\xc8\x8a\xd0\x69\x2a\x0b\x13\x97\xa9\xac\x20\x1d\xa6\xb2\xb4\xcf\x23\x66\x0b\xf9\x6c\xab\xa5\x57\x14\x52\x7f\x69\x40\x61\x29\xd7\x16\x7e\x29\xeb\x1d\xdc\xd9\xf8\x6b\x59\x9a\xbc\xb0\xee\x6e\x3f\xd2\x55\x62\x79\x1c\xfd\x49\x9e\x31\xf5\x5b\xe4\x80\x7d\xee\xf1\xb1\xff\x56\xdd\x57\xac\xb6\x56\xc7\xc2\xcf\x76\xe1\x7d\x2d\x92\xe4\xfe\x45\x2d\x4b\x04\x8d\xbf\xf4\x45\x23\x26\xf2\x32\xb2\x13\xf3\x6f\x13\x52\xdd\xaf\x93\xd4\xc0\xff\x04\x00\x00\xff\xff\x0a\xa8\xf1\xaf\xa7\x5c\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 23719, mode: os.FileMode(384), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

