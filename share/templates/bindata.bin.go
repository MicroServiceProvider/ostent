// Code generated by go-bindata.
// sources:
// index.html
// DO NOT EDIT!

// +build bin

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5c\xef\x72\xdb\x36\x12\xff\xee\xa7\x40\x39\xcd\x35\xed\x98\x64\xe2\x3f\xbd\x9c\x6b\xf9\xc6\xb1\xdc\x56\xd3\xd8\xd1\xc4\x72\xef\x7a\x9d\x4e\x03\x91\x90\x84\x98\x22\x79\x00\x28\x5b\xd5\xe8\xdd\x6f\x01\x82\x14\x49\x91\x92\x48\x3b\xb6\x7c\x93\x0f\xb6\x44\x02\xbb\xd8\x5d\x2c\x76\x7f\x0b\x50\x3c\xfe\xaa\xfd\xfe\xac\xf7\x5b\xf7\x1c\x8d\xc4\xd8\xdb\x39\x99\xcd\xbe\x9e\xa0\xa3\x16\xb2\xde\x73\x41\x7c\xf1\x2b\x61\x9c\x06\xfe\x7c\x7e\xac\x9a\x11\x3a\x39\x1e\x11\xec\xc2\x17\xf9\x75\x4c\x04\x46\xce\x08\x33\x4e\x44\xcb\x88\xc4\xc0\x7c\x63\xe8\x26\x41\x85\x47\xd4\x77\xb8\x9a\xcd\xac\x36\x16\xd8\x1a\x05\x5c\xf8\x78\x4c\xe6\x73\x14\x28\xf6\xc7\xf6\xa2\x9f\x66\x37\x12\x22\x34\xc9\x7f\x23\x3a\x69\x19\xff\x36\xaf\x4f\xcd\xb3\x60\x1c\x62\x41\xfb\x1e\x31\x90\x13\xf8\x92\xac\x65\x74\xce\x5b\xc4\x1d\x12\x23\x4b\x29\x39\xb7\x8c\x09\x25\xb7\x61\xc0\x44\xa6\xf3\x2d\x75\xc5\xa8\xe5\x92\x09\x75\x88\xa9\x2e\x76\x11\xf5\xa9\xa0\xd8\x33\xb9\x83\x3d\xd2\x7a\x6d\xbd\xd2\xac\x66\xb3\x9f\x7b\x17\xef\x90\x71\xfc\x95\x31\x9f\x9b\xe6\xef\x74\x80\x3a\xe7\x7f\x9c\x1c\x7b\xd4\xbf\x41\x8c\x78\x2d\x83\x8f\x80\xbb\x13\x09\x44\x61\x00\x03\x8d\x18\x19\xb4\x0c\x7b\x80\x27\xf2\xda\x82\x7f\x65\x9c\x7e\x27\xbe\x4b\x07\x7f\x98\x66\x96\x53\xcc\x80\xd3\xbf\x08\x6f\x19\xfb\x7b\x77\xfb\x7b\x29\x3b\x39\x0d\xf3\x79\xc2\x95\x27\x5f\xcc\xfd\x3d\x2b\xf4\x87\x06\x12\xd3\x10\x74\xa5\x63\x3c\x24\xb6\xbc\xa1\xed\xb0\xe0\x8d\xc3\xd0\x23\xa6\x08\x22\x67\x64\xe6\xc6\x79\xbd\xf7\xea\x0e\xfe\xd6\x8e\x04\x7d\xac\x9a\x9c\x0f\x0e\xee\xe0\x6f\x3d\xe7\x83\x83\xba\x9c\x0f\xf7\xee\xe0\x6f\x3d\xe7\xc3\xbd\xba\x9c\xdf\x80\x35\xde\x6c\x60\x8d\x37\x15\xd6\xe0\x62\xea\x11\x3e\x22\x44\x24\x93\x22\xc8\x9d\xb0\x1d\xce\x8b\x3c\xe1\x96\x4d\x7d\x97\xdc\x59\xb2\x51\x33\xb2\xf5\x6a\x3a\x39\xee\x07\xee\x54\xdf\x74\xe9\x04\x39\x1e\xe6\x20\x9f\x08\x42\xb3\x8f\x99\x91\xac\xa4\x92\x36\xd3\x23\x03\x91\x74\x90\x5d\x22\x2f\xe9\x31\x26\x7e\xb4\x68\x89\x05\xcf\x5c\x16\xf8\x45\xa1\x8b\x05\x01\xb9\xe1\x03\x9b\x2e\x19\x50\x1f\xd4\x89\x3f\xff\x4c\x96\xae\x91\xa3\x57\x6e\x2e\xc8\x38\xf4\x80\x12\xe9\xbe\xfc\xe8\xa8\x48\x84\x2c\x88\x20\x36\x8c\x55\x18\xdd\xce\xc9\x53\x2e\x5e\x71\xc0\xe3\x90\x91\xc2\x3d\xb8\x1b\x70\x24\xa3\x0c\xe5\x82\xd1\xbe\x1c\x6c\xb9\xd7\xc9\xe7\x95\x20\x0a\xff\xe6\xf7\x79\xf8\xc3\x31\x0f\xb1\xbf\x91\x4d\xa3\x50\xd0\x65\x8b\x2a\x66\xab\xac\xaa\xc9\x62\x9b\xca\xc1\x96\x65\x79\x02\xf5\x3d\x5c\x57\x7d\x2f\xc0\x2e\x9e\x0c\x6b\xeb\x9f\xd0\x7d\x16\x03\xd8\x91\xb7\x53\x4a\x50\xba\xf4\x18\x1d\x8e\x9a\xaf\x3d\x9c\xf6\xc5\x6c\x48\x7d\xf3\x15\xea\x47\x42\x04\x3e\xe2\x04\x62\x8e\x8b\xd9\x14\x8d\x02\xcf\x0b\x6e\x93\x50\x22\x73\x23\x3f\xb2\xed\xdb\xdb\x5b\x0b\x96\x16\x83\x3f\xcb\x09\xc6\x76\x9c\x4c\x6d\x08\x48\x04\x73\xc2\x6d\x69\x37\x2e\xfe\xe9\x8c\xc3\x56\x1c\x7c\x96\x56\x6d\x92\x7e\x71\x73\x73\xa4\x17\x12\x33\x84\x0a\x33\xa8\x24\x1f\x62\x86\xc7\x1c\xa6\x26\x63\xaf\x21\xa3\xae\xd9\xf7\x02\xe7\x06\x85\xd8\x75\xa9\x3f\x34\xa5\x09\x5f\x1d\x7e\x5f\x1a\xd9\x3c\xb0\x07\x31\x5f\x83\xd6\x66\x3f\x60\x2e\x61\xb2\xb7\xb1\xc1\xbc\x38\x81\x17\x8d\x7d\xa4\xe9\x5f\xa3\x95\xfe\x07\x8e\x43\xbc\x31\x19\x67\x18\xaf\x72\xbb\xb4\x7b\x31\x98\x65\x4d\xf1\x3c\x94\x76\x07\x75\x74\x86\xde\xcf\x5f\x65\x27\x8c\xea\xe8\x2c\xbb\x3f\x7f\xa5\x69\xad\x79\xa6\xff\x0f\xf3\x1c\xf2\x3a\x2a\x43\xef\x95\x2a\x73\x87\xd1\x50\x64\x81\xdd\x27\x3c\xc1\xf1\xdd\x54\xd3\x09\x66\x48\x46\x3e\xd4\x42\xba\xd0\x99\xcf\x7f\x80\xc4\xa4\x7a\x6d\xc2\xa8\x58\x42\x21\xce\x9c\x05\x6e\xfc\xc4\xe1\x1b\x94\x21\x56\xef\xf4\xa7\x9f\xce\xdb\x7d\x0a\xd5\xd8\x98\xfa\x76\x3f\xf2\x5d\x8f\x58\xf0\xd5\xfa\xc4\x67\x33\xe2\x71\xa8\xab\x80\x32\x69\x50\x37\x7d\x77\x11\xfc\x4f\x0a\x32\xd9\x1a\x72\x4a\x14\xaa\x6b\x3f\xfb\xbb\x9d\xef\xec\xf9\x7c\x36\x8b\x8d\x94\xb1\x1a\x96\x90\xf7\xcf\x3e\x86\xa2\x4b\xe1\x4d\x30\x1a\x8e\xb3\x12\xe8\xfc\x33\x7c\x42\x4d\x37\x9b\xa9\x69\x9b\xcf\xe5\xbd\xb3\xf8\x2b\x0a\xfc\x33\x8f\x3a\x37\xad\x99\x18\x51\x6e\x8d\xb0\x94\x4d\xdd\x99\x23\xb4\x13\xd7\x86\x6f\x25\x57\x45\x6f\xf5\xc0\x34\x72\x3e\xb0\x94\x46\x49\xbf\xa1\x50\x71\x26\x7e\x48\xa9\x62\x51\xd0\x42\xbe\x4d\xa5\x2a\x82\x5f\x25\xd4\x42\x0a\x63\x74\x68\xc0\x65\x4f\x16\xbe\x5d\x10\x91\xde\x11\x17\x19\x49\x6f\x64\xa0\xa5\x5a\x59\xd7\x11\xc6\x4e\x16\x7c\x95\x14\xd5\x09\xe8\x39\xa9\x29\x69\x02\xa8\x80\x83\x46\x53\x29\x73\xdd\x94\x02\xad\x1a\x5c\xd3\x38\x2a\x3b\x55\x01\x84\x9d\x64\xc1\xcf\x66\x6a\x6a\xba\x01\x87\xba\x7c\x42\xd0\xd7\xa1\x75\xd6\xbd\xf6\x91\x21\x70\x9f\x23\xf9\x4f\x87\x0e\x14\x97\x3c\xb2\xbe\x5a\x6a\x83\xa1\xe2\xc8\x20\xef\xad\x8a\x5a\xe5\xf5\x94\x64\xa4\xf6\x23\x90\x04\x6f\x92\x89\xa9\xa3\x5b\x36\x56\xc9\xb9\x94\xae\xd5\x03\x19\x13\x31\xe7\xf3\x1c\x6a\x1a\x1d\x16\x90\x5d\x3f\x00\x5c\x37\x36\x5f\xe5\x71\xd8\x09\x90\xc2\xda\x3b\xcc\x23\x2e\xbc\x41\x5c\x04\xc7\x1f\xfa\x26\x27\xde\xc0\x74\x00\xc7\x11\x56\x8e\x41\xc1\x54\xa8\x5e\x0d\x48\xfd\x30\x12\xe6\x90\x05\x51\x88\x56\xca\x5e\x4d\x67\x7a\xb8\x4f\x3c\xc4\xc7\xd8\xf3\x90\x0c\x75\xa6\x1f\xdc\x32\x1c\x2e\xe3\xfc\x13\x97\x78\x78\x7a\x84\xa4\x7b\x48\x33\xba\x65\x45\xe2\x8a\x81\x62\xb4\x5c\xc2\xb7\x34\xee\x17\x23\x18\x7a\x07\x4e\xd4\x5e\x4c\x22\x2c\xc2\x04\x7e\x2f\x89\xfe\x58\x82\xc5\x51\x0c\x5d\x04\x8c\xdc\x53\xb2\x86\xb5\xde\xd3\xf8\x01\x0b\x6e\xf9\xc2\x0d\x7c\xeb\xb4\xcf\x21\xf1\x0b\xf2\xf8\xfe\x70\x99\x59\xd4\x05\xab\xf3\xc8\x71\xa0\xc7\x53\xfb\xc5\x03\x49\x78\xbf\x52\x38\x03\x91\xec\x24\x8a\x43\xb8\x84\xc8\xa9\xe3\xf8\x65\xe0\xff\x87\xb0\x60\x21\xe8\x28\x98\x40\xec\x2e\xba\x12\xdc\xa7\xae\xcc\x90\x9a\x99\x48\x37\x97\xd5\x15\xcb\x8c\x2f\x46\x79\xe1\x32\xd7\xb2\x31\x0d\xe2\x52\xf7\x42\x59\x0e\x3d\xae\x39\x61\x2f\xea\x12\x5d\x4d\x79\x6d\x9a\x7f\x61\x2a\x6a\x13\x75\x00\x7d\x2c\x13\xad\xd0\xd7\x4e\x4d\xa3\x5a\x16\x3b\xf2\x22\xdd\x46\x54\x5e\x25\x61\xa3\xca\xb9\x90\x87\x65\x1a\x66\xd8\x1f\x42\x6e\x85\xab\x45\x3a\x86\x0b\xeb\x1d\xe5\x42\xb6\x7f\xe2\x77\xe8\x63\x8c\x89\xe4\xad\x97\xb2\xc3\xb7\xd6\x18\x87\x2f\x07\x91\xef\x08\x1a\xf8\x2f\x25\xf1\x2e\xa2\xdf\xa2\x19\x62\x44\x44\xcc\xff\x08\x2e\x26\x18\x4c\xfc\x2f\x64\x8a\x0c\x68\x35\x61\x39\xf7\xa7\xe6\xa5\xa1\x06\xb2\x2e\x33\xc9\x11\x04\x74\x97\x6d\x51\x15\x1d\xe4\xc6\x82\xe6\x00\x5a\xba\x79\x2e\x19\x40\x95\xe1\xd4\x1f\x9a\x11\x27\xa1\xa3\xec\xab\xa0\x40\x7c\xd9\xd2\xac\xa4\x1f\x74\x1d\x91\xcf\xd7\xc5\xb6\x17\x0f\x35\x1a\x38\x50\xd5\x60\x49\xd3\x83\x8d\x25\x1d\xaf\x6a\xb0\xb4\xad\xfe\x68\x26\xf5\x61\xe1\x72\x52\x31\xaa\xf4\xdc\xaa\x51\xd3\xb6\x92\x51\xb5\x0f\x0c\x22\xcf\x2b\xcc\x78\xec\x82\x9f\xb8\x0e\x83\xd6\x15\xc0\xc5\x1b\x88\x84\xe4\xe5\x0c\x40\xd7\x11\xa2\xbb\x08\xaa\xc2\x23\xf4\x8d\x66\xff\xcd\x2e\x82\xae\x38\xf2\xc4\x55\x18\x08\x48\x23\x82\x45\x64\xfe\xed\xfc\xe3\x92\xd3\x64\x16\x8d\x1e\x26\xee\x96\x42\x5a\xf5\x01\xdd\x32\x5b\xf1\xb6\x8a\x6a\x3b\x69\xa0\xab\x8b\x7f\xdd\x41\x63\xf8\xdb\x1e\x3c\x07\xf4\x0b\x52\x36\x04\xbf\x6d\xca\x6f\x50\xc4\xf1\x90\x7c\xc1\xc0\x1a\xfc\xb4\x07\x4f\x08\x81\x61\xf0\xed\x44\xc0\xcd\x04\x7b\xae\x00\x18\x16\xd4\x16\xe0\x5f\x15\x7c\xb6\x19\xfe\xde\x4f\xc0\xc7\x43\xbf\x4a\xce\x66\xe0\x37\x07\x94\x8a\xae\x23\x93\x2c\x93\x49\x25\x8b\x29\x65\xaa\x29\xb1\xa4\x18\x4d\xa4\x2d\x0d\xf4\xab\x3a\xb7\x4e\x0c\x78\x83\x5e\x23\xa3\xad\x9e\x8a\x00\x59\x6a\x13\xef\x21\xe3\x22\x88\x20\xf0\xba\x4d\xa8\xbf\x47\x46\x2f\x10\xd8\x03\x90\xc8\xea\xd2\x1e\x22\x03\xb0\x9a\xdb\x84\x74\x1f\x19\xa7\x13\x4c\x1b\x0d\x7b\xa0\x86\x7d\x11\x93\x3e\x30\x3e\x77\x21\x19\x5e\xcb\x5c\x98\x41\xe9\xee\x60\x01\x1a\xd2\xf6\x5a\x50\xdd\x1d\xac\x40\xea\xee\x40\x03\x75\x97\xb2\xf8\x90\x1e\xfa\x5b\x6d\xca\x2e\xd5\x66\xe2\x42\x1b\x84\xca\x70\x62\x39\x5c\x97\x1c\xc8\xe4\x52\x6f\x47\x66\xe1\x57\x5d\x2e\x89\x1c\x95\xd8\x71\x83\xfa\x21\x77\x16\x3d\x8e\x64\x37\x03\x29\x8c\xd3\x32\x3a\x7e\xe0\x12\x88\x16\xca\x09\xf3\xb1\x20\x96\x20\xee\x50\x72\xc4\x7c\x82\xe2\x0e\xca\x7f\x3f\xbb\x80\x91\xf4\xf4\x52\xf9\x64\xcb\x0a\xf1\xae\x75\xf3\x67\x95\x6e\xc0\x08\x29\x97\x4e\xb6\xac\x90\x4e\xad\xc2\x06\x75\x5d\x4e\xd8\x62\x45\x12\x6b\xbd\x54\x8f\x6c\x66\xe5\x17\x95\x56\x4e\x8a\x98\x6a\x43\x7f\xc6\x32\x27\xe6\xfe\xcd\xd6\x54\x34\xb4\x79\x45\xd3\x79\x16\x15\x4d\xa7\x71\x45\xd3\x91\x55\xc8\x00\x03\x0a\xf9\x52\xd1\x68\x34\xdb\x79\xca\x8a\xa6\xb3\xad\x15\x4d\x33\xc1\x9e\x6b\x45\xd3\xd9\x8a\x8a\xa6\xb3\xed\x15\xcd\xfd\x04\x7c\xbc\x8a\xa6\xd3\xbc\xa2\xc9\x26\xc7\x1c\x7c\x4e\x23\x67\xed\x9d\xf3\xee\x06\x14\x59\x03\xca\xac\x6a\x8e\x5d\x73\x3f\x45\x00\x6f\xa9\xe0\xa8\xe3\xdb\xef\x23\x81\x42\x50\x2a\x7e\xf8\x2e\x3f\xca\x7b\x74\x5c\x58\x59\xfd\x63\x3b\x67\xdd\x90\xdf\x5b\x90\x2e\x76\x6e\xc8\x5a\x59\xd2\x5e\xef\xd1\x03\x8c\xd9\x66\x41\xc8\x77\xcf\x19\x0b\xd8\xba\x81\xdf\x05\xbc\x7c\xd4\xda\xc5\x0e\x1d\x40\x16\x66\x3c\x53\xea\xd0\x4c\xa9\xa3\x5b\x6b\x15\x3a\x74\x50\x55\xe5\xd0\xa4\xca\xd1\x25\x0e\x1d\x58\xc5\xfa\x66\xf3\xba\x24\x25\xde\x00\x55\x97\xd0\x76\xba\x0f\x8f\xc7\x0b\x6b\x5e\xf5\xd0\x73\xab\xea\x13\xf4\xf6\xb7\xde\xf9\x15\x4c\x2d\x1a\x07\x6e\xe4\x05\xe8\xe0\xa7\x92\x47\xb8\xa5\x74\x6f\xa7\x82\xf0\x8e\x5f\xfa\x4c\xed\x89\x5d\xc9\x59\x7a\xcc\x46\xac\xa1\x63\x39\xef\x12\x60\x9d\x1b\xed\x6d\xa7\xa7\x14\x28\xf7\xcb\x74\x90\x36\xf1\x04\x96\x8b\xb9\x54\x87\x82\x06\x8a\x67\xb5\xb3\x2f\x33\x2d\x97\xfe\xe4\xd1\xa7\x33\x4c\x83\xc4\x5a\xab\xeb\x48\x51\x67\x4a\x13\xee\x9b\x4c\xaa\x66\xdf\x78\x5a\x17\xe1\x6e\xa3\x49\x58\xa5\x4d\x41\x97\x6e\x46\x8b\x1a\xac\x1f\x69\x8a\xf3\x16\x77\x55\x00\x26\x71\x00\xae\x30\x79\x99\x1f\x28\xba\x4d\xbc\x40\x45\xf8\x2a\x1f\x88\x19\x2f\x72\xfc\x25\xf5\x50\x4a\x24\xcd\x67\x14\x72\x7a\xce\xe6\xf7\x64\x58\xa6\xd0\x26\x8e\x97\xf0\x2a\x57\x69\xb7\xc4\x58\x24\xc9\x6f\x6b\x79\xc7\x99\xb0\xce\x92\xd1\xbc\x37\x11\x3c\x66\x5e\x7f\xc1\x68\x73\x9e\x7a\x5e\x8c\xc1\x12\xbf\xd5\x53\x5b\xb8\x21\x25\x49\xef\x24\xfa\x14\xef\xa8\xa9\xd0\x0e\x59\x98\xda\xbc\xb7\xb5\x13\x3f\xab\x5a\x48\xf9\xa5\xd4\xcc\xdb\x72\xb2\x3f\x98\xcb\x55\x71\xcd\xab\xb6\x2a\x48\x94\xe8\xb6\xa1\xdf\xa5\x88\x6a\x43\xde\x75\xfc\xee\x7c\xe1\x71\x75\x98\xd7\xf0\xbb\x2d\xd8\x66\x92\x3f\xb4\x68\xba\xcf\x74\x41\xc6\xcf\x61\xa3\x49\x8a\xd9\x70\xa7\x09\x48\x03\x36\xfd\xb2\xcb\xa4\x77\x18\xc0\x1c\x4f\xb8\xcd\x24\x47\xdf\xce\x7d\xa6\x86\x92\x3d\xd7\x8d\x26\xb9\xa0\xb6\x60\xa7\x29\x0e\x3f\xdb\xbc\xd5\x74\x4f\x09\x1f\x7e\xaf\x29\xa3\xb3\xfc\x01\x6f\x98\xfe\xb0\xbf\xfc\x37\x47\x6a\x93\x61\x11\x8a\xb3\x20\xdb\x09\xb4\xdb\x98\xaf\x33\x71\xed\x17\xea\xbb\xb9\x34\x57\xc5\x59\xed\x92\xf8\x01\x77\x58\x90\x3d\xb2\xa9\x1c\x03\x55\x14\xfc\x48\x81\xc3\x42\x66\xad\xcf\x45\x9e\xe1\xdd\x9b\xc9\x8f\x8c\x90\x87\x90\xa4\x78\x02\xb6\xc4\x24\x9f\x2a\x8a\x9d\x2b\x7f\x3c\xaa\xf7\x80\x20\xe3\x2f\x52\xfd\x58\x25\xb8\x5a\x7b\x40\x40\xb2\x74\xda\xbd\x26\x87\xaf\x77\x1c\x88\x2b\xc0\xd7\x92\xfe\x53\x00\x4f\x09\xfa\x50\xbb\x4c\xd0\x47\x6f\x33\xdd\x40\x4f\x03\x65\x88\xb2\x5b\x4b\x9f\xc3\xd1\xb4\x84\xe9\x61\xf4\x3d\xe7\x59\xb3\xbb\x2e\x3b\x5b\x6e\xcc\xed\xc7\xb2\xb3\xe0\x14\xb8\xa7\xe6\x59\xc3\x6d\xa9\xbf\x94\xc0\xa5\x1c\x62\xdf\x54\x5b\x75\xf1\x90\x6c\xf1\x68\x58\x2b\x55\x3c\x1b\xce\xab\x5c\x75\xd0\xbb\xde\x0e\xc9\xe9\x2d\x22\x77\xd0\xe4\xde\xf3\xb0\x77\x17\x8d\x88\x54\xff\x08\xed\x1f\x26\x07\xbf\x9b\xae\xa6\x65\x7c\xbe\x08\xb3\x8d\x90\x78\xc8\x1b\x03\xf1\x2e\x7f\x0e\x38\x1c\xa4\x6c\x08\xc3\xbb\x2c\x90\x49\xf3\xcb\x79\x6f\x8a\xc4\xbb\xfc\x09\x81\x38\x0c\xbe\x9d\x38\xbc\x99\x60\xcf\x15\x86\xc3\x7a\xda\x02\x14\xae\x62\xcf\x36\x83\xf0\xfb\x09\xf8\x78\xe7\xbd\x4a\xce\xc7\x7c\x82\xf5\x6b\x67\x71\x57\xc7\xc5\x3a\x8f\x6a\x76\xb9\x7a\xb0\xb5\xdb\x69\xd7\x7d\xc8\x53\x52\xee\x21\xe3\xba\x19\xe5\x3e\x50\x5e\x9d\x7f\xa8\xfb\x30\xac\x24\x3d\x00\x71\x3f\x34\x19\xf3\x10\x19\x97\x9d\x26\x84\xdf\x23\xe3\xd7\xce\x87\x5e\x13\xd2\xbf\x23\xe3\xc3\xf9\x55\x13\xca\x37\xc8\xe8\x75\x2e\xce\xe5\xef\xc2\xea\x92\xfe\x03\x19\x67\xef\x2f\x2e\x4e\x2f\xdb\xb1\x7d\xeb\x1f\x3a\x87\x90\xab\xb3\x47\xce\x21\xcf\xe0\x19\xd9\x56\xab\xd8\x08\x79\xd5\x81\x73\xc8\x75\x25\x10\x52\x59\x08\x84\xdc\x02\x4f\x5c\xfb\x13\xb8\x25\xd8\x9c\xd0\xd5\x3d\x69\xd6\xb4\xd7\xa5\xb4\x79\x54\xaa\xfa\x71\xc2\x1a\x0f\xd2\x65\x34\x60\x54\x4c\x1b\x33\xb8\xa4\x4e\x83\xc3\x74\x4d\x7c\x45\xff\x6a\x4e\xfc\x81\x70\x88\x5c\xbe\x58\xc7\xa0\x88\xcb\x52\xc3\xf5\x68\xe9\x73\x00\xcb\x1d\x4b\x1f\x18\x78\xe4\x1d\x75\xfd\xc6\xb0\x92\xf7\x3b\xc4\x2d\xb5\x5e\xef\x90\xac\x51\xf5\x0c\x7c\xee\xbd\x16\xb0\x08\x89\x5c\x07\xd6\xa9\x04\xb6\x67\xf1\x7d\x63\x27\xc6\xdc\xc9\x5b\x39\xde\x01\x6d\xd9\x9b\x39\xe4\x7d\x4d\xb2\xee\xed\x1c\xb1\xfc\x92\x40\xbf\x2e\xa4\x50\x18\xca\xf7\x7c\x60\x58\x9b\x9a\xdd\x22\x4e\xa4\x35\x94\x06\xe8\xf1\x63\xfb\x89\xd2\xff\x0b\x00\x00\xff\xff\xc7\xc6\x2a\x6c\x0b\x53\x00\x00"

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 21259, mode: os.FileMode(420), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

