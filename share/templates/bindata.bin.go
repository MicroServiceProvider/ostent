// Code generated by go-bindata.
// sources:
// index.html
// DO NOT EDIT!

// +build bin

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xe4\x5c\x6d\x73\xdb\x36\x12\xfe\x9e\x5f\x81\xf2\xd2\xfb\xd0\x29\xc5\xda\x71\x7a\xb9\x54\xf2\x8d\x13\xb9\x2d\xa7\xb1\xad\xb1\xe5\xdc\x75\x3a\x9d\x0e\x44\x42\x12\x6a\x8a\x64\x09\x50\x8e\xaa\xd1\x7f\xbf\xc5\x0b\x49\x90\x12\x25\xd1\x94\x63\xcf\xe4\x83\x6d\x12\x58\x3c\xd8\x05\x16\xcf\xe2\x8d\xee\x7e\xd5\xbf\x7a\x3f\xfc\x75\x70\x8e\xa6\x7c\x16\xbc\x38\xed\xca\x3f\x08\xc1\x03\xc1\x3e\x3c\x88\xc7\x19\xe1\x18\x79\x53\x9c\x30\xc2\x7b\x56\xca\xc7\xf6\x1b\x4b\x67\x71\xca\x03\x22\x9f\xe1\x6d\xb9\xec\xf4\x31\xc7\x9d\x9f\x2f\x57\x2b\x14\x31\x4e\x42\xde\x75\x0a\x09\x0d\x34\xe5\x3c\xb6\xc9\x5f\x29\x9d\xf7\xac\xff\xd9\xb7\x67\xf6\xfb\x68\x16\x63\x4e\x47\x01\xb1\x90\x17\x85\xa2\x58\xcf\x72\xcf\x7b\xc4\x9f\x10\xcb\x2c\x19\xe2\x19\xe9\x59\x73\x4a\xee\xe3\x28\xe1\x86\xf0\x3d\xf5\xf9\xb4\xe7\x93\x39\xf5\x88\x2d\x5f\xbe\x45\x34\xa4\x9c\xe2\xc0\x66\x1e\x0e\x48\xef\x48\x03\x2d\x97\x3f\x0f\x2f\x3e\x20\xab\xfb\x95\xb5\x5a\xd9\xf6\x6f\x74\x8c\xdc\xf3\xdf\x4f\xbb\x01\x0d\xef\x50\x42\x82\x9e\xc5\xa6\x80\xed\xa5\x1c\x51\x80\xb7\xd0\x34\x21\xe3\x9e\xe5\x8c\xf1\x5c\xbc\x77\xe0\xd7\x26\xa4\xdf\x48\xe8\xd3\xf1\xef\xb6\x6d\x22\x29\x00\x46\xff\x26\xac\x67\xbd\x3a\xfe\xf4\xea\xb8\x0a\xc7\xb2\x07\xfb\xd5\x71\x27\x0e\x27\x16\xe2\x8b\x18\x4c\xa4\x33\x3c\x21\x8e\x48\xd0\xe6\x17\xa0\x38\x8e\x03\x62\xf3\x28\xf5\xa6\x76\xa9\x82\xa3\xe3\xef\x3e\xc1\x4f\x7d\x15\x90\xd9\x69\x08\x79\x72\xf2\x09\x7e\xb6\x40\x9e\x9c\x34\x85\x7c\x7d\xfc\x09\x7e\xb6\x40\xbe\x3e\x6e\x0a\xf9\x06\x0c\x7f\xb3\xcd\xf0\x37\x35\x86\x33\xbe\x08\x08\x9b\x12\xc2\xb3\x86\xe7\xe4\x13\x77\x3c\xc6\x72\x30\x78\x76\x68\xe8\x93\x4f\x1d\x91\xaa\x11\x98\x97\xd0\x98\x9b\x45\xfe\xc4\x73\xac\x52\xad\xea\x40\x41\x2c\xf1\x00\xe8\x4f\xe6\x24\xc2\xe9\x13\x02\x4f\xc7\x9d\xa3\xce\xd1\x9b\x2c\xa1\x33\xa3\x61\xe7\x4f\xa8\xd3\x87\xc1\x63\xcf\x30\x0d\x95\xfc\x72\x09\xde\xd9\x19\x9e\xfd\xf4\xd3\x79\x7f\x44\xc3\xd5\x0a\xe4\xb4\x32\xaa\xc4\x72\x49\x02\x46\x56\x2b\xa8\xc1\x99\xd1\xe0\x4e\x67\xca\x8c\xd0\x5f\xad\xac\x6c\x60\x76\x1d\xa5\x9c\xd6\xdf\xd1\x63\xfb\xb4\x3b\x8a\xfc\x85\x4e\x0c\xf1\x1c\x79\x01\x66\xd0\xa2\xf0\x38\xc2\x09\x52\x7f\x6c\x9f\x8c\x71\x1a\xf0\xec\x95\x71\x18\xab\x1e\x74\x44\x6c\xa1\x24\x82\xa1\x25\xc4\xe9\x04\x12\xa1\x4f\xf2\x0a\x7d\x9a\xa3\x89\x51\x0a\x36\x91\xc4\x1e\x07\x29\xf5\x33\x99\x8a\x94\x46\x17\x9a\x91\x04\x46\x76\x60\xcf\x7c\xfb\x08\xc5\xd8\xf7\x69\x38\xb1\x03\x32\x06\x1a\xc9\xba\x20\x2b\x3f\x4a\x39\x8f\xc2\x0a\x04\x8f\x26\x93\x80\x08\x88\x00\xc7\x8c\xf8\x59\xdf\x2a\x61\xdd\xca\x4a\x48\x28\xa7\xa4\xb2\x64\x9c\x4c\x44\xd7\xfd\x43\x63\xe5\xd9\x46\xb5\xd2\x03\x62\x9c\x57\xcb\x12\x3b\x0a\x83\x45\x59\x04\x84\x86\x4a\x8f\xa2\x75\xa0\x17\xa0\xd8\x16\x24\xe9\xad\x50\xed\x1a\xd4\xb3\x29\xe9\xa8\x46\x2c\x75\x02\x46\xd4\xef\x59\x53\x68\xd9\x72\x3f\x8c\x12\x1c\xfa\x90\x46\xe3\xa3\x62\xbc\x43\x67\x88\x78\x00\xf2\x10\x1f\x04\x9f\x23\x33\x68\x54\x9a\xd9\xcc\xea\x3a\xb8\x54\xab\x03\xbe\x53\xf1\x24\xa1\x46\xb5\xdf\x0a\x27\x54\x09\x68\x4b\xc7\x9e\x76\xd3\xc0\xb0\x21\x13\x85\x3f\xd5\xee\x0f\x68\x26\x87\x3d\x4e\xe7\x64\xbd\xf1\xb0\x36\x58\x04\x3b\xf6\xd6\x71\xee\xef\xef\x3b\x60\x71\x02\x3f\x1d\x2f\x9a\x39\x2a\x3a\x02\x03\x04\x04\x33\xc2\x9c\x00\x73\xc2\xf8\x7f\xbc\x59\xdc\xcb\xac\xfe\x78\x7e\x7d\xe3\x5e\xad\xb5\x8a\xc4\xcf\x82\x2b\x5e\xef\xb5\x80\xd6\x2a\x9b\x0d\x10\x60\x2c\x64\x3c\x03\xe5\x24\x13\x1a\x8a\xe1\x85\xc6\x34\x61\x5c\xa6\xae\xdb\xe4\x45\x3e\xa9\x40\x89\x24\xe0\xd3\xb5\x06\x90\x2a\xe6\x5d\xdb\x77\x6f\x86\xd7\xee\x3b\xd1\x89\xa2\xc0\x81\x75\x6e\xab\x68\x1a\xff\x33\x1c\xb1\xf8\x07\x35\x2c\x84\x13\xa5\xf1\xba\x98\xe1\x8e\xb7\x03\x61\xc9\xda\xe8\xd0\xb6\x3c\x43\x0b\x03\x5c\xb5\x30\xc0\x5b\x2d\xfc\x70\x76\x00\x0b\x9d\x34\xd8\x36\x62\x8d\x57\x78\x01\x23\x74\x1c\xda\x1d\x39\x4a\x32\x49\x74\x5f\x8d\x28\xc2\xc0\x19\x99\x99\x63\x5f\x04\x93\x93\x2c\xaa\x44\xe3\x31\xc4\x67\xfb\xa8\x34\xf6\x97\x4b\x4e\x66\xb1\x18\x86\xc8\x82\x88\x07\xb5\xb2\xb7\x6f\xd5\xc3\x1f\xd0\x0e\x24\x90\x88\x1d\xd1\x2e\x9b\x99\xc7\x1f\x57\x2b\xfc\xbe\x59\x05\x02\x60\x03\x7e\xa9\x9d\x76\x1b\xee\xc5\xe9\x81\x0d\x97\x88\x5b\x0c\xa7\x6d\x0d\xa7\x07\x31\x3c\x66\x55\x35\x8e\xbe\x6b\x67\xb8\x40\x6c\xaf\xd7\x7c\x72\x68\xbd\x04\xe2\x2e\xbd\xf2\x97\x1d\xb3\xd5\xac\xc0\x1c\xe6\x7b\x62\xe8\xa3\x5e\xc6\xda\xab\xd5\x0f\xd5\x69\xa3\x9e\x2d\x8a\x09\xa4\x5c\x2c\x2e\x97\xce\x37\x2f\xbe\x71\x56\xab\xe5\x52\xe9\x67\x28\x8c\xc5\x34\xfb\x8f\x11\x86\x35\x9c\x98\xbb\xc1\x1a\x09\x62\x62\x14\xbe\x0f\xa8\x77\xd7\x5b\xf2\x29\x65\x9d\x29\xcc\x0f\x02\x22\x53\x56\x2a\x5c\x42\xd5\x3f\xc3\x5f\x58\x3d\x2e\x97\xb2\xcd\x56\x2b\x91\xf6\x5e\x3d\xbe\x50\x0c\xf5\x4e\x60\x4a\x91\xce\x10\xac\x51\x53\x83\x53\x3d\xe5\xdd\x53\xa5\x84\x4e\xa6\x87\xd4\x49\x29\x82\x0a\xed\xf6\xd5\x49\xf7\x2b\x8c\x31\x70\x1f\x66\x09\x99\x7b\xca\xa7\x48\xbc\x81\x6b\x88\x7e\x06\x50\xf1\x4b\x4d\xf5\x97\x4b\x98\x55\x4d\x08\x7a\x49\xbf\x45\x2f\xa1\x14\x7a\xdb\x43\x8a\xb3\xdf\x0f\x6e\x3b\x1f\x28\x13\xed\xc1\x13\xd0\xe4\x8c\xf3\xe4\x17\xb2\x40\x82\x11\x6c\x80\x1b\x2d\xec\x4b\x4b\x96\xe9\x5c\x2a\xbd\xbb\xdc\xcf\x3c\x53\x06\x1c\xd9\x28\x48\x3e\x86\xd1\x7d\x82\xe3\x7c\xa5\x9b\x95\x82\xd5\xbc\x9f\x95\x2c\x5a\xc3\x2c\x3d\x9a\xd8\x29\x23\xb1\xc7\xf5\x84\x5a\xbd\xf4\x34\xc4\x2d\x23\xc9\xc0\xe3\xb2\xfa\x02\x38\x4f\xfd\xba\x2d\xfe\xcd\x82\xad\xc3\x67\x89\xad\xd1\xff\x8b\x29\x5f\x87\xcf\x53\x9b\xe0\xdb\x34\x9c\x93\x24\x5f\x76\x94\xeb\x71\xc1\x03\xd7\xeb\xc9\x53\x8b\x7a\x1c\x9e\x18\x4e\x56\xfe\xb3\x8f\xcb\x71\x2c\xf6\x5c\x84\xd0\xcb\xb8\x70\xa4\x01\x4e\xf0\x8c\x09\x37\x12\xd9\x60\x89\x74\xf5\xcb\x28\xfc\x9b\x24\x11\x7a\x19\x0b\x4f\x0b\x91\xa5\x72\xe5\x6f\x7b\x1a\x81\x35\x16\xca\x67\xd9\xf6\x94\xfa\x3e\x09\xad\xcc\xcf\x8c\xbd\x24\x50\x39\xe3\x28\x3e\x35\xd9\x2b\x7f\x13\x19\xeb\x7e\x69\x50\xab\xf0\x97\x26\xf2\xe0\x00\x4d\xc4\x45\x87\x36\x91\x17\x1d\x53\x92\x77\xb4\x8d\xd2\xa8\x6c\xa5\xcd\x8b\xa5\xf6\x36\x82\xcf\x88\x40\x11\x3c\x2f\x18\x57\x36\x74\x13\x4a\xf1\xc7\x0d\x19\xc5\x1f\x17\x3e\xd0\xff\x71\x33\x97\xf8\x63\x4d\x25\x3e\x4d\xc4\xea\xcd\x12\xc5\x3a\x7d\x9a\x5c\xc2\x8b\xea\x6d\x84\x36\xf9\xbf\x22\x94\x7c\x35\xa8\x16\x81\xe0\x77\xa2\x34\x99\xe7\xa5\x95\xbb\x9b\x89\x99\xb3\x37\x87\x35\x94\x2a\x60\xb3\x44\x73\xac\xee\xc3\x81\xa5\x35\xb3\xcc\x9e\x24\x78\x11\x08\x69\xe1\xf9\x7a\x51\xeb\x86\x30\x35\x86\x45\x54\x42\xf2\x69\xb8\xae\xd8\x15\x69\xa5\x49\xf5\x29\x52\x39\x67\x73\x4c\x83\x7d\xa8\xd5\x34\xb8\x9e\xa8\x00\x11\xc6\x87\x41\x1f\x8d\x34\x07\x9c\xaf\xab\x9a\xa7\x2c\xe7\x9d\x35\xe5\x6f\x59\x95\x93\x1e\xa3\x3d\x53\xb1\x8b\xb3\xae\x95\xbf\xb1\x3d\x6f\x75\xc6\x23\xea\xc3\x23\x8e\x83\xaa\x42\x32\x6b\xa3\x46\x43\x21\x6e\xa8\xd4\x8a\xb6\xfd\xf1\x03\x59\xbb\x3f\x6e\x43\xda\xa5\xa6\x31\x5b\xae\x8e\xcf\xf8\x74\x2e\xa6\x5b\x16\xfa\x28\xf7\x5b\x41\x55\xa9\xc3\x1d\x3a\x42\x56\x5f\x6e\xd4\x43\xd5\xd2\x8a\x26\x85\x8f\x91\x75\x11\xa5\x21\x17\xbb\x7a\xcd\x4b\xbf\x42\x96\x1c\x6d\x50\xd6\x60\xf2\xa6\x28\x27\xc8\xba\x15\xc3\xa4\x15\xc8\x6b\x09\xe2\xb7\x03\xf9\x1e\x59\xd2\xb7\xaa\x28\xad\x22\x90\x8e\x1b\xed\x03\x10\x6d\x1a\x80\xa8\x11\x80\xdc\x9a\x00\x44\xb3\x00\xa4\xa3\x0f\x1d\x77\x8a\xd0\xd3\x24\x42\x98\x05\xd5\x20\xce\x53\xb6\x72\x87\x65\xca\xbb\x83\xc7\x62\x1a\xd9\xaf\xe8\xdd\xaf\xc3\xf3\x1b\x34\x8b\xfc\x34\x88\xd0\xc9\x4f\x26\xe5\x40\xed\xef\x16\x9c\x30\x37\x5c\xad\x1c\xe3\xfd\x2a\xe5\x15\x12\x52\x15\x6a\xdc\x77\xee\xf0\x06\xc5\x24\x41\x8c\x78\x51\xe8\x57\x10\xfb\x24\xe0\xf8\x1d\xe5\x26\x6a\x9e\xb6\x86\xfc\x98\x96\xc7\xd8\xbb\x23\x9c\xd5\xda\x3e\x50\xf9\x86\x9e\x3a\x65\xdd\x7e\xc3\x8c\xf5\x52\x66\xb2\x2e\xfa\x78\x46\xf9\x49\x14\xd7\x9b\xd4\x17\xb9\xa6\x6a\xe2\x7d\xab\x39\x6b\x25\xf2\xc4\x47\x37\x85\x24\x49\x94\xd4\xdb\x72\x2e\xb3\x0d\xd5\x54\xc2\x56\x6b\xd6\xca\x18\xa9\x65\x7b\x5a\x05\x50\xfa\xd0\x00\xea\xb6\x0a\xa0\x1b\x57\x3d\x2e\x44\xb2\x64\x8c\x3d\xd2\x68\xbd\x31\xd8\x29\x5d\x9a\x2b\xea\xbd\xa6\x9c\xfc\x2c\x31\x98\x91\x1b\x3a\xd0\xa8\x1b\xa8\x40\xd4\x70\x85\xba\xe6\x6e\xee\xe9\xa8\xeb\x14\xef\xa7\xf1\xee\xe5\xd4\x76\x05\xf4\x78\xdb\xaa\x43\x2e\x73\xd5\xb2\x32\x39\x1e\xb6\x56\xa5\x25\xda\x56\xa4\x3c\x75\x6b\x4d\x99\xc8\xd5\xc1\xd6\x8b\xf4\x50\xd1\x7a\x46\x66\x0f\xd8\x81\x82\x52\xc5\x08\xba\x38\xbf\xd8\x1c\xb4\x41\x4a\x47\xed\x3b\x0a\xed\x21\x8b\x75\x7e\xa1\x42\x33\xcd\x4f\x79\x50\x2d\x72\xf6\x8c\xc2\xa2\xc0\x8f\x7a\x6d\xf5\xf0\xed\x1d\x81\x52\x5e\x36\x55\x12\xb7\x2f\x70\xac\x6a\x99\x66\xfa\x1f\x74\x81\x00\x80\x0f\x24\xb8\x0b\x32\x7b\xd2\x7d\x1d\xd1\x8d\x0d\xf7\x81\xbe\x6e\x28\xef\x37\x91\x97\xdd\x72\xb0\x91\x9a\x0d\xb0\xf6\x43\x35\x3f\x95\xa9\xed\x61\x71\xf6\xa0\xfb\x77\x10\x31\x2a\x8e\xa8\x8b\x8d\x3b\xe8\x4f\x89\x80\xe4\xef\xec\x7a\x47\xd6\xa7\xc6\x81\xc6\xf4\xa4\x74\xfd\xc2\x0e\xe8\x1d\xb1\x55\x21\x61\x3c\x2d\xae\xd4\x60\xa8\x4d\x6c\x92\x0f\xf5\xe2\x44\x54\xa4\x07\x12\x64\xc3\x5b\x76\x52\x9d\x1f\x4c\xc8\xb3\xf6\x7a\x1d\xab\x0e\x87\xac\x00\x88\x05\xe6\x23\x51\x1a\x5b\xf9\xce\x46\x71\x86\x5a\xe4\xda\x14\xba\xa0\x44\xd4\x7c\x5a\x1c\x1c\x16\x07\xfc\xb2\x04\x0d\xcb\x27\xa6\x02\xd2\x8c\x7b\xdd\x0d\x57\x20\x46\xa5\x77\x11\x3e\x48\x80\x17\x5d\xa7\x9c\x9e\x4d\xbb\x75\x6d\xf2\xd0\x61\xed\x18\x57\xf4\x9e\x30\xd8\xdf\x78\xda\xba\x7e\x03\x03\x40\x8d\xee\x19\xf1\x50\x37\xc8\x8b\x0a\xea\x06\x27\xac\x1e\xc7\xa0\x0f\x84\xb1\x7e\xd1\x5d\x3e\x12\x78\x48\x60\x16\x0e\xb1\x0b\x49\x0d\x18\x74\x11\x25\x64\x17\x54\xf9\xb0\x0a\x55\x0e\x8c\x1f\xd4\xee\xd7\x30\x9a\x5a\x35\x7b\xd8\x39\x1b\xb1\x28\x48\x39\x79\xa2\xf6\xbf\x34\x86\x4b\xcb\xf6\xdf\x05\xb5\xab\xfd\x8b\xc3\xfa\x22\x27\x4b\xdd\xb5\x61\xad\xc2\x4d\x71\x24\xd9\x94\xca\xfc\x71\x63\x26\x93\x9b\x59\x9f\x81\xc8\xa0\x9e\x82\xc7\xfa\x94\xdd\xa1\x94\xe1\x09\xd9\x9f\xce\xa4\xa2\x5f\x10\x9b\xf5\xc7\x4f\x4d\x66\xa0\xc1\x81\xb8\xac\x06\xe9\xd9\x51\x19\xf8\xd8\x73\x61\x32\xe9\xee\x07\x21\xb2\x1a\xa4\x47\xe3\xb1\x6c\x5f\xfd\xe1\x34\x46\x9b\xd3\x98\xfb\x99\x68\xcc\x35\x69\x2c\xdf\x74\x60\xfb\xd3\x98\xfb\x85\xd1\x98\xfb\xe4\x34\xe6\x1e\x8c\xc6\x6a\x90\x9e\x1d\x8d\xb9\xcf\x87\xc6\xdc\x83\xd1\x58\x0d\xd2\xa3\xd1\x18\x6d\x4d\x63\xe2\x9e\x63\x53\x1e\x53\x3b\x07\x9f\x81\xc8\x44\x45\x05\x93\xc1\x5b\x94\x2c\xf6\x67\x31\xa5\xe6\x17\x44\x63\x60\xf0\x53\xf3\x98\x50\xe1\x40\x44\x56\x07\xf5\xec\x98\x4c\xf8\xd9\x73\xa1\x32\xe5\xf3\x07\xe1\xb2\x3a\xa8\x47\x23\xb3\x7c\x2b\xf3\xe1\x6c\x16\xb3\xc6\x64\x36\x60\x9f\x87\xcb\xa0\x9e\x82\xca\x06\x49\x04\x13\x32\xd6\x64\x4e\x26\xf5\xfc\x82\xc8\x6c\xc0\x9e\x9a\xcb\x40\x83\x03\x51\x59\x0d\xd2\xb3\x63\x32\xf0\xb1\xe7\x42\x64\xd2\xdd\x0f\xc2\x63\x35\x48\x8f\x46\x63\x31\x6b\xcb\x62\xf3\x49\x63\x16\xfb\x38\xf9\x3c\x2c\x06\xf5\x14\x2c\xf6\x11\x4f\x12\x5c\x7c\x97\xb6\x9b\xc3\xa4\x96\x5f\x10\x87\x7d\x9c\x3c\x35\x87\x81\x06\x07\xe2\xb0\x1a\xa4\x67\xc7\x61\xe0\x63\xcf\x85\xc3\xa4\xbb\x1f\x84\xc3\x6a\x90\x1e\x8d\xc3\xe6\x93\x36\x1c\xc6\x1a\x5e\x2d\x88\x99\x41\x74\x37\x9b\x2f\x15\xc4\x4c\xdf\x29\x88\xa9\xb8\x52\x10\xb3\xce\xc0\xed\x6f\xf9\xb0\x45\x13\x98\xb8\x71\x94\xc9\xee\x73\x44\xaf\xe5\x6f\x2b\xf2\x2f\x72\xff\x62\xf2\xfb\x95\x46\x60\x83\x84\x46\x09\xe5\x8b\x46\x85\x2e\xa9\xb7\xe7\xdd\x44\x5d\xe0\x86\xfe\xdd\xac\xc0\x35\x61\x14\xf8\x77\xcb\xcd\x31\x8f\x88\xbd\x43\xcb\x34\x7e\x48\x2b\x57\x26\xcd\xcc\xca\x7d\xca\x56\xf7\x1a\xb2\x28\xda\xf8\x5a\x83\x0c\xf7\x4f\x7c\xf1\x79\xc0\xe4\xc5\x67\xf0\xba\x87\xdf\xf8\x15\x18\xc7\xc8\xba\x6d\x8b\xf1\x0a\x30\x6e\xce\xaf\x9b\x5e\xa0\x16\x45\x4f\xc0\x84\xeb\x76\xb5\xbf\x46\xd6\xa5\xdb\x0e\xe2\x7b\x64\x7d\x74\xaf\x87\xed\x40\xfe\x85\xac\xeb\xf3\x9b\x76\x18\x6f\x90\x35\x74\x2f\xce\x33\x10\x3d\x3a\x9a\xa2\xfc\x1b\x59\xef\xaf\x2e\x2e\xce\x2e\xfb\xaa\x4b\x5a\xdd\x32\xd1\x54\xdb\xfe\x92\xc9\x7c\x22\xaf\x78\x5a\x8a\x77\xef\xc8\x42\x7c\xc9\xaa\x92\x32\x66\x58\x2e\x61\x04\x89\xc8\x29\xae\x59\xbd\xce\x59\x41\xff\xf7\x02\x35\x15\x94\x37\xde\x6a\x29\x60\x0f\x2d\xf2\xc8\xa1\x43\xc3\x7c\x62\xdc\x38\xd3\x95\x5c\x60\x6f\x2a\x8a\x6d\x0e\x14\x73\x25\xa4\xa3\x45\x9a\xca\x70\x01\x30\x9d\xdb\x5b\x23\x60\xe4\xb4\x55\xe4\x6c\x22\x35\x91\xbb\x76\x4b\xbc\x94\x0b\x2b\xf9\x39\xd0\x68\x52\x2f\x71\xc3\x31\xdf\x02\xa0\x8d\x1a\xd3\x40\xcc\xfe\xf9\x74\x17\x81\xee\xd1\x88\x0c\xc2\xae\x37\xdd\x27\x00\xd3\x31\x22\x7f\xa1\xf5\x2e\xf4\x11\x4f\x52\x52\xe3\xda\x15\x97\x41\x25\xc4\x6d\xf2\xb9\xaf\x3e\x34\x28\x64\xd3\x92\xc6\x41\x41\xce\x9f\x0e\x7c\x99\xb7\x5f\xb9\x5c\x56\x64\x09\x8f\xa9\xcd\xcc\x1c\xa6\x56\x40\xfa\x4b\x6d\x6e\x9f\x26\xc4\xe3\x72\x1f\xfc\x40\x37\xd5\x72\x7f\x69\xc1\x22\x19\xdb\x89\x2e\x98\x9a\xd7\x31\xf5\x3f\xf8\x01\xb7\x3b\x0b\xe8\x24\xd4\x9f\x51\x2b\x4e\xc1\xf9\x17\xd7\x1f\xa0\xec\xa6\xaf\xae\x45\x7a\xf1\xe5\xb5\xa2\x1b\x91\xa6\x3f\x04\x97\x2b\x82\xf2\x67\xda\x38\x21\xdc\x2c\x51\x9e\xee\x9f\xaa\xa5\xaa\xba\xa6\x98\xd9\xf5\xff\x00\x00\x00\xff\xff\x7d\x6c\x97\x3d\x14\x4d\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 19732, mode: os.FileMode(384), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

