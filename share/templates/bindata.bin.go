// Code generated by go-bindata.
// sources:
// index.html
// DO NOT EDIT!

// +build bin

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xe4\x5c\xfb\x73\xdb\x36\xf2\xff\xdd\x7f\x05\xca\x6f\xfa\x9d\xb6\x53\x52\xf1\x23\xb9\x5c\x2a\xf9\xc6\xb6\x9c\x84\x53\x3f\x34\xb6\x9c\xbb\x5e\xa7\xd3\x40\x24\x24\x21\xa6\x48\x1e\x00\xca\x76\x35\xfa\xdf\x6f\x01\x82\x4f\x91\x96\x28\xcb\x8f\xc9\xfd\xe0\x58\x04\xb0\x9f\xdd\x05\x16\xbb\x1f\x02\x72\xda\xdf\x75\xcf\x8f\xfa\xbf\xf5\x8e\xd1\x58\x4c\xbc\xad\xfd\xd9\xec\xd5\x14\xbd\xef\x20\xeb\x9c\x0b\xe2\x8b\xcf\x84\x71\x1a\xf8\xf3\x79\x5b\x75\x23\xb4\xdf\x1e\x13\xec\xc2\x07\xf9\x71\x42\x04\x46\xce\x18\x33\x4e\x44\xc7\x88\xc4\xd0\x7c\x67\xe8\x2e\x41\x85\x47\xd4\x67\x78\x9a\xcd\xac\x2e\x16\xd8\xfa\x74\x36\x9f\xa3\x40\x01\xb7\x5b\xd9\x08\x0d\x34\x16\x22\x34\xc9\x7f\x22\x3a\xed\x18\xff\x32\xaf\x0e\xcc\xa3\x60\x12\x62\x41\x07\x1e\x31\x90\x13\xf8\x52\xac\x63\xd8\xc7\x1d\xe2\x8e\x88\x91\x97\xf4\xf1\x84\x74\x8c\x29\x25\x37\x61\xc0\x44\x6e\xf0\x0d\x75\xc5\xb8\xe3\x92\x29\x75\x88\xa9\x1e\x7e\x46\xd4\xa7\x82\x62\xcf\xe4\x0e\xf6\x48\x67\x5b\x03\xcd\x66\x9f\xfa\xa7\x27\xc8\x68\x7f\x67\xcc\xe7\xa6\xf9\x3b\x1d\x22\xfb\xf8\x8f\xfd\xb6\x47\xfd\x6b\xc4\x88\xd7\x31\xf8\x18\xb0\x9d\x48\x20\x0a\xf0\x06\x1a\x33\x32\xec\x18\xad\x21\x9e\xca\x67\x0b\xfe\xa9\x42\xfa\x9d\xf8\x2e\x1d\xfe\x61\x9a\x79\xa4\x18\x80\xd3\xbf\x08\xef\x18\xbb\x3b\xb7\xbb\x3b\x29\x9c\x9c\xfe\xf9\x3c\x41\xe5\xc9\x07\x73\x77\xc7\x0a\xfd\x91\x81\xc4\x5d\x08\x9e\xd2\x09\x1e\x91\x96\x6c\xd0\xb3\x90\x61\xe3\x30\xf4\x88\x29\x82\xc8\x19\x9b\x05\x3d\xdb\x3b\xaf\x6f\xe1\x67\xa9\x26\x18\x63\x35\x44\xde\xdb\xbb\x85\x9f\xe5\xc8\x7b\x7b\x4d\x91\xdf\xec\xdc\xc2\xcf\x72\xe4\x37\x3b\x4d\x91\xdf\xc1\x6c\xbc\x5b\x61\x36\xde\xd5\xcc\x06\x17\x77\x1e\xe1\x63\x42\x44\xb2\x28\x82\xdc\x8a\x96\xc3\x79\x19\x13\x9a\x5a\xd4\x77\xc9\xad\x25\x3b\x35\x10\x77\x18\x0d\x45\x5e\xf2\x2b\x9e\xe2\xb8\xd5\x28\x6f\x29\xc4\x99\x93\xe1\x7d\xe5\x2d\x26\x77\x09\x23\xf0\x69\xc7\xda\xb6\x76\x5e\x27\x0d\xd6\x84\xfa\xd6\x57\xb0\xc0\x85\xdd\x66\x4e\x30\xf5\x0b\x62\xb3\x19\x44\xb5\xd5\x3f\xf8\xf8\xf1\xb8\x3b\xa0\xb0\xa9\x61\xb8\x36\x2d\x16\x9c\xcd\x88\xc7\xc9\x7c\x0e\xfa\x74\xbb\x6a\xf3\xdd\xf9\xdc\x48\xf6\x72\xbb\x15\x5b\xa9\x1d\x69\xe9\x74\xb0\xdf\x1e\x04\xee\x9d\x6e\xf4\xf1\x14\x39\x1e\xe6\x30\xd1\xf0\x71\x80\x19\x8a\x7f\x99\x2e\x19\xe2\xc8\x13\xc9\x23\x17\xb0\xbd\x1d\x58\x9f\xd0\x40\x2c\x80\xdd\x28\x87\xd3\x11\x34\xc2\x52\xa5\x0a\x5d\x9a\xa2\xc9\x8d\x0d\x5e\x11\x66\x0e\xbd\x88\xba\xc9\x98\xd2\x28\x8d\x2e\x2d\x23\x0c\x92\x81\x67\x4e\x5c\x73\x1b\x85\xd8\x75\xa9\x3f\x32\x3d\x32\x84\xcc\x93\xac\x45\x22\x3f\x88\x84\x08\xfc\x12\x84\x08\x46\x23\x8f\x48\x08\x0f\x87\x9c\xb8\xc9\x5a\xc7\x83\xf5\x3c\xc7\x83\xa4\x71\xf1\xa8\xa4\x19\xb3\x91\x5c\xc3\xff\xd3\x58\x69\x77\x4e\xad\x0a\x85\x10\xa7\x6a\x39\x33\x03\xdf\xbb\x2b\x0e\x81\x41\xfd\xd8\x8e\x6c\x76\x60\x15\x40\xec\x1e\x24\x15\xbd\xa0\x76\x01\xea\xc5\x48\xb6\xe2\x49\x2c\x2c\x02\x46\xd4\xed\x18\x63\x98\xd9\xe2\x3a\x0c\x18\xf6\x5d\x68\xa3\xe1\x76\x96\x0d\x60\x31\x64\x09\x81\xf1\x50\x52\x64\x09\x40\xf9\x3a\x53\x9a\xe6\x7c\x57\xbb\x85\x0b\x5a\x5b\x10\x3b\xa5\x48\x92\x66\x94\xd7\x2d\x0b\xc2\xb8\x01\xdd\xb3\xb0\xfb\xed\xc8\xcb\xf9\x90\x0c\x85\x5f\xe5\xe5\xf7\x68\x32\x0e\x3b\x82\x4e\xc9\xe2\xe4\x61\xed\xb0\xac\x8f\xfc\x7d\xab\x75\x73\x73\x63\x81\xc7\x0c\x7e\x2c\x27\x98\xb4\xe2\x82\x0a\x39\xc0\x23\x98\x13\xde\xf2\xb0\x20\x5c\xfc\xc3\x99\x84\x9d\x78\xef\x97\x21\x01\x34\x29\xc2\x78\x71\xa9\x3c\x5a\x6b\x61\xb2\x2b\x20\x5f\xa1\xdc\x67\xc8\x34\x6c\x44\x7d\xb9\xa7\xd0\x90\x32\x2e\x54\xeb\xa2\x23\x4e\xe0\x92\x12\x94\x6c\x82\xa4\xba\xe0\xb5\x32\x31\x5d\xcf\xae\x7d\xd9\xbf\xb0\x0f\xe5\xca\x49\x81\x0d\xdb\xfc\x50\x43\xa3\xf0\xff\xfd\x01\x0f\x7f\x89\xf7\x82\x8c\x9c\x28\x5c\x1c\x96\x8b\xc1\xab\x9e\xf4\x64\x61\x4b\x68\x5f\x5e\xa0\x87\x1e\x2e\x7b\xe8\xe1\x7b\x3d\x3c\x39\xd8\x80\x87\xad\xc8\xbb\x6f\x9b\xe6\x1e\xe1\x01\x9c\xd0\xc5\x67\x79\xb9\x28\x8c\x61\xc1\x4d\xb9\x8c\x48\x07\x27\x64\x92\xdf\xf0\xb2\x82\xec\x25\xa5\x24\x18\x0e\xa1\x3a\x9b\xdb\x85\x0d\x3f\x9b\x09\x32\x09\xe5\xde\x43\x06\x94\x39\xd0\xca\xdf\xbf\x8f\x3f\xfc\x09\xf3\x40\x3c\x85\x68\xc9\x79\xa9\x4e\x37\xee\xb0\xac\xf0\x6d\x33\x05\x12\xa0\x02\xbf\x30\x4f\xcb\x1d\x77\xc2\x68\xc3\x8e\x2b\xc4\x7b\x1c\xa7\x0f\x75\x9c\x6e\xc4\xf1\x90\x97\xcd\xd8\x7e\xfd\x30\xc7\x25\xe2\x32\xbb\xd2\x87\x25\x9c\x30\x11\x98\x02\x99\x92\x5b\x0c\x75\x92\xec\x38\x9f\xff\x52\xe6\x64\x9a\x8a\x49\x76\xa6\x5f\xea\x5a\x3f\x6d\xfd\xd4\x9a\xcf\x67\xb3\xd8\xbe\x9c\xc1\x58\x72\xda\x3f\x07\x18\xde\xa9\x24\x31\x82\x77\x96\xa4\xe0\x00\xfe\x27\xf8\x0d\xaf\x6c\xb3\x99\x9a\x98\xf9\x5c\xb6\x1d\xc5\x1f\x51\xe0\x1f\x79\xd4\xb9\xee\xcc\xc4\x98\x72\x6b\x0c\x05\xda\x23\xaa\x65\x8e\xd0\x56\x9c\x0b\x0e\x25\xaa\x92\xb7\xfa\xe0\x4f\x5c\x79\xf7\x35\xa3\x5c\xd1\x28\x46\x47\xe3\xcd\x5a\x15\x9b\x82\x32\xfb\x56\xb5\xaa\x1c\xd4\x72\xd0\xab\x50\xbd\x2d\xab\xac\xd7\xc3\x0c\x4f\xc0\x08\x15\x52\xb3\x99\x32\xa9\x17\x70\x2a\xcb\x3a\x7a\x15\x5a\x47\xbd\x2b\x1f\x19\x06\x32\x14\x02\x52\xff\x26\x94\x18\xc0\xb6\x4a\x71\x3a\xde\x2b\x50\x56\xd3\xa3\xd7\xc4\x8c\x85\x24\xb5\xa5\xd9\x6b\x09\x06\x6d\x72\x52\xfa\xa0\x25\x51\xa4\xf0\x54\x37\x3c\x25\x85\x3e\x8d\x37\xc5\x4f\xea\x6d\x1c\x53\xd7\x25\xc0\xc2\x0c\x8f\x42\x35\x1f\xb1\x00\x2a\x9a\x06\xcc\x57\x9e\xac\xd7\xa4\xb0\x17\x90\x2a\x3b\x7e\x70\xc3\x70\x88\xc4\x38\x4b\xb7\x19\x17\x52\x12\x50\x94\x0a\x75\x46\x42\x16\x32\x7d\x05\x5b\x1c\x94\x0b\x46\x97\x78\xf8\x0e\x42\xbd\x38\x0e\x15\x08\xa9\x0a\xa0\x85\xe2\x27\x17\x4d\xfa\xe9\x56\xd6\xa8\x45\xb2\x0a\xa0\xb9\x55\x19\x08\x5f\x4f\x48\x99\x60\x56\x64\x83\xf2\xe6\x42\x27\x50\x8d\xbb\xd9\x2a\xb9\x48\xe2\x21\x89\x99\xc5\xc1\x32\xa4\x78\x47\xa0\xd3\x80\x91\x65\x50\xc5\xd4\x53\x2e\xb3\x6b\xcd\xfb\x45\x70\xc3\x1f\x34\xed\xbe\x75\x30\xe0\x81\x17\x09\xf2\x4c\xf3\x7f\x96\xdb\x25\x0f\x9c\xff\x65\x50\xcb\xe6\x3f\xa3\x38\x59\x4f\xd2\xba\xdf\x16\x78\xe0\x91\x64\x93\x9e\x05\xfe\xbf\x09\x0b\x32\x6d\x71\xaf\xfa\xd7\x1c\x07\x53\xc2\x8c\x74\xdf\xa6\x5b\x55\xa4\x87\x75\xea\x89\xe5\x54\x8b\x71\xd1\xae\xdc\xb3\xec\x4c\xa6\x5b\x6d\xe9\xd8\xe3\xfc\xf8\x2b\x4e\x58\x53\x99\xcb\x3b\xde\x54\xe4\x9f\x98\x8a\xa6\x32\x36\x64\xfc\x92\x4c\x2b\xf5\x5c\x39\x9a\x1d\x60\x8a\xf4\xd0\x42\x45\x10\xbc\x65\x8e\x20\x0b\x42\x6e\xcf\x92\x3a\x4c\xb6\x75\x02\x59\x4b\xc6\xc5\x57\x7e\x8b\xbe\xc4\x95\x45\x36\xfd\x20\x07\xfc\x68\x4d\x70\xf8\xc3\x30\xf2\x1d\xf9\x5e\xfe\x83\x14\xfe\x11\xcd\x10\x23\x22\x62\xfe\x17\x08\x01\xc1\x60\x09\x7f\x25\x77\x48\x52\x2b\x13\xc8\xc7\xe0\xce\x3c\x33\x94\x16\xeb\x2c\xcd\xd2\xca\x1a\x77\xd1\xb5\x7c\x4e\x2d\xb1\x8f\x04\x01\x5c\x72\x8b\x28\x59\x65\xcc\x23\x0d\x46\x66\xc4\x49\xe8\xa8\xe9\x52\x47\x14\xf1\x63\x47\x43\xc9\x35\xed\x39\x22\x67\x52\xa6\x26\xed\xfb\x7e\x53\xda\x20\x1a\xea\x94\x25\x5d\x1b\xd3\x25\xc3\xa8\x4e\x59\xda\xd7\x5c\x1b\x14\x32\xd8\x76\xf1\x8b\x7f\x85\x56\x19\x88\x75\x5a\xd3\xbe\xb2\xd6\x5c\xa8\xea\x78\x9b\xff\x38\xff\x22\x83\x4f\xd1\x13\xe8\xcf\x9d\xb3\xb5\xd4\xee\xdf\x4a\xeb\x7a\x53\x12\x03\x6f\x0c\x4d\x39\x4c\x77\xf8\x34\x14\x06\xf4\x64\x0c\xa6\x4b\xf9\x35\x8a\x38\x1e\x91\xd5\x89\x8c\x32\xf4\xdb\xe7\x31\xdd\xe1\x73\xd3\x18\xb0\x60\x43\x2c\xa6\x06\xe9\xc5\x91\x18\x08\xad\x97\xc2\x61\x54\x94\x6f\x84\xc2\xd4\x20\x3d\x0e\x83\x51\xca\xd6\x21\x30\x85\x02\x59\xae\x8a\x72\x75\x98\x4c\x65\x79\x6a\x50\x33\x19\x62\x3c\x95\xd3\x61\xa0\xcf\xea\x4e\x27\x99\x83\x6b\xb4\x8d\x8c\xae\xba\x2f\x04\x6b\x1a\x0b\xef\x20\xe3\x34\x88\x7c\x21\x6f\x0a\x9a\x4b\xef\x22\xe3\x60\x8a\xa9\x07\xe4\x80\x35\x95\xdd\x43\x06\xd4\xe8\xef\xd7\x11\x7d\xa3\x44\xdd\x75\x44\xdf\x22\xa3\x1f\x08\xac\x2d\x6e\xca\xb3\xdc\x61\x56\x77\xba\x1f\x1a\xb1\x2c\x77\x58\x47\xb2\xdc\xa1\xe6\x58\x2e\x65\xf2\x52\xc0\x90\x7a\xac\x2e\x65\x67\xf0\x90\xa7\x5b\x08\x55\x95\x78\x9d\xf5\x93\xab\x86\xf8\x86\x01\xe2\x4a\x62\x90\x69\x09\x23\x0e\xb9\x7c\x57\xb1\x9a\x37\x57\xb1\x60\x66\xa6\x22\xe9\x5a\xa4\x29\xab\x93\xc6\x42\x86\x9b\x44\xea\x98\x3e\xb9\x45\xb1\xfd\xc0\x25\x1c\x0d\x19\x29\x5f\x51\xc5\x06\xd8\xb2\xa7\x22\xdd\xed\xa3\xb8\x5f\x85\xee\x1a\x6c\xb4\x60\x6c\x89\x46\x01\x2c\x84\xe6\x02\x89\x5a\xc1\x8d\x48\x6e\x86\x4a\x37\x22\x9e\x32\xaf\x1a\x4f\xae\x78\x35\x37\xdb\xf4\x54\x47\x72\xd7\xd5\xd9\x58\x55\xd6\x73\x06\xba\x8f\x1e\x08\x42\x6d\xec\x4a\xf3\xd4\x80\x7b\xec\x53\x39\x61\xc1\xc0\x27\xa5\xb6\xb4\x39\xb5\xb5\x9f\x88\xda\xda\x79\x6a\x6b\x43\xb1\x60\x43\xec\x10\xbe\x3a\xb5\xb5\xff\x37\xa8\xad\xfd\xec\xd4\xd6\xde\x18\xb5\xad\x41\x7a\x71\xd4\xd6\x7e\x39\xd4\xd6\xde\x18\xb5\xad\x41\x7a\x1c\x6a\x6b\xaf\x4b\x6d\x6b\xcf\xe6\xd2\x14\xd1\xf8\x24\xac\xb7\x82\x44\x21\x23\xe8\xeb\xae\xdd\xb4\x16\x1c\x52\xc1\x91\xed\xb7\xce\x23\x81\x42\xc2\x10\x27\x4e\xe0\xbb\x45\x2d\xe7\xa8\x5d\xba\xba\x1d\xb4\x5b\x85\xc0\x0d\x57\x39\xf8\xbb\xdf\x90\x1e\x76\xae\xc9\x52\x5b\xd2\x51\xe7\x68\x03\x3a\xbb\x2c\x08\xf9\xcf\xc7\x8c\x05\x6c\x99\xe2\x93\x80\x57\x6b\x6d\x48\x89\x69\x8e\x12\xdb\xcd\x28\x31\xad\xa5\xc4\x34\xa1\xc4\x9a\x0f\xd3\xa1\x55\x26\xc3\x4d\x78\xea\xa2\x78\x9c\x3d\xd2\xf6\x15\x88\x49\xf9\x28\x13\x64\xed\xde\xe6\x29\x4d\x29\x75\xa9\x11\x7a\x71\x15\x47\x41\x87\xbf\xf5\x8f\x2f\x61\x6d\xd1\x24\x70\x23\x2f\x40\x7b\x1f\xab\xf2\x22\x58\x77\x78\x27\x08\xb7\xfd\xea\x9c\xd8\xaa\x45\x96\x21\xb3\x12\x34\x0c\x5c\x3d\xdf\xe6\xb5\x1d\xda\x7d\xe5\x40\x75\x60\xa6\x4a\xa0\x16\x0b\x2c\x77\x73\xa5\x0f\x25\x0f\x14\x66\x7d\xb4\x2f\x82\x56\x5b\xbf\xff\xe4\xcb\x19\xa6\x59\x62\xe9\xac\xeb\x54\xd1\x64\x49\x13\xf4\x55\x16\x55\xc3\xaf\xbd\xac\x59\xbe\x5b\x69\x11\xee\xf3\xa6\xe4\x4b\x2f\xe7\x45\x03\xe8\x27\x5a\xe2\xe2\x8c\xbb\x2a\x03\x93\x38\x03\xd7\x4c\x79\x55\x1c\x28\xb9\x55\xa2\x40\xa5\xf8\xba\x18\x88\x81\xb3\x12\x7f\x46\x3d\x94\x0a\xc9\xe9\x33\x16\xca\x7a\x61\xd6\x1f\x0c\x59\xe5\xd4\x2a\xc1\x97\xa0\x55\xbb\xf5\x73\xc5\x84\x91\xa4\xc8\x2d\xc5\x8e\xcb\x61\x93\x6d\xa3\xb1\x57\x31\x3c\x06\x6f\xbe\x69\xf4\x84\x1e\x78\x5e\x4c\xc3\x92\xd8\xd5\xcb\x5b\x6a\x90\x96\xa4\x2d\x89\x3f\xe5\x16\xb5\x18\x3a\x28\x4b\x8b\x5b\x8c\xb8\x6e\x12\x6b\x75\x9b\xa9\xb8\x9d\xd6\x8b\xb8\x82\xed\x1b\x0c\xbb\x7a\xdc\xa2\x7b\xf7\x25\x8b\x0a\xff\x56\x8c\xbd\x94\x5a\xad\x88\xdd\x24\xf6\x8e\xb3\xa8\x6b\x02\xde\x20\xf6\x9e\xf3\x78\x43\x7e\x99\xb0\xe9\xf9\xc6\x29\x99\x3c\xcd\x01\x87\x54\x94\x9d\x70\xc0\x53\xc0\xee\x56\x3f\xdd\x88\xcd\xfc\xf6\x8f\x37\xc0\xcf\xe7\x3e\xdf\x90\x26\x6c\xe8\x80\xa3\x0e\xea\xc5\x9d\x70\xc8\xf0\x7a\x29\x47\x1c\x71\xa8\x6f\xe4\x8c\xa3\x0e\xea\x71\x0e\x39\x62\x6d\xcf\xfa\x0d\xa4\x0f\x8c\x34\x3e\x10\x91\x37\x64\x6b\xc8\xb8\x4d\x65\x14\xef\x79\xd8\x41\x00\x24\xf8\x2c\xb3\x9f\x1e\x9f\x36\x3a\x0a\x00\xe1\xba\xb3\x00\xe8\xd2\x87\x01\xd7\xd4\x97\x77\x7e\xd0\x60\xfd\x4a\x65\xed\x29\xd0\xf8\xd2\xfb\x79\x36\x6a\x8d\x97\x7b\x29\xfc\x41\x5f\x1e\x35\xfd\x42\x4f\xe9\x42\x48\x42\x55\xdd\x08\x95\xba\x56\xb9\xb9\xa9\xb2\x72\xe5\x8b\x95\x2a\xe1\x17\x70\xeb\x11\xf2\xc6\xac\xa0\xc7\x9f\x86\x14\x80\x9e\x8c\x13\xf4\x58\xe0\x40\x1e\x6c\x72\xe9\xa1\xec\xfc\xf6\x59\x41\x8f\x3f\x37\x29\x00\x0b\x36\xc4\x09\x6a\x90\x5e\x1c\x25\x80\xd0\x7a\x29\x8c\x40\x45\xf9\x46\x08\x41\x0d\xd2\xe3\xf0\x01\xa5\xec\xe9\xbe\xcf\xf3\xca\xc9\x5a\x1d\x22\xaf\x47\x1a\x7d\xd7\xa6\xc7\xd5\xd7\x7c\x7a\x76\xb7\xe9\x77\x5e\xa4\xe4\x0e\x32\xae\xd6\x93\xdc\x05\xc9\xcb\xe3\x8b\xa6\x5f\x0d\x92\xa2\x7b\x60\xee\xc5\x3a\x3a\xdf\x20\xe3\xcc\x5e\x47\xf0\x2d\x32\x3e\xdb\x17\xfd\x75\x44\xff\x86\x8c\x8b\xe3\xcb\x75\x24\xdf\x21\xa3\x6f\x9f\x1e\xcb\x6f\x47\x37\x15\xfd\x3b\x32\x8e\xce\x4f\x4f\x0f\xce\xba\xf1\xfc\x36\x25\x5c\x21\xcf\xd5\xcc\xcb\x46\x74\x2b\xe4\x75\x6c\x2b\xe4\x9a\x6c\x85\x54\x72\xad\x90\x5b\x10\x74\x4b\xbf\xf3\x5d\x20\x17\xf2\x2b\x15\x89\x5c\x53\x62\xa2\x65\xaf\x2a\x65\x4b\x0c\x46\x8e\xe3\x84\xad\xad\xa4\xc7\x68\xc0\xa8\xb8\x5b\x1b\xe0\x8c\x3a\x6b\xdc\x1d\x69\xe1\x4b\xfa\xd7\xfa\xc2\x17\x84\x53\xc8\x52\x62\x19\x80\x4e\x35\x8b\x13\xd7\xa7\x95\xd7\x5e\x8b\x03\x2b\xef\xc7\x1e\x9d\x21\x26\x7b\x46\x86\xe6\x38\xcf\xb8\xf5\xff\x90\x30\x9b\x59\x07\x1e\x1d\xf9\xfa\x6f\xe8\x8c\xad\x98\xbf\x25\x7f\x6e\x77\x02\xb2\x55\x7f\x72\x27\xdb\x57\xfc\xb3\x3b\xe5\x9a\x12\xd0\x7f\x07\xa8\xcf\x23\xf3\x7f\xc0\x87\x61\x03\x69\xb8\x6c\xdf\xa6\x65\x77\x3f\x66\x8a\xf1\x6b\x62\xe2\xf4\x7f\x03\x00\x00\xff\xff\x89\x33\xda\x04\xbd\x46\x00\x00"

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 18109, mode: os.FileMode(420), modTime: time.Unix(1400000000, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

