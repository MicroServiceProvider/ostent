- if (format === undefined) { format = function() { console.error('check locals'); }; }
//- This is a stub: real jade invocation must have it in locals.

mixin define(name)
  | {{define "#{name}"}}
  block
  | {{end}}

mixin with(...rest)
  | {{with !{rest.join(' ')}}}
  block
  | {{end}}

mixin vlink(kparam, number, text)
  - var vlinks = format('Data.params.Vlinks.%s', kparam.replace(/.*\./, ''));
  if JSX
    - var link = format('%s[%s-1]', vlinks, number);
    | #{''}
    | <a onClick={this.handleClick} href={#{link}.LinkHref} class={#{link}.LinkClass}
    |   >#{text}<span class={#{link}.CaretClass}></span></a>
  else
    +with('index', '.'+vlinks, number-1)
      //- | {{with !{['index', '.'+vlinks, number-1].join(' ')}}}
      | #{''}
      | <a onClick={this.handleClick} href={{.LinkHref}} class={{.LinkClass}}
      |   >#{text}<span class={{.CaretClass}}></span></a>
      //- | {{end}}
  
mixin table(nparam, dparam, title)
  | {{$p := .Data.params}}
  .grid-block.hr-top
    - var nparamFull = nparam.replace('$p', 'Data.params');
    -
      var nparamShort = nparam.replace(/.*\./, ''),
          dparamShort = dparam.replace(/.*\./, ''),
          dlinkLess = format('Data.params.Dlinks.%s.Less', dparamShort),
          dlinkMore = format('Data.params.Dlinks.%s.More', dparamShort),
          nlinkLess = format('Data.params.Nlinks.%s.Less', nparamShort),
          nlinkMore = format('Data.params.Nlinks.%s.More', nparamShort),
          tlink     = format('Data.params.Tlinks.%s',      nparamShort);
    .col-lr.large-1.text-right
      if JSX
        | <div class={#{nparamFull}.Negative ? "show-showhide" : "hide-showhide"}>
      else
        | <div class="{{if #{nparam}.Negative}}show-showhide{{else}}hide-showhide{{end}}">
      h1.h4.text-overflow
        if JSX
          | <a title="#{title} display options" href={#{tlink}} onClick={this.handleClick}>
        else
          | <a title="#{title} display options" href={{.#{tlink}}}>
        | <span class="showhide-hide whitespace-pre float-left">... </span>#{title}</a>
      | </div>
    .col-lr.large-11
      if JSX
        | <div class={#{nparamFull}.Negative ? "show-showhide" : "hide-showhide"}>
      else
        | <div class="{{if #{nparam}.Negative}}show-showhide{{else}}hide-showhide{{end}}">
      .grid-block
        ul.menu.showhide-show
          li
            .input-group
              .input-group-label.small.text-nowrap delay
              .input-group-button
                a.button.small.secondary.disabled {{#{dparam}}}
              - var buttonBase = 'text-nowrap button small';
              .input-group-button
                if JSX
                  +alink_jsxl(buttonBase, '- %s', dlinkLess)
                else
                  +alink_html(buttonBase, '- %s', dlinkLess)
              .input-group-button
                if JSX
                  +alink_jsxl(buttonBase, '%s +', dlinkMore)
                else
                  +alink_html(buttonBase, '%s +', dlinkMore)
          li
            .input-group
              .input-group-label.small.text-nowrap rows
              .input-group-button
                a.button.small.secondary.disabled {{#{nparam}.Absolute}}
              - var buttonBase = 'text-nowrap button small success';
              .input-group-button
                if JSX
                  +alink_jsxl(buttonBase, '- %s', nlinkLess)
                else
                  +alink_html(buttonBase, '- %s', nlinkLess)
              .input-group-button
                if JSX
                  +alink_jsxl(buttonBase, '%s +', nlinkMore)
                else
                  +alink_html(buttonBase, '%s +', nlinkMore)
      if JSX
        | <div class={#{nparam.replace('$p', 'Data.params')}.Absolute == 0 ? "hide":""}>
      else
        | <div class="{{if eq #{nparam}.Absolute 0}}hide{{end}}">
      block
      | </div></div>

mixin alink_jsxl(buttonBase, fmt, link)
  | <a href={#{link}.Href} class={"#{buttonBase}" + " " + (#{link}.ExtraClass != null ? #{link}.ExtraClass : "")}
  |    onClick={this.handleClick}
  |   >#{format(fmt, format('{%s.Text}', link))}</a>

mixin alink_html(buttonBase, fmt, link)
  | <a href={{.#{link}.Href}} class="#{buttonBase} {{.#{link}.ExtraClass}}"
  |   >#{format(fmt, format('{{.%s.Text}}', link))}</a>
  
+define('define_uptime'): span {{.Data.uptime}}
+define('define_hostname')
  if JSX
    | <a href="/" title={"hostname "+Data.hostname}>{{.Data.hostname}}</a>
  else
    | <a href="/" title="hostname {{.Data.hostname}}">{{.Data.hostname}}</a>
  
mixin jsx_wrap(start, end)
  if JSX
    | #{start}
  block
  if JSX
    | #{end}

mixin row(kvalue, keyid)
  if JSX
    | <div class="grid-block" key={"#{keyid}-"+#{kvalue}}>
  else
    | <div class="grid-block">
  block
  | </div>

mixin range_list(datak, ranger, kvalue, keyid)
  | {{if .Data.#{datak}}}
  | {{range #{ranger} := .Data.#{datak}.List}}
  +jsx_wrap('{this.List(Data).map(function('+ranger+', i) { return (', ');})}')
    +row(kvalue, keyid)
      block
  | {{end}}
  | {{end}}

+define('define_la')
  +table('$p.Lan', '$p.Lad', 'Load avg')
    .grid-block.vertical.stripe
      .grid-block.thead
        span.expand.col.small-1 Period
        span.expand.col.small-1.text-right  Value
        span.expand.col
      +range_list('loadavg', '$la', '$la.Period', 'la-rowby-period')
        span.expand.col.small-1
          .text-right.width-3rem {{$la.Period}}m
        span.expand.col.small-1.text-right  {{$la.Value}}
        span.expand.col-lr
          if JSX
            | {jsdefines.Sparkline({ref: i, col: 'Value'})}

+define('define_mem')
  +table('$p.Memn', '$p.Memd', 'Memory')
    .grid-block.vertical.stripe
      .grid-block.thead
        span.expand.col.small-1 Memory
        span.expand.col.small-1.text-right  Total
        span.expand.col.small-1.text-right  Used
        span.expand.col.small-1.text-right  Free
        span.expand.col.small-1.text-right  Use%
        span.expand.col
      +range_list('memory', '$mem', '$mem.Kind', 'mem-rowby-kind')
        span.expand.col.small-1 {{$mem.Kind}}
        span.expand.col.small-1.text-right  {{$mem.Total}}
        span.expand.col.small-1.text-right  {{$mem.Used}}
        span.expand.col.small-1.text-right  {{$mem.Free}}
        | <span class="expand col small-1 text-right bg-usepct" data-usepct={{$mem.UsePct}}> {{$mem.UsePct}}%</span>
        span.expand.col-lr
          if JSX
            | {jsdefines.Sparkline({ref: i, col: 'UsePct'})}

+define('define_df')
  +table('$p.Dfn', '$p.Dfd', 'Disk usage')
    .grid-block.vertical.stripe
      .grid-block.thead
        | {{/* poke purifycss: <div class="dropup"><div class="caret" /></div> */}}
        span.expand.col.small-1.text-nowrap:            +vlink('$p.Dfk', 1, 'Device')  {{/* FS     */}}
        span.expand.col.small-1.text-nowrap:            +vlink('$p.Dfk', 2, 'Mounted') {{/* MP     */}}
        span.expand.col.small-1.text-nowrap.text-right: +vlink('$p.Dfk', 6, 'Total')   {{/* TOTAL  */}}
        span.expand.col.small-1.text-nowrap.text-right: +vlink('$p.Dfk', 5, 'Used')    {{/* USED   */}}
        span.expand.col.small-1.text-nowrap.text-right: +vlink('$p.Dfk', 3, 'Avail')   {{/* AVAIL  */}}
        span.expand.col.small-1.text-nowrap.text-right: +vlink('$p.Dfk', 4, 'Use%')    {{/* USEPCT */}}
        span.expand.col
      +range_list('diskUsage', '$df', '$df.DirName', 'df-rowby-dirname')
        span.expand.col.small-1.text-overflow {{$df.DevName}}
        span.expand.col.small-1.text-overflow  {{$df.DirName}}
        span.expand.col.small-1.text-overflow.text-right.gray
          span.float-right  {{$df.Total}}
          span(title='Inodes total')  {{$df.Inodes}}
        span.expand.col.small-1.text-overflow.text-right.gray
          span.float-right  {{$df.Used}}
          span(title='Inodes used')  {{$df.Iused}}
        span.expand.col.small-1.text-overflow.text-right.gray
          span.float-right  {{$df.Avail}}
          span(title='Inodes free')  {{$df.Ifree}}
        | <span class="expand col small-1 text-overflow text-right gray bg-usepct" data-usepct={{$df.UsePct}}>
        span.float-right  {{$df.UsePct}}%
        span(title='Inodes use%')  {{$df.IusePct}}%
        | </span>
        span.expand.col-lr
          if JSX
            | {jsdefines.Sparkline({ref: i, col: 'UsePct'})}

+define('define_cpu')
  +table('$p.CPUn', '$p.CPUd', 'CPU')
    .grid-block.vertical.stripe
      .grid-block.thead
        span.expand.col.small-1 Core
        span.expand.col.small-1.text-right  User%
        span.expand.col.small-1.text-right  Sys%
        span.expand.col.small-1.text-right  Wait%
        span.expand.col.small-1.text-right  Idle%
        span.expand.col
      +range_list('cpu', '$cpu', '$cpu.N', 'cpu-rowby-n')
        span.expand.col.small-1.text-nowrap {{$cpu.N}}
        | <span class="expand col small-1 text-right bg-usepct"
        |  data-usepct={{$cpu.UserPct}}> {{$cpu.UserPct}}%</span>
        | <span class="expand col small-1 text-right bg-usepct"
        |  data-usepct={{$cpu.SysPct}}> {{$cpu.SysPct}}%</span>
        | <span class="expand col small-1 text-right bg-usepct"
        |  data-usepct={{$cpu.WaitPct}}> {{$cpu.WaitPct}}%</span>
        | <span class="expand col small-1 text-right bg-usepct-inverse"
        |  data-usepct={{$cpu.IdlePct}}> {{$cpu.IdlePct}}%</span>
        span.expand.col-lr
          if JSX
            | {jsdefines.Sparkline({ref: i, col: 'IdlePct', defaultSpots: true})}

+define('define_if')
  +table('$p.Ifn', '$p.Ifd', 'Interfaces')
    .grid-block.vertical.stripe
      .grid-block.thead
        span.expand.col.small-1 Interface
        span.expand.col.small-1.text-right  IP
        span.expand.col.small-2.text-right.text-nowrap(title='Drops,Errors In/Out per second')  Loss IO ps
        span.expand.col.small-2.text-right.text-nowrap(title='Packets In/Out per second')  Packets IO ps
        span.expand.col.small-2.text-right.text-nowrap(title='Bits In/Out per second')
          |  IO 
          i b
          | ps
        span.expand.col
      +range_list('ifaddrs', '$if', '$if.Name', 'if-rowby-name')
        span.expand.col.small-1.text-overflow {{$if.Name}}
        span.expand.col.small-1.text-overflow.text-right {{$if.IP}}
        span.expand.col.small-2.text-right.text-nowrap
          | &nbsp;
          span.gray(title='Total drops,errors modulo 4G')
            span(title='Total drops In modulo 4G') {{$if.DropsIn}}
            if JSX
              | <span class={$if.DropsOut == "-1" ? "hide":""}>/</span>
            else
              | <span class="{{if eq $if.DropsOut "-1"}}hide{{end}}">/</span>
            if JSX
              | <span class={$if.DropsOut == "-1" ? "hide":""} title="Total drops Out modulo 4G">{{$if.DropsOut}}</span>,
            else
              | <span class="{{if eq $if.DropsOut "-1"}}hide{{end}}" title="Total drops Out modulo 4G">{{$if.DropsOut}}</span>,
            span(title='Total errors In modulo 4G') {{$if.ErrorsIn}}
            | /
            span(title='Total errors Out modulo 4G') {{$if.ErrorsOut}}
          | &nbsp;
          if JSX
            | <span class={($if.DeltaDropsIn == "0" && ($if.DeltaDropsOut == "-1" || $if.DeltaDropsOut == "0") && $if.DeltaErrorsIn == "0" && $if.DeltaErrorsOut == "0") ? "gray":""}>
          else
            | <span class="{{if and (eq $if.DeltaDropsIn "0") (or (eq $if.DeltaDropsOut "-1") (eq $if.DeltaDropsOut "0")) (eq $if.DeltaErrorsIn "0") (eq $if.DeltaErrorsOut "0")}}gray{{end}}">
          span(title='Drops In per second') {{$if.DeltaDropsIn}}
          if JSX
            | <span class={$if.DeltaDropsOut == "-1" ? "hide":""}>/</span>
          else
            | <span class="{{if eq $if.DeltaDropsOut "-1"}}hide{{end}}">/</span>
          if JSX
            | <span class={$if.DeltaDropsOut == "-1" ? "hide":""} title="Drops Out per second">{{$if.DeltaDropsOut}}</span>,
          else
            | <span class="{{if eq $if.DeltaDropsOut "-1"}}hide{{end}}" title="Drops Out per second">{{$if.DeltaDropsOut}}</span>,
          span(title='Errors In per second') {{$if.DeltaErrorsIn}}
          | /
          span(title='Errors Out per second') {{$if.DeltaErrorsOut}}
          | </span>
        span.expand.col.small-2.text-right.text-nowrap
          | &nbsp;
          span.gray
            span(title='Total packets In modulo 4G') {{$if.PacketsIn}}
            | /
            span(title='Total packets Out modulo 4G') {{$if.PacketsOut}}
          | &nbsp;
          span(title='Packets In per second') {{$if.DeltaPacketsIn}}
          | /
          span(title='Packets Out per second') {{$if.DeltaPacketsOut}}
        span.expand.col.small-2.text-right.text-nowrap
          | &nbsp;
          span.gray
            span(title='Total BYTES In modulo 4G') {{$if.BytesIn}}
            | /
            span(title='Total BYTES Out modulo 4G') {{$if.BytesOut}}
          | &nbsp;
          span(title='BITS In per second') {{$if.DeltaBitsIn}}
          | /
          span(title='BITS Out per second') {{$if.DeltaBitsOut}}
        span.expand.col-lr
          if JSX
            | {jsdefines.Sparkline({ref: i, col: 'DeltaBytesOutNum'})}

+define('define_ps')
  +table('$p.Psn', '$p.Psd', 'Processes')
    .grid-block.vertical.stripe
      .grid-block.thead
        | {{/* poke purifycss: <div class="dropup"><div class="caret" /></div> */}}
        span.expand.col.small-1.text-nowrap.text-right:  +vlink('$p.Psk', 1, 'PID')
        span.expand.col.small-1.text-nowrap.text-right:  +vlink('$p.Psk', 2, 'UID')
        span.expand.col.small-1.text-nowrap:             +vlink('$p.Psk', 3, 'USER')
        span.expand.col.small-1.text-nowrap.text-right:  +vlink('$p.Psk', 4, 'PR')      {{/* PRI  */}}
        span.expand.col.small-1.text-nowrap.text-right:  +vlink('$p.Psk', 5, 'NI')      {{/* NICE */}}
        span.expand.col.small-1.text-nowrap.text-right:  +vlink('$p.Psk', 6, 'VIRT')
        span.expand.col.small-1.text-nowrap.text-right:  +vlink('$p.Psk', 7, 'RES')
        span.expand.col.small-1.text-nowrap.text-center: +vlink('$p.Psk', 8, 'TIME')
        span.expand.col.small-1.text-nowrap:             +vlink('$p.Psk', 9, 'COMMAND') {{/* NAME */}}
      +range_list('procs', '$ps', '$ps.PID', 'ps-rowby-pid')
        span.expand.col.small-1.text-right {{$ps.PID}}
        span.expand.col.small-1.text-right  {{$ps.UID}}
        span.expand.col.small-1  {{$ps.User}}
        span.expand.col.small-1.text-right  {{$ps.Priority}}
        span.expand.col.small-1.text-right  {{$ps.Nice}}
        span.expand.col.small-1.text-right  {{$ps.Size}}
        span.expand.col.small-1.text-right  {{$ps.Resident}}
        span.expand.col.small-1.text-center  {{$ps.Time}}
        span.expand.col  {{$ps.Name}}

//- The index:
doctype html
html
  head
    meta(charset='utf-8')
    title {{.Data.hostname}} ostent
    meta(http-equiv='X-UA-Compatible', content='IE=edge')
    meta(name='viewport', content='width=device-width, initial-scale=1.0')

    <!--[if IE]>
    link(rel='shortcut icon', href='/favicon.ico')
    <![endif]-->
    link(rel='icon', sizes='32x32', href='/{{.OstentVersion}}/favicons/favicon-32.png', 'type=image/png')
    link(rel='apple-touch-icon', sizes='120x120', href='/{{.OstentVersion}}/favicons/favicon-120.png')
    link(rel='apple-touch-icon', sizes='144x144', href='/{{.OstentVersion}}/favicons/favicon-144.png')
    link(rel='apple-touch-icon', sizes='152x152', href='/{{.OstentVersion}}/favicons/favicon-152.png')
    link(rel='apple-touch-icon', sizes='180x180', href='/{{.OstentVersion}}/favicons/favicon-180.png')

    link(rel='stylesheet', type='text/css', href='/{{.OstentVersion}}/css/index.css')

  body
    .top-bar
      .top-bar-left
        ul.menu
          li
            h2.h4.margin-bottom-0
              span.updates(data-define='define_hostname')
                | {{template "define_hostname" .}}
              |  
              small {{.Distrib}}
          li
            span.col up
            span.col.updates.whitespace-pre(data-define='define_uptime')
              | {{template "define_uptime" .}}
      .top-bar-right
        ul.menu
          li
            a.button.secondary.hollow.margin-0(href='https://www.ostrost.com/ostent/releases/latest?cmp={{.OstentVersion}}') ostent

    | {{if ne (len .Exporting) 0}}
    .grid-block.hr-top
      .large-1
      .large-11.col-lr
        //- h4 Exporting to
        .grid-block.vertical.stripe
          .grid-block.thead
            span.expand.col.small-2
              | Exporting to&nbsp;
              span.badge.secondary {{len .Exporting}}
            span.expand.col.small-10 Endpoint
          | {{range $expo := .Exporting}}
          .grid-block
            span.expand.col.small-2 {{$expo.Name}}
            span.expand.col.small-10 {{$expo.Endpoint}}
          | {{end}}
    | {{end}}

    .updates(data-define='define_la')  {{template "define_la"  .}}
    .updates(data-define='define_mem') {{template "define_mem" .}}
    .updates(data-define='define_df')  {{template "define_df"  .}}
    .updates(data-define='define_cpu') {{template "define_cpu" .}}
    .updates(data-define='define_if')  {{template "define_if"  .}}
    .updates(data-define='define_ps')  {{template "define_ps"  .}}

    script(type='text/javascript').
      var Data = {{.Data}};
    script(type='text/javascript', charset='utf-8', src='/{{.OstentVersion}}/js/{{if .TAGGEDbin}}min/bundle.min.js{{else}}src/bundle.js{{end}}')
