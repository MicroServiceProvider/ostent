mixin define(name)
  | {{define "defines::#{name}"}}
  block
  | {{end}}

mixin panel(nparam, dparam, title)
  .grid-block.hr-top
    .col-lr.large-1.text-right
      | <div {{ClassPositive #{nparam} "hide-showhide" "show-showhide"}}>
      h1.h4.text-overflow
        | <a {{HrefT $p #{nparam}}} title="#{title} display options">
        | <span {{class}}="showhide-hide whitespace-pre float-left">... </span>#{title}</a>
      | </div>
    .col-lr.large-11
      | <div {{ClassPositive #{nparam} "hide-showhide" "show-showhide"}}>
      .grid-block
        ul.menu.showhide-show
          li
            .input-group
              .input-group-label.small.text-nowrap delay
              .input-group-button
                a.button.small.secondary.disabled {{#{dparam}}}
              .input-group-button
                | {{template "defines::alink_badgeleft"  LessD $p #{dparam} "button small text-nowrap"}}
              .input-group-button
                | {{template "defines::alink_badgeright" MoreD $p #{dparam} "button small text-nowrap"}}
          li
            .input-group
              .input-group-label.small.text-nowrap rows
              .input-group-button
                a.button.small.secondary.disabled {{#{nparam}.Absolute}}
              .input-group-button
                | {{template "defines::alink_badgeleft"  LessN $p #{nparam} "button small success text-nowrap"}}
              .input-group-button
                | {{template "defines::alink_badgeright" MoreN $p #{nparam} "button small success text-nowrap"}}
      block
      | </div>

+define('alink_badgeleft')
  | <a href={{.Href}} {{class}}={{.Class}} onClick={this.handleClick}
  |   >{{.Badge}} {{.Text}}</a>
+define('alink_badgeright')
  | <a href={{.Href}} {{class}}={{.Class}} onClick={this.handleClick}
  |   >{{.Text}} {{.Badge}}</a>

+define('avlink')
  | <a href={{.LinkHref}} {{class}}={{.LinkClass}} onClick={this.handleClick}
  |   >{{.LinkText}}<span {{class}}={{.CaretClass}}></span></a>

+define('define_uptime')
  span {{.Data.uptime}}
| {{/* define "defines::define_uptime"}}<span>{{.Data.uptime}}</span>{{end */}}

+define('define_hostname')
  | <a href="/" {{TitlePrefixed "hostname " .Data.hostname}}>{{.Data.hostname}}</a>

+define('define_panella')
  | {{$p := .Data.params}}
  +panel('$p.Lan', '$p.Lad', 'Load avg')
    | <div {{ClassNonZero $p.Lan "" "hide"}}>
    .grid-block.vertical.stripe
      .grid-block.thead
        span.expand.col.small-1 Period
        span.expand.col.small-1.text-right  Value
        span.expand.col
      | {{if .Data.loadavg}}
      | {{range $la := .Data.loadavg.List}}
      | {{jsx  `{this.List(Data).map(function($la, i) { return (`}}
      | <div {{Key "la-rowby-period" $la.Period}} {{class}}="grid-block">
      span.expand.col.small-1 {{$la.Period}}m
      span.expand.col.small-1.text-right  {{$la.Value}}
      span.expand.col-lr
        | {{jsx `{jsdefines.Sparkline({ref: i, col: 'Value'})}`}}
      | </div>
      | {{jsx `);})}`}}
      | {{end}}
      | {{end}}
    | </div>

+define('define_panelmem')
  | {{$p := .Data.params}}
  +panel('$p.Memn', '$p.Memd', 'Memory')
    | <div {{ClassNonZero $p.Memn "" "hide"}}>
    .grid-block.vertical.stripe
      .grid-block.thead
        span.expand.col.small-1 Memory
        span.expand.col.small-1.text-right  Total
        span.expand.col.small-1.text-right  Used
        span.expand.col.small-1.text-right  Free
        span.expand.col.small-1.text-right  Use%
        span.expand.col
      | {{if .Data.memory}}
      | {{range $mem := .Data.memory.List}}
      | {{jsx  `{this.List(Data).map(function($mem, i) { return (`}}
      | <div {{Key "mem-rowby-kind" $mem.Kind}} {{class}}="grid-block">
      span.expand.col.small-1 {{$mem.Kind}}
      span.expand.col.small-1.text-right  {{$mem.Total}}
      span.expand.col.small-1.text-right  {{$mem.Used}}
      span.expand.col.small-1.text-right  {{$mem.Free}}
      | <span {{class}}="expand col small-1 text-right bg-usepct" data-usepct={{$mem.UsePct}}> {{$mem.UsePct}}%</span>
      span.expand.col-lr
        | {{jsx `{jsdefines.Sparkline({ref: i, col: 'UsePct'})}`}}
      | </div>
      | {{jsx `);})}`}}
      | {{end}}
      | {{end}}
    | </div>

+define('define_paneldf')
  | {{$p := .Data.params}}
  +panel('$p.Dfn', '$p.Dfd', 'Disk usage')
    | <div {{ClassNonZero $p.Dfn "" "hide"}}>
    .grid-block.vertical.stripe
      .grid-block.thead
        span.expand.col.small-1.text-nowrap {{template "defines::avlink" Vlink $p $p.Dfk 1 "Device" }}{{/* FS     */}}
        span.expand.col.small-1.text-nowrap {{template "defines::avlink" Vlink $p $p.Dfk 2 "Mounted"}}{{/* MP     */}}
        span.expand.col.small-1.text-nowrap.text-right {{template "defines::avlink" Vlink $p $p.Dfk 6 "Total"  }}{{/* TOTAL  */}}
        span.expand.col.small-1.text-nowrap.text-right {{template "defines::avlink" Vlink $p $p.Dfk 5 "Used"   }}{{/* USED   */}}
        span.expand.col.small-1.text-nowrap.text-right {{template "defines::avlink" Vlink $p $p.Dfk 3 "Avail"  }}{{/* AVAIL  */}}
        span.expand.col.small-1.text-nowrap.text-right {{template "defines::avlink" Vlink $p $p.Dfk 4 "Use%"   }}{{/* USEPCT */}}
        span.expand.col
      | {{if .Data.diskUsage}}
      | {{range $df := .Data.diskUsage.List}}
      | {{jsx `{this.List(Data).map(function($df, i) { return (`}}
      | <div {{Key "df-rowby-dirname" $df.DirName}} {{class}}="grid-block">
      span.expand.col.small-1.text-overflow {{$df.DevName}}
      span.expand.col.small-1.text-overflow  {{$df.DirName}}
      span.expand.col.small-1.text-overflow.text-right.gray
        span.float-right  {{$df.Total}}
        span(title='Inodes total')  {{$df.Inodes}}
      span.expand.col.small-1.text-overflow.text-right.gray
        span.float-right  {{$df.Used}}
        span(title='Inodes used')  {{$df.Iused}}
      span.expand.col.small-1.text-overflow.text-right.gray
        span.float-right  {{$df.Avail}}
        span(title='Inodes free')  {{$df.Ifree}}
      | <span {{class}}="expand col small-1 text-overflow text-right gray bg-usepct" data-usepct={{$df.UsePct}}>
      span.float-right  {{$df.UsePct}}%
      span(title='Inodes use%')  {{$df.IusePct}}%
      | </span>
      span.expand.col-lr
        | {{jsx `{jsdefines.Sparkline({ref: i, col: 'UsePct'})}`}}
      | </div>
      | {{jsx `);})}`}}
      | {{end}}
      | {{end}}
    | </div>

+define('define_panelcpu')
  | {{$p := .Data.params}}
  +panel('$p.CPUn', '$p.CPUd', 'CPU')
    | <div {{ClassNonZero $p.CPUn "" "hide"}}>
    .grid-block.vertical.stripe
      .grid-block.thead
        span.expand.col.small-1 Core
        span.expand.col.small-1.text-right  User%
        span.expand.col.small-1.text-right  Sys%
        span.expand.col.small-1.text-right  Wait%
        span.expand.col.small-1.text-right  Idle%
        span.expand.col
      | {{if .Data.cpu}}
      | {{range $cpu := .Data.cpu.List}}
      | {{jsx  `{this.List(Data).map(function($cpu, i) { return (`}}
      | <div {{Key "cpu-rowby-N" $cpu.N}} {{class}}="grid-block">
      span.expand.col.small-1.text-nowrap {{$cpu.N}}
      | <span {{class}}="expand col small-1 text-right bg-usepct"
      |  data-usepct={{$cpu.UserPct}}> {{$cpu.UserPct}}%</span>
      | <span {{class}}="expand col small-1 text-right bg-usepct"
      |  data-usepct={{$cpu.SysPct}}> {{$cpu.SysPct}}%</span>
      | <span {{class}}="expand col small-1 text-right bg-usepct"
      |  data-usepct={{$cpu.WaitPct}}> {{$cpu.WaitPct}}%</span>
      | <span {{class}}="expand col small-1 text-right bg-usepct-inverse"
      |  data-usepct={{$cpu.IdlePct}}> {{$cpu.IdlePct}}%</span>
      span.expand.col-lr
        | {{jsx `{jsdefines.Sparkline({ref: i, col: 'IdlePct', defaultSpots: true})}`}}
      | </div>
      | {{jsx `);})}`}}
      | {{end}}
      | {{end}}
    | </div>

+define('define_panelif')
  | {{$p := .Data.params}}
  +panel('$p.Ifn', '$p.Ifd', 'Interfaces')
    | <div {{ClassNonZero $p.Ifn "" "hide"}}>
    .grid-block.vertical.stripe
      .grid-block.thead
        span.expand.col.small-1 Interface
        span.expand.col.small-1.text-right  IP
        span.expand.col.small-2.text-right.text-nowrap(title='Drops,Errors In/Out per second')  Loss IO ps
        span.expand.col.small-2.text-right.text-nowrap(title='Packets In/Out per second')  Packets IO ps
        span.expand.col.small-2.text-right.text-nowrap(title='Bits In/Out per second')
          |  IO 
          i b
          | ps
        span.expand.col
      | {{if .Data.ifaddrs}}
      | {{range $if := .Data.ifaddrs.List}}
      | {{jsx `{this.List(Data).map(function($if, i) { return (`}}
      | <div {{Key "if-rowby-name" $if.Name}} {{class}}="grid-block">
      span.expand.col.small-1.text-overflow {{$if.Name}}
      span.expand.col.small-1.text-overflow.text-right {{$if.IP}}
      span.expand.col.small-2.text-right.text-nowrap
        | &nbsp;
        span.gray(title='Total drops,errors modulo 4G')
          span(title='Total drops In modulo 4G') {{$if.DropsIn}}
          | <span {{ClassNonNil $if.DropsOut "" "hide"}}>/</span>
          | <span {{ClassNonNil $if.DropsOut "" "hide"}} title="Total drops Out modulo 4G">{{$if.DropsOut}}</span>
          | ,
          span(title='Total errors In modulo 4G') {{$if.ErrorsIn}}
          | /
          span(title='Total errors Out modulo 4G') {{$if.ErrorsOut}}
        | &nbsp;
        | <span {{ClassAllZero $if.DeltaDropsIn $if.DeltaDropsOut $if.DeltaErrorsIn $if.DeltaErrorsOut "gray"}}>
        span(title='Drops In per second') {{$if.DeltaDropsIn}}
        | <span {{ClassNonNil $if.DeltaDropsOut "" "hide"}}>/</span>
        | <span {{ClassNonNil $if.DeltaDropsOut "" "hide"}} title="Drops Out per second">{{$if.DeltaDropsOut}}</span>
        | ,
        span(title='Errors In per second') {{$if.DeltaErrorsIn}}
        | /
        span(title='Errors Out per second') {{$if.DeltaErrorsOut}}
        | </span>
      span.expand.col.small-2.text-right.text-nowrap
        | &nbsp;
        span.gray
          span(title='Total packets In modulo 4G') {{$if.PacketsIn}}
          | /
          span(title='Total packets Out modulo 4G') {{$if.PacketsOut}}
        | &nbsp;
        span(title='Packets In per second') {{$if.DeltaPacketsIn}}
        | /
        span(title='Packets Out per second') {{$if.DeltaPacketsOut}}
      span.expand.col.small-2.text-right.text-nowrap
        | &nbsp;
        span.gray
          span(title='Total BYTES In modulo 4G') {{$if.BytesIn}}
          | /
          span(title='Total BYTES Out modulo 4G') {{$if.BytesOut}}
        | &nbsp;
        span(title='BITS In per second') {{$if.DeltaBitsIn}}
        | /
        span(title='BITS Out per second') {{$if.DeltaBitsOut}}
      span.expand.col-lr
        | {{jsx `{jsdefines.Sparkline({ref: i, col: 'DeltaBytesOutNum'})}`}}
      | </div>
      | {{jsx `);})}`}}
      | {{end}}
      | {{end}}
    | </div>

+define('define_panelps')
  | {{$p := .Data.params}}
  +panel('$p.Psn', '$p.Psd', 'Processes')
    | <div {{ClassNonZero $p.Psn "" "hide"}}>
    .grid-block.vertical.stripe
      .grid-block.thead
        span.expand.col.small-1.text-nowrap.text-right {{template "defines::avlink" Vlink $p $p.Psk 1 "PID"    }}
        span.expand.col.small-1.text-nowrap.text-right  {{template "defines::avlink" Vlink $p $p.Psk 2 "UID"    }}
        span.expand.col.small-1.text-nowrap  {{template "defines::avlink" Vlink $p $p.Psk 3 "USER"   }}
        span.expand.col.small-1.text-nowrap.text-right  {{template "defines::avlink" Vlink $p $p.Psk 4 "PR"     }}{{/* PRI  */}}
        span.expand.col.small-1.text-nowrap.text-right  {{template "defines::avlink" Vlink $p $p.Psk 5 "NI"     }}{{/* NICE */}}
        span.expand.col.small-1.text-nowrap.text-right  {{template "defines::avlink" Vlink $p $p.Psk 6 "VIRT"   }}
        span.expand.col.small-1.text-nowrap.text-right  {{template "defines::avlink" Vlink $p $p.Psk 7 "RES"    }}
        span.expand.col.small-1.text-nowrap.text-center  {{template "defines::avlink" Vlink $p $p.Psk 8 "TIME"   }}
        span.expand.col.small-1.text-nowrap  {{template "defines::avlink" Vlink $p $p.Psk 9 "COMMAND"}}{{/* NAME */}}
      | {{if .Data.procs}}
      | {{range $ps := .Data.procs.List}}
      | {{jsx `{this.List(Data).map(function($ps) { return (`}}
      | <div {{Key "ps-rowby-pid" $ps.PID}} {{class}}="grid-block">
      span.expand.col.small-1.text-right {{$ps.PID}}
      span.expand.col.small-1.text-right  {{$ps.UID}}
      span.expand.col.small-1  {{$ps.User}}
      span.expand.col.small-1.text-right  {{$ps.Priority}}
      span.expand.col.small-1.text-right  {{$ps.Nice}}
      span.expand.col.small-1.text-right  {{$ps.Size}}
      span.expand.col.small-1.text-right  {{$ps.Resident}}
      span.expand.col.small-1.text-center  {{$ps.Time}}
      span.expand.col  {{$ps.Name}}
      | </div>
      | {{jsx `);})}`}}
      | {{end}}
      | {{end}}
    | </div>

//- The index:
doctype html
html
  head
    meta(charset='utf-8')
    title {{.Data.hostname}} ostent
    meta(http-equiv='X-UA-Compatible', content='IE=edge')
    meta(name='viewport', content='width=device-width, initial-scale=1.0')

    <!--[if IE]>
    link(rel='shortcut icon', href='/favicon.ico')
    <![endif]-->
    link(rel='icon', sizes='32x32', href='/{{.OstentVersion}}/favicons/favicon-32.png type=image/png')
    link(rel='apple-touch-icon', sizes='120x120', href='/{{.OstentVersion}}/favicons/favicon-120.png')
    link(rel='apple-touch-icon', sizes='144x144', href='/{{.OstentVersion}}/favicons/favicon-144.png')
    link(rel='apple-touch-icon', sizes='152x152', href='/{{.OstentVersion}}/favicons/favicon-152.png')
    link(rel='apple-touch-icon', sizes='180x180', href='/{{.OstentVersion}}/favicons/favicon-180.png')

    link(rel='stylesheet', type='text/css', href='/{{.OstentVersion}}/css/index.css')

  body
    .top-bar
      .top-bar-left
        ul.menu
          li
            h2.h4(style='margin-bottom: 0')
              span.updates(data-define='define_hostname')
                | {{template "defines::define_hostname" .}}
              |  
              small {{.Distrib}}
          li
            span.col up
            span.col.updates.whitespace-pre(data-define='define_uptime')
              | {{template "defines::define_uptime" .}}
      .top-bar-right
        ul.menu
          li
            a.button.secondary.hollow(style='margin: 0', href='https://www.ostrost.com/ostent/releases/latest?cmp={{.OstentVersion}}') ostent

    .updates(data-define='define_panella')
      | {{template "defines::define_panella" .}}

    .updates(data-define='define_panelmem')
      | {{template "defines::define_panelmem" .}}

    .updates(data-define='define_paneldf')
      | {{template "defines::define_paneldf" .}}

    .updates(data-define='define_panelcpu')
      | {{template "defines::define_panelcpu" .}}

    .updates(data-define='define_panelif')
      | {{template "defines::define_panelif" .}}

    .updates(data-define='define_panelps')
      | {{template "defines::define_panelps" .}}

    script(type='text/javascript').
      var Data = {{.Data}};
    script(type='text/javascript', charset='utf-8', src='/{{.OstentVersion}}/js/{{if .TAGGEDbin}}min/bundle.min.js{{else}}src/bundle.js{{end}}')
