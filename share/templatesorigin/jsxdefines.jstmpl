let React      = require('react'),
    ReactDOM   = require('react-dom'),
    ReactPRM   = require('react-prm'),
    SparkLines = require('react-sparklines');
let ReactPureRenderMixin = ReactPRM;

var Sparkline = React.createClass({
  mixins: [ReactPureRenderMixin],
  getInitialState: function() { return {data: [], limit: 90, width: 180}; },
  componentDidUpdate: function(_, prevState) {
    var root = ReactDOM.findDOMNode(this.refs.root);
    if (root == null) {
      return;
    }
    var rootWidth = Math.floor(root.offsetWidth) - 10;
    if (prevState.width != rootWidth) {
      this.setState({width: rootWidth, limit: Math.round(rootWidth/2)});
    }
  },
  NewStateFrom: function(statentry) {
    var limit, data = [];
    if (this.state != null) {
      limit = this.state.limit;
      data  = this.state.data.slice(); // NB .slice https://github.com/borisyankov/react-sparklines/issues/27
    }
    if (this.props.col != null) {
      statentry = statentry[this.props.col];
    }
    data.push(+statentry);
    if (limit != null && data.length > limit) {
      data = data.slice(-limit);
    }
    this.setState({data: data});
  },
  render: function() {
    var curveProps = {style: {strokeWidth: 2}};
    var spotsProps = {size: 4, spotColors: {'-1': 'green', '1': 'red'}}; // reverse default colors
    if (this.props.defaultSpots) { delete spotsProps.spotColors; } // back to default colors
    return <div ref="root">
      <SparkLines.Sparklines
               data={this.state.data}
               limit={this.state.limit}
               width={this.state.width}
               svgHeight={33}>
        <SparkLines.SparklinesCurve {...curveProps} />
        <SparkLines.SparklinesSpots {...spotsProps} />
      </SparkLines.Sparklines>
    </div>;
  }
});

let jsxdefines = {};
jsxdefines.Sparkline = function(props) { return <Sparkline {...props} />; }

jsxdefines.StateHandlingMixin = { // requires .Reduce method
  getInitialState: function() {
    return this.StateFrom(Data); // global Data
  },
  NewState: function(data) {
    let state = this.StateFrom(data);
    if (state != null) {
      this.setState(state);
    }
    var rkeys = Object.keys(this.refs);
    if (rkeys.length == 0) {
      return;
    }
    var statefrom;
    if (this.List != null) {
      statefrom = this.List(state);
    } else {
      var skeys = Object.keys(state);
      if (skeys.length != 1) {
        return;
      }
      statefrom = state[skeys[0]];
    }
    rkeys.forEach(function(rk) {
      var statentry;
      if (this.refs[rk] == null || (statentry = statefrom[rk]) == null) {
        return;
      }
      this.refs[rk].NewStateFrom(statentry);
    }, this);
  },
  StateFrom: function(data) {
    let state = this.Reduce(data);
    if (state != null) {
      for (let key in state) {
        if (state[key] == null) {
          delete state[key];
        }
      }
    }
    return state;
  }
};
jsxdefines.HandlerMixin = {
  handleClick: function(e) {
    let href = e.target.getAttribute('href');
    if (href == null) {
      href = e.target.parentNode.getAttribute('href');
    }
    history.pushState({}, '', href);
    window.updates.sendSearch(href);
    e.stopPropagation();
    e.preventDefault();
    return void 0;
  }
};

// transformed from define_* templates:
{{range $d := .Defines}}{{$q := printf "%q" $d.Iterable}}
jsxdefines.{{$d.ShortName}} = React.createClass({
  mixins: [ReactPureRenderMixin, jsxdefines.StateHandlingMixin, jsxdefines.HandlerMixin],
  {{if .NeedList}}{{/*
*/}}List: function(data) {
    let list;
    if (data == null || data[{{$q}}] == null || (list = data[{{$q}}].List) == null) {
      return [];
    }
    return list;
  },
  {{end}}{{/*
*/}}Reduce: function(data) {
    return {
      {{if .UsesParams}}params: data.params,
      {{end}}{{/*
*/}}{{$d.Iterable}}: data.{{$d.Iterable}}
    };
  },
  render: function() {
    let Data = this.state; // shadow global Data
    return ({{$d.JSX}});
  }
});
{{end}}

module.exports = jsxdefines;

// Local variables:
// js-indent-level: 2
// js2-basic-offset: 2
// End:
